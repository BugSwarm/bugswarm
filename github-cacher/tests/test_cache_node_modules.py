import os
import shutil
import subprocess
import unittest
from os.path import dirname, join
import warnings

import docker

DATA_DIR = join(dirname(__file__), 'data')
SANDBOX_DIR = join(dirname(__file__), 'test-sandbox')
FROM_HOST = join(dirname(__file__), '..', 'from_host')
IN_CONTAINER = os.environ.get('IN_CONTAINER', False)

CACHE_SCRIPT = 'cache_node_modules.sh'


class CacheNodeModulesTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self):
        warnings.simplefilter('ignore', ResourceWarning)

        self.dirs_created = []
        if IN_CONTAINER:
            shutil.copy(join(FROM_HOST, CACHE_SCRIPT), self.container_home_dir)
            shutil.rmtree(join(self.container_home_dir, '.npm'), ignore_errors=True)
        else:
            # Start container
            client = docker.from_env()
            self.container = client.containers.run(
                'bugswarm/githubactionsjobrunners:ubuntu-20.04',
                ['tail', '-f', '/dev/null'],
                entrypoint=[],
                tty=True,
                detach=True,
                remove=True,
            )

            # Make github user
            self.container.exec_run(['useradd', '-m', '-G', 'sudo', 'github'])
            self.container.exec_run(['passwd', '-d', 'github'])

            # Copy cache script to container
            subprocess.run(
                [
                    'docker',
                    'cp',
                    join(FROM_HOST, CACHE_SCRIPT),
                    f'{self.container.id}:{self.container_home_dir}',
                ],
                capture_output=True,
            )

    def tearDown(self):
        if IN_CONTAINER:
            for dir in self.dirs_created:
                if os.path.isdir(dir):
                    shutil.rmtree(dir)
        else:
            self.container.remove(force=True)

    def container_cmd(self, *command: list, decode=True, strip=True) -> str:
        if IN_CONTAINER:
            result = subprocess.run(command, capture_output=True).stdout
        else:
            result = self.container.exec_run(command, user='github', stdout=True, stderr=True)

        if decode and isinstance(result, bytes):
            result = result.decode()
        if strip:
            result = result.strip()
        return result

    def mkdirs(self, *dirs):
        self.container_cmd('mkdir', '-p', *dirs)
        self.dirs_created.extend(dirs)

    @property
    def container_home_dir(self):
        if IN_CONTAINER:
            return os.path.expanduser('~')
        else:
            return '/home/github'

    def test_caches_node_modules(self):
        """Test whether the script tars ~/.npm and the node_modules subdirs"""

        target_dir = join(self.container_home_dir, 'target-dir')
        output_tar = join(self.container_home_dir, 'output.tar.gz')

        # Create dirs to tar, and some to not tar
        self.mkdirs(
            join(self.container_home_dir, '.npm'),
            join(target_dir, 'node_modules'),
            join(target_dir, 'foo/node_modules'),
            join(target_dir, 'dir-should-not-be-archived'),
            join(self.container_home_dir, 'dir-should-not-be-archived'),
        )

        # Run the cache script
        self.container_cmd(join(self.container_home_dir, CACHE_SCRIPT), target_dir, output_tar)

        # List the contents of the tar
        actual_output = self.container_cmd('tar', '-tf', output_tar).split('\n')

        expected_output = map(
            lambda s: s[1:],
            [
                join(self.container_home_dir, '.npm/'),
                join(target_dir, 'node_modules/'),
                join(target_dir, 'foo/'),
                join(target_dir, 'foo/node_modules/'),
            ],
        )
        self.assertListEqual(sorted(actual_output), sorted(expected_output))

    def test_extracts_as_correct_user(self):
        """Test whether all the extracted files have the correct owner"""

        target_dir = join(self.container_home_dir, 'target-dir')
        output_tar = join(self.container_home_dir, 'output.tar.gz')

        # Create dirs to tar
        self.mkdirs(
            join(target_dir, 'node_modules'),
            join(target_dir, 'foo/node_modules'),
        )

        if IN_CONTAINER:
            # Our test containers run everything as root (??); work around by chown'ing the target dir
            self.container_cmd('sudo', 'chown', '-R', '1234', target_dir)
            expected_owner = '1234'
        else:
            expected_owner = 'github'

        # Run the cache script
        self.container_cmd(join(self.container_home_dir, CACHE_SCRIPT), target_dir, output_tar)

        # Remove target_dir, then untar everything with sudo
        self.container_cmd('rm', '-rf', target_dir)
        self.mkdirs(target_dir)
        self.container_cmd('sudo', 'tar', '-C', '/', '-xzf', output_tar)

        # Check owner of every folder
        owners_and_files = self.container_cmd('find', target_dir, '-mindepth', '1', '-printf', r'%u %p\n').split('\n')
        self.assertGreater(len(owners_and_files), 0)
        for owner_and_file in owners_and_files:
            owner, _, file = owner_and_file.partition(' ')
            self.assertEqual(owner, expected_owner, f'File {file} has owner {owner} (expected "{expected_owner}")')
