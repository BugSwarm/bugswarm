2022-06-21T16:02:34.5384178Z Requested labels: ubuntu-latest
2022-06-21T16:02:34.5384234Z Job defined at: sequelize/sequelize/.github/workflows/ci.yml@refs/pull/13927/merge
2022-06-21T16:02:34.5384253Z Waiting for a runner to pick up this job...
2022-06-21T16:02:37.5554731Z Job is waiting for a hosted runner to come online.
2022-06-21T16:02:39.3576328Z Job is about to start running on the hosted runner: GitHub Actions 2 (hosted)
2022-06-21T16:02:44.2928753Z Current runner version: '2.293.0'
2022-06-21T16:02:44.2952108Z ##[group]Operating System
2022-06-21T16:02:44.2952617Z Ubuntu
2022-06-21T16:02:44.2952846Z 20.04.4
2022-06-21T16:02:44.2953114Z LTS
2022-06-21T16:02:44.2953480Z ##[endgroup]
2022-06-21T16:02:44.2953754Z ##[group]Virtual Environment
2022-06-21T16:02:44.2954109Z Environment: ubuntu-20.04
2022-06-21T16:02:44.2954428Z Version: 20220614.0
2022-06-21T16:02:44.2954980Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu20/20220614.0/images/linux/Ubuntu2004-Readme.md
2022-06-21T16:02:44.2955569Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220614.0
2022-06-21T16:02:44.2956058Z ##[endgroup]
2022-06-21T16:02:44.2956394Z ##[group]Virtual Environment Provisioner
2022-06-21T16:02:44.2956701Z 1.0.0.0-main-20220531-1
2022-06-21T16:02:44.2957031Z ##[endgroup]
2022-06-21T16:02:44.2958138Z ##[group]GITHUB_TOKEN Permissions
2022-06-21T16:02:44.2958733Z Actions: read
2022-06-21T16:02:44.2959137Z Checks: read
2022-06-21T16:02:44.2959537Z Contents: read
2022-06-21T16:02:44.2959795Z Deployments: read
2022-06-21T16:02:44.2960105Z Discussions: read
2022-06-21T16:02:44.2960394Z Issues: read
2022-06-21T16:02:44.2960703Z Metadata: read
2022-06-21T16:02:44.2960953Z Packages: read
2022-06-21T16:02:44.2961243Z Pages: read
2022-06-21T16:02:44.2961552Z PullRequests: read
2022-06-21T16:02:44.2961835Z RepositoryProjects: read
2022-06-21T16:02:44.2962187Z SecurityEvents: read
2022-06-21T16:02:44.2962487Z Statuses: read
2022-06-21T16:02:44.2962734Z ##[endgroup]
2022-06-21T16:02:44.2966185Z Secret source: None
2022-06-21T16:02:44.2966695Z Prepare workflow directory
2022-06-21T16:02:44.3933413Z Prepare all required actions
2022-06-21T16:02:44.4115335Z Getting action download info
2022-06-21T16:02:44.6119181Z Download action repository 'actions/checkout@v3' (SHA:2541b1294d2704b0964813337f33b291d3f8596b)
2022-06-21T16:02:44.9583734Z Download action repository 'actions/setup-node@v3' (SHA:eeb10cff27034e7acf239c5d29f62154018672fd)
2022-06-21T16:02:45.3272501Z Download action repository 'actions/download-artifact@v3' (SHA:fb598a63ae348fa914e94cd0ff38f362e927b741)
2022-06-21T16:02:45.7177167Z ##[group]Run actions/checkout@v3
2022-06-21T16:02:45.7177503Z with:
2022-06-21T16:02:45.7177778Z   repository: sequelize/sequelize
2022-06-21T16:02:45.7178306Z   token: ***
2022-06-21T16:02:45.7178556Z   ssh-strict: true
2022-06-21T16:02:45.7178835Z   persist-credentials: true
2022-06-21T16:02:45.7179104Z   clean: true
2022-06-21T16:02:45.7179343Z   fetch-depth: 1
2022-06-21T16:02:45.7179569Z   lfs: false
2022-06-21T16:02:45.7179803Z   submodules: false
2022-06-21T16:02:45.7180079Z   set-safe-directory: true
2022-06-21T16:02:45.7180326Z env:
2022-06-21T16:02:45.7180544Z   SEQ_DB: testdb
2022-06-21T16:02:45.7180779Z   SEQ_USER: db2inst1
2022-06-21T16:02:45.7181046Z   SEQ_PW: password
2022-06-21T16:02:45.7181283Z   DIALECT: db2
2022-06-21T16:02:45.7181550Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:02:45.7181812Z   SEQ_PORT: 50000
2022-06-21T16:02:45.7182062Z ##[endgroup]
2022-06-21T16:02:45.9740193Z Syncing repository: sequelize/sequelize
2022-06-21T16:02:45.9742578Z ##[group]Getting Git version info
2022-06-21T16:02:45.9743559Z Working directory is '/home/runner/work/sequelize/sequelize'
2022-06-21T16:02:45.9744580Z [command]/usr/bin/git version
2022-06-21T16:02:45.9845654Z git version 2.36.1
2022-06-21T16:02:45.9869819Z ##[endgroup]
2022-06-21T16:02:45.9887000Z Temporarily overriding HOME='/home/runner/work/_temp/e278e48b-f3a0-4710-b4d9-930c6ccbc1a4' before making global git config changes
2022-06-21T16:02:45.9888042Z Adding repository directory to the temporary git global config as a safe directory
2022-06-21T16:02:45.9892244Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/sequelize/sequelize
2022-06-21T16:02:45.9930216Z Deleting the contents of '/home/runner/work/sequelize/sequelize'
2022-06-21T16:02:45.9934313Z ##[group]Initializing the repository
2022-06-21T16:02:45.9938407Z [command]/usr/bin/git init /home/runner/work/sequelize/sequelize
2022-06-21T16:02:45.9991922Z hint: Using 'master' as the name for the initial branch. This default branch name
2022-06-21T16:02:45.9992605Z hint: is subject to change. To configure the initial branch name to use in all
2022-06-21T16:02:45.9993042Z hint: of your new repositories, which will suppress this warning, call:
2022-06-21T16:02:45.9993348Z hint: 
2022-06-21T16:02:45.9993715Z hint: 	git config --global init.defaultBranch <name>
2022-06-21T16:02:45.9994000Z hint: 
2022-06-21T16:02:45.9994375Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2022-06-21T16:02:45.9994857Z hint: 'development'. The just-created branch can be renamed via this command:
2022-06-21T16:02:45.9995160Z hint: 
2022-06-21T16:02:45.9995431Z hint: 	git branch -m <name>
2022-06-21T16:02:46.0057816Z Initialized empty Git repository in /home/runner/work/sequelize/sequelize/.git/
2022-06-21T16:02:46.0058318Z [command]/usr/bin/git remote add origin https://github.com/sequelize/sequelize
2022-06-21T16:02:46.0072847Z ##[endgroup]
2022-06-21T16:02:46.0073356Z ##[group]Disabling automatic garbage collection
2022-06-21T16:02:46.0073874Z [command]/usr/bin/git config --local gc.auto 0
2022-06-21T16:02:46.0114317Z ##[endgroup]
2022-06-21T16:02:46.0148358Z ##[group]Setting up auth
2022-06-21T16:02:46.0148914Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-21T16:02:46.0149672Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-21T16:02:46.0451552Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-21T16:02:46.0480804Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-21T16:02:46.0707479Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2022-06-21T16:02:46.0744219Z ##[endgroup]
2022-06-21T16:02:46.0745238Z ##[group]Fetching the repository
2022-06-21T16:02:46.0753047Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +a13688e5f6649ec7e6932a7f618284606945ee23:refs/remotes/pull/13927/merge
2022-06-21T16:02:46.2733887Z remote: Enumerating objects: 603, done.        
2022-06-21T16:02:46.2734514Z remote: Counting objects:   0% (1/603)        
2022-06-21T16:02:46.2734910Z remote: Counting objects:   1% (7/603)        
2022-06-21T16:02:46.2760010Z remote: Counting objects:   2% (13/603)        
2022-06-21T16:02:46.2760312Z remote: Counting objects:   3% (19/603)        
2022-06-21T16:02:46.2760562Z remote: Counting objects:   4% (25/603)        
2022-06-21T16:02:46.2760799Z remote: Counting objects:   5% (31/603)        
2022-06-21T16:02:46.2761494Z remote: Counting objects:   6% (37/603)        
2022-06-21T16:02:46.2761759Z remote: Counting objects:   7% (43/603)        
2022-06-21T16:02:46.2761995Z remote: Counting objects:   8% (49/603)        
2022-06-21T16:02:46.2762229Z remote: Counting objects:   9% (55/603)        
2022-06-21T16:02:46.2762477Z remote: Counting objects:  10% (61/603)        
2022-06-21T16:02:46.2762714Z remote: Counting objects:  11% (67/603)        
2022-06-21T16:02:46.2762942Z remote: Counting objects:  12% (73/603)        
2022-06-21T16:02:46.2763174Z remote: Counting objects:  13% (79/603)        
2022-06-21T16:02:46.2763406Z remote: Counting objects:  14% (85/603)        
2022-06-21T16:02:46.2763628Z remote: Counting objects:  15% (91/603)        
2022-06-21T16:02:46.2763856Z remote: Counting objects:  16% (97/603)        
2022-06-21T16:02:46.2764099Z remote: Counting objects:  17% (103/603)        
2022-06-21T16:02:46.2764336Z remote: Counting objects:  18% (109/603)        
2022-06-21T16:02:46.2764576Z remote: Counting objects:  19% (115/603)        
2022-06-21T16:02:46.2765009Z remote: Counting objects:  20% (121/603)        
2022-06-21T16:02:46.2765248Z remote: Counting objects:  21% (127/603)        
2022-06-21T16:02:46.2765495Z remote: Counting objects:  22% (133/603)        
2022-06-21T16:02:46.2765732Z remote: Counting objects:  23% (139/603)        
2022-06-21T16:02:46.2765966Z remote: Counting objects:  24% (145/603)        
2022-06-21T16:02:46.2766194Z remote: Counting objects:  25% (151/603)        
2022-06-21T16:02:46.2766430Z remote: Counting objects:  26% (157/603)        
2022-06-21T16:02:46.2766666Z remote: Counting objects:  27% (163/603)        
2022-06-21T16:02:46.2766915Z remote: Counting objects:  28% (169/603)        
2022-06-21T16:02:46.2767143Z remote: Counting objects:  29% (175/603)        
2022-06-21T16:02:46.2767378Z remote: Counting objects:  30% (181/603)        
2022-06-21T16:02:46.2767600Z remote: Counting objects:  31% (187/603)        
2022-06-21T16:02:46.2767826Z remote: Counting objects:  32% (193/603)        
2022-06-21T16:02:46.2768064Z remote: Counting objects:  33% (199/603)        
2022-06-21T16:02:46.2768292Z remote: Counting objects:  34% (206/603)        
2022-06-21T16:02:46.2768525Z remote: Counting objects:  35% (212/603)        
2022-06-21T16:02:46.2768759Z remote: Counting objects:  36% (218/603)        
2022-06-21T16:02:46.2768989Z remote: Counting objects:  37% (224/603)        
2022-06-21T16:02:46.2769213Z remote: Counting objects:  38% (230/603)        
2022-06-21T16:02:46.2769443Z remote: Counting objects:  39% (236/603)        
2022-06-21T16:02:46.2769678Z remote: Counting objects:  40% (242/603)        
2022-06-21T16:02:46.2769900Z remote: Counting objects:  41% (248/603)        
2022-06-21T16:02:46.2770130Z remote: Counting objects:  42% (254/603)        
2022-06-21T16:02:46.2770361Z remote: Counting objects:  43% (260/603)        
2022-06-21T16:02:46.2770582Z remote: Counting objects:  44% (266/603)        
2022-06-21T16:02:46.2770823Z remote: Counting objects:  45% (272/603)        
2022-06-21T16:02:46.2771063Z remote: Counting objects:  46% (278/603)        
2022-06-21T16:02:46.2771292Z remote: Counting objects:  47% (284/603)        
2022-06-21T16:02:46.2771588Z remote: Counting objects:  48% (290/603)        
2022-06-21T16:02:46.2771822Z remote: Counting objects:  49% (296/603)        
2022-06-21T16:02:46.2772052Z remote: Counting objects:  50% (302/603)        
2022-06-21T16:02:46.2772276Z remote: Counting objects:  51% (308/603)        
2022-06-21T16:02:46.2772503Z remote: Counting objects:  52% (314/603)        
2022-06-21T16:02:46.2772736Z remote: Counting objects:  53% (320/603)        
2022-06-21T16:02:46.2772959Z remote: Counting objects:  54% (326/603)        
2022-06-21T16:02:46.2773189Z remote: Counting objects:  55% (332/603)        
2022-06-21T16:02:46.2773418Z remote: Counting objects:  56% (338/603)        
2022-06-21T16:02:46.2773638Z remote: Counting objects:  57% (344/603)        
2022-06-21T16:02:46.2773868Z remote: Counting objects:  58% (350/603)        
2022-06-21T16:02:46.2774097Z remote: Counting objects:  59% (356/603)        
2022-06-21T16:02:46.2774324Z remote: Counting objects:  60% (362/603)        
2022-06-21T16:02:46.2774556Z remote: Counting objects:  61% (368/603)        
2022-06-21T16:02:46.2774788Z remote: Counting objects:  62% (374/603)        
2022-06-21T16:02:46.2775013Z remote: Counting objects:  63% (380/603)        
2022-06-21T16:02:46.2775253Z remote: Counting objects:  64% (386/603)        
2022-06-21T16:02:46.2775477Z remote: Counting objects:  65% (392/603)        
2022-06-21T16:02:46.2775704Z remote: Counting objects:  66% (398/603)        
2022-06-21T16:02:46.2775939Z remote: Counting objects:  67% (405/603)        
2022-06-21T16:02:46.2776164Z remote: Counting objects:  68% (411/603)        
2022-06-21T16:02:46.2776391Z remote: Counting objects:  69% (417/603)        
2022-06-21T16:02:46.2776621Z remote: Counting objects:  70% (423/603)        
2022-06-21T16:02:46.2776843Z remote: Counting objects:  71% (429/603)        
2022-06-21T16:02:46.2777070Z remote: Counting objects:  72% (435/603)        
2022-06-21T16:02:46.2777355Z remote: Counting objects:  73% (441/603)        
2022-06-21T16:02:46.2777579Z remote: Counting objects:  74% (447/603)        
2022-06-21T16:02:46.2777811Z remote: Counting objects:  75% (453/603)        
2022-06-21T16:02:46.2778040Z remote: Counting objects:  76% (459/603)        
2022-06-21T16:02:46.2778267Z remote: Counting objects:  77% (465/603)        
2022-06-21T16:02:46.2778487Z remote: Counting objects:  78% (471/603)        
2022-06-21T16:02:46.2778715Z remote: Counting objects:  79% (477/603)        
2022-06-21T16:02:46.2778950Z remote: Counting objects:  80% (483/603)        
2022-06-21T16:02:46.2779171Z remote: Counting objects:  81% (489/603)        
2022-06-21T16:02:46.2779403Z remote: Counting objects:  82% (495/603)        
2022-06-21T16:02:46.2779632Z remote: Counting objects:  83% (501/603)        
2022-06-21T16:02:46.2779856Z remote: Counting objects:  84% (507/603)        
2022-06-21T16:02:46.2780086Z remote: Counting objects:  85% (513/603)        
2022-06-21T16:02:46.2780324Z remote: Counting objects:  86% (519/603)        
2022-06-21T16:02:46.2780551Z remote: Counting objects:  87% (525/603)        
2022-06-21T16:02:46.2780785Z remote: Counting objects:  88% (531/603)        
2022-06-21T16:02:46.2781015Z remote: Counting objects:  89% (537/603)        
2022-06-21T16:02:46.2781246Z remote: Counting objects:  90% (543/603)        
2022-06-21T16:02:46.2781473Z remote: Counting objects:  91% (549/603)        
2022-06-21T16:02:46.2781702Z remote: Counting objects:  92% (555/603)        
2022-06-21T16:02:46.2781934Z remote: Counting objects:  93% (561/603)        
2022-06-21T16:02:46.2782160Z remote: Counting objects:  94% (567/603)        
2022-06-21T16:02:46.2782389Z remote: Counting objects:  95% (573/603)        
2022-06-21T16:02:46.2782620Z remote: Counting objects:  96% (579/603)        
2022-06-21T16:02:46.2782842Z remote: Counting objects:  97% (585/603)        
2022-06-21T16:02:46.2783069Z remote: Counting objects:  98% (591/603)        
2022-06-21T16:02:46.2783306Z remote: Counting objects:  99% (597/603)        
2022-06-21T16:02:46.2783591Z remote: Counting objects: 100% (603/603)        
2022-06-21T16:02:46.2783841Z remote: Counting objects: 100% (603/603), done.        
2022-06-21T16:02:46.2788591Z remote: Compressing objects:   0% (1/513)        
2022-06-21T16:02:46.2788894Z remote: Compressing objects:   1% (6/513)        
2022-06-21T16:02:46.2789152Z remote: Compressing objects:   2% (11/513)        
2022-06-21T16:02:46.2789417Z remote: Compressing objects:   3% (16/513)        
2022-06-21T16:02:46.2789679Z remote: Compressing objects:   4% (21/513)        
2022-06-21T16:02:46.2801159Z remote: Compressing objects:   5% (26/513)        
2022-06-21T16:02:46.2815299Z remote: Compressing objects:   6% (31/513)        
2022-06-21T16:02:46.2820780Z remote: Compressing objects:   7% (36/513)        
2022-06-21T16:02:46.2832008Z remote: Compressing objects:   8% (42/513)        
2022-06-21T16:02:46.2843524Z remote: Compressing objects:   9% (47/513)        
2022-06-21T16:02:46.2843816Z remote: Compressing objects:  10% (52/513)        
2022-06-21T16:02:46.2854952Z remote: Compressing objects:  11% (57/513)        
2022-06-21T16:02:46.2855236Z remote: Compressing objects:  12% (62/513)        
2022-06-21T16:02:46.2855502Z remote: Compressing objects:  13% (67/513)        
2022-06-21T16:02:46.2855757Z remote: Compressing objects:  14% (72/513)        
2022-06-21T16:02:46.2862149Z remote: Compressing objects:  15% (77/513)        
2022-06-21T16:02:46.2869808Z remote: Compressing objects:  16% (83/513)        
2022-06-21T16:02:46.2892946Z remote: Compressing objects:  17% (88/513)        
2022-06-21T16:02:46.2898937Z remote: Compressing objects:  18% (93/513)        
2022-06-21T16:02:46.2899228Z remote: Compressing objects:  19% (98/513)        
2022-06-21T16:02:46.2937349Z remote: Compressing objects:  20% (103/513)        
2022-06-21T16:02:46.2937951Z remote: Compressing objects:  21% (108/513)        
2022-06-21T16:02:46.2938269Z remote: Compressing objects:  22% (113/513)        
2022-06-21T16:02:46.2949802Z remote: Compressing objects:  23% (118/513)        
2022-06-21T16:02:46.2950336Z remote: Compressing objects:  24% (124/513)        
2022-06-21T16:02:46.2966101Z remote: Compressing objects:  25% (129/513)        
2022-06-21T16:02:46.2968866Z remote: Compressing objects:  26% (134/513)        
2022-06-21T16:02:46.2980454Z remote: Compressing objects:  27% (139/513)        
2022-06-21T16:02:46.3018136Z remote: Compressing objects:  28% (144/513)        
2022-06-21T16:02:46.3041518Z remote: Compressing objects:  29% (149/513)        
2022-06-21T16:02:46.3063283Z remote: Compressing objects:  30% (154/513)        
2022-06-21T16:02:46.3092122Z remote: Compressing objects:  31% (160/513)        
2022-06-21T16:02:46.3134843Z remote: Compressing objects:  32% (165/513)        
2022-06-21T16:02:46.3154720Z remote: Compressing objects:  33% (170/513)        
2022-06-21T16:02:46.3186849Z remote: Compressing objects:  34% (175/513)        
2022-06-21T16:02:46.3187424Z remote: Compressing objects:  35% (180/513)        
2022-06-21T16:02:46.3199527Z remote: Compressing objects:  36% (185/513)        
2022-06-21T16:02:46.3208186Z remote: Compressing objects:  37% (190/513)        
2022-06-21T16:02:46.3226257Z remote: Compressing objects:  38% (195/513)        
2022-06-21T16:02:46.3245209Z remote: Compressing objects:  39% (201/513)        
2022-06-21T16:02:46.3281734Z remote: Compressing objects:  40% (206/513)        
2022-06-21T16:02:46.3352656Z remote: Compressing objects:  41% (211/513)        
2022-06-21T16:02:46.3376555Z remote: Compressing objects:  42% (216/513)        
2022-06-21T16:02:46.3384182Z remote: Compressing objects:  43% (221/513)        
2022-06-21T16:02:46.3417455Z remote: Compressing objects:  44% (226/513)        
2022-06-21T16:02:46.3446933Z remote: Compressing objects:  45% (231/513)        
2022-06-21T16:02:46.3460256Z remote: Compressing objects:  46% (236/513)        
2022-06-21T16:02:46.3463071Z remote: Compressing objects:  47% (242/513)        
2022-06-21T16:02:46.3479387Z remote: Compressing objects:  48% (247/513)        
2022-06-21T16:02:46.3489914Z remote: Compressing objects:  49% (252/513)        
2022-06-21T16:02:46.3513975Z remote: Compressing objects:  50% (257/513)        
2022-06-21T16:02:46.3528820Z remote: Compressing objects:  51% (262/513)        
2022-06-21T16:02:46.3574271Z remote: Compressing objects:  52% (267/513)        
2022-06-21T16:02:46.3609144Z remote: Compressing objects:  53% (272/513)        
2022-06-21T16:02:46.3717728Z remote: Compressing objects:  54% (278/513)        
2022-06-21T16:02:46.3728463Z remote: Compressing objects:  55% (283/513)        
2022-06-21T16:02:46.3738310Z remote: Compressing objects:  56% (288/513)        
2022-06-21T16:02:46.3742930Z remote: Compressing objects:  57% (293/513)        
2022-06-21T16:02:46.3770662Z remote: Compressing objects:  58% (298/513)        
2022-06-21T16:02:46.3786440Z remote: Compressing objects:  59% (303/513)        
2022-06-21T16:02:46.3803854Z remote: Compressing objects:  60% (308/513)        
2022-06-21T16:02:46.3824496Z remote: Compressing objects:  61% (313/513)        
2022-06-21T16:02:46.3860007Z remote: Compressing objects:  62% (319/513)        
2022-06-21T16:02:46.3878268Z remote: Compressing objects:  63% (324/513)        
2022-06-21T16:02:46.3930260Z remote: Compressing objects:  64% (329/513)        
2022-06-21T16:02:46.3978163Z remote: Compressing objects:  65% (334/513)        
2022-06-21T16:02:46.3986015Z remote: Compressing objects:  66% (339/513)        
2022-06-21T16:02:46.4004081Z remote: Compressing objects:  67% (344/513)        
2022-06-21T16:02:46.4070085Z remote: Compressing objects:  68% (349/513)        
2022-06-21T16:02:46.4142835Z remote: Compressing objects:  69% (354/513)        
2022-06-21T16:02:46.4227730Z remote: Compressing objects:  70% (360/513)        
2022-06-21T16:02:46.4235339Z remote: Compressing objects:  71% (365/513)        
2022-06-21T16:02:46.4265832Z remote: Compressing objects:  72% (370/513)        
2022-06-21T16:02:46.4290407Z remote: Compressing objects:  73% (375/513)        
2022-06-21T16:02:46.4291465Z remote: Compressing objects:  74% (380/513)        
2022-06-21T16:02:46.4299273Z remote: Compressing objects:  75% (385/513)        
2022-06-21T16:02:46.4316893Z remote: Compressing objects:  76% (390/513)        
2022-06-21T16:02:46.4317515Z remote: Compressing objects:  77% (396/513)        
2022-06-21T16:02:46.4329030Z remote: Compressing objects:  78% (401/513)        
2022-06-21T16:02:46.4329410Z remote: Compressing objects:  79% (406/513)        
2022-06-21T16:02:46.4330032Z remote: Compressing objects:  80% (411/513)        
2022-06-21T16:02:46.4330797Z remote: Compressing objects:  81% (416/513)        
2022-06-21T16:02:46.4342919Z remote: Compressing objects:  82% (421/513)        
2022-06-21T16:02:46.4343830Z remote: Compressing objects:  83% (426/513)        
2022-06-21T16:02:46.4344195Z remote: Compressing objects:  84% (431/513)        
2022-06-21T16:02:46.4344937Z remote: Compressing objects:  85% (437/513)        
2022-06-21T16:02:46.4345568Z remote: Compressing objects:  86% (442/513)        
2022-06-21T16:02:46.4346231Z remote: Compressing objects:  87% (447/513)        
2022-06-21T16:02:46.4346905Z remote: Compressing objects:  88% (452/513)        
2022-06-21T16:02:46.4347625Z remote: Compressing objects:  89% (457/513)        
2022-06-21T16:02:46.4348195Z remote: Compressing objects:  90% (462/513)        
2022-06-21T16:02:46.4352894Z remote: Compressing objects:  91% (467/513)        
2022-06-21T16:02:46.4353734Z remote: Compressing objects:  92% (472/513)        
2022-06-21T16:02:46.4354114Z remote: Compressing objects:  93% (478/513)        
2022-06-21T16:02:46.4354728Z remote: Compressing objects:  94% (483/513)        
2022-06-21T16:02:46.4355461Z remote: Compressing objects:  95% (488/513)        
2022-06-21T16:02:46.4356048Z remote: Compressing objects:  96% (493/513)        
2022-06-21T16:02:46.4356785Z remote: Compressing objects:  97% (498/513)        
2022-06-21T16:02:46.4357513Z remote: Compressing objects:  98% (503/513)        
2022-06-21T16:02:46.4358121Z remote: Compressing objects:  99% (508/513)        
2022-06-21T16:02:46.4358902Z remote: Compressing objects: 100% (513/513)        
2022-06-21T16:02:46.4359269Z remote: Compressing objects: 100% (513/513), done.        
2022-06-21T16:02:46.4397962Z Receiving objects:   0% (1/603)
2022-06-21T16:02:46.4414575Z Receiving objects:   1% (7/603)
2022-06-21T16:02:46.4417677Z Receiving objects:   2% (13/603)
2022-06-21T16:02:46.4418951Z Receiving objects:   3% (19/603)
2022-06-21T16:02:46.4463923Z Receiving objects:   4% (25/603)
2022-06-21T16:02:46.4469037Z Receiving objects:   5% (31/603)
2022-06-21T16:02:46.4469933Z Receiving objects:   6% (37/603)
2022-06-21T16:02:46.4470619Z Receiving objects:   7% (43/603)
2022-06-21T16:02:46.4471720Z Receiving objects:   8% (49/603)
2022-06-21T16:02:46.4472325Z Receiving objects:   9% (55/603)
2022-06-21T16:02:46.4472736Z Receiving objects:  10% (61/603)
2022-06-21T16:02:46.4473306Z Receiving objects:  11% (67/603)
2022-06-21T16:02:46.4473755Z Receiving objects:  12% (73/603)
2022-06-21T16:02:46.4514668Z Receiving objects:  13% (79/603)
2022-06-21T16:02:46.4521136Z Receiving objects:  14% (85/603)
2022-06-21T16:02:46.4566438Z Receiving objects:  15% (91/603)
2022-06-21T16:02:46.4575229Z Receiving objects:  16% (97/603)
2022-06-21T16:02:46.4580468Z Receiving objects:  17% (103/603)
2022-06-21T16:02:46.4617705Z Receiving objects:  18% (109/603)
2022-06-21T16:02:46.4622616Z Receiving objects:  19% (115/603)
2022-06-21T16:02:46.4629807Z Receiving objects:  20% (121/603)
2022-06-21T16:02:46.4662443Z Receiving objects:  21% (127/603)
2022-06-21T16:02:46.4666830Z Receiving objects:  22% (133/603)
2022-06-21T16:02:46.4670450Z Receiving objects:  23% (139/603)
2022-06-21T16:02:46.4680925Z Receiving objects:  24% (145/603)
2022-06-21T16:02:46.4681927Z Receiving objects:  25% (151/603)
2022-06-21T16:02:46.4685936Z Receiving objects:  26% (157/603)
2022-06-21T16:02:46.4717037Z Receiving objects:  27% (163/603)
2022-06-21T16:02:46.4718587Z Receiving objects:  28% (169/603)
2022-06-21T16:02:46.4719680Z Receiving objects:  29% (175/603)
2022-06-21T16:02:46.4720600Z Receiving objects:  30% (181/603)
2022-06-21T16:02:46.4721228Z Receiving objects:  31% (187/603)
2022-06-21T16:02:46.4721640Z Receiving objects:  32% (193/603)
2022-06-21T16:02:46.4724853Z Receiving objects:  33% (199/603)
2022-06-21T16:02:46.4785375Z Receiving objects:  34% (206/603)
2022-06-21T16:02:46.4826549Z Receiving objects:  35% (212/603)
2022-06-21T16:02:46.4827852Z Receiving objects:  36% (218/603)
2022-06-21T16:02:46.4830753Z Receiving objects:  37% (224/603)
2022-06-21T16:02:46.4865779Z Receiving objects:  38% (230/603)
2022-06-21T16:02:46.4866312Z Receiving objects:  39% (236/603)
2022-06-21T16:02:46.4867640Z Receiving objects:  40% (242/603)
2022-06-21T16:02:46.4868077Z Receiving objects:  41% (248/603)
2022-06-21T16:02:46.4896139Z Receiving objects:  42% (254/603)
2022-06-21T16:02:46.4904509Z Receiving objects:  43% (260/603)
2022-06-21T16:02:46.4926330Z Receiving objects:  44% (266/603)
2022-06-21T16:02:46.4930759Z Receiving objects:  45% (272/603)
2022-06-21T16:02:46.4931757Z Receiving objects:  46% (278/603)
2022-06-21T16:02:46.4942244Z Receiving objects:  47% (284/603)
2022-06-21T16:02:46.4945973Z Receiving objects:  48% (290/603)
2022-06-21T16:02:46.4947695Z Receiving objects:  49% (296/603)
2022-06-21T16:02:46.4950451Z Receiving objects:  50% (302/603)
2022-06-21T16:02:46.4991840Z Receiving objects:  51% (308/603)
2022-06-21T16:02:46.4993024Z Receiving objects:  52% (314/603)
2022-06-21T16:02:46.5010080Z Receiving objects:  53% (320/603)
2022-06-21T16:02:46.5020790Z Receiving objects:  54% (326/603)
2022-06-21T16:02:46.5026107Z Receiving objects:  55% (332/603)
2022-06-21T16:02:46.5060339Z Receiving objects:  56% (338/603)
2022-06-21T16:02:46.5071110Z Receiving objects:  57% (344/603)
2022-06-21T16:02:46.5079619Z Receiving objects:  58% (350/603)
2022-06-21T16:02:46.5087437Z Receiving objects:  59% (356/603)
2022-06-21T16:02:46.5106614Z Receiving objects:  60% (362/603)
2022-06-21T16:02:46.5111220Z Receiving objects:  61% (368/603)
2022-06-21T16:02:46.5114321Z Receiving objects:  62% (374/603)
2022-06-21T16:02:46.5119542Z Receiving objects:  63% (380/603)
2022-06-21T16:02:46.5137798Z Receiving objects:  64% (386/603)
2022-06-21T16:02:46.5142646Z Receiving objects:  65% (392/603)
2022-06-21T16:02:46.5148591Z Receiving objects:  66% (398/603)
2022-06-21T16:02:46.5160067Z Receiving objects:  67% (405/603)
2022-06-21T16:02:46.5163579Z Receiving objects:  68% (411/603)
2022-06-21T16:02:46.5166791Z Receiving objects:  69% (417/603)
2022-06-21T16:02:46.5167269Z Receiving objects:  70% (423/603)
2022-06-21T16:02:46.5170257Z Receiving objects:  71% (429/603)
2022-06-21T16:02:46.5178529Z Receiving objects:  72% (435/603)
2022-06-21T16:02:46.5186146Z Receiving objects:  73% (441/603)
2022-06-21T16:02:46.5189141Z Receiving objects:  74% (447/603)
2022-06-21T16:02:46.5189474Z Receiving objects:  75% (453/603)
2022-06-21T16:02:46.5205650Z Receiving objects:  76% (459/603)
2022-06-21T16:02:46.5207041Z Receiving objects:  77% (465/603)
2022-06-21T16:02:46.5222780Z Receiving objects:  78% (471/603)
2022-06-21T16:02:46.5226297Z Receiving objects:  79% (477/603)
2022-06-21T16:02:46.5234144Z Receiving objects:  80% (483/603)
2022-06-21T16:02:46.5234550Z Receiving objects:  81% (489/603)
2022-06-21T16:02:46.5244349Z Receiving objects:  82% (495/603)
2022-06-21T16:02:46.5251169Z Receiving objects:  83% (501/603)
2022-06-21T16:02:46.5252219Z Receiving objects:  84% (507/603)
2022-06-21T16:02:46.5258564Z Receiving objects:  85% (513/603)
2022-06-21T16:02:46.5259676Z Receiving objects:  86% (519/603)
2022-06-21T16:02:46.5273102Z Receiving objects:  87% (525/603)
2022-06-21T16:02:46.5276463Z Receiving objects:  88% (531/603)
2022-06-21T16:02:46.5280475Z Receiving objects:  89% (537/603)
2022-06-21T16:02:46.5283828Z Receiving objects:  90% (543/603)
2022-06-21T16:02:46.5286237Z Receiving objects:  91% (549/603)
2022-06-21T16:02:46.5288627Z Receiving objects:  92% (555/603)
2022-06-21T16:02:46.5292112Z Receiving objects:  93% (561/603)
2022-06-21T16:02:46.5292506Z Receiving objects:  94% (567/603)
2022-06-21T16:02:46.5300895Z Receiving objects:  95% (573/603)
2022-06-21T16:02:46.5336756Z Receiving objects:  96% (579/603)
2022-06-21T16:02:46.5350195Z Receiving objects:  97% (585/603)
2022-06-21T16:02:46.5352875Z Receiving objects:  98% (591/603)
2022-06-21T16:02:46.5462016Z Receiving objects:  99% (597/603)
2022-06-21T16:02:46.5462875Z remote: Total 603 (delta 110), reused 259 (delta 75), pack-reused 0        
2022-06-21T16:02:46.5482951Z Receiving objects: 100% (603/603)
2022-06-21T16:02:46.5483490Z Receiving objects: 100% (603/603), 1.01 MiB | 9.28 MiB/s, done.
2022-06-21T16:02:46.5487523Z Resolving deltas:   0% (0/110)
2022-06-21T16:02:46.5487912Z Resolving deltas:   1% (2/110)
2022-06-21T16:02:46.5488262Z Resolving deltas:   2% (3/110)
2022-06-21T16:02:46.5488784Z Resolving deltas:   3% (4/110)
2022-06-21T16:02:46.5489643Z Resolving deltas:   4% (5/110)
2022-06-21T16:02:46.5490078Z Resolving deltas:   5% (6/110)
2022-06-21T16:02:46.5490404Z Resolving deltas:   6% (7/110)
2022-06-21T16:02:46.5490797Z Resolving deltas:   7% (8/110)
2022-06-21T16:02:46.5491368Z Resolving deltas:   8% (9/110)
2022-06-21T16:02:46.5491646Z Resolving deltas:   9% (10/110)
2022-06-21T16:02:46.5491873Z Resolving deltas:  10% (11/110)
2022-06-21T16:02:46.5492085Z Resolving deltas:  11% (13/110)
2022-06-21T16:02:46.5492299Z Resolving deltas:  12% (14/110)
2022-06-21T16:02:46.5497894Z Resolving deltas:  13% (15/110)
2022-06-21T16:02:46.5498304Z Resolving deltas:  14% (16/110)
2022-06-21T16:02:46.5498646Z Resolving deltas:  15% (17/110)
2022-06-21T16:02:46.5498985Z Resolving deltas:  16% (18/110)
2022-06-21T16:02:46.5505075Z Resolving deltas:  17% (19/110)
2022-06-21T16:02:46.5505448Z Resolving deltas:  18% (20/110)
2022-06-21T16:02:46.5505780Z Resolving deltas:  19% (21/110)
2022-06-21T16:02:46.5506102Z Resolving deltas:  20% (22/110)
2022-06-21T16:02:46.5506456Z Resolving deltas:  21% (24/110)
2022-06-21T16:02:46.5506816Z Resolving deltas:  22% (25/110)
2022-06-21T16:02:46.5507238Z Resolving deltas:  23% (26/110)
2022-06-21T16:02:46.5521741Z Resolving deltas:  24% (27/110)
2022-06-21T16:02:46.5607319Z Resolving deltas:  25% (28/110)
2022-06-21T16:02:46.5607586Z Resolving deltas:  26% (29/110)
2022-06-21T16:02:46.5607804Z Resolving deltas:  27% (30/110)
2022-06-21T16:02:46.5608022Z Resolving deltas:  28% (31/110)
2022-06-21T16:02:46.5608231Z Resolving deltas:  29% (32/110)
2022-06-21T16:02:46.5608437Z Resolving deltas:  30% (33/110)
2022-06-21T16:02:46.5608650Z Resolving deltas:  31% (35/110)
2022-06-21T16:02:46.5608846Z Resolving deltas:  32% (36/110)
2022-06-21T16:02:46.5609050Z Resolving deltas:  33% (37/110)
2022-06-21T16:02:46.5609260Z Resolving deltas:  34% (38/110)
2022-06-21T16:02:46.5609454Z Resolving deltas:  35% (39/110)
2022-06-21T16:02:46.5609659Z Resolving deltas:  36% (40/110)
2022-06-21T16:02:46.5609868Z Resolving deltas:  37% (41/110)
2022-06-21T16:02:46.5610060Z Resolving deltas:  38% (42/110)
2022-06-21T16:02:46.5610265Z Resolving deltas:  39% (43/110)
2022-06-21T16:02:46.5610475Z Resolving deltas:  40% (44/110)
2022-06-21T16:02:46.5610674Z Resolving deltas:  41% (46/110)
2022-06-21T16:02:46.5610882Z Resolving deltas:  42% (47/110)
2022-06-21T16:02:46.5611087Z Resolving deltas:  43% (48/110)
2022-06-21T16:02:46.5611282Z Resolving deltas:  44% (49/110)
2022-06-21T16:02:46.5611487Z Resolving deltas:  45% (50/110)
2022-06-21T16:02:46.5611695Z Resolving deltas:  46% (51/110)
2022-06-21T16:02:46.5611887Z Resolving deltas:  47% (52/110)
2022-06-21T16:02:46.5612091Z Resolving deltas:  48% (53/110)
2022-06-21T16:02:46.5612297Z Resolving deltas:  49% (54/110)
2022-06-21T16:02:46.5612496Z Resolving deltas:  50% (55/110)
2022-06-21T16:02:46.5612695Z Resolving deltas:  51% (57/110)
2022-06-21T16:02:46.5612895Z Resolving deltas:  52% (58/110)
2022-06-21T16:02:46.5613101Z Resolving deltas:  53% (59/110)
2022-06-21T16:02:46.5613296Z Resolving deltas:  54% (60/110)
2022-06-21T16:02:46.5613500Z Resolving deltas:  55% (61/110)
2022-06-21T16:02:46.5615935Z Resolving deltas:  56% (62/110)
2022-06-21T16:02:46.5616167Z Resolving deltas:  57% (63/110)
2022-06-21T16:02:46.5616401Z Resolving deltas:  58% (64/110)
2022-06-21T16:02:46.5616621Z Resolving deltas:  59% (65/110)
2022-06-21T16:02:46.5616830Z Resolving deltas:  60% (66/110)
2022-06-21T16:02:46.5617033Z Resolving deltas:  61% (68/110)
2022-06-21T16:02:46.5617242Z Resolving deltas:  62% (69/110)
2022-06-21T16:02:46.5617443Z Resolving deltas:  63% (70/110)
2022-06-21T16:02:46.5617652Z Resolving deltas:  64% (71/110)
2022-06-21T16:02:46.5617862Z Resolving deltas:  65% (72/110)
2022-06-21T16:02:46.5618059Z Resolving deltas:  66% (73/110)
2022-06-21T16:02:46.5618264Z Resolving deltas:  67% (74/110)
2022-06-21T16:02:46.5618466Z Resolving deltas:  68% (75/110)
2022-06-21T16:02:46.5618662Z Resolving deltas:  69% (76/110)
2022-06-21T16:02:46.5618865Z Resolving deltas:  70% (77/110)
2022-06-21T16:02:46.5619065Z Resolving deltas:  71% (79/110)
2022-06-21T16:02:46.5619266Z Resolving deltas:  72% (80/110)
2022-06-21T16:02:46.5619466Z Resolving deltas:  73% (81/110)
2022-06-21T16:02:46.5619666Z Resolving deltas:  74% (82/110)
2022-06-21T16:02:46.5619873Z Resolving deltas:  75% (83/110)
2022-06-21T16:02:46.5620064Z Resolving deltas:  76% (84/110)
2022-06-21T16:02:46.5620264Z Resolving deltas:  77% (85/110)
2022-06-21T16:02:46.5620465Z Resolving deltas:  78% (86/110)
2022-06-21T16:02:46.5620661Z Resolving deltas:  79% (87/110)
2022-06-21T16:02:46.5620861Z Resolving deltas:  80% (88/110)
2022-06-21T16:02:46.5621064Z Resolving deltas:  81% (90/110)
2022-06-21T16:02:46.5621255Z Resolving deltas:  82% (91/110)
2022-06-21T16:02:46.5621456Z Resolving deltas:  83% (92/110)
2022-06-21T16:02:46.5621660Z Resolving deltas:  84% (93/110)
2022-06-21T16:02:46.5621850Z Resolving deltas:  85% (94/110)
2022-06-21T16:02:46.5622048Z Resolving deltas:  86% (95/110)
2022-06-21T16:02:46.5622252Z Resolving deltas:  87% (96/110)
2022-06-21T16:02:46.5622445Z Resolving deltas:  88% (97/110)
2022-06-21T16:02:46.5622651Z Resolving deltas:  89% (98/110)
2022-06-21T16:02:46.5622853Z Resolving deltas:  90% (99/110)
2022-06-21T16:02:46.5623130Z Resolving deltas:  91% (101/110)
2022-06-21T16:02:46.5623357Z Resolving deltas:  92% (102/110)
2022-06-21T16:02:46.5623570Z Resolving deltas:  93% (103/110)
2022-06-21T16:02:46.5623782Z Resolving deltas:  94% (104/110)
2022-06-21T16:02:46.5623984Z Resolving deltas:  95% (105/110)
2022-06-21T16:02:46.5624186Z Resolving deltas:  96% (106/110)
2022-06-21T16:02:46.5624394Z Resolving deltas:  97% (107/110)
2022-06-21T16:02:46.5624588Z Resolving deltas:  98% (108/110)
2022-06-21T16:02:46.5624788Z Resolving deltas:  99% (109/110)
2022-06-21T16:02:46.5624995Z Resolving deltas: 100% (110/110)
2022-06-21T16:02:46.5625207Z Resolving deltas: 100% (110/110), done.
2022-06-21T16:02:46.5703148Z From https://github.com/sequelize/sequelize
2022-06-21T16:02:46.5703801Z  * [new ref]         a13688e5f6649ec7e6932a7f618284606945ee23 -> pull/13927/merge
2022-06-21T16:02:46.5741770Z ##[endgroup]
2022-06-21T16:02:46.5742238Z ##[group]Determining the checkout info
2022-06-21T16:02:46.5742616Z ##[endgroup]
2022-06-21T16:02:46.5742974Z ##[group]Checking out the ref
2022-06-21T16:02:46.5743484Z [command]/usr/bin/git checkout --progress --force refs/remotes/pull/13927/merge
2022-06-21T16:02:46.6181099Z Note: switching to 'refs/remotes/pull/13927/merge'.
2022-06-21T16:02:46.6181665Z 
2022-06-21T16:02:46.6182584Z You are in 'detached HEAD' state. You can look around, make experimental
2022-06-21T16:02:46.6183008Z changes and commit them, and you can discard any commits you make in this
2022-06-21T16:02:46.6183361Z state without impacting any branches by switching back to a branch.
2022-06-21T16:02:46.6183551Z 
2022-06-21T16:02:46.6183709Z If you want to create a new branch to retain commits you create, you may
2022-06-21T16:02:46.6184128Z do so (now or later) by using -c with the switch command. Example:
2022-06-21T16:02:46.6184313Z 
2022-06-21T16:02:46.6184475Z   git switch -c <new-branch-name>
2022-06-21T16:02:46.6184861Z 
2022-06-21T16:02:46.6184953Z Or undo this operation with:
2022-06-21T16:02:46.6185097Z 
2022-06-21T16:02:46.6185176Z   git switch -
2022-06-21T16:02:46.6185304Z 
2022-06-21T16:02:46.6185483Z Turn off this advice by setting config variable advice.detachedHead to false
2022-06-21T16:02:46.6185783Z 
2022-06-21T16:02:46.6186245Z HEAD is now at a13688e Merge 3bb86b08d6c40cbacc78a1f2929db090ba9b68ff into 4858a1017fdc1c2bf0c018236b8a041b60d73a66
2022-06-21T16:02:46.6193707Z ##[endgroup]
2022-06-21T16:02:46.6235607Z [command]/usr/bin/git log -1 --format='%H'
2022-06-21T16:02:46.6263714Z 'a13688e5f6649ec7e6932a7f618284606945ee23'
2022-06-21T16:02:46.6555741Z ##[group]Run actions/setup-node@v3
2022-06-21T16:02:46.6555972Z with:
2022-06-21T16:02:46.6556149Z   node-version: 14
2022-06-21T16:02:46.6556339Z   cache: yarn
2022-06-21T16:02:46.6556530Z   always-auth: false
2022-06-21T16:02:46.6556722Z   check-latest: false
2022-06-21T16:02:46.6557069Z   token: ***
2022-06-21T16:02:46.6557409Z env:
2022-06-21T16:02:46.6557582Z   SEQ_DB: testdb
2022-06-21T16:02:46.6557777Z   SEQ_USER: db2inst1
2022-06-21T16:02:46.6557970Z   SEQ_PW: password
2022-06-21T16:02:46.6558157Z   DIALECT: db2
2022-06-21T16:02:46.6558360Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:02:46.6558578Z   SEQ_PORT: 50000
2022-06-21T16:02:46.6558757Z ##[endgroup]
2022-06-21T16:02:46.8552423Z Found in cache @ /opt/hostedtoolcache/node/14.19.3/x64
2022-06-21T16:02:46.8754048Z [command]/usr/local/bin/yarn --version
2022-06-21T16:02:48.5381155Z 1.22.19
2022-06-21T16:02:48.5503541Z [command]/usr/local/bin/yarn cache dir
2022-06-21T16:02:48.7527494Z /home/runner/.cache/yarn/v6
2022-06-21T16:02:50.0291532Z Received 171966464 of 296419027 (58.0%), 164.2 MBs/sec
2022-06-21T16:02:50.8596251Z Received 296419027 of 296419027 (100.0%), 154.5 MBs/sec
2022-06-21T16:02:50.8597393Z Cache Size: ~283 MB (296419027 B)
2022-06-21T16:02:50.8659639Z [command]/usr/bin/tar --use-compress-program zstd -d -xf /home/runner/work/_temp/e426eabe-2c9f-442f-9c7d-6779ea98cf0d/cache.tzst -P -C /home/runner/work/sequelize/sequelize
2022-06-21T16:02:54.2592977Z Cache restored successfully
2022-06-21T16:02:54.2992071Z 
2022-06-21T16:02:54.3004835Z Cache restored from key: node-cache-Linux-yarn-43dbea2a96af646e6a5f4d71ad1bc192e4c4011beffb0ecf4694b2e13e0c22ce
2022-06-21T16:02:54.3429515Z ##[group]Run actions/download-artifact@v3
2022-06-21T16:02:54.3429871Z with:
2022-06-21T16:02:54.3430194Z   name: install-build-artifact-node-14
2022-06-21T16:02:54.3430493Z env:
2022-06-21T16:02:54.3430696Z   SEQ_DB: testdb
2022-06-21T16:02:54.3430968Z   SEQ_USER: db2inst1
2022-06-21T16:02:54.3431269Z   SEQ_PW: password
2022-06-21T16:02:54.3431550Z   DIALECT: db2
2022-06-21T16:02:54.3431838Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:02:54.3432084Z   SEQ_PORT: 50000
2022-06-21T16:02:54.3432369Z ##[endgroup]
2022-06-21T16:02:54.3980880Z Starting download for install-build-artifact-node-14
2022-06-21T16:02:54.5318699Z Directory structure has been setup for the artifact
2022-06-21T16:02:54.5319641Z Total number of files that will be downloaded: 1
2022-06-21T16:02:55.5310191Z Total file count: 1 ---- Processed file #0 (0.0%)
2022-06-21T16:02:56.5307577Z Total file count: 1 ---- Processed file #0 (0.0%)
2022-06-21T16:02:57.5308459Z Total file count: 1 ---- Processed file #0 (0.0%)
2022-06-21T16:02:58.5308139Z Total file count: 1 ---- Processed file #0 (0.0%)
2022-06-21T16:02:59.5308093Z Total file count: 1 ---- Processed file #0 (0.0%)
2022-06-21T16:03:00.0322037Z Artifact install-build-artifact-node-14 was downloaded to /home/runner/work/sequelize/sequelize
2022-06-21T16:03:00.0326847Z Artifact download has finished successfully
2022-06-21T16:03:00.0436718Z ##[group]Run tar -xf install-build-node-14.tar
2022-06-21T16:03:00.0437406Z [36;1mtar -xf install-build-node-14.tar[0m
2022-06-21T16:03:00.0495410Z shell: /usr/bin/bash -e {0}
2022-06-21T16:03:00.0495720Z env:
2022-06-21T16:03:00.0496055Z   SEQ_DB: testdb
2022-06-21T16:03:00.0496328Z   SEQ_USER: db2inst1
2022-06-21T16:03:00.0496620Z   SEQ_PW: password
2022-06-21T16:03:00.0496981Z   DIALECT: db2
2022-06-21T16:03:00.0497278Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:03:00.0497604Z   SEQ_PORT: 50000
2022-06-21T16:03:00.0497885Z ##[endgroup]
2022-06-21T16:03:02.0801562Z ##[group]Run yarn start-db2
2022-06-21T16:03:02.0801931Z [36;1myarn start-db2[0m
2022-06-21T16:03:02.0855315Z shell: /usr/bin/bash -e {0}
2022-06-21T16:03:02.0855652Z env:
2022-06-21T16:03:02.0855869Z   SEQ_DB: testdb
2022-06-21T16:03:02.0856144Z   SEQ_USER: db2inst1
2022-06-21T16:03:02.0856426Z   SEQ_PW: password
2022-06-21T16:03:02.0856711Z   DIALECT: db2
2022-06-21T16:03:02.0857025Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:03:02.0857276Z   SEQ_PORT: 50000
2022-06-21T16:03:02.0857537Z ##[endgroup]
2022-06-21T16:03:02.2737474Z yarn run v1.22.19
2022-06-21T16:03:03.0317031Z $ bash dev/db2/11.5/start.sh
2022-06-21T16:03:03.6178074Z Unable to find image 'ibmcom/db2-amd64:11.5.7.0' locally
2022-06-21T16:03:04.0470204Z 11.5.7.0: Pulling from ibmcom/db2-amd64
2022-06-21T16:03:04.0476058Z ac08ca107ad9: Pulling fs layer
2022-06-21T16:03:04.0482116Z b46ca46c303b: Pulling fs layer
2022-06-21T16:03:04.0482743Z db36bd0c4fb9: Pulling fs layer
2022-06-21T16:03:04.0483399Z ece3b0bd5950: Pulling fs layer
2022-06-21T16:03:04.0484033Z d837157b9640: Pulling fs layer
2022-06-21T16:03:04.0484487Z 75278217e94f: Pulling fs layer
2022-06-21T16:03:04.0484911Z ece3b0bd5950: Waiting
2022-06-21T16:03:04.0485329Z d837157b9640: Waiting
2022-06-21T16:03:04.0485690Z 8606763a453c: Pulling fs layer
2022-06-21T16:03:04.0486105Z 58ebe8cdf5bb: Pulling fs layer
2022-06-21T16:03:04.0486534Z 40c1322bca93: Pulling fs layer
2022-06-21T16:03:04.0486970Z b887e70508fc: Pulling fs layer
2022-06-21T16:03:04.0487513Z 69888eddaa74: Pulling fs layer
2022-06-21T16:03:04.0487948Z f71a11eef630: Pulling fs layer
2022-06-21T16:03:04.0488355Z ea98cf603ea0: Pulling fs layer
2022-06-21T16:03:04.0488761Z 75278217e94f: Waiting
2022-06-21T16:03:04.0489180Z 8606763a453c: Waiting
2022-06-21T16:03:04.0489556Z 58ebe8cdf5bb: Waiting
2022-06-21T16:03:04.0489886Z 40c1322bca93: Waiting
2022-06-21T16:03:04.0490254Z b887e70508fc: Waiting
2022-06-21T16:03:04.0490642Z 69888eddaa74: Waiting
2022-06-21T16:03:04.0491024Z f71a11eef630: Waiting
2022-06-21T16:03:04.0491403Z ea98cf603ea0: Waiting
2022-06-21T16:03:04.1626275Z db36bd0c4fb9: Verifying Checksum
2022-06-21T16:03:04.1627335Z db36bd0c4fb9: Download complete
2022-06-21T16:03:04.1715331Z b46ca46c303b: Verifying Checksum
2022-06-21T16:03:04.1715724Z b46ca46c303b: Download complete
2022-06-21T16:03:04.3622652Z ece3b0bd5950: Verifying Checksum
2022-06-21T16:03:04.3623093Z ece3b0bd5950: Download complete
2022-06-21T16:03:05.3424117Z ac08ca107ad9: Verifying Checksum
2022-06-21T16:03:05.3424691Z ac08ca107ad9: Download complete
2022-06-21T16:03:05.4306768Z 75278217e94f: Verifying Checksum
2022-06-21T16:03:05.4307605Z 75278217e94f: Download complete
2022-06-21T16:03:05.4960741Z 8606763a453c: Verifying Checksum
2022-06-21T16:03:05.4961913Z 8606763a453c: Download complete
2022-06-21T16:03:05.5415188Z 58ebe8cdf5bb: Verifying Checksum
2022-06-21T16:03:05.5417337Z 58ebe8cdf5bb: Download complete
2022-06-21T16:03:05.6622833Z b887e70508fc: Verifying Checksum
2022-06-21T16:03:05.6628584Z b887e70508fc: Download complete
2022-06-21T16:03:05.8382094Z 69888eddaa74: Verifying Checksum
2022-06-21T16:03:05.8388621Z 69888eddaa74: Download complete
2022-06-21T16:03:06.0782718Z f71a11eef630: Verifying Checksum
2022-06-21T16:03:06.0783061Z f71a11eef630: Download complete
2022-06-21T16:03:06.6950764Z d837157b9640: Verifying Checksum
2022-06-21T16:03:06.6951102Z d837157b9640: Download complete
2022-06-21T16:03:07.0936722Z ea98cf603ea0: Verifying Checksum
2022-06-21T16:03:07.0946428Z ea98cf603ea0: Download complete
2022-06-21T16:03:11.8823252Z ac08ca107ad9: Pull complete
2022-06-21T16:03:13.4881817Z b46ca46c303b: Pull complete
2022-06-21T16:03:13.5511017Z db36bd0c4fb9: Pull complete
2022-06-21T16:03:13.7716756Z ece3b0bd5950: Pull complete
2022-06-21T16:03:19.8793942Z 40c1322bca93: Verifying Checksum
2022-06-21T16:03:19.8794300Z 40c1322bca93: Download complete
2022-06-21T16:03:22.3326093Z d837157b9640: Pull complete
2022-06-21T16:03:25.1964985Z 75278217e94f: Pull complete
2022-06-21T16:03:25.2436522Z 8606763a453c: Pull complete
2022-06-21T16:03:25.2934598Z 58ebe8cdf5bb: Pull complete
2022-06-21T16:03:44.4825828Z 40c1322bca93: Pull complete
2022-06-21T16:03:44.5706337Z b887e70508fc: Pull complete
2022-06-21T16:03:44.6222667Z 69888eddaa74: Pull complete
2022-06-21T16:03:44.7519387Z f71a11eef630: Pull complete
2022-06-21T16:03:47.0406543Z ea98cf603ea0: Pull complete
2022-06-21T16:03:47.0439258Z Digest: sha256:d41666fb7a611a34f2cc8b199148527f1c5f1e736187bf43d8c6651e3b1cfcbc
2022-06-21T16:03:47.0449607Z Status: Downloaded newer image for ibmcom/db2-amd64:11.5.7.0
2022-06-21T16:03:47.0865361Z 33ddf308ce7ca4cf4e50ff8451b6305cdcf16e85d052ddbadb9edd874d13e1a3
2022-06-21T16:04:07.5709590Z chown: cannot access '/database/config/db2inst1/sqllib/adm/fencedid': No such file or directory
2022-06-21T16:04:27.6778125Z chown: cannot access '/database/config/db2inst1/sqllib/adm/fencedid': No such file or directory
2022-06-21T16:04:27.6781252Z ls: cannot access /database/data/db2inst1/NODE0000: No such file or directory
2022-06-21T16:04:47.7568931Z chown: cannot access '/database/config/db2inst1/sqllib/adm/fencedid': No such file or directory
2022-06-21T16:04:47.7569592Z ls: cannot access /database/data/db2inst1/NODE0000: No such file or directory
2022-06-21T16:05:07.8341737Z chown: cannot access '/database/config/db2inst1/sqllib/adm/fencedid': No such file or directory
2022-06-21T16:05:07.8342825Z ls: cannot access /database/data/db2inst1/NODE0000: No such file or directory
2022-06-21T16:05:07.8364872Z (*) Setup has completed.
2022-06-21T16:05:14.0184737Z Local DB2-11.5 instance is ready for Sequelize tests.
2022-06-21T16:05:14.0194394Z Done in 131.75s.
2022-06-21T16:05:14.0265710Z ##[group]Run yarn test-integration
2022-06-21T16:05:14.0265988Z [36;1myarn test-integration[0m
2022-06-21T16:05:14.0374900Z shell: /usr/bin/bash -e {0}
2022-06-21T16:05:14.0375116Z env:
2022-06-21T16:05:14.0375308Z   SEQ_DB: testdb
2022-06-21T16:05:14.0375503Z   SEQ_USER: db2inst1
2022-06-21T16:05:14.0375716Z   SEQ_PW: password
2022-06-21T16:05:14.0375915Z   DIALECT: db2
2022-06-21T16:05:14.0376133Z   SEQ_TEST_CLEANUP_TIMEOUT: 1200000
2022-06-21T16:05:14.0376353Z   SEQ_PORT: 50000
2022-06-21T16:05:14.0376537Z ##[endgroup]
2022-06-21T16:05:14.1897143Z yarn run v1.22.19
2022-06-21T16:05:14.2514518Z $ yarn mocha "test/integration/**/*.test.[tj]s"
2022-06-21T16:05:14.9048650Z $ mocha -r ./test/registerEsbuild 'test/integration/**/*.test.[tj]s'
2022-06-21T16:05:16.0498644Z 
2022-06-21T16:05:16.0566193Z 
2022-06-21T16:05:17.5947768Z   [DB2] Alias
2022-06-21T16:05:17.8098617Z     ✔ should uppercase the first letter in alias getter, but not in eager loading (190ms)
2022-06-21T16:05:18.0609372Z     ✔ shouldnt touch the passed alias (77ms)
2022-06-21T16:05:18.1625605Z     ✔ should allow me to pass my own plural and singular forms to hasMany (63ms)
2022-06-21T16:05:18.2621340Z     ✔ should allow me to define plural and singular forms on the model (56ms)
2022-06-21T16:05:18.3030004Z 
2022-06-21T16:05:18.3035759Z   [DB2] BelongsToMany
2022-06-21T16:05:18.3037939Z     getAssociations
2022-06-21T16:05:18.7546770Z       ✔ supports transactions (297ms)
2022-06-21T16:05:19.0379657Z       ✔ gets all associated objects with all fields
2022-06-21T16:05:19.2878492Z       ✔ gets all associated objects when no options are passed
2022-06-21T16:05:19.4425322Z       ✔ only get objects that fulfill the options
2022-06-21T16:05:19.6050800Z       ✔ supports a where not in
2022-06-21T16:05:19.7651874Z       ✔ supports a where not in on the primary key
2022-06-21T16:05:19.9143919Z       ✔ only gets objects that fulfill options with a formatted value
2022-06-21T16:05:20.0866631Z       ✔ get associated objects with an eager load
2022-06-21T16:05:20.2404810Z       ✔ get associated objects with an eager load with conditions but not required
2022-06-21T16:05:20.4759724Z (node:21879) [SEQUELIZE0009] DeprecationWarning: Model.schema has been renamed to Model.withSchema
2022-06-21T16:05:20.4760855Z (Use `node --trace-deprecation ...` to show where the warning was created)
2022-06-21T16:05:20.7235379Z       ✔ should support schemas (256ms)
2022-06-21T16:05:21.0226225Z       ✔ supports custom primary keys and foreign keys (185ms)
2022-06-21T16:05:21.4754642Z       ✔ supports primary key attributes with different field and attribute names (198ms)
2022-06-21T16:05:21.8589429Z       ✔ supports non primary key attributes for joins (sourceKey only) (200ms)
2022-06-21T16:05:22.1891833Z       ✔ supports non primary key attributes for joins (targetKey only) (172ms)
2022-06-21T16:05:22.5422959Z       ✔ supports non primary key attributes for joins (sourceKey and targetKey) (191ms)
2022-06-21T16:05:22.9243279Z       ✔ supports non primary key attributes for joins (custom through model) (206ms)
2022-06-21T16:05:23.2687548Z       ✔ supports non primary key attributes for joins for getting associations (sourceKey/targetKey) (199ms)
2022-06-21T16:05:23.6628348Z       ✔ supports non primary key attributes for joins (custom foreignKey) (191ms)
2022-06-21T16:05:24.0076137Z       ✔ supports non primary key attributes for joins (custom foreignKey, custom through model) (172ms)
2022-06-21T16:05:24.3944392Z       ✔ supports primary key attributes with different field names where parent include is required (216ms)
2022-06-21T16:05:24.4743931Z     hasAssociations
2022-06-21T16:05:24.5831540Z       ✔ supports transactions (104ms)
2022-06-21T16:05:24.7289905Z (node:21879) [SEQUELIZE0008] DeprecationWarning: Model.scope has been renamed to Model.withScope, and Model.unscoped has been renamed to Model.withoutScope
2022-06-21T16:05:24.7324986Z       ✔ answers false if only some labels have been assigned (101ms)
2022-06-21T16:05:24.8832755Z       ✔ answers false if only some labels have been assigned when passing a primary key instead of an object (98ms)
2022-06-21T16:05:25.0411796Z       ✔ answers true if all label have been assigned (106ms)
2022-06-21T16:05:25.1818217Z       ✔ answers true if all label have been assigned when passing a primary key instead of an object (97ms)
2022-06-21T16:05:25.3296790Z       ✔ answers true for labels that have been assigned multitple times (100ms)
2022-06-21T16:05:25.4880670Z       ✔ answers true for labels that have been assigned multitple times when passing a primary key instead of an object (103ms)
2022-06-21T16:05:25.5447011Z     hasAssociations with binary key
2022-06-21T16:05:25.6325255Z       ✔ answer false for labels that have not been assigned
2022-06-21T16:05:25.6785094Z     countAssociations
2022-06-21T16:05:25.7802894Z       ✔ should count all associations
2022-06-21T16:05:25.9213128Z       ✔ should count filtered associations
2022-06-21T16:05:26.0661307Z       ✔ should count scoped associations
2022-06-21T16:05:26.2309819Z       ✔ should count scoped through associations
2022-06-21T16:05:26.2779056Z     setAssociations
2022-06-21T16:05:26.3857417Z       ✔ clears associations when passing null to the set-method (106ms)
2022-06-21T16:05:26.5953517Z       ✔ should be able to set twice with custom primary keys (161ms)
2022-06-21T16:05:26.7591410Z       ✔ joins an association with custom primary keys (114ms)
2022-06-21T16:05:26.9154356Z       ✔ supports passing the primary key instead of an object (105ms)
2022-06-21T16:05:27.1058907Z       ✔ using scope to set associations (140ms)
2022-06-21T16:05:27.2898506Z       ✔ updating association via set associations with scope (131ms)
2022-06-21T16:05:27.4488207Z       ✔ should catch EmptyResultError when rejectOnEmpty is set (98ms)
2022-06-21T16:05:27.4977925Z     createAssociations
2022-06-21T16:05:27.6287780Z       ✔ creates a new associated object (129ms)
2022-06-21T16:05:27.9459142Z       ✔ supports transactions (204ms)
2022-06-21T16:05:28.2447945Z       ✔ supports setting through table attributes (180ms)
2022-06-21T16:05:28.4019411Z       ✔ supports using the field parameter (106ms)
2022-06-21T16:05:28.4474885Z     addAssociations
2022-06-21T16:05:28.5558169Z       ✔ supports both single instance and array (106ms)
2022-06-21T16:05:28.7118128Z       ✔ supports transactions (106ms)
2022-06-21T16:05:28.8664050Z       ✔ supports transactions when updating a through model (106ms)
2022-06-21T16:05:29.0296992Z       ✔ supports passing the primary key instead of an object (116ms)
2022-06-21T16:05:29.1640491Z       ✔ should not pass indexes to the join table (89ms)
2022-06-21T16:05:29.3181188Z       ✔ should catch EmptyResultError when rejectOnEmpty is set (107ms)
2022-06-21T16:05:29.3660873Z     addMultipleAssociations
2022-06-21T16:05:29.4782108Z       ✔ supports both single instance and array (109ms)
2022-06-21T16:05:29.6325378Z       ✔ adds associations without removing the current ones (109ms)
2022-06-21T16:05:29.6760356Z     through model validations
2022-06-21T16:05:29.7852165Z       ✔ runs on add
2022-06-21T16:05:29.9336178Z       ✔ runs on set
2022-06-21T16:05:30.0642565Z       ✔ runs on create
2022-06-21T16:05:30.1107665Z     optimizations using bulk create, destroy and update
2022-06-21T16:05:30.2087651Z       ✔ uses one insert into statement
2022-06-21T16:05:30.3507097Z       ✔ uses one delete from statement
2022-06-21T16:05:30.3979671Z     join table creation
2022-06-21T16:05:30.7048784Z       ✔ should work with non integer primary keys (209ms)
2022-06-21T16:05:30.8776275Z       ✔ makes join table non-paranoid by default
2022-06-21T16:05:30.9967704Z       ✔ should allow creation of a paranoid join table
2022-06-21T16:05:31.0394019Z     foreign keys
2022-06-21T16:05:31.0445531Z       ✔ generates camelCase foreign keys if underscored is not set on the through model
2022-06-21T16:05:31.0511458Z       ✔ generates snake_case foreign keys if underscored is set on the through model
2022-06-21T16:05:31.0575283Z       ✔ should infer otherKey from paired BTM relationship with a through string defined
2022-06-21T16:05:31.0612578Z     foreign key with fields specified
2022-06-21T16:05:31.1879873Z       ✔ should correctly get associations even after a child instance is deleted (121ms)
2022-06-21T16:05:31.3532582Z       ✔ should correctly get associations when doubly linked (107ms)
2022-06-21T16:05:31.6188569Z       ✔ should be able to handle nested includes properly (207ms)
2022-06-21T16:05:31.7027914Z     primary key handling for join table
2022-06-21T16:05:31.7080832Z       ✔ removes the primary key if it was added by sequelize
2022-06-21T16:05:31.7215821Z       ✔ keeps the primary key if it was added by the user
2022-06-21T16:05:31.7238808Z       without sync
2022-06-21T16:05:31.7859665Z         ✔ removes all associations
2022-06-21T16:05:31.8278830Z     through
2022-06-21T16:05:31.8279510Z       paranoid
2022-06-21T16:05:31.9296689Z         ✔ gets only non-deleted records by default
2022-06-21T16:05:32.0684523Z         ✔ returns both deleted and non-deleted records with paranoid=false
2022-06-21T16:05:32.2090697Z         ✔ hasAssociation also respects paranoid option
2022-06-21T16:05:32.2766469Z       fetching from join table
2022-06-21T16:05:32.3823310Z         ✔ should contain the data from the join table on .UserProjects a DAO
2022-06-21T16:05:32.5209226Z         ✔ should be able to alias the default name of the join table
2022-06-21T16:05:32.6495059Z         ✔ should be able to limit the join table attributes returned
2022-06-21T16:05:32.6975322Z       inserting in join table
2022-06-21T16:05:32.6975870Z         add
2022-06-21T16:05:32.7980891Z           ✔ should insert data provided on the object into the join table
2022-06-21T16:05:32.9284085Z           ✔ should insert data provided as a second argument into the join table
2022-06-21T16:05:33.2279116Z           ✔ should be able to add twice (second call result in UPDATE call) without any attributes (and timestamps off) on the through model (204ms)
2022-06-21T16:05:33.5969679Z           ✔ should be able to add twice (second call result in UPDATE call) with custom primary keys and without any attributes (and timestamps off) on the through model (203ms)
2022-06-21T16:05:33.9933701Z           ✔ should be able to create an instance along with its many-to-many association which has an extra column in the junction table (209ms)
2022-06-21T16:05:34.0709666Z         set
2022-06-21T16:05:34.1616727Z           ✔ should be able to combine properties on the associated objects, and default values
2022-06-21T16:05:34.4783857Z           ✔ should be able to set twice (second call result in UPDATE calls) without any attributes (and timestamps off) on the through model (195ms)
2022-06-21T16:05:34.5465725Z         query with through.where
2022-06-21T16:05:34.6404469Z           ✔ should support query the through model
2022-06-21T16:05:34.6867553Z       removing from the join table
2022-06-21T16:05:34.8090080Z         ✔ should remove a single entry without any attributes (and timestamps off) on the through model (120ms)
2022-06-21T16:05:34.9526125Z         ✔ should remove multiple entries without any attributes (and timestamps off) on the through model (96ms)
2022-06-21T16:05:35.0003455Z     alias
2022-06-21T16:05:35.0962098Z       ✔ creates the join table when through is a string (93ms)
2022-06-21T16:05:35.2362460Z       ✔ creates the join table when through is a model (89ms)
2022-06-21T16:05:35.2881597Z       ✔ correctly identifies its counterpart when through is a string
2022-06-21T16:05:35.2957553Z       ✔ correctly identifies its counterpart when through is a model
2022-06-21T16:05:35.2977621Z     multiple hasMany
2022-06-21T16:05:35.2978961Z       project has owners and users and owners and users have projects
2022-06-21T16:05:35.4455442Z         ✔ correctly sets user and owner
2022-06-21T16:05:35.5094568Z     Foreign key constraints
2022-06-21T16:05:35.6297021Z       ✔ can cascade deletes both ways by default (117ms)
2022-06-21T16:05:35.7743374Z       ✔ can restrict deletes both ways (94ms)
2022-06-21T16:05:35.9667917Z       ✔ can cascade and restrict deletes (121ms)
2022-06-21T16:05:36.0892777Z       ✔ should be possible to remove all constraints (79ms)
2022-06-21T16:05:36.1312953Z (sequelize) Warning: Db2 does not support 'INTEGER' with options. Plain 'INTEGER' will be used instead. 
2022-06-21T16:05:36.1313920Z >> Check: https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html
2022-06-21T16:05:36.2355700Z       ✔ create custom unique identifier (105ms)
2022-06-21T16:05:36.2961004Z     Association options
2022-06-21T16:05:36.2995390Z       ✔ should throw an error if foreignKey and as result in a name clash
2022-06-21T16:05:36.3015638Z       allows the user to provide an attribute definition object as foreignKey
2022-06-21T16:05:36.3066719Z         ✔ works when taking a column directly from the object
2022-06-21T16:05:36.3087016Z     thisAssociations
2022-06-21T16:05:36.3971316Z       ✔ should work with this reference (86ms)
2022-06-21T16:05:36.5693511Z       ✔ should work with custom this reference (131ms)
2022-06-21T16:05:36.6226834Z     Eager loading
2022-06-21T16:05:36.7382499Z       ✔ should load with an alias (110ms)
2022-06-21T16:05:36.9012835Z       ✔ should load all (106ms)
2022-06-21T16:05:36.9470545Z 
2022-06-21T16:05:36.9474480Z   [DB2] BelongsTo
2022-06-21T16:05:36.9477930Z     Model.associations
2022-06-21T16:05:36.9521570Z       ✔ should store all associations when associating to the same table multiple times
2022-06-21T16:05:36.9545057Z     get
2022-06-21T16:05:36.9545519Z       multiple
2022-06-21T16:05:37.0175908Z         ✔ should fetch associations for multiple instances (61ms)
2022-06-21T16:05:37.0521139Z     getAssociation
2022-06-21T16:05:37.1226618Z       ✔ supports transactions (68ms)
2022-06-21T16:05:37.2380083Z       ✔ should be able to handle a where object that's a first class citizen. (60ms)
2022-06-21T16:05:37.4216195Z       ✔ supports schemas (139ms)
2022-06-21T16:05:37.5274517Z       ✔ supports schemas when defining custom foreign key attribute #9029 (102ms)
2022-06-21T16:05:37.5296115Z     setAssociation
2022-06-21T16:05:37.5986887Z       ✔ supports transactions (67ms)
2022-06-21T16:05:37.7085489Z       ✔ can set the association with declared primary keys... (71ms)
2022-06-21T16:05:37.8097002Z       ✔ clears the association if null is passed (65ms)
2022-06-21T16:05:37.9266800Z       ✔ should throw a ForeignKeyConstraintError if the associated record does not exist (74ms)
2022-06-21T16:05:38.0168662Z       ✔ supports passing the primary key instead of an object (56ms)
2022-06-21T16:05:38.1057605Z       ✔ should support logging (56ms)
2022-06-21T16:05:38.1970307Z       ✔ should not clobber atributes (56ms)
2022-06-21T16:05:38.3094913Z       ✔ should set the foreign key value without saving when using save: false (62ms)
2022-06-21T16:05:38.4154688Z       ✔ supports setting same association twice (68ms)
2022-06-21T16:05:38.4559482Z     createAssociation
2022-06-21T16:05:38.5312654Z       ✔ creates an associated model instance (73ms)
2022-06-21T16:05:38.6399224Z       ✔ supports transactions (66ms)
2022-06-21T16:05:38.6921673Z     foreign key
2022-06-21T16:05:38.6959330Z       ✔ should setup underscored field with foreign keys when using underscored
2022-06-21T16:05:38.7009914Z       ✔ should use model name when using camelcase
2022-06-21T16:05:38.7685248Z       ✔ should support specifying the field of a foreign key (64ms)
2022-06-21T16:05:38.9673090Z       ✔ should set foreignKey on foreign table (151ms)
2022-06-21T16:05:39.0338637Z     foreign key constraints
2022-06-21T16:05:39.0995030Z       ✔ are enabled by default (64ms)
2022-06-21T16:05:39.2061020Z       ✔ should be possible to disable them (58ms)
2022-06-21T16:05:39.3199305Z       ✔ can cascade deletes (72ms)
2022-06-21T16:05:39.4301690Z       ✔ can restrict deletes (72ms)
2022-06-21T16:05:39.5320308Z       ✔ can restrict updates (60ms)
2022-06-21T16:05:39.5691925Z     association column
2022-06-21T16:05:39.6344361Z       ✔ has correct type and name for non-id primary keys with non-integer type (63ms)
2022-06-21T16:05:39.7398240Z       ✔ should support a non-primary key as the association column on a target without a primary key (62ms)
2022-06-21T16:05:39.8676717Z       ✔ should support a non-primary unique key as the association column (91ms)
2022-06-21T16:05:39.9637720Z       ✔ should support a non-primary key as the association column with a field option (63ms)
2022-06-21T16:05:40.0603657Z       ✔ should support a non-primary key as the association column in a table with a composite primary key (64ms)
2022-06-21T16:05:40.1123821Z     association options
2022-06-21T16:05:40.2121427Z       ✔ can specify data type for auto-generated relational keys (97ms)
2022-06-21T16:05:40.2698958Z       allows the user to provide an attribute definition object as foreignKey
2022-06-21T16:05:40.2733897Z         ✔ works with a column that hasnt been defined before
2022-06-21T16:05:40.2798042Z         ✔ works when taking a column directly from the object
2022-06-21T16:05:40.2851793Z         ✔ works when merging with an existing definition
2022-06-21T16:05:40.2874865Z     Eager loading
2022-06-21T16:05:40.3588503Z       ✔ should load with an alias (68ms)
2022-06-21T16:05:40.4658421Z       ✔ should load all (61ms)
2022-06-21T16:05:40.5009676Z 
2022-06-21T16:05:40.5014069Z   [DB2] HasMany
2022-06-21T16:05:40.5017248Z     Model.associations
2022-06-21T16:05:40.5066777Z       ✔ should store all assocations when associting to the same table multiple times
2022-06-21T16:05:40.5090714Z     count
2022-06-21T16:05:40.5966274Z       ✔ should not fail due to ambiguous field (85ms)
2022-06-21T16:05:40.6385053Z     get
2022-06-21T16:05:40.6386359Z       multiple
2022-06-21T16:05:40.7150396Z         ✔ should fetch associations for multiple instances (74ms)
2022-06-21T16:05:40.8277501Z         ✔ should fetch associations for multiple instances with limit and order (76ms)
2022-06-21T16:05:41.0293357Z         ✔ should fetch multiple layers of associations with limit and order with separate=true (156ms)
2022-06-21T16:05:41.2078199Z         ✔ should fetch associations for multiple instances with limit and order and a belongsTo relation (127ms)
2022-06-21T16:05:41.5326025Z         ✔ supports schemas (275ms)
2022-06-21T16:05:41.5349468Z     (1:N)
2022-06-21T16:05:41.6160603Z       ✔ clears associations when passing null to the set-method with omitNull set to true (79ms)
2022-06-21T16:05:41.6529912Z       hasAssociation
2022-06-21T16:05:41.7396617Z         ✔ should only generate one set of foreignKeys
2022-06-21T16:05:41.9137886Z         ✔ supports transactions (80ms)
2022-06-21T16:05:42.0035454Z         ✔ does not have any labels assigned to it initially
2022-06-21T16:05:42.1020496Z         ✔ answers true if the label has been assigned
2022-06-21T16:05:42.1975967Z         ✔ answers correctly if the label has been assigned when passing a primary key instead of an object
2022-06-21T16:05:42.2317194Z       hasAssociations
2022-06-21T16:05:42.3600349Z         ✔ supports transactions (76ms)
2022-06-21T16:05:42.4676460Z         ✔ answers false if only some labels have been assigned
2022-06-21T16:05:42.5670803Z         ✔ answers false if only some labels have been assigned when passing a primary key instead of an object
2022-06-21T16:05:42.6795331Z         ✔ answers true if all label have been assigned
2022-06-21T16:05:42.7795511Z         ✔ answers true if all label have been assigned when passing a primary key instead of an object
2022-06-21T16:05:42.8187678Z       setAssociations
2022-06-21T16:05:42.8782222Z         ✔ supports transactions (57ms)
2022-06-21T16:05:42.9815294Z         ✔ clears associations when passing null to the set-method (67ms)
2022-06-21T16:05:43.0966459Z         ✔ supports passing the primary key instead of an object (81ms)
2022-06-21T16:05:43.1328555Z       addAssociations
2022-06-21T16:05:43.1884529Z         ✔ supports transactions (53ms)
2022-06-21T16:05:43.2749528Z         ✔ supports passing the primary key instead of an object (49ms)
2022-06-21T16:05:43.3060782Z       addMultipleAssociations
2022-06-21T16:05:43.4042611Z         ✔ adds associations without removing the current ones (96ms)
2022-06-21T16:05:43.6887911Z         ✔ handles decent sized bulk creates (249ms)
2022-06-21T16:05:43.7381371Z       createAssociations
2022-06-21T16:05:43.7934084Z         ✔ creates a new associated object (53ms)
2022-06-21T16:05:43.8819000Z         ✔ creates the object with the association directly (53ms)
2022-06-21T16:05:43.9775625Z         ✔ supports transactions (60ms)
2022-06-21T16:05:44.0650390Z         ✔ supports passing the field option (50ms)
2022-06-21T16:05:44.0996563Z       getting assocations with options
2022-06-21T16:05:44.2825321Z         ✔ should treat the where object of associations as a first class citizen (123ms)
2022-06-21T16:05:44.4024792Z         ✔ gets all associated objects when no options are passed
2022-06-21T16:05:44.5132629Z         ✔ only get objects that fulfill the options
2022-06-21T16:05:44.5483649Z       countAssociations
2022-06-21T16:05:44.6186252Z         ✔ should count all associations
2022-06-21T16:05:44.7197312Z         ✔ should count filtered associations
2022-06-21T16:05:44.8191244Z         ✔ should count scoped associations
2022-06-21T16:05:44.8533720Z       thisAssociations
2022-06-21T16:05:44.8740460Z         ✔ should work with alias
2022-06-21T16:05:44.9017531Z     foreign key constraints
2022-06-21T16:05:44.9018084Z       1:m
2022-06-21T16:05:44.9714042Z         ✔ sets null by default (68ms)
2022-06-21T16:05:45.0550148Z         ✔ sets to CASCADE if allowNull: false (52ms)
2022-06-21T16:05:45.1510312Z         ✔ should be possible to remove all constraints (57ms)
2022-06-21T16:05:45.2484523Z         ✔ can cascade deletes (63ms)
2022-06-21T16:05:45.3550734Z         ✔ can restrict deletes (65ms)
2022-06-21T16:05:45.4816987Z         ✔ can restrict updates (71ms)
2022-06-21T16:05:45.5176080Z     Association options
2022-06-21T16:05:45.5211809Z       ✔ should setup underscored field with foreign keys when using underscored
2022-06-21T16:05:45.5276546Z       ✔ should use model name when using camelcase
2022-06-21T16:05:45.5847675Z       ✔ can specify data type for auto-generated relational keys (53ms)
2022-06-21T16:05:45.6835860Z       ✔ infers the foreignKey.type if none provided (52ms)
2022-06-21T16:05:45.7241603Z       ✔ should throw an error if foreignKey and as result in a name clash
2022-06-21T16:05:45.8384231Z (node:21879) [SEQUELIZE0005] DeprecationWarning: Passing a double nested nested array to `group` is unsupported and will be removed in v6.
2022-06-21T16:05:45.8463825Z       ✔ should ignore group from ancestor on deep separated query (119ms)
2022-06-21T16:05:45.8982822Z       allows the user to provide an attribute definition object as foreignKey
2022-06-21T16:05:45.9016756Z         ✔ works with a column that hasnt been defined before
2022-06-21T16:05:45.9118694Z         ✔ works when taking a column directly from the object
2022-06-21T16:05:45.9204270Z         ✔ works when merging with an existing definition
2022-06-21T16:05:45.9240618Z     sourceKey
2022-06-21T16:05:45.9945189Z       ✔ should use sourceKey
2022-06-21T16:05:46.0976457Z       ✔ should count related records
2022-06-21T16:05:46.2181892Z       ✔ should set right field when add relative
2022-06-21T16:05:46.3383617Z       ✔ should create with nested associated models
2022-06-21T16:05:46.5625711Z       ✔ should create nested associations with symmetric getters/setters on FK (129ms)
2022-06-21T16:05:46.6213340Z     sourceKey with where clause in include
2022-06-21T16:05:46.6959953Z       ✔ should use the specified sourceKey instead of the primary key
2022-06-21T16:05:46.7322811Z     Eager loading
2022-06-21T16:05:46.8182254Z       ✔ should load with an alias (83ms)
2022-06-21T16:05:46.9492810Z       ✔ should load all (59ms)
2022-06-21T16:05:46.9797663Z 
2022-06-21T16:05:46.9801549Z   [DB2] HasOne
2022-06-21T16:05:46.9805046Z     get
2022-06-21T16:05:46.9806924Z       multiple
2022-06-21T16:05:47.0494890Z         ✔ should fetch associations for multiple instances (67ms)
2022-06-21T16:05:47.0841737Z     getAssociation
2022-06-21T16:05:47.1545996Z       ✔ supports transactions (68ms)
2022-06-21T16:05:47.2618036Z       ✔ should be able to handle a where object that's a first class citizen. (59ms)
2022-06-21T16:05:47.4345346Z       ✔ supports schemas (136ms)
2022-06-21T16:05:47.4366852Z     setAssociation
2022-06-21T16:05:47.5109928Z       ✔ supports transactions (72ms)
2022-06-21T16:05:47.6138419Z       ✔ can set an association with predefined primary keys (66ms)
2022-06-21T16:05:47.7226893Z       ✔ clears the association if null is passed (62ms)
2022-06-21T16:05:47.8170069Z       ✔ should throw a ForeignKeyConstraintError if the associated record does not exist (51ms)
2022-06-21T16:05:47.9203099Z       ✔ supports passing the primary key instead of an object (66ms)
2022-06-21T16:05:48.0254950Z       ✔ supports updating with a primary key instead of an object (68ms)
2022-06-21T16:05:48.1291111Z       ✔ supports setting same association twice (66ms)
2022-06-21T16:05:48.1832451Z     createAssociation
2022-06-21T16:05:48.2462229Z       ✔ creates an associated model instance (61ms)
2022-06-21T16:05:48.3393361Z       ✔ supports transactions (57ms)
2022-06-21T16:05:48.3752357Z     foreign key
2022-06-21T16:05:48.3788532Z       ✔ should setup underscored field with foreign keys when using underscored
2022-06-21T16:05:48.3842153Z       ✔ should use model name when using camelcase
2022-06-21T16:05:48.4643908Z       ✔ should support specifying the field of a foreign key (77ms)
2022-06-21T16:05:48.5510849Z       ✔ should support custom primary key field name in sub queries (49ms)
2022-06-21T16:05:48.5882118Z     foreign key constraints
2022-06-21T16:05:48.6546581Z       ✔ are enabled by default (64ms)
2022-06-21T16:05:48.7477644Z       ✔ should be possible to disable them (53ms)
2022-06-21T16:05:48.8515100Z       ✔ can cascade deletes (62ms)
2022-06-21T16:05:48.9392464Z       ✔ works when cascading a delete with hooks but there is no associate (i.e. "has zero") (52ms)
2022-06-21T16:05:49.0340547Z       ✔ can restrict deletes (54ms)
2022-06-21T16:05:49.1424106Z       ✔ can restrict updates (73ms)
2022-06-21T16:05:49.1777543Z     association column
2022-06-21T16:05:49.2446820Z       ✔ has correct type for non-id primary keys with non-integer type (65ms)
2022-06-21T16:05:49.3526626Z       ✔ should support a non-primary key as the association column on a target with custom primary key (66ms)
2022-06-21T16:05:49.4503467Z       ✔ should support a non-primary unique key as the association column (61ms)
2022-06-21T16:05:49.5517554Z       ✔ should support a non-primary unique key as the association column with a field option (66ms)
2022-06-21T16:05:49.5920477Z     Association options
2022-06-21T16:05:49.6528460Z       ✔ can specify data type for autogenerated relational keys (58ms)
2022-06-21T16:05:49.7021991Z     Counter part
2022-06-21T16:05:49.7022583Z       BelongsTo
2022-06-21T16:05:49.7109522Z         ✔ should only generate one foreign key
2022-06-21T16:05:49.7129458Z     Eager loading
2022-06-21T16:05:49.7789672Z       ✔ should load with an alias (63ms)
2022-06-21T16:05:49.8784810Z       ✔ should load all (61ms)
2022-06-21T16:05:49.9099741Z 
2022-06-21T16:05:49.9102973Z   [DB2] Multiple Level Filters
2022-06-21T16:05:50.0152453Z     ✔ can filter through belongsTo (103ms)
2022-06-21T16:05:50.1395012Z     ✔ avoids duplicated tables in query (79ms)
2022-06-21T16:05:50.2601744Z     ✔ can filter through hasMany (78ms)
2022-06-21T16:05:50.4275889Z     ✔ can filter through hasMany connector (121ms)
2022-06-21T16:05:50.4855537Z 
2022-06-21T16:05:50.4856203Z   [DB2] associations
2022-06-21T16:05:50.4856682Z     scope
2022-06-21T16:05:50.4858112Z       1:1
2022-06-21T16:05:50.6207964Z         ✔ should create, find and include associations with scope values (129ms)
2022-06-21T16:05:50.8118575Z         ✔ should create included association with scope values (123ms)
2022-06-21T16:05:50.8606182Z       1:M
2022-06-21T16:05:50.9808990Z         ✔ should create, find and include associations with scope values (114ms)
2022-06-21T16:05:51.1129577Z         ✔ should make the same query if called multiple time (#4470) (81ms)
2022-06-21T16:05:51.2587374Z         ✔ should created included association with scope values (93ms)
2022-06-21T16:05:51.4099815Z         ✔ should include associations with operator scope values (92ms)
2022-06-21T16:05:51.5486675Z         ✔ should not mutate scope when running SELECT query (#12868) (83ms)
2022-06-21T16:05:51.6024792Z       N:M
2022-06-21T16:05:51.6028171Z         on the target
2022-06-21T16:05:51.8169806Z           ✔ should create, find and include associations with scope values (62ms)
2022-06-21T16:05:51.8835203Z         on the through model
2022-06-21T16:05:52.0404429Z           ✔ should create, find and include associations with scope values (147ms)
2022-06-21T16:05:52.1153607Z 
2022-06-21T16:05:52.1156784Z   [DB2] Self
2022-06-21T16:05:52.1471462Z     ✔ supports freezeTableName
2022-06-21T16:05:52.2189302Z     ✔ can handle 1:m associations (40ms)
2022-06-21T16:05:52.4173474Z     ✔ can handle n:m associations (166ms)
2022-06-21T16:05:52.5463272Z     ✔ can handle n:m associations with pre-defined through table (90ms)
2022-06-21T16:05:52.5860114Z 
2022-06-21T16:05:52.5863812Z   [DB2] CLS (Async hooks)
2022-06-21T16:05:52.6187247Z     ✔ CLS namespace is stored in Sequelize._cls
2022-06-21T16:05:52.6790894Z     ✔ promises returned by sequelize.query are correctly patched
2022-06-21T16:05:53.2403010Z     ✔ custom logging with benchmarking has correct CLS context (505ms)
2022-06-21T16:05:53.2741809Z     context
2022-06-21T16:05:53.3085865Z       ✔ does not use continuation storage on manually managed transactions
2022-06-21T16:05:53.3723310Z       ✔ supports several concurrent transactions
2022-06-21T16:05:53.4469316Z       ✔ supports nested promise chains
2022-06-21T16:05:54.0024837Z       ✔ does not leak variables to the outer scope (502ms)
2022-06-21T16:05:54.0578593Z       ✔ does not leak variables to the following promise chain
2022-06-21T16:05:54.1170886Z       ✔ does not leak outside findOrCreate
2022-06-21T16:05:54.1429631Z     sequelize.query integration
2022-06-21T16:05:54.1829717Z       ✔ automagically uses the transaction in all calls
2022-06-21T16:05:54.2404005Z       ✔ automagically uses the transaction in all calls with async/await
2022-06-21T16:05:54.2779144Z     Model Hook integration
2022-06-21T16:05:54.3097764Z       ✔ passes the transaction to hooks {beforeBulkCreate,beforeCreate,afterCreate,afterBulkCreate} when calling Model.bulkCreate
2022-06-21T16:05:54.3667607Z       ✔ passes the transaction to hooks {beforeFind,beforeFindAfterExpandIncludeAll,beforeFindAfterOptions} when calling Model.findAll
2022-06-21T16:05:54.4249543Z       ✔ passes the transaction to hooks {afterFind} when calling Model.findAll
2022-06-21T16:05:54.4778410Z       ✔ passes the transaction to hooks {beforeCount} when calling Model.count
2022-06-21T16:05:54.5328548Z       1) passes the transaction to hooks {beforeUpsert,afterUpsert} when calling Model.upsert
2022-06-21T16:05:54.5916557Z       ✔ passes the transaction to hooks {beforeBulkDestroy,afterBulkDestroy} when calling Model.destroy
2022-06-21T16:05:54.7291221Z       ✔ passes the transaction to hooks {beforeDestroy,beforeDestroy} when calling Model.destroy with individualHooks
2022-06-21T16:05:54.7867956Z       ✔ passes the transaction to hooks {beforeDestroy,beforeDestroy} when calling Model#destroy
2022-06-21T16:05:54.8440987Z       ✔ passes the transaction to hooks {beforeBulkUpdate,afterBulkUpdate} when calling Model.update
2022-06-21T16:05:54.9046649Z       ✔ passes the transaction to hooks {beforeUpdate,afterUpdate} when calling Model.update with individualHooks
2022-06-21T16:05:54.9784141Z       ✔ passes the transaction to hooks {beforeCreate,afterCreate} when calling Model#save (isNewRecord)
2022-06-21T16:05:55.0376492Z       ✔ passes the transaction to hooks {beforeUpdate,afterUpdate} when calling Model#save (!isNewRecord)
2022-06-21T16:05:55.0628647Z       paranoid restore
2022-06-21T16:05:55.0870688Z (node:21879) [SEQUELIZE0010] DeprecationWarning: Accessing DataTypes on the Sequelize constructor is deprecated. Use the DataTypes object instead.
2022-06-21T16:05:55.0871748Z e.g, instead of using Sequelize.STRING, use DataTypes.STRING
2022-06-21T16:05:55.1108867Z         ✔ passes the transaction to hooks {beforeBulkRestore,afterBulkRestore} when calling Model.restore
2022-06-21T16:05:55.2021107Z         ✔ passes the transaction to hooks {beforeRestore,afterRestore} when calling Model.restore with individualHooks
2022-06-21T16:05:55.2810970Z         ✔ passes the transaction to hooks {beforeRestore,afterRestore} when calling Model#restore
2022-06-21T16:05:55.3452168Z 
2022-06-21T16:05:55.3455112Z   [DB2] Configuration
2022-06-21T16:05:55.3462274Z     Connections problems should fail with a nice message
2022-06-21T16:05:55.3517642Z       ✔ when we don't have the correct login information
2022-06-21T16:05:55.3561869Z       ✔ when we don't have a valid dialect.
2022-06-21T16:05:55.3580881Z 
2022-06-21T16:05:55.3581244Z   [DB2] DataTypes
2022-06-21T16:05:55.3896539Z     ✔ allows me to return values from a custom parse function
2022-06-21T16:05:55.4447828Z     ✔ calls parse and stringify for DATE
2022-06-21T16:05:55.5159162Z     ✔ calls parse and stringify for DATEONLY
2022-06-21T16:05:55.5748463Z     ✔ calls parse and stringify for TIME
2022-06-21T16:05:55.6435619Z     ✔ calls parse and stringify for BLOB
2022-06-21T16:05:55.7018691Z     ✔ calls parse and stringify for CHAR
2022-06-21T16:05:55.7596347Z     ✔ calls parse and stringify/bindParam for STRING
2022-06-21T16:05:55.7937232Z (sequelize) Warning: Db2 does not support TEXT datatype. VARCHAR(32672) will be used instead. 
2022-06-21T16:05:55.7937877Z >> Check: https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html
2022-06-21T16:05:55.8226846Z     ✔ calls parse and stringify for TEXT
2022-06-21T16:05:55.8783110Z     ✔ calls parse and stringify for BOOLEAN
2022-06-21T16:05:55.9338020Z     ✔ calls parse and stringify for INTEGER
2022-06-21T16:05:55.9945684Z     ✔ calls parse and stringify for DECIMAL
2022-06-21T16:05:56.0475298Z     ✔ calls parse and stringify for BIGINT
2022-06-21T16:05:56.0964084Z     ✔ should handle JS BigInt type
2022-06-21T16:05:56.1525991Z     ✔ calls parse and bindParam for DOUBLE
2022-06-21T16:05:56.2079596Z     ✔ calls parse and bindParam for FLOAT
2022-06-21T16:05:56.2650766Z     ✔ calls parse and bindParam for REAL
2022-06-21T16:05:56.3305144Z     ✔ calls parse and stringify for UUID
2022-06-21T16:05:56.3639654Z     ✔ calls parse and stringify for CIDR
2022-06-21T16:05:56.3686999Z     ✔ calls parse and stringify for INET
2022-06-21T16:05:56.3731512Z     ✔ calls parse and stringify for CITEXT
2022-06-21T16:05:56.3774152Z     ✔ calls parse and stringify for MACADDR
2022-06-21T16:05:56.4131487Z     ✔ calls parse and stringify for ENUM
2022-06-21T16:05:56.4685226Z     ✔ should allow spaces in ENUM
2022-06-21T16:05:56.5412513Z     ✔ should return YYYY-MM-DD format string for DATEONLY (39ms)
2022-06-21T16:05:56.5984493Z     ✔ should return set DATEONLY field to NULL correctly
2022-06-21T16:05:56.6606365Z     ✔ should be able to cast buffer as boolean
2022-06-21T16:05:56.6907437Z 
2022-06-21T16:05:56.6910792Z   [DB2] Connection Manager
2022-06-21T16:05:56.6943921Z     ✔ does not initialize a readOnly pool without replication
2022-06-21T16:05:56.6996567Z     ✔ initializes a readOnly pool with replication
2022-06-21T16:05:56.7068314Z     ✔ should round robin calls to the read pool
2022-06-21T16:05:56.7135456Z     ✔ should trigger deprecation for non supported engine version
2022-06-21T16:05:56.7238932Z     ✔ should allow forced reads from the write pool
2022-06-21T16:05:56.7289922Z     ✔ should clear the pool after draining it
2022-06-21T16:05:56.7310609Z 
2022-06-21T16:05:56.7311577Z   [DB2] Sequelize Errors
2022-06-21T16:05:56.7312405Z     API Surface
2022-06-21T16:05:56.7334745Z       ✔ Should have the Error constructors exposed
2022-06-21T16:05:56.7380719Z       ✔ Sequelize Errors instances should be instances of Error
2022-06-21T16:05:56.7427038Z       ✔ SequelizeValidationError should find errors by path
2022-06-21T16:05:56.7468968Z       ✔ SequelizeValidationError should override message property when message parameter is specified
2022-06-21T16:05:56.7512887Z       ✔ SequelizeValidationError should concatenate an error messages from given errors if no explicit message is defined
2022-06-21T16:05:56.7562325Z       ✔ SequelizeValidationErrorItem does not require instance & validator constructor parameters
2022-06-21T16:05:56.7603837Z       ✔ SequelizeValidationErrorItem should have instance, key & validator properties when given to constructor
2022-06-21T16:05:56.7646853Z       ✔ SequelizeValidationErrorItem.getValidatorKey() should return a string
2022-06-21T16:05:56.7698780Z       ✔ SequelizeValidationErrorItem.getValidatorKey() should throw if namespace separator is invalid (only if NS is used & available)
2022-06-21T16:05:56.7743782Z       ✔ SequelizeValidationErrorItem should map deprecated "type" values to new "origin" values
2022-06-21T16:05:56.7786231Z       ✔ SequelizeValidationErrorItemOrigin is valid
2022-06-21T16:05:56.7828654Z       ✔ SequelizeValidationErrorItem.Origins is valid
2022-06-21T16:05:56.7872681Z       ✔ SequelizeDatabaseError should keep original message
2022-06-21T16:05:56.7876701Z (node:21879) [SEQUELIZE0007] DeprecationWarning: The "parent" and "original" properties in Sequelize errors have been replaced with the native "cause" property. Use that one instead.
2022-06-21T16:05:56.7920849Z       ✔ SequelizeDatabaseError should keep the original sql and the parameters
2022-06-21T16:05:56.7965653Z       ✔ ConnectionError should keep original message
2022-06-21T16:05:56.8008607Z       ✔ ConnectionRefusedError should keep original message
2022-06-21T16:05:56.8051581Z       ✔ AccessDeniedError should keep original message
2022-06-21T16:05:56.8095043Z       ✔ HostNotFoundError should keep original message
2022-06-21T16:05:56.8138456Z       ✔ HostNotReachableError should keep original message
2022-06-21T16:05:56.8184292Z       ✔ InvalidConnectionError should keep original message
2022-06-21T16:05:56.8224993Z       ✔ ConnectionTimedOutError should keep original message
2022-06-21T16:05:56.8247174Z     OptimisticLockError
2022-06-21T16:05:56.8629859Z       ✔ got correct error type and message
2022-06-21T16:05:56.8965254Z     ConstraintError
2022-06-21T16:05:56.9310904Z       ✔ Can be intercepted as UniqueConstraintError using .catch
2022-06-21T16:05:57.0183938Z       ✔ Can be intercepted as ValidationError using .catch
2022-06-21T16:05:57.0775600Z       ✔ Supports newlines in keys
2022-06-21T16:05:57.1495049Z       ✔ Works when unique keys are not defined in sequelize
2022-06-21T16:05:57.2117677Z       ✔ adds parent and sql properties
2022-06-21T16:05:57.2399677Z 
2022-06-21T16:05:57.2403321Z   [DB2] Hooks
2022-06-21T16:05:57.2406842Z     associations
2022-06-21T16:05:57.2409977Z       1:1
2022-06-21T16:05:57.2412921Z         cascade onUpdate
2022-06-21T16:05:57.3797588Z           ✔ on success
2022-06-21T16:05:57.5687321Z           ✔ on error
2022-06-21T16:05:57.6223434Z         no cascade update
2022-06-21T16:05:57.7287941Z           ✔ on success
2022-06-21T16:05:57.9080300Z           ✔ on error
2022-06-21T16:05:57.9678745Z         no cascade delete
2022-06-21T16:05:57.9682336Z           #remove
2022-06-21T16:05:58.0815944Z             ✔ with no errors
2022-06-21T16:05:58.2438407Z             ✔ with errors
2022-06-21T16:05:58.3069520Z       1:M
2022-06-21T16:05:58.3070124Z         no cascade
2022-06-21T16:05:58.3070728Z           #remove
2022-06-21T16:05:58.5060061Z             ✔ with no errors
2022-06-21T16:05:58.8465416Z             ✔ with errors
2022-06-21T16:05:58.9037530Z       M:M
2022-06-21T16:05:58.9041029Z         cascade
2022-06-21T16:05:58.9044164Z           #remove
2022-06-21T16:05:59.1343502Z             ✔ with no errors
2022-06-21T16:05:59.4115395Z             ✔ with errors
2022-06-21T16:05:59.4774675Z         no cascade
2022-06-21T16:05:59.4778124Z           #remove
2022-06-21T16:05:59.7012811Z             ✔ with no errors
2022-06-21T16:05:59.9780661Z             ✔ with errors
2022-06-21T16:06:00.0675438Z 
2022-06-21T16:06:00.0679575Z   [DB2] Hooks
2022-06-21T16:06:00.0683197Z     #bulkCreate
2022-06-21T16:06:00.0686262Z       on success
2022-06-21T16:06:00.1291338Z         ✔ should run hooks
2022-06-21T16:06:00.1664484Z       on error
2022-06-21T16:06:00.2259346Z         ✔ should return an error from before
2022-06-21T16:06:00.3178217Z         ✔ should return an error from after
2022-06-21T16:06:00.3560352Z       with the {individualHooks: true} option
2022-06-21T16:06:00.4385550Z         ✔ should run the afterCreate/beforeCreate functions for each item created successfully
2022-06-21T16:06:00.5664940Z         ✔ should run the afterCreate/beforeCreate functions for each item created with an error
2022-06-21T16:06:00.6054327Z     #bulkUpdate
2022-06-21T16:06:00.6054858Z       on success
2022-06-21T16:06:00.6724800Z         ✔ should run hooks
2022-06-21T16:06:00.7151254Z       on error
2022-06-21T16:06:00.7796896Z         ✔ should return an error from before
2022-06-21T16:06:00.8874559Z         ✔ should return an error from after
2022-06-21T16:06:00.9264085Z       with the {individualHooks: true} option
2022-06-21T16:06:01.0064274Z         ✔ should run the after/before functions for each item created successfully
2022-06-21T16:06:01.1298080Z         ✔ should run the after/before functions for each item created successfully changing some data before updating
2022-06-21T16:06:01.2476542Z         ✔ should run the after/before functions for each item created with an error
2022-06-21T16:06:01.2847445Z     #bulkDestroy
2022-06-21T16:06:01.2848006Z       on success
2022-06-21T16:06:01.3361149Z         ✔ should run hooks
2022-06-21T16:06:01.3773818Z       on error
2022-06-21T16:06:01.4335624Z         ✔ should return an error from before
2022-06-21T16:06:01.5259655Z         ✔ should return an error from after
2022-06-21T16:06:01.7304261Z       with the {individualHooks: true} option
2022-06-21T16:06:01.8267341Z         ✔ should run the after/before functions for each item created successfully
2022-06-21T16:06:01.9454659Z         ✔ should run the after/before functions for each item created with an error
2022-06-21T16:06:01.9822703Z     #bulkRestore
2022-06-21T16:06:01.9823231Z       on success
2022-06-21T16:06:02.0674155Z         ✔ should run hooks
2022-06-21T16:06:02.1103692Z       on error
2022-06-21T16:06:02.1711493Z         ✔ should return an error from before
2022-06-21T16:06:02.2744007Z         ✔ should return an error from after
2022-06-21T16:06:02.3118360Z       with the {individualHooks: true} option
2022-06-21T16:06:02.4101542Z         ✔ should run the after/before functions for each item restored successfully
2022-06-21T16:06:02.5582202Z         ✔ should run the after/before functions for each item restored with an error
2022-06-21T16:06:02.6007561Z 
2022-06-21T16:06:02.6008120Z   [DB2] Hooks
2022-06-21T16:06:02.6008746Z     #count
2022-06-21T16:06:02.6009110Z       on success
2022-06-21T16:06:02.6404892Z         ✔ hook runs
2022-06-21T16:06:02.7009993Z         ✔ beforeCount hook can change options
2022-06-21T16:06:02.7293534Z       on error
2022-06-21T16:06:02.7682400Z         ✔ in beforeCount hook returns error
2022-06-21T16:06:02.7958056Z 
2022-06-21T16:06:02.7961417Z   [DB2] Hooks
2022-06-21T16:06:02.7964698Z     #create
2022-06-21T16:06:02.9618798Z       ✔ should not trigger hooks on parent when using N:M association setters (138ms)
2022-06-21T16:06:03.0344282Z       on success
2022-06-21T16:06:03.0696105Z         ✔ should run hooks
2022-06-21T16:06:03.0931904Z       on error
2022-06-21T16:06:03.1343715Z         ✔ should return an error from before
2022-06-21T16:06:03.1894411Z         ✔ should return an error from after
2022-06-21T16:06:03.2186390Z       preserves changes to instance
2022-06-21T16:06:03.2489071Z         ✔ beforeValidate
2022-06-21T16:06:03.3084612Z         ✔ afterValidate
2022-06-21T16:06:03.3787413Z         ✔ beforeCreate
2022-06-21T16:06:03.4487834Z         ✔ beforeSave
2022-06-21T16:06:03.5090240Z         ✔ beforeSave with beforeCreate
2022-06-21T16:06:03.5356053Z 
2022-06-21T16:06:03.5359510Z   [DB2] Hooks
2022-06-21T16:06:03.5362705Z     #destroy
2022-06-21T16:06:03.5365902Z       on success
2022-06-21T16:06:03.5713792Z         ✔ should run hooks
2022-06-21T16:06:03.6036014Z       on error
2022-06-21T16:06:03.6394158Z         ✔ should return an error from before
2022-06-21T16:06:03.7534820Z         ✔ should return an error from after
2022-06-21T16:06:03.7963512Z       with paranoid mode enabled
2022-06-21T16:06:03.8501100Z         ✔ sets other changed values when soft deleting and a beforeDestroy hooks kicks in
2022-06-21T16:06:03.9472675Z         ✔ should not throw error when a beforeDestroy hook changes a virtual column
2022-06-21T16:06:03.9869276Z 
2022-06-21T16:06:03.9870820Z   [DB2] Hooks
2022-06-21T16:06:03.9872410Z     #find
2022-06-21T16:06:04.0203859Z       ✔ allow changing attributes via beforeFind #5675
2022-06-21T16:06:04.0448767Z       on success
2022-06-21T16:06:04.0808899Z         ✔ all hooks run
2022-06-21T16:06:04.1406956Z         ✔ beforeFind hook can change options
2022-06-21T16:06:04.2109675Z         ✔ beforeFindAfterExpandIncludeAll hook can change options
2022-06-21T16:06:04.2812104Z         ✔ beforeFindAfterOptions hook can change options
2022-06-21T16:06:04.3519151Z         ✔ afterFind hook can change results
2022-06-21T16:06:04.3829264Z       on error
2022-06-21T16:06:04.4181737Z         ✔ in beforeFind hook returns error
2022-06-21T16:06:04.4989851Z         ✔ in beforeFindAfterExpandIncludeAll hook returns error
2022-06-21T16:06:04.5886709Z         ✔ in beforeFindAfterOptions hook returns error
2022-06-21T16:06:04.6511948Z         ✔ in afterFind hook returns error
2022-06-21T16:06:04.6784572Z 
2022-06-21T16:06:04.6785472Z   [DB2] Hooks
2022-06-21T16:06:04.6785862Z     #define
2022-06-21T16:06:04.7147677Z       ✔ beforeDefine hook can change model name
2022-06-21T16:06:04.7732265Z       ✔ beforeDefine hook can alter options
2022-06-21T16:06:04.8336687Z       ✔ beforeDefine hook can alter attributes
2022-06-21T16:06:04.8998679Z       ✔ afterDefine hook can alter options
2022-06-21T16:06:04.9286421Z     #init
2022-06-21T16:06:04.9831859Z       ✔ beforeInit hook can alter config
2022-06-21T16:06:05.0634161Z       ✔ beforeInit hook can alter options
2022-06-21T16:06:05.1532231Z       ✔ afterInit hook can alter options
2022-06-21T16:06:05.1936053Z     passing DAO instances
2022-06-21T16:06:05.1936827Z       beforeValidate / afterValidate
2022-06-21T16:06:05.2717972Z         ✔ should pass a DAO instance to the hook
2022-06-21T16:06:05.3093698Z       beforeCreate / afterCreate
2022-06-21T16:06:05.3937546Z         ✔ should pass a DAO instance to the hook
2022-06-21T16:06:05.4318560Z       beforeDestroy / afterDestroy
2022-06-21T16:06:05.5554588Z         ✔ should pass a DAO instance to the hook
2022-06-21T16:06:05.5974053Z       beforeUpdate / afterUpdate
2022-06-21T16:06:05.7046245Z         ✔ should pass a DAO instance to the hook
2022-06-21T16:06:05.7382451Z     Model#sync
2022-06-21T16:06:05.7383055Z       on success
2022-06-21T16:06:05.7870145Z         ✔ should run hooks
2022-06-21T16:06:05.8758162Z         ✔ should not run hooks when "hooks = false" option passed
2022-06-21T16:06:05.9136552Z       on error
2022-06-21T16:06:05.9744277Z         ✔ should return an error from before
2022-06-21T16:06:06.0677928Z         ✔ should return an error from after
2022-06-21T16:06:06.1020558Z     sequelize#sync
2022-06-21T16:06:06.1020961Z       on success
2022-06-21T16:06:06.1596773Z         ✔ should run hooks
2022-06-21T16:06:06.2586804Z         ✔ should not run hooks if "hooks = false" option passed
2022-06-21T16:06:06.2941261Z       on error
2022-06-21T16:06:06.3540480Z         ✔ should return an error from before
2022-06-21T16:06:06.4490808Z         ✔ should return an error from after
2022-06-21T16:06:06.4876435Z     #removal
2022-06-21T16:06:06.5507108Z       ✔ should be able to remove by name
2022-06-21T16:06:06.6509503Z       ✔ should be able to remove by reference
2022-06-21T16:06:06.7681440Z       ✔ should be able to remove proxies
2022-06-21T16:06:06.8075155Z 
2022-06-21T16:06:06.8075675Z   [DB2] Hooks
2022-06-21T16:06:06.8076327Z     #restore
2022-06-21T16:06:06.8076884Z       on success
2022-06-21T16:06:06.8836718Z         ✔ should run hooks
2022-06-21T16:06:06.9174373Z       on error
2022-06-21T16:06:06.9721659Z         ✔ should return an error from before
2022-06-21T16:06:07.0628054Z         ✔ should return an error from after
2022-06-21T16:06:07.0972753Z 
2022-06-21T16:06:07.0973392Z   [DB2] Hooks
2022-06-21T16:06:07.0973816Z     #update
2022-06-21T16:06:07.0974241Z       on success
2022-06-21T16:06:07.1319448Z         ✔ should run hooks
2022-06-21T16:06:07.1655694Z       on error
2022-06-21T16:06:07.2024823Z         ✔ should return an error from before
2022-06-21T16:06:07.2724583Z         ✔ should return an error from after
2022-06-21T16:06:07.3027879Z       preserves changes to instance
2022-06-21T16:06:07.3412180Z         ✔ beforeValidate
2022-06-21T16:06:07.4131498Z         ✔ afterValidate
2022-06-21T16:06:07.4829660Z         ✔ beforeSave
2022-06-21T16:06:07.5525240Z         ✔ beforeSave with beforeUpdate
2022-06-21T16:06:07.5806979Z 
2022-06-21T16:06:07.5810190Z   [DB2] Hooks
2022-06-21T16:06:07.5813637Z     #upsert
2022-06-21T16:06:07.5815708Z       on success
2022-06-21T16:06:07.6215126Z         ✔ should run hooks
2022-06-21T16:06:07.6477722Z       on error
2022-06-21T16:06:07.6760633Z         ✔ should return an error from before
2022-06-21T16:06:07.7415149Z         ✔ should return an error from after
2022-06-21T16:06:07.7687423Z       preserves changes to values
2022-06-21T16:06:07.8012756Z         ✔ beforeUpsert
2022-06-21T16:06:07.8276393Z 
2022-06-21T16:06:07.8278180Z   [DB2] Hooks
2022-06-21T16:06:07.8279563Z     #validate
2022-06-21T16:06:07.8280922Z       #create
2022-06-21T16:06:07.8585758Z         ✔ should return the user
2022-06-21T16:06:07.8955291Z       #3534, hooks modifications
2022-06-21T16:06:07.9451491Z         ✔ fields modified in hooks are saved
2022-06-21T16:06:07.9858282Z       on error
2022-06-21T16:06:08.0138808Z         ✔ should emit an error from after hook
2022-06-21T16:06:08.0742693Z         ✔ should call validationFailed hook
2022-06-21T16:06:08.1242754Z         ✔ should not replace the validation error in validationFailed hook by default
2022-06-21T16:06:08.1839639Z         ✔ should replace the validation error if validationFailed hook creates a new error
2022-06-21T16:06:08.2099386Z 
2022-06-21T16:06:08.2101420Z   [DB2] Include
2022-06-21T16:06:08.2103070Z     find
2022-06-21T16:06:08.2869243Z       ✔ supports a model+alias includeable (74ms)
2022-06-21T16:06:08.3823793Z       ✔ supports an alias includeable (56ms)
2022-06-21T16:06:08.4829137Z       ✔ supports a model includeable if only one association has the model as its target (63ms)
2022-06-21T16:06:08.5232526Z       ✔ rejects a model includeable if more than one association has the model as its target
2022-06-21T16:06:08.5930884Z       ✔ supports a belongsTo association reference includeable (65ms)
2022-06-21T16:06:08.7820833Z       ✔ should support to use associations with Sequelize.col (145ms)
2022-06-21T16:06:08.8959467Z       ✔ should support a belongsTo association reference with a where (56ms)
2022-06-21T16:06:09.0120757Z       ✔ should support a empty hasOne include (61ms)
2022-06-21T16:06:09.1208011Z       ✔ should support a hasOne association reference (61ms)
2022-06-21T16:06:09.2168485Z       ✔ should support including a belongsTo association rather than a model/as pair (56ms)
2022-06-21T16:06:09.3345848Z       ✔ should support a hasMany association reference (81ms)
2022-06-21T16:06:09.4366614Z       ✔ should support a hasMany association reference with a where condition (59ms)
2022-06-21T16:06:09.5735142Z       ✔ should support a belongsToMany association reference (101ms)
2022-06-21T16:06:09.7355180Z       ✔ should support a simple nested belongsTo -> belongsTo include (107ms)
2022-06-21T16:06:09.8887847Z       ✔ should support a simple sibling set of belongsTo include (104ms)
2022-06-21T16:06:10.0221835Z       ✔ should support a simple nested hasOne -> hasOne include (88ms)
2022-06-21T16:06:10.1656519Z       ✔ should support a simple nested hasMany -> belongsTo include (100ms)
2022-06-21T16:06:10.3346506Z       ✔ should support a simple nested belongsTo -> hasMany include (113ms)
2022-06-21T16:06:10.5514006Z       ✔ should support a simple nested hasMany to hasMany include (164ms)
2022-06-21T16:06:10.9598852Z       ✔ should support an include with multiple different association types (345ms)
2022-06-21T16:06:11.1375388Z       ✔ should support specifying attributes (71ms)
2022-06-21T16:06:11.2476590Z       ✔ should support Sequelize.literal and renaming of attributes in included model attributes (71ms)
2022-06-21T16:06:11.3720951Z       ✔ should support self associated hasMany (with through) include (78ms)
2022-06-21T16:06:11.5206491Z       ✔ should support including date fields, with the correct timeszone (105ms)
2022-06-21T16:06:11.6899229Z       ✔ should support include when retrieving associated objects (117ms)
2022-06-21T16:06:11.7635273Z     where
2022-06-21T16:06:11.8384292Z       ✔ should support Sequelize.and()
2022-06-21T16:06:11.9367782Z       ✔ should support Sequelize.or()
2022-06-21T16:06:11.9682350Z     findAndCountAll
2022-06-21T16:06:12.0480301Z       ✔ should include associations to findAndCountAll (77ms)
2022-06-21T16:06:12.0841104Z     association getter
2022-06-21T16:06:12.2238459Z       ✔ should support getting an include on a N:M association getter (137ms)
2022-06-21T16:06:12.2792203Z     right join
2022-06-21T16:06:12.3345611Z       ✔ should support getting an include with a right join (53ms)
2022-06-21T16:06:12.4811570Z       ✔ should support getting an include through with a right join (110ms)
2022-06-21T16:06:12.5230395Z     nested includes
2022-06-21T16:06:12.6484054Z       ✔ should not ripple grandchild required to top level find when required of child is set to false
2022-06-21T16:06:12.8201669Z       ✔ should support eager loading associations using the name of the relation (string)
2022-06-21T16:06:12.9926290Z       ✔ should not ripple grandchild required to top level find when required of child is not given (implicitly false)
2022-06-21T16:06:13.1561990Z       ✔ should ripple grandchild required to top level find when required of child is set to true as well
2022-06-21T16:06:13.2058563Z 
2022-06-21T16:06:13.2059676Z   [DB2] Include
2022-06-21T16:06:13.2060776Z     findAll
2022-06-21T16:06:13.5021335Z       ✔ should work on a nested set of relations with a where condition in between relations (293ms)
2022-06-21T16:06:13.7577343Z       ✔ should accept nested `where` and `limit` at the same time (170ms)
2022-06-21T16:06:14.3485684Z       ✔ should support an include with multiple different association types (528ms)
2022-06-21T16:06:14.8458567Z       ✔ should support many levels of belongsTo (383ms)
2022-06-21T16:06:15.2145613Z       ✔ should support many levels of belongsTo (with a lower level having a where) (266ms)
2022-06-21T16:06:15.4640330Z       ✔ should support ordering with only belongsTo includes (154ms)
2022-06-21T16:06:15.6353695Z       ✔ should include attributes from through models (121ms)
2022-06-21T16:06:15.7712123Z       ✔ should support a required belongsTo include (84ms)
2022-06-21T16:06:15.8703958Z       ✔ should be possible to extend the on clause with a where option on a belongsTo include (62ms)
2022-06-21T16:06:15.9632242Z       ✔ should be possible to extend the on clause with a where option on a belongsTo include (60ms)
2022-06-21T16:06:16.0899125Z       ✔ should be possible to define a belongsTo include as required with child hasMany not required (94ms)
2022-06-21T16:06:16.2601130Z       ✔ should be possible to define a belongsTo include as required with child hasMany with limit (111ms)
2022-06-21T16:06:16.4230679Z       ✔ should be possible to define a belongsTo include as required with child hasMany with limit and aliases (110ms)
2022-06-21T16:06:16.5824457Z       ✔ should be possible to define a belongsTo include as required with child hasMany which is not required with limit (98ms)
2022-06-21T16:06:16.7057688Z       ✔ should be possible to extend the on clause with a where option on a hasOne include (75ms)
2022-06-21T16:06:16.8684027Z       ✔ should be possible to extend the on clause with a where option on a hasMany include with a through model (116ms)
2022-06-21T16:06:17.2872207Z       ✔ should be possible to extend the on clause with a where option on nested includes (379ms)
2022-06-21T16:06:17.4631703Z       ✔ should be possible to use limit and a where with a belongsTo include (69ms)
2022-06-21T16:06:18.1053838Z       ✔ should be possible use limit, attributes and a where on a belongsTo with additional hasMany includes (605ms)
2022-06-21T16:06:18.3195962Z       ✔ should be possible to have the primary key in attributes (83ms)
2022-06-21T16:06:18.9368717Z       ✔ should be possible to turn off the attributes for the through table (570ms)
2022-06-21T16:06:19.6016439Z       ✔ should be possible to select on columns inside a through table (533ms)
2022-06-21T16:06:20.3144572Z       ✔ should be possible to select on columns inside a through table and a limit (546ms)
2022-06-21T16:06:20.5176631Z       ✔ should be possible not to include the main id in the attributes (94ms)
2022-06-21T16:06:21.1109911Z       ✔ should be possible to use limit and a where on a hasMany with additional includes (544ms)
2022-06-21T16:06:21.9038513Z       ✔ should be possible to use limit and a where on a hasMany with a through model with additional includes (688ms)
2022-06-21T16:06:22.0923138Z       ✔ should support including date fields, with the correct timeszone (92ms)
2022-06-21T16:06:22.2551616Z       ✔ should still pull the main record(s) when an included model is not required and has where restrictions without matches (105ms)
2022-06-21T16:06:22.4052140Z       ✔ should work with paranoid, a main record where, an include where, and a limit (92ms)
2022-06-21T16:06:22.5686404Z       ✔ should work on a nested set of required 1:1 relations (102ms)
2022-06-21T16:06:22.7510517Z       ✔ should work with an empty include.where (135ms)
2022-06-21T16:06:22.8747220Z       ✔ should be able to order on the main table and a required belongsTo relation with custom tablenames and limit  (69ms)
2022-06-21T16:06:22.9997450Z       ✔ should ignore include with attributes: [] (used for aggregates) (81ms)
2022-06-21T16:06:23.1468508Z       ✔ should ignore include with attributes: [] and through: { attributes: [] } (used for aggregates) (105ms)
2022-06-21T16:06:23.2722518Z       ✔ should not add primary key when including and aggregating with raw: true (73ms)
2022-06-21T16:06:23.4861310Z       ✔ should return posts with nested include with inner join with a m:n association (172ms)
2022-06-21T16:06:23.7105274Z       ✔ should be able to generate a correct request with inner and outer join (144ms)
2022-06-21T16:06:24.3122702Z       ✔ should be able to generate a correct request for entity with 1:n and m:1 associations and limit (536ms)
2022-06-21T16:06:24.5758757Z       ✔ should allow through model to be paranoid (123ms)
2022-06-21T16:06:24.6281521Z 
2022-06-21T16:06:24.6282148Z   [DB2] Include
2022-06-21T16:06:24.6296036Z     findAndCountAll
2022-06-21T16:06:24.7400433Z       ✔ should be able to include two required models with a limit. Result rows should match limit. (107ms)
2022-06-21T16:06:24.9415358Z       ✔ should be able to include a required model. Result rows should match count (150ms)
2022-06-21T16:06:25.0639134Z       ✔ should count on a where and not use an uneeded include (57ms)
2022-06-21T16:06:25.1689245Z       ✔ should return the correct count and rows when using a required belongsTo and a limit (66ms)
2022-06-21T16:06:25.2808893Z       ✔ should return the correct count and rows when using a required belongsTo with a where condition and a limit (69ms)
2022-06-21T16:06:25.4800373Z       ✔ should correctly filter, limit and sort when multiple includes and types of associations are present. (159ms)
2022-06-21T16:06:25.6194101Z       ✔ should properly work with sequelize.function (64ms)
2022-06-21T16:06:25.6560706Z 
2022-06-21T16:06:25.6564105Z   [DB2] Include
2022-06-21T16:06:25.6567506Z     findOne
2022-06-21T16:06:25.8221598Z       ✔ should include a non required model, with conditions and two includes N:M 1:M (162ms)
2022-06-21T16:06:25.9781147Z       ✔ should work with a 1:M to M:1 relation with a where on the last include (86ms)
2022-06-21T16:06:26.0867856Z       ✔ should include a model with a where condition but no required (56ms)
2022-06-21T16:06:26.1851398Z       ✔ should include a model with a where clause when the PK field name and attribute name are different (58ms)
2022-06-21T16:06:26.3326201Z       ✔ should include a model with a through.where and required true clause when the PK field name and attribute name are different (110ms)
2022-06-21T16:06:26.4950353Z       ✔ should still pull the main record when an included model is not required and has where restrictions without matches (104ms)
2022-06-21T16:06:26.6379269Z       ✔ should support a nested include (with a where) (89ms)
2022-06-21T16:06:26.7685980Z       ✔ should support a belongsTo with the targetKey option (81ms)
2022-06-21T16:06:27.1385923Z       ✔ should support many levels of belongsTo (with a lower level having a where) (332ms)
2022-06-21T16:06:27.3036072Z       ✔ should work with combinding a where and a scope (70ms)
2022-06-21T16:06:27.3466848Z 
2022-06-21T16:06:27.3470291Z   [DB2] Include
2022-06-21T16:06:27.3474037Z     LIMIT
2022-06-21T16:06:27.8391667Z       ✔ supports many-to-many association with where clause (479ms)
2022-06-21T16:06:28.3432646Z       ✔ supports 2 levels of required many-to-many associations (354ms)
2022-06-21T16:06:28.9698301Z       ✔ supports 2 levels of required many-to-many associations with where clause (379ms)
2022-06-21T16:06:29.5220079Z       ✔ supports 2 levels of required many-to-many associations with through.where clause (414ms)
2022-06-21T16:06:30.1510616Z       ✔ supports 3 levels of required many-to-many associations with where clause (456ms)
2022-06-21T16:06:30.7050239Z       ✔ supports required many-to-many association (365ms)
2022-06-21T16:06:31.2283131Z       ✔ supports 2 required many-to-many association (381ms)
2022-06-21T16:06:31.7500096Z       ✔ supports required one-to-many association (366ms)
2022-06-21T16:06:32.2314052Z       ✔ supports required one-to-many association with where clause (338ms)
2022-06-21T16:06:32.8749727Z       ✔ supports required one-to-many association with where clause (findOne) (436ms)
2022-06-21T16:06:33.3477692Z       ✔ supports 2 levels of required one-to-many associations (344ms)
2022-06-21T16:06:33.8547808Z       ✔ supports required one-to-many association with nested required many-to-many association (358ms)
2022-06-21T16:06:34.3857091Z       ✔ supports required many-to-many association with nested required one-to-many association (390ms)
2022-06-21T16:06:34.9518724Z       ✔ supports required many-to-one association with nested many-to-many association with where clause (416ms)
2022-06-21T16:06:35.4380064Z       ✔ supports required many-to-one association with nested many-to-many association with through.where clause (359ms)
2022-06-21T16:06:35.9900916Z       ✔ supports required many-to-one association with multiple nested associations with where clause (400ms)
2022-06-21T16:06:36.4859714Z       ✔ supports required many-to-one association with nested one-to-many association with where clause (357ms)
2022-06-21T16:06:36.6263507Z 
2022-06-21T16:06:36.6264136Z   [DB2] Paranoid
2022-06-21T16:06:36.9915069Z     ✔ paranoid with timestamps: false should be ignored / not crash (195ms)
2022-06-21T16:06:37.1978358Z     ✔ test if non required is marked as false
2022-06-21T16:06:37.4389843Z     ✔ test if required is marked as true
2022-06-21T16:06:38.0335679Z     ✔ should not load paranoid, destroyed instances, with a non-paranoid parent (249ms)
2022-06-21T16:06:38.1158164Z 
2022-06-21T16:06:38.1158842Z   [DB2] Includes with schemas
2022-06-21T16:06:38.1159322Z     findAll
2022-06-21T16:06:38.6618737Z       ✔ should support an include with multiple different association types (538ms)
2022-06-21T16:06:39.0321381Z       ✔ should support many levels of belongsTo (261ms)
2022-06-21T16:06:39.2483229Z       ✔ should support ordering with only belongsTo includes (127ms)
2022-06-21T16:06:39.4369306Z       ✔ should include attributes from through models (131ms)
2022-06-21T16:06:39.5611014Z       ✔ should support a required belongsTo include (66ms)
2022-06-21T16:06:39.6734429Z       ✔ should be possible to extend the on clause with a where option on a belongsTo include (66ms)
2022-06-21T16:06:39.7790745Z       ✔ should be possible to extend the on clause with a where option on a belongsTo include (59ms)
2022-06-21T16:06:39.9328381Z       ✔ should be possible to define a belongsTo include as required with child hasMany with limit (104ms)
2022-06-21T16:06:40.1065510Z       ✔ should be possible to define a belongsTo include as required with child hasMany with limit and aliases (126ms)
2022-06-21T16:06:40.2513194Z       ✔ should be possible to define a belongsTo include as required with child hasMany which is not required with limit (94ms)
2022-06-21T16:06:40.3837739Z       ✔ should be possible to extend the on clause with a where option on a hasOne include (77ms)
2022-06-21T16:06:40.5525039Z       ✔ should be possible to extend the on clause with a where option on a hasMany include with a through model (124ms)
2022-06-21T16:06:41.0934921Z       ✔ should be possible to extend the on clause with a where option on nested includes (485ms)
2022-06-21T16:06:41.2706772Z       ✔ should be possible to use limit and a where with a belongsTo include (85ms)
2022-06-21T16:06:41.8758694Z       ✔ should be possible use limit, attributes and a where on a belongsTo with additional hasMany includes (556ms)
2022-06-21T16:06:42.5892485Z       ✔ should be possible to use limit and a where on a hasMany with additional includes (599ms)
2022-06-21T16:06:43.2667187Z       ✔ should be possible to use limit and a where on a hasMany with a through model with additional includes (553ms)
2022-06-21T16:06:43.4719181Z       ✔ should support including date fields, with the correct timezone (92ms)
2022-06-21T16:06:43.5332341Z     findOne
2022-06-21T16:06:43.6979745Z       ✔ should work with schemas (158ms)
2022-06-21T16:06:43.7006729Z 
2022-06-21T16:06:43.7009972Z   [DB2] Include
2022-06-21T16:06:43.7013171Z     separate
2022-06-21T16:06:43.7854272Z       ✔ should run a hasMany association in a separate query (82ms)
2022-06-21T16:06:43.9090692Z       ✔ should work even if the id was not included (78ms)
2022-06-21T16:06:44.0329474Z       ✔ should work even if include does not specify foreign key attribute with custom sourceKey (73ms)
2022-06-21T16:06:44.1517745Z       ✔ should not break a nested include with null values (83ms)
2022-06-21T16:06:44.2790659Z       ✔ should run a hasMany association with limit in a separate query (73ms)
2022-06-21T16:06:44.4181755Z       ✔ should run a nested (from a non-separate include) hasMany association in a separate query (100ms)
2022-06-21T16:06:44.6235936Z       ✔ should work having a separate include between a parent and child include (150ms)
2022-06-21T16:06:44.8055519Z       ✔ should run two nested hasMany association in a separate queries (118ms)
2022-06-21T16:06:45.0042466Z       ✔ should work with two schema models in a hasMany association (152ms)
2022-06-21T16:06:45.1126081Z       ✔ should work with required non-separate parent and required child (97ms)
2022-06-21T16:06:45.1534361Z 
2022-06-21T16:06:45.1536763Z   [DB2] Instance
2022-06-21T16:06:45.1542011Z     Escaping
2022-06-21T16:06:45.1826801Z       ✔ is done properly for special characters
2022-06-21T16:06:45.2071460Z     isNewRecord
2022-06-21T16:06:45.2257844Z       ✔ returns true for non-saved objects
2022-06-21T16:06:45.3090290Z       ✔ returns false for saved objects
2022-06-21T16:06:45.4353514Z       ✔ returns false for created objects
2022-06-21T16:06:45.4859196Z       ✔ returns false for upserted objects
2022-06-21T16:06:45.5394760Z       ✔ returns false for objects found by find method
2022-06-21T16:06:45.6112970Z       ✔ returns false for objects found by findAll method
2022-06-21T16:06:45.6371484Z     default values
2022-06-21T16:06:45.6372093Z       uuid
2022-06-21T16:06:45.6561492Z         ✔ should store a string in uuidv1 and uuidv4
2022-06-21T16:06:45.7056011Z         ✔ should store a string of length 36 in uuidv1 and uuidv4
2022-06-21T16:06:45.7497921Z         ✔ should store a valid uuid in uuidv1 and uuidv4 that conforms to the UUID v1 and v4 specifications
2022-06-21T16:06:45.7978855Z         ✔ should store a valid uuid if the multiple primary key fields used
2022-06-21T16:06:45.8264538Z       current date
2022-06-21T16:06:45.8474007Z         ✔ should store a date in touchedAt
2022-06-21T16:06:45.8947489Z         ✔ should store the current date in touchedAt
2022-06-21T16:06:45.9212342Z       allowNull date
2022-06-21T16:06:45.9494645Z         ✔ should be just "null" and not Date with Invalid Date
2022-06-21T16:06:46.0042637Z         ✔ should be the same valid date when saving the date
2022-06-21T16:06:46.0291601Z       super user boolean
2022-06-21T16:06:46.0557448Z         ✔ should default to false
2022-06-21T16:06:46.1103034Z         ✔ should override default when given truthy boolean
2022-06-21T16:06:46.1796084Z         ✔ should override default when given truthy boolean-string ("true")
2022-06-21T16:06:46.2353685Z         ✔ should override default when given truthy boolean-int (1)
2022-06-21T16:06:46.2896632Z         ✔ should throw error when given value of incorrect type
2022-06-21T16:06:46.3174739Z     complete
2022-06-21T16:06:46.3422728Z       ✔ gets triggered if an error occurs
2022-06-21T16:06:46.3942348Z       ✔ gets triggered if everything was ok
2022-06-21T16:06:46.4232582Z     findAll
2022-06-21T16:06:46.4759172Z       ✔ sql should have paranoid condition
2022-06-21T16:06:46.5751285Z       ✔ sequelize.and as where should include paranoid condition
2022-06-21T16:06:46.7003329Z       ✔ sequelize.or as where should include paranoid condition (48ms)
2022-06-21T16:06:46.7899014Z       ✔ escapes a single single quotes properly in where clauses
2022-06-21T16:06:46.8696555Z       ✔ escapes two single quotes properly in where clauses
2022-06-21T16:06:46.9394313Z       ✔ returns the timestamps if no attributes have been specified
2022-06-21T16:06:47.0334161Z       ✔ does not return the timestamps if the username attribute has been specified
2022-06-21T16:06:47.1097364Z       ✔ creates the deletedAt property, when defining paranoid as true
2022-06-21T16:06:47.2129371Z       ✔ destroys a record with a primary key of something other than id
2022-06-21T16:06:47.3356170Z       ✔ sets deletedAt property to a specific date when deleting an instance
2022-06-21T16:06:47.4474799Z       ✔ keeps the deletedAt-attribute with value null, when running update
2022-06-21T16:06:47.5397928Z       ✔ keeps the deletedAt-attribute with value null, when updating associations
2022-06-21T16:06:47.6222457Z       ✔ can reuse query option objects
2022-06-21T16:06:47.6611495Z     findOne
2022-06-21T16:06:47.6920449Z       ✔ can reuse query option objects
2022-06-21T16:06:47.7697036Z       ✔ returns null for null, undefined, and unset boolean values
2022-06-21T16:06:47.8047607Z     equals
2022-06-21T16:06:47.8336905Z       ✔ can compare records with Date field
2022-06-21T16:06:47.9453201Z       ✔ does not compare the existence of associations (68ms)
2022-06-21T16:06:48.0035242Z     values
2022-06-21T16:06:48.0473322Z       ✔ returns all values
2022-06-21T16:06:48.0894822Z     isSoftDeleted
2022-06-21T16:06:48.1372967Z       ✔ should return false when model is just created
2022-06-21T16:06:48.2149779Z       ✔ returns false if user is not soft deleted
2022-06-21T16:06:48.3029597Z       ✔ returns true if user is soft deleted
2022-06-21T16:06:48.4214149Z       ✔ works with custom `deletedAt` field name
2022-06-21T16:06:48.4702670Z     restore
2022-06-21T16:06:48.4975391Z       ✔ returns an error if the model is not paranoid
2022-06-21T16:06:48.5782481Z       ✔ restores a previously deleted model
2022-06-21T16:06:48.6616511Z       ✔ supports custom deletedAt field
2022-06-21T16:06:48.7442961Z       ✔ supports custom deletedAt field name
2022-06-21T16:06:48.8330646Z       ✔ supports custom deletedAt field and database column
2022-06-21T16:06:48.9240763Z       ✔ supports custom default value (38ms)
2022-06-21T16:06:48.9559815Z 
2022-06-21T16:06:48.9561067Z   [DB2] InstanceValidator
2022-06-21T16:06:48.9603516Z     ✔ correctly validates using custom validation methods
2022-06-21T16:06:48.9923949Z     ✔ supports promises with custom validation methods
2022-06-21T16:06:49.0267310Z     ✔ skips other validations if allowNull is true and the value is null
2022-06-21T16:06:49.0319298Z     ✔ validates a model with custom model-wide validation methods
2022-06-21T16:06:49.0368141Z     ✔ validates model with a validator whose arg is an Array successfully twice in a row
2022-06-21T16:06:49.0415862Z     ✔ validates enums
2022-06-21T16:06:49.0458759Z     ✔ skips validations for the given fields
2022-06-21T16:06:49.0502766Z     ✔ skips validations for fields with value that is SequelizeMethod
2022-06-21T16:06:49.0781227Z     ✔ raises an error if saving a different value into an immutable field
2022-06-21T16:06:49.1090895Z     ✔ allows setting an immutable field if the record is unsaved
2022-06-21T16:06:49.1134809Z     ✔ raises an error for array on a STRING
2022-06-21T16:06:49.1180948Z     ✔ raises an error for array on a STRING(20)
2022-06-21T16:06:49.1318389Z     ✔ raises an error for array on a TEXT
2022-06-21T16:06:49.1367020Z     ✔ raises an error for {} on a STRING
2022-06-21T16:06:49.1414432Z     ✔ raises an error for {} on a STRING(20)
2022-06-21T16:06:49.1461589Z     ✔ raises an error for {} on a TEXT
2022-06-21T16:06:49.1503479Z     ✔ does not raise an error for null on a STRING (where null is allowed)
2022-06-21T16:06:49.1550811Z     ✔ validates VIRTUAL fields
2022-06-21T16:06:49.1597615Z     ✔ allows me to add custom validation functions to validator.js
2022-06-21T16:06:49.1619164Z     #update
2022-06-21T16:06:49.1944898Z       ✔ should allow us to update specific columns without tripping the validations
2022-06-21T16:06:49.2517069Z       ✔ should be able to emit an error upon updating when a validation has failed from an instance
2022-06-21T16:06:49.3062576Z       ✔ should be able to emit an error upon updating when a validation has failed from the factory
2022-06-21T16:06:49.3751155Z       ✔ should enforce a unique constraint
2022-06-21T16:06:49.4671134Z       ✔ should allow a custom unique constraint error message (61ms)
2022-06-21T16:06:49.5467304Z       ✔ should handle multiple unique messages correctly
2022-06-21T16:06:49.5783979Z     #create
2022-06-21T16:06:49.5784555Z       generic
2022-06-21T16:06:49.6340230Z         ✔ correctly throws an error using create method 
2022-06-21T16:06:49.7415282Z         ✔ correctly validates using create method 
2022-06-21T16:06:49.7764850Z       explicitly validating primary/auto incremented columns
2022-06-21T16:06:49.8030865Z         ✔ should emit an error when we try to enter in a string for the id key without validation arguments
2022-06-21T16:06:49.8576649Z         ✔ should emit an error when we try to enter in a string for an auto increment key (not named id)
2022-06-21T16:06:49.8844345Z         primaryKey with the name as id with arguments for it's validatio
2022-06-21T16:06:49.9031925Z           ✔ should emit an error when we try to enter in a string for the id key with validation arguments
2022-06-21T16:06:49.9448862Z           ✔ should emit an error when we try to enter in a string for an auto increment key through .build().validate()
2022-06-21T16:06:49.9866137Z           ✔ should emit an error when we try to .save()
2022-06-21T16:06:50.0152178Z       pass all paths when validating
2022-06-21T16:06:50.0541377Z         ✔ produce 3 errors
2022-06-21T16:06:50.0931551Z       not null schema validation
2022-06-21T16:06:50.1176153Z         ✔ correctly throws an error using create method 
2022-06-21T16:06:50.1733686Z         ✔ correctly throws an error using create method with default generated messages
2022-06-21T16:06:50.2011864Z 
2022-06-21T16:06:50.2012483Z   [DB2] Instance
2022-06-21T16:06:50.2016674Z     decrement
2022-06-21T16:06:50.2674639Z       ✔ supports transactions (41ms)
2022-06-21T16:06:50.3246681Z       ✔ with array
2022-06-21T16:06:50.3923019Z       ✔ with single field
2022-06-21T16:06:50.4775843Z       ✔ with single field and no value
2022-06-21T16:06:50.5425163Z       ✔ should still work right with other concurrent updates
2022-06-21T16:06:50.5997820Z       ✔ should still work right with other concurrent increments
2022-06-21T16:06:50.6588707Z       ✔ with key value pair
2022-06-21T16:06:50.7320863Z       ✔ with negative value
2022-06-21T16:06:50.8146470Z       ✔ with timestamps set to true
2022-06-21T16:06:50.9068233Z       ✔ with timestamps set to true and options.silent set to true
2022-06-21T16:06:50.9737831Z 
2022-06-21T16:06:50.9739967Z   [DB2] Instance
2022-06-21T16:06:50.9742047Z     destroy
2022-06-21T16:06:51.0012044Z       ✔ supports transactions
2022-06-21T16:06:51.0627270Z       ✔ does not set the deletedAt date in subsequent destroys if dao is paranoid
2022-06-21T16:06:51.1212091Z       ✔ does not update deletedAt with custom default in subsequent destroys
2022-06-21T16:06:51.1862340Z       ✔ deletes a record from the database if dao is not paranoid
2022-06-21T16:06:51.2453155Z       ✔ allows updating soft deleted instance
2022-06-21T16:06:51.3078670Z       ✔ supports custom deletedAt field
2022-06-21T16:06:51.3728277Z       ✔ supports custom deletedAt database column
2022-06-21T16:06:51.4350318Z       ✔ supports custom deletedAt field and database column
2022-06-21T16:06:51.4958351Z       ✔ persists other model changes when soft deleting
2022-06-21T16:06:51.5642269Z       ✔ allows sql logging of delete statements
2022-06-21T16:06:51.6334182Z       ✔ allows sql logging of update statements
2022-06-21T16:06:51.6898726Z       ✔ should not call save hooks when soft deleting
2022-06-21T16:06:51.7679078Z       ✔ delete a record of multiple primary keys table
2022-06-21T16:06:51.7989087Z 
2022-06-21T16:06:51.7990214Z   [DB2] Instance
2022-06-21T16:06:51.7995513Z     increment
2022-06-21T16:06:51.8577456Z       ✔ supports transactions
2022-06-21T16:06:51.9118380Z       ✔ supports where conditions
2022-06-21T16:06:51.9678389Z       ✔ with array
2022-06-21T16:06:52.0246452Z       ✔ with single field
2022-06-21T16:06:52.0805129Z       ✔ with single field and no value
2022-06-21T16:06:52.1357680Z       ✔ should still work right with other concurrent updates
2022-06-21T16:06:52.1936561Z       ✔ should still work right with other concurrent increments
2022-06-21T16:06:52.2546938Z       ✔ with key value pair
2022-06-21T16:06:52.3284217Z       ✔ single value should work when field name is different from database column name
2022-06-21T16:06:52.3867536Z       ✔ array should work when field name is different from database column name
2022-06-21T16:06:52.4438677Z       ✔ key value should work when field name is different from database column name
2022-06-21T16:06:52.5255681Z       ✔ with timestamps set to true
2022-06-21T16:06:52.6293743Z       ✔ with timestamps set to true and options.silent set to true
2022-06-21T16:06:52.6747673Z 
2022-06-21T16:06:52.6748237Z   [DB2] Instance
2022-06-21T16:06:52.6751494Z     reload
2022-06-21T16:06:52.7349407Z       ✔ supports transactions
2022-06-21T16:06:52.8044044Z       ✔ should return a reference to the same DAO instead of creating a new one
2022-06-21T16:06:52.9087793Z       ✔ should use default internal where
2022-06-21T16:06:52.9683708Z       ✔ should update the values on all references to the DAO
2022-06-21T16:06:53.0203005Z       ✔ should support updating a subset of attributes
2022-06-21T16:06:53.0733631Z       ✔ should update read only attributes as well (updatedAt)
2022-06-21T16:06:53.2157781Z       ✔ should update the associations as well (99ms)
2022-06-21T16:06:53.3639642Z       ✔ should update internal options of the instance (71ms)
2022-06-21T16:06:53.4446462Z       ✔ should return an error when reload fails
2022-06-21T16:06:53.6100510Z       ✔ should set an association to null after deletion, 1-1 (90ms)
2022-06-21T16:06:53.7719924Z       ✔ should set an association to empty after all deletion, 1-N (96ms)
2022-06-21T16:06:53.9489460Z       ✔ should update the associations after one element deleted (106ms)
2022-06-21T16:06:54.0979895Z       ✔ should inject default scope when reloading (77ms)
2022-06-21T16:06:54.1419271Z 
2022-06-21T16:06:54.1420176Z   [DB2] Instance
2022-06-21T16:06:54.1424269Z     save
2022-06-21T16:06:54.1977860Z       ✔ supports transactions
2022-06-21T16:06:54.2592150Z       ✔ only updates fields in passed array
2022-06-21T16:06:54.3367919Z       ✔ should work on a model with an attribute named length
2022-06-21T16:06:54.4088958Z       ✔ only validates fields in passed array
2022-06-21T16:06:54.4697811Z       ✔ stores an entry in the database
2022-06-21T16:06:54.5466079Z       ✔ handles an entry with primaryKey of zero
2022-06-21T16:06:54.6147323Z       ✔ updates the timestamps
2022-06-21T16:06:54.6764523Z       ✔ does not update timestamps when passing silent=true
2022-06-21T16:06:54.7387589Z       ✔ does not update timestamps when passing silent=true in a bulk update
2022-06-21T16:06:54.8027893Z       ✔ updates with function and column value
2022-06-21T16:06:54.8600810Z       ✔ updates with function that contains escaped dollar symbol
2022-06-21T16:06:54.9133130Z       ✔ should fail a validation upon creating
2022-06-21T16:06:54.9585645Z       ✔ should fail a validation upon creating with hooks false
2022-06-21T16:06:55.0044431Z       ✔ should fail a validation upon building
2022-06-21T16:06:55.0577948Z       ✔ should fail a validation when updating
2022-06-21T16:06:55.1140833Z       ✔ takes zero into account
2022-06-21T16:06:55.1866546Z       ✔ saves a record with no primary key
2022-06-21T16:06:55.2381689Z       hooks
2022-06-21T16:06:55.2943720Z         ✔ should update attributes added in hooks when default fields are used
2022-06-21T16:06:55.3926593Z         ✔ should update attributes changed in hooks when default fields are used (39ms)
2022-06-21T16:06:55.4929476Z         ✔ should validate attributes added in hooks when default fields are used
2022-06-21T16:06:55.6193805Z         ✔ should validate attributes changed in hooks when default fields are used
2022-06-21T16:06:55.6586459Z       when nothing changed
2022-06-21T16:06:55.6880109Z         ✔ does not update timestamps
2022-06-21T16:06:55.7620342Z         ✔ should not throw ER_EMPTY_QUERY if changed only virtual fields
2022-06-21T16:06:55.8003965Z       without timestamps option
2022-06-21T16:06:55.8403856Z         ✔ doesn't update the updatedAt column
2022-06-21T16:06:55.8747384Z       with custom timestamp options
2022-06-21T16:06:55.9147027Z         ✔ updates the createdAt column if updatedAt is disabled
2022-06-21T16:06:55.9993296Z         ✔ updates the updatedAt column if createdAt is disabled
2022-06-21T16:06:56.0799019Z         ✔ works with `allowNull: false` on createdAt and updatedAt columns
2022-06-21T16:06:56.1326033Z       eagerly loaded objects
2022-06-21T16:06:56.2167305Z         ✔ saves one object that has a collection of eagerly loaded objects
2022-06-21T16:06:56.3705570Z         ✔ saves many objects that each a have collection of eagerly loaded objects
2022-06-21T16:06:56.5083246Z         ✔ saves many objects that each has one eagerly loaded object (to which they belong)
2022-06-21T16:06:56.5561152Z 
2022-06-21T16:06:56.5564642Z   [DB2] Instance
2022-06-21T16:06:56.5568030Z     toJSON
2022-06-21T16:06:56.6128649Z       ✔ doesn't return instance that isn't defined
2022-06-21T16:06:56.7009307Z       ✔ doesn't return instances that aren't defined
2022-06-21T16:06:56.7931168Z       ✔ includes the eagerly loaded associations
2022-06-21T16:06:56.8293931Z       build
2022-06-21T16:06:56.8739020Z         ✔ returns an object containing all values
2022-06-21T16:06:56.9539839Z         ✔ returns a response that can be stringified
2022-06-21T16:06:57.0345646Z         ✔ returns a response that can be stringified and then parsed
2022-06-21T16:06:57.0743965Z       create
2022-06-21T16:06:57.1175788Z         ✔ returns an object containing all values
2022-06-21T16:06:57.2079424Z         ✔ returns a response that can be stringified
2022-06-21T16:06:57.3075842Z         ✔ returns a response that can be stringified and then parsed
2022-06-21T16:06:57.3466701Z       find
2022-06-21T16:06:57.3992982Z         ✔ returns an object containing all values
2022-06-21T16:06:57.4905103Z         ✔ returns a response that can be stringified
2022-06-21T16:06:57.5898357Z         ✔ returns a response that can be stringified and then parsed
2022-06-21T16:06:57.6283843Z 
2022-06-21T16:06:57.6284757Z   [DB2] Instance
2022-06-21T16:06:57.6288122Z     update
2022-06-21T16:06:57.7241170Z       ✔ supports transactions
2022-06-21T16:06:57.8078663Z       ✔ should update fields that are not specified on create
2022-06-21T16:06:57.9060487Z       ✔ should succeed in updating when values are unchanged (without timestamps)
2022-06-21T16:06:58.0023325Z       ✔ should update timestamps with milliseconds
2022-06-21T16:06:58.0714290Z       ✔ should only save passed attributes
2022-06-21T16:06:58.1252903Z       ✔ should save attributes affected by setters
2022-06-21T16:06:58.2220144Z       ✔ should not set attributes that are not specified by fields (47ms)
2022-06-21T16:06:58.2960268Z       ✔ updates attributes in the database
2022-06-21T16:06:58.3646449Z       ✔ ignores unknown attributes
2022-06-21T16:06:58.4417882Z       ✔ ignores undefined attributes
2022-06-21T16:06:58.5259091Z       ✔ doesn't update primary keys or timestamps
2022-06-21T16:06:58.6199819Z       ✔ stores and restores null values
2022-06-21T16:06:58.6910178Z       ✔ should support logging
2022-06-21T16:06:58.7190697Z       hooks
2022-06-21T16:06:58.7809123Z         ✔ should update attributes added in hooks when default fields are used (39ms)
2022-06-21T16:06:58.8849704Z         ✔ should update attributes changed in hooks when default fields are used
2022-06-21T16:06:58.9709693Z         ✔ should validate attributes added in hooks when default fields are used
2022-06-21T16:06:59.0593679Z         ✔ should validate attributes changed in hooks when default fields are used
2022-06-21T16:06:59.0966528Z 
2022-06-21T16:06:59.0967111Z   [DB2] DAO
2022-06-21T16:06:59.0968357Z     Values
2022-06-21T16:06:59.0968720Z       set
2022-06-21T16:06:59.0999973Z         ✔ doesn't overwrite generated primary keys
2022-06-21T16:06:59.1044752Z         ✔ doesn't overwrite defined primary keys
2022-06-21T16:06:59.1088583Z         ✔ doesn't set timestamps
2022-06-21T16:06:59.1133358Z         ✔ doesn't set underscored timestamps
2022-06-21T16:06:59.1178987Z         ✔ doesn't set value if not a dynamic setter or a model attribute
2022-06-21T16:06:59.1475353Z         ✔ allows use of sequelize.fn and sequelize.col in date and bool fields
2022-06-21T16:06:59.1726240Z         includes
2022-06-21T16:06:59.1771689Z           ✔ should support basic includes
2022-06-21T16:06:59.1832124Z           ✔ should support basic includes (with raw: true)
2022-06-21T16:06:59.1852154Z       get
2022-06-21T16:06:59.1921137Z         ✔ should use custom attribute getters in get(key)
2022-06-21T16:06:59.1964122Z         ✔ should custom virtual getters in get(key)
2022-06-21T16:06:59.2007871Z         ✔ should use custom getters in toJSON
2022-06-21T16:06:59.2295960Z         ✔ should work with save
2022-06-21T16:06:59.2646345Z         ✔ can pass parameters to getters
2022-06-21T16:06:59.2666855Z         plain
2022-06-21T16:06:59.2699921Z           ✔ should return plain values when true
2022-06-21T16:06:59.2722080Z         clone
2022-06-21T16:06:59.2747372Z           ✔ should copy the values
2022-06-21T16:06:59.2767454Z       changed
2022-06-21T16:06:59.3038140Z         ✔ should return false if object was built from database
2022-06-21T16:06:59.3452576Z         ✔ should return true if previous value is different
2022-06-21T16:06:59.3718769Z         ✔ should return false immediately after saving
2022-06-21T16:06:59.4272772Z         ✔ should be available to a afterUpdate hook
2022-06-21T16:06:59.4589915Z       previous
2022-06-21T16:06:59.4622113Z         ✔ should return an object with the previous values
2022-06-21T16:06:59.4666947Z         ✔ should return the previous value
2022-06-21T16:06:59.4686482Z 
2022-06-21T16:06:59.4700947Z   [DB2] Model
2022-06-21T16:07:03.0215878Z     ✔ supports multiple async transactions (3532ms)
2022-06-21T16:07:03.1343593Z     ✔ should be possible to use a key named UUID as foreign key (57ms)
2022-06-21T16:07:03.1796370Z     constructor
2022-06-21T16:07:03.2109500Z       ✔ uses the passed dao name as tablename if freezeTableName
2022-06-21T16:07:03.2606663Z       ✔ uses the pluralized dao name as tablename unless freezeTableName
2022-06-21T16:07:03.3141510Z       ✔ uses checks to make sure dao factory is not leaking on multiple define
2022-06-21T16:07:03.3833205Z       ✔ allows us to predefine the ID column with our own specs
2022-06-21T16:07:03.4451846Z       ✔ throws an error if 2 autoIncrements are passed
2022-06-21T16:07:03.4932759Z       ✔ throws an error if a custom model-wide validation is not a function
2022-06-21T16:07:03.5441097Z       ✔ throws an error if a custom model-wide validation has the same name as a field
2022-06-21T16:07:03.6212694Z       ✔ should allow me to set a default value for createdAt and updatedAt
2022-06-21T16:07:03.7070632Z       ✔ should allow me to set a function as default value
2022-06-21T16:07:03.7607066Z       ✔ should throw `TypeError` when value for updatedAt, createdAt, or deletedAt is neither string nor boolean
2022-06-21T16:07:03.8312289Z       ✔ should allow me to use `true` as a value for updatedAt, createdAt, and deletedAt fields
2022-06-21T16:07:03.9092729Z       ✔ should allow me to override updatedAt, createdAt, and deletedAt fields
2022-06-21T16:07:03.9841153Z       ✔ should allow me to disable some of the timestamp fields
2022-06-21T16:07:04.0675591Z       ✔ returns proper defaultValues after save when setter is set
2022-06-21T16:07:04.1436641Z       ✔ should work with both paranoid and underscored being true
2022-06-21T16:07:04.2397107Z       ✔ allows unique on column with field aliases
2022-06-21T16:07:04.3558281Z       ✔ allows us to customize the error message for unique constraint
2022-06-21T16:07:04.4918460Z       ✔ allows us to map the customized error message with unique constraint name
2022-06-21T16:07:04.5805514Z       ✔ should allow the user to specify indexes in options
2022-06-21T16:07:04.6268306Z       descending indices (MySQL 8 specific)
2022-06-21T16:07:04.6488589Z         ✔ complains about missing support for descending indexes
2022-06-21T16:07:04.7015685Z         ✔ works fine with InnoDB
2022-06-21T16:07:04.7279658Z     build
2022-06-21T16:07:04.7498746Z       ✔ doesn't create database entries
2022-06-21T16:07:04.7987926Z       ✔ fills the objects with default values
2022-06-21T16:07:04.8449710Z       ✔ fills the objects with default values
2022-06-21T16:07:04.8912343Z       ✔ attaches getter and setter methods from attribute definition
2022-06-21T16:07:04.9330411Z       ✔ attaches getter and setter methods from options
2022-06-21T16:07:04.9749166Z       ✔ attaches getter and setter methods from options only if not defined in attribute
2022-06-21T16:07:05.0022447Z       include
2022-06-21T16:07:05.0263178Z         ✔ should support basic includes
2022-06-21T16:07:05.0744417Z         ✔ should support includes with aliases
2022-06-21T16:07:05.1039799Z     findOne
2022-06-21T16:07:05.1518590Z       ✔ supports the transaction option in the first parameter
2022-06-21T16:07:05.2236309Z       ✔ should not fail if model is paranoid and where is an empty array
2022-06-21T16:07:05.3060077Z       ✔ should work if model is paranoid and only operator in where clause is a Symbol (#8406)
2022-06-21T16:07:05.3340274Z     findOrBuild
2022-06-21T16:07:05.3883110Z       ✔ supports transactions
2022-06-21T16:07:05.4261317Z       returns an instance if it already exists
2022-06-21T16:07:05.4535783Z         ✔ with a single find field
2022-06-21T16:07:05.5162057Z         ✔ with multiple find fields
2022-06-21T16:07:05.5644054Z         ✔ builds a new instance with default value.
2022-06-21T16:07:05.5950994Z     save
2022-06-21T16:07:05.6545579Z       ✔ should map the correct fields when saving instance (#10589) (40ms)
2022-06-21T16:07:05.7753161Z     update
2022-06-21T16:07:05.8271441Z       ✔ throws an error if no where clause is given
2022-06-21T16:07:05.9067287Z       ✔ should map the correct fields when updating instance (#10589)
2022-06-21T16:07:05.9979084Z       ✔ supports transactions
2022-06-21T16:07:06.0733704Z       ✔ updates the attributes that we select only without updating createdAt
2022-06-21T16:07:06.1851456Z       ✔ allows sql logging of updated statements (47ms)
2022-06-21T16:07:06.2395124Z       ✔ updates only values that match filter
2022-06-21T16:07:06.2980651Z       ✔ throws an error if where has a key with undefined value
2022-06-21T16:07:06.3550430Z       ✔ updates only values that match the allowed fields
2022-06-21T16:07:06.4154472Z       ✔ updates with casting
2022-06-21T16:07:06.4887974Z       ✔ updates with function and column value
2022-06-21T16:07:06.5589375Z       ✔ does not update virtual attributes
2022-06-21T16:07:06.6413868Z       ✔ doesn't update attributes that are altered by virtual setters when option is enabled
2022-06-21T16:07:06.7381703Z       ✔ updates attributes that are altered by virtual setters
2022-06-21T16:07:06.8124686Z       ✔ should properly set data when individualHooks are true
2022-06-21T16:07:06.8764071Z       ✔ sets updatedAt to the current timestamp
2022-06-21T16:07:06.9347301Z       ✔ returns the number of affected rows
2022-06-21T16:07:07.0625788Z       ✔ does not update soft deleted records when model is paranoid (70ms)
2022-06-21T16:07:07.1855383Z       ✔ updates soft deleted records when paranoid is overridden (66ms)
2022-06-21T16:07:07.2927260Z       ✔ calls update hook for soft deleted objects (45ms)
2022-06-21T16:07:07.3223405Z     destroy
2022-06-21T16:07:07.3846461Z       ✔ `truncate` method should clear the table (38ms)
2022-06-21T16:07:07.4735813Z       ✔ `truncate` option should clear the table (39ms)
2022-06-21T16:07:07.5670496Z       ✔ `truncate` option returns a number (43ms)
2022-06-21T16:07:07.6474640Z       ✔ throws an error if no where clause is given
2022-06-21T16:07:07.7360825Z       ✔ deletes all instances when given an empty where object
2022-06-21T16:07:07.8196639Z       ✔ throws an error if where has a key with undefined value
2022-06-21T16:07:07.9013709Z       ✔ supports transactions
2022-06-21T16:07:07.9514846Z       ✔ deletes values that match filter
2022-06-21T16:07:08.0130408Z       ✔ works without a primary key
2022-06-21T16:07:08.0862719Z       ✔ supports .field
2022-06-21T16:07:08.1742503Z       ✔ sets deletedAt to the current timestamp if paranoid is true (38ms)
2022-06-21T16:07:08.2696963Z       ✔ does not set deletedAt for previously destroyed instances if paranoid is true
2022-06-21T16:07:08.3944922Z       ✔ should include deleted associated records if include has paranoid marked as false (67ms)
2022-06-21T16:07:08.5029830Z       ✔ should delete a paranoid record if I set force to true (45ms)
2022-06-21T16:07:08.5728334Z       ✔ returns the number of affected rows
2022-06-21T16:07:08.8713154Z       ✔ supports table schema/prefix (147ms)
2022-06-21T16:07:08.9241308Z       ✔ should work if model is paranoid and only operator in where clause is a Symbol
2022-06-21T16:07:08.9516442Z       can't find records marked as deleted with paranoid being true
2022-06-21T16:07:08.9988277Z         ✔ with the DAOFactory
2022-06-21T16:07:09.0346404Z       can find paranoid records if paranoid is marked as false in query
2022-06-21T16:07:09.0826325Z         ✔ with the DAOFactory
2022-06-21T16:07:09.1167220Z     restore
2022-06-21T16:07:09.1346792Z       ✔ rejects with an error if the model is not paranoid
2022-06-21T16:07:09.2150407Z       ✔ restores a previously deleted model
2022-06-21T16:07:09.2503750Z     equals
2022-06-21T16:07:09.2761970Z       ✔ correctly determines equality of objects
2022-06-21T16:07:09.3659312Z       ✔ correctly determines equality with multiple primary keys
2022-06-21T16:07:09.4062184Z     equalsOneOf
2022-06-21T16:07:09.4627626Z       ✔ determines equality if one is matching
2022-06-21T16:07:09.5489067Z       ✔ doesn't determine equality if none is matching
2022-06-21T16:07:09.5828952Z     count
2022-06-21T16:07:09.6495575Z       ✔ supports transactions
2022-06-21T16:07:09.7069283Z       ✔ counts all created objects
2022-06-21T16:07:09.7659941Z       ✔ returns multiple rows when using group
2022-06-21T16:07:09.8165248Z       ✔ allows sql logging
2022-06-21T16:07:09.8719854Z       ✔ filters object
2022-06-21T16:07:10.0011191Z       ✔ supports distinct option (56ms)
2022-06-21T16:07:10.0341669Z       options sent to aggregate
2022-06-21T16:07:10.0586077Z         ✔ modifies option "limit" by setting it to null
2022-06-21T16:07:10.1038620Z         ✔ modifies option "offset" by setting it to null
2022-06-21T16:07:10.1472431Z         ✔ modifies option "order" by setting it to null
2022-06-21T16:07:10.1752587Z     min
2022-06-21T16:07:10.2730337Z       ✔ supports transactions
2022-06-21T16:07:10.3824232Z       ✔ returns the correct value
2022-06-21T16:07:10.4936777Z       ✔ allows sql logging
2022-06-21T16:07:10.6038786Z       ✔ should allow decimals
2022-06-21T16:07:10.7164016Z       ✔ should allow strings
2022-06-21T16:07:10.8158042Z       ✔ should allow dates
2022-06-21T16:07:10.9076944Z       ✔ should work with fields named as an SQL reserved keyword
2022-06-21T16:07:10.9484143Z     max
2022-06-21T16:07:11.0540402Z       ✔ supports transactions
2022-06-21T16:07:11.1462061Z       ✔ returns the correct value
2022-06-21T16:07:11.2495349Z       ✔ allows sql logging
2022-06-21T16:07:11.3598168Z       ✔ should allow decimals
2022-06-21T16:07:11.4663272Z       ✔ should allow strings
2022-06-21T16:07:11.5789625Z       ✔ should allow dates
2022-06-21T16:07:11.6950178Z       ✔ should work with fields named as an SQL reserved keyword
2022-06-21T16:07:11.7376446Z     sum
2022-06-21T16:07:11.8200967Z       ✔ should work in the simplest case
2022-06-21T16:07:11.9397842Z       ✔ should work with fields named as an SQL reserved keyword
2022-06-21T16:07:12.0597073Z       ✔ should allow decimals in sum
2022-06-21T16:07:12.1917343Z       ✔ should accept a where clause
2022-06-21T16:07:12.3304108Z       ✔ should accept a where clause with custom fields
2022-06-21T16:07:12.4696229Z       ✔ allows sql logging
2022-06-21T16:07:12.5239868Z     schematic support
2022-06-21T16:07:12.6278867Z       ✔ should be able to drop with schemas
2022-06-21T16:07:12.8422608Z       ✔ should be able to list schemas
2022-06-21T16:07:13.0313933Z       ✔ should describeTable using the default schema settings (41ms)
2022-06-21T16:07:13.3048426Z       ✔ should be able to reference a table with a schema set (106ms)
2022-06-21T16:07:13.4972597Z       ✔ should be able to create and update records under any valid schematic
2022-06-21T16:07:13.6099595Z     references
2022-06-21T16:07:13.6806162Z       ✔ uses an existing dao factory and references the author table
2022-06-21T16:07:13.8045293Z       ✔ uses a table name as a string and references the author table (38ms)
2022-06-21T16:07:13.8919235Z       ✔ emits an error event as the referenced table name is invalid
2022-06-21T16:07:14.0544703Z       ✔ works with comments (99ms)
2022-06-21T16:07:14.1111141Z     blob
2022-06-21T16:07:14.1114702Z       buffers
2022-06-21T16:07:14.1580310Z         ✔ should be able to take a buffer as parameter to a BLOB field
2022-06-21T16:07:14.2542005Z         ✔ should return a buffer when fetching a blob
2022-06-21T16:07:14.3410131Z         ✔ should work when the database returns null
2022-06-21T16:07:14.3791173Z       strings
2022-06-21T16:07:14.4315089Z         ✔ should be able to take a string as parameter to a BLOB field
2022-06-21T16:07:14.5451184Z         ✔ should return a buffer when fetching a BLOB, even when the BLOB was inserted as a string
2022-06-21T16:07:14.5806210Z     paranoid is true and where is an array
2022-06-21T16:07:14.7420858Z       ✔ should not fail when array contains Sequelize.or / and
2022-06-21T16:07:14.9162695Z       ✔ should fail when array contains strings
2022-06-21T16:07:15.0853304Z       ✔ should not fail with an include
2022-06-21T16:07:15.2589735Z       ✔ should not overwrite a specified deletedAt by setting paranoid: false
2022-06-21T16:07:15.4501991Z       ✔ should not overwrite a specified deletedAt (complex query) by setting paranoid: false
2022-06-21T16:07:15.5001892Z     bulkCreate
2022-06-21T16:07:15.5476349Z       ✔ errors - should return array of errors if validate and individualHooks are true
2022-06-21T16:07:15.6291063Z       ✔ should not use setter when renaming fields in dataValues
2022-06-21T16:07:15.6564245Z 
2022-06-21T16:07:15.6567400Z   [DB2] Model
2022-06-21T16:07:15.6570575Z     attributes
2022-06-21T16:07:15.6573552Z       set
2022-06-21T16:07:15.7718433Z         ✔ should only be called once when used on a join model called with an association getter (112ms)
2022-06-21T16:07:15.8561380Z         ✔ allows for an attribute to be called "toString"
2022-06-21T16:07:15.9610943Z         ✔ allows for an attribute to be called "toString" with associations (75ms)
2022-06-21T16:07:15.9953516Z 
2022-06-21T16:07:15.9954715Z   [DB2] Model
2022-06-21T16:07:15.9959865Z     attributes
2022-06-21T16:07:15.9961045Z       field
2022-06-21T16:07:16.0582506Z         ✔ increment should work
2022-06-21T16:07:16.1870339Z         ✔ decrement should work
2022-06-21T16:07:16.3050836Z         ✔ sum should work
2022-06-21T16:07:16.4249628Z         ✔ should create, fetch and update with alternative field names from a simple model
2022-06-21T16:07:16.7364523Z         ✔ should bulk update (195ms)
2022-06-21T16:07:16.8822117Z         ✔ should not contain the field properties after create
2022-06-21T16:07:16.9932196Z         ✔ should make the aliased auto incremented primary key available after create
2022-06-21T16:07:17.1129812Z         ✔ should work with where on includes for find
2022-06-21T16:07:17.2197452Z         ✔ should work with where on includes for findAll
2022-06-21T16:07:17.3361007Z         ✔ should work with increment
2022-06-21T16:07:17.4517011Z         ✔ should work with a simple where
2022-06-21T16:07:17.5695061Z         ✔ should work with a where or
2022-06-21T16:07:17.6894826Z         ✔ should work with bulkCreate and findAll
2022-06-21T16:07:17.9630067Z         ✔ should support renaming of sequelize method fields (152ms)
2022-06-21T16:07:18.1945052Z         ✔ should sync foreign keys with custom field names (120ms)
2022-06-21T16:07:18.3082628Z         ✔ should find the value of an attribute with a custom field name
2022-06-21T16:07:18.4261071Z         ✔ field names that are the same as property names should create, update, and read correctly
2022-06-21T16:07:18.5422787Z         ✔ should work with a belongsTo association getter
2022-06-21T16:07:18.7864115Z         ✔ should work with paranoid instance.destroy()
2022-06-21T16:07:18.9343913Z         ✔ should work with paranoid Model.destroy()
2022-06-21T16:07:19.0418676Z         ✔ should work with `belongsToMany` association `count`
2022-06-21T16:07:19.1429416Z         ✔ should work with `hasMany` association `count`
2022-06-21T16:07:19.2040948Z         primaryKey
2022-06-21T16:07:19.2687873Z           ✔ should support instance.destroy()
2022-06-21T16:07:19.3887612Z           ✔ should support Model.destroy()
2022-06-21T16:07:19.4395513Z           in combination with allowNull
2022-06-21T16:07:19.5126992Z             ✔ sets the column to not allow null
2022-06-21T16:07:19.5777708Z         field and attribute name is the same
2022-06-21T16:07:19.6368901Z           ✔ bulkCreate should work
2022-06-21T16:07:19.7435048Z           ✔ find with where should work
2022-06-21T16:07:19.8552740Z           ✔ reload should work
2022-06-21T16:07:19.9774213Z           ✔ save should work
2022-06-21T16:07:20.0301763Z 
2022-06-21T16:07:20.0302301Z   [DB2] Model
2022-06-21T16:07:20.0303359Z     attributes
2022-06-21T16:07:20.0304425Z       types
2022-06-21T16:07:20.0304777Z         VIRTUAL
2022-06-21T16:07:20.1446238Z           ✔ should not be ignored in dataValues get
2022-06-21T16:07:20.3059345Z           ✔ should be ignored in table creation
2022-06-21T16:07:20.4816870Z           ✔ should be ignored in find, findAll and includes
2022-06-21T16:07:20.8272432Z           ✔ should allow me to store selected values (182ms)
2022-06-21T16:07:21.0103673Z           ✔ should be ignored in create and update
2022-06-21T16:07:21.1691633Z           ✔ should be ignored in bulkCreate and and bulkUpdate
2022-06-21T16:07:21.3502610Z           ✔ should be able to exclude with attributes
2022-06-21T16:07:21.5341125Z           ✔ should be able to include model with virtual attributes
2022-06-21T16:07:21.5867800Z 
2022-06-21T16:07:21.5868385Z   [DB2] Model
2022-06-21T16:07:21.5869322Z     bulkCreate
2022-06-21T16:07:21.7391243Z       ✔ supports transactions
2022-06-21T16:07:21.9384485Z       ✔ should not alter options (39ms)
2022-06-21T16:07:22.1092386Z       ✔ should be able to set createdAt and updatedAt if using silent: true
2022-06-21T16:07:22.2853824Z       ✔ should not fail on validate: true and individualHooks: true
2022-06-21T16:07:22.4761364Z       ✔ should not map instance dataValues to fields with individualHooks: true
2022-06-21T16:07:22.6693344Z       ✔ should not insert NULL for unused fields
2022-06-21T16:07:22.8388036Z       ✔ properly handles disparate field lists
2022-06-21T16:07:22.9974671Z       ✔ inserts multiple values respecting the white list
2022-06-21T16:07:23.1363951Z       ✔ should store all values if no whitelist is specified
2022-06-21T16:07:23.2884864Z       ✔ should set isNewRecord = false
2022-06-21T16:07:23.4506088Z       ✔ saves data with single quote
2022-06-21T16:07:23.6164804Z       ✔ saves data with double quote
2022-06-21T16:07:23.7665894Z       ✔ saves stringified JSON data
2022-06-21T16:07:23.9361996Z       ✔ properly handles a model with a length column
2022-06-21T16:07:24.1324145Z       ✔ stores the current date in createdAt
2022-06-21T16:07:24.3022074Z       ✔ emits an error when validate is set to true
2022-06-21T16:07:24.4941802Z       ✔ doesn't emit an error when validate is set to true but our selectedValues are fine
2022-06-21T16:07:24.6795451Z       ✔ should allow blank arrays (return immediately)
2022-06-21T16:07:24.8553956Z       ✔ should allow blank creates (with timestamps: false)
2022-06-21T16:07:25.0365622Z       ✔ should allow autoincremented attributes to be set
2022-06-21T16:07:25.2666377Z       ✔ should support schemas (84ms)
2022-06-21T16:07:25.4361379Z       ✔ should throw an error when the ignoreDuplicates option is passed
2022-06-21T16:07:25.7018329Z       ✔ should properly map field names to attribute names
2022-06-21T16:07:25.7654466Z       enums
2022-06-21T16:07:25.8917038Z         ✔ correctly restores enum values
2022-06-21T16:07:25.9560515Z       handles auto increment values
2022-06-21T16:07:26.0718458Z         ✔ should return auto increment primary key values
2022-06-21T16:07:26.2535646Z         ✔ should return supplied values on primary keys
2022-06-21T16:07:26.4391506Z         ✔ should return supplied values on primary keys when some instances already exists
2022-06-21T16:07:26.5038890Z       virtual attribute
2022-06-21T16:07:26.6257138Z         ✔ should validate
2022-06-21T16:07:26.8107079Z         ✔ should not validate
2022-06-21T16:07:26.8740506Z 
2022-06-21T16:07:26.8742758Z   [DB2] Model
2022-06-21T16:07:26.8744903Z     bulkCreate
2022-06-21T16:07:26.8746764Z       include
2022-06-21T16:07:26.9428806Z         ✔ should bulkCreate data for BelongsTo relations (62ms)
2022-06-21T16:07:27.0462366Z         ✔ should bulkCreate data for BelongsTo relations with no nullable FK (63ms)
2022-06-21T16:07:27.1383233Z         ✔ should bulkCreate data for BelongsTo relations with alias (58ms)
2022-06-21T16:07:27.2570414Z         ✔ should bulkCreate data for HasMany relations (73ms)
2022-06-21T16:07:27.3650085Z         ✔ should bulkCreate data for HasMany relations with alias (63ms)
2022-06-21T16:07:27.4763774Z         ✔ should bulkCreate data for HasOne relations (72ms)
2022-06-21T16:07:27.5862369Z         ✔ should bulkCreate data for HasOne relations with alias (72ms)
2022-06-21T16:07:27.7461067Z         ✔ should bulkCreate data for BelongsToMany relations (114ms)
2022-06-21T16:07:27.8938380Z         ✔ should bulkCreate data for polymorphic BelongsToMany relations (98ms)
2022-06-21T16:07:28.0402470Z         ✔ should bulkCreate data for BelongsToMany relations with alias (100ms)
2022-06-21T16:07:28.0803728Z 
2022-06-21T16:07:28.0804285Z   [DB2] Model
2022-06-21T16:07:28.0805619Z     count
2022-06-21T16:07:28.1399171Z       ✔ should count rows
2022-06-21T16:07:28.2388337Z       ✔ should support include
2022-06-21T16:07:28.3315030Z       ✔ should count groups correctly and return attributes
2022-06-21T16:07:28.5060254Z       ✔ should not return NaN
2022-06-21T16:07:28.6129612Z       ✔ should be able to specify column for COUNT()
2022-06-21T16:07:28.7243825Z       ✔ should be able to specify NO column for COUNT() with DISTINCT
2022-06-21T16:07:28.8340291Z       ✔ should be able to use where clause on included models
2022-06-21T16:07:28.9829798Z       ✔ should be able to specify column for COUNT() with includes
2022-06-21T16:07:29.2092743Z       ✔ should work correctly with include and whichever raw option (66ms)
2022-06-21T16:07:29.2602604Z 
2022-06-21T16:07:29.2604307Z   [DB2] Model
2022-06-21T16:07:29.3642754Z     ✔ should return autoIncrement primary key (create)
2022-06-21T16:07:29.4886607Z     ✔ should support logging
2022-06-21T16:07:29.5707119Z     findOrCreate
2022-06-21T16:07:29.6542436Z       ✔ supports transactions
2022-06-21T16:07:29.7949930Z       ✔ supports more than one models per transaction
2022-06-21T16:07:29.9411892Z       ✔ should error correctly when defaults contain a unique key
2022-06-21T16:07:30.0825015Z (sequelize) Warning: Unknown attributes (foo,bar) passed to defaults option of findOrCreate
2022-06-21T16:07:30.0922446Z       ✔ should error correctly when defaults contain a unique key and a non-existent field
2022-06-21T16:07:30.2512585Z       ✔ should error correctly when defaults contain a unique key and the where clause is complex (41ms)
2022-06-21T16:07:30.4241781Z       ✔ should work with empty uuid primary key in where (42ms)
2022-06-21T16:07:30.5779711Z       ✔ should support special characters in defaults
2022-06-21T16:07:30.7435822Z       ✔ should support bools in defaults
2022-06-21T16:07:30.8786475Z       ✔ returns instance if already existent. Single find field.
2022-06-21T16:07:31.0034234Z       ✔ Returns instance if already existent. Multiple find fields.
2022-06-21T16:07:31.1354532Z       ✔ does not include exception catcher in response
2022-06-21T16:07:31.3820925Z       ✔ creates new instance with default value.
2022-06-21T16:07:31.5081097Z       ✔ supports .or() (only using default values)
2022-06-21T16:07:31.6317722Z       ✔ should ignore option returning
2022-06-21T16:07:31.7645168Z       ✔ should release transaction when meeting errors
2022-06-21T16:07:31.8114461Z       several concurrent calls
2022-06-21T16:07:31.9168245Z         ✔ works with a transaction
2022-06-21T16:07:31.9615159Z         - should not fail silently with concurrency higher than pool, a unique constraint and a create hook resulting in mismatched values
2022-06-21T16:07:32.0682323Z         ✔ should error correctly when defaults contain a unique key without a transaction
2022-06-21T16:07:32.2079460Z         ✔ works without a transaction
2022-06-21T16:07:32.2605233Z     findCreateFind
2022-06-21T16:07:32.4061902Z       ✔ [Flaky] should work with multiple concurrent calls
2022-06-21T16:07:32.5437447Z       ✔ should work with multiple concurrent calls within a transaction
2022-06-21T16:07:32.5917043Z     create
2022-06-21T16:07:32.8368707Z       ✔ works with multiple non-integer primary keys with a default value (87ms)
2022-06-21T16:07:33.0114219Z       ✔ should return an error for a unique constraint error (76ms)
2022-06-21T16:07:33.2184302Z       ✔ works without any primary key (110ms)
2022-06-21T16:07:33.3801564Z       ✔ should be able to set createdAt and updatedAt if using silent: true
2022-06-21T16:07:33.5967510Z       ✔ works with custom timestamps with a default value (93ms)
2022-06-21T16:07:33.8081452Z       ✔ works with custom timestamps and underscored (79ms)
2022-06-21T16:07:33.9158803Z       ✔ supports transactions
2022-06-21T16:07:34.0296592Z       ✔ is possible to use casting when creating an instance
2022-06-21T16:07:34.1407870Z       ✔ is possible to use casting multiple times mixed in with other utilities
2022-06-21T16:07:34.2573423Z       ✔ is possible to just use .literal() to bypass escaping
2022-06-21T16:07:34.3865769Z       ✔ is possible to use funtions when creating an instance
2022-06-21T16:07:34.5157684Z       ✔ should escape $ in sequelize functions arguments
2022-06-21T16:07:34.7301558Z       ✔ should work with a non-id named uuid primary key columns (108ms)
2022-06-21T16:07:34.8495483Z       ✔ is possible to use functions as default values
2022-06-21T16:07:34.9850110Z       ✔ doesn't allow duplicated records with unique:true
2022-06-21T16:07:35.1179321Z       ✔ raises an error if created object breaks definition constraints
2022-06-21T16:07:35.2618637Z       ✔ raises an error if created object breaks definition constraints
2022-06-21T16:07:35.4195944Z       ✔ raises an error if saving an empty string into a column allowing null or URL
2022-06-21T16:07:35.5401522Z       ✔ raises an error if you mess up the datatype
2022-06-21T16:07:35.6790580Z       ✔ sets a 64 bit int in bigint
2022-06-21T16:07:35.8626002Z       ✔ sets auto increment fields (60ms)
2022-06-21T16:07:35.9948169Z       ✔ allows the usage of options as attribute
2022-06-21T16:07:36.1282216Z       ✔ allows sql logging
2022-06-21T16:07:36.2477814Z       ✔ should only store the values passed in the whitelist
2022-06-21T16:07:36.3748364Z       ✔ should store all values if no whitelist is specified
2022-06-21T16:07:36.5955918Z       ✔ can omit autoincremental columns (112ms)
2022-06-21T16:07:36.7379575Z       ✔ saves data with single quote
2022-06-21T16:07:36.8708782Z       ✔ saves data with double quote
2022-06-21T16:07:36.9759689Z       ✔ saves stringified JSON data
2022-06-21T16:07:37.0799922Z       ✔ stores the current date in createdAt
2022-06-21T16:07:37.1899872Z       ✔ allows setting custom IDs
2022-06-21T16:07:37.3099400Z       ✔ should allow blank creates (with timestamps: false)
2022-06-21T16:07:37.4583587Z       ✔ should allow truly blank creates
2022-06-21T16:07:37.6839914Z       ✔ should only set passed fields (98ms)
2022-06-21T16:07:37.8190847Z       ✔ Works even when SQL query has a values of transaction keywords such as BEGIN TRANSACTION
2022-06-21T16:07:37.8715897Z       enums
2022-06-21T16:07:37.9604395Z         ✔ correctly restores enum values
2022-06-21T16:07:38.1000037Z         ✔ allows null values
2022-06-21T16:07:38.1480015Z         when defined via { field: DataTypes.ENUM }
2022-06-21T16:07:38.2488248Z           ✔ allows values passed as parameters
2022-06-21T16:07:38.3986667Z           ✔ allows values passed as an array
2022-06-21T16:07:38.4525433Z         when defined via { field: { type: DataTypes.ENUM } }
2022-06-21T16:07:38.5592078Z           ✔ allows values passed as parameters
2022-06-21T16:07:38.7086956Z           ✔ allows values passed as an array
2022-06-21T16:07:38.7637198Z         can safely sync multiple times
2022-06-21T16:07:38.8837796Z           ✔ through the factory (50ms)
2022-06-21T16:07:39.2439950Z           ✔ through sequelize (216ms)
2022-06-21T16:07:39.2960660Z 
2022-06-21T16:07:39.2961325Z   [DB2] Model
2022-06-21T16:07:39.2961746Z     create
2022-06-21T16:07:39.2962279Z       include
2022-06-21T16:07:39.3574690Z         ✔ should create data for BelongsTo relations (59ms)
2022-06-21T16:07:39.4740413Z         ✔ should create data for BelongsTo relations with no nullable FK (68ms)
2022-06-21T16:07:39.5765897Z         ✔ should create data for BelongsTo relations with alias (63ms)
2022-06-21T16:07:39.6857351Z         ✔ should create data for HasMany relations (70ms)
2022-06-21T16:07:39.7851906Z         ✔ should create data for HasMany relations with alias (60ms)
2022-06-21T16:07:39.8897233Z         ✔ should create data for HasOne relations (65ms)
2022-06-21T16:07:39.9745006Z         ✔ should create data for HasOne relations with alias (50ms)
2022-06-21T16:07:40.1039373Z         ✔ should create data for BelongsToMany relations (95ms)
2022-06-21T16:07:40.2388792Z         ✔ should create data for polymorphic BelongsToMany relations (92ms)
2022-06-21T16:07:40.3950988Z         ✔ should create data for BelongsToMany relations with alias (101ms)
2022-06-21T16:07:40.4483259Z 
2022-06-21T16:07:40.4486863Z   [DB2] Model
2022-06-21T16:07:40.4716753Z     ✔ should support logging
2022-06-21T16:07:40.5021449Z     findAll
2022-06-21T16:07:40.5571576Z       ✔ supports transactions
2022-06-21T16:07:40.6092270Z       ✔ should not crash on an empty where array
2022-06-21T16:07:40.6607066Z       ✔ should throw on an attempt to fetch no attributes
2022-06-21T16:07:40.7673092Z       ✔ should not throw if overall attributes are nonempty (47ms)
2022-06-21T16:07:40.8161683Z       special where conditions/smartWhere object
2022-06-21T16:07:40.8468639Z         ✔ should be able to find rows where attribute is in a list of values
2022-06-21T16:07:40.8994314Z         ✔ should not break when trying to find rows using an array of primary keys
2022-06-21T16:07:40.9572576Z         ✔ should not break when using smart syntax on binary fields
2022-06-21T16:07:41.0114642Z         ✔ should be able to find a row using like
2022-06-21T16:07:41.0623282Z         ✔ should be able to find a row using not like
2022-06-21T16:07:41.1163735Z         ✔ should be able to find a row between a certain date using the between shortcut
2022-06-21T16:07:41.1715489Z         ✔ should be able to find a row not between a certain integer using the not between shortcut
2022-06-21T16:07:41.2393216Z         ✔ should be able to handle false/true values just fine...
2022-06-21T16:07:41.3790075Z         ✔ should be able to handle false/true values through associations as well... (85ms)
2022-06-21T16:07:41.5289679Z         ✔ should be able to handle binary values through associations as well... (83ms)
2022-06-21T16:07:41.5959986Z         ✔ should be able to find a row between a certain date
2022-06-21T16:07:41.6641970Z         ✔ should be able to find a row between a certain date and an additional where clause
2022-06-21T16:07:41.7241066Z         ✔ should be able to find a row not between a certain integer
2022-06-21T16:07:41.7926743Z         ✔ should be able to find a row using not between and between logic
2022-06-21T16:07:41.8502827Z         ✔ should be able to find a row using not between and between logic with dates
2022-06-21T16:07:41.9060455Z         ✔ should be able to find a row using greater than or equal to logic with dates
2022-06-21T16:07:41.9590892Z         ✔ should be able to find a row using greater than or equal to logic with dayjs dates
2022-06-21T16:07:42.0115742Z         ✔ should be able to find a row using greater than or equal to
2022-06-21T16:07:42.0646885Z         ✔ should be able to find a row using greater than
2022-06-21T16:07:42.1162240Z         ✔ should be able to find a row using lesser than or equal to
2022-06-21T16:07:42.1811053Z         ✔ should be able to find a row using lesser than
2022-06-21T16:07:42.2368539Z         ✔ should have no problem finding a row using lesser and greater than
2022-06-21T16:07:42.2936354Z         ✔ should be able to find a row using not equal to logic
2022-06-21T16:07:42.3537717Z         ✔ should be able to find multiple users with any of the special where logic properties
2022-06-21T16:07:42.3860682Z       eager loading
2022-06-21T16:07:42.4199494Z         ✔ should not ignore where condition with empty includes, #8771
2022-06-21T16:07:42.4463045Z         belongsTo
2022-06-21T16:07:42.5277388Z           ✔ throws an error about unexpected input if include contains a non-object
2022-06-21T16:07:42.6466021Z           ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:42.8100553Z           ✔ returns the associated worker via task.worker
2022-06-21T16:07:42.9293536Z           ✔ returns the associated worker via task.worker, using limit and sort
2022-06-21T16:07:42.9720440Z         hasOne
2022-06-21T16:07:43.0501667Z           ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:43.1812028Z           ✔ returns the associated task via worker.task
2022-06-21T16:07:43.2271436Z         hasOne with alias
2022-06-21T16:07:43.3234183Z           ✔ throws an error if alias is not associated
2022-06-21T16:07:43.4612665Z           ✔ returns the associated task via worker.task
2022-06-21T16:07:43.5823502Z           ✔ returns the associated task via worker.task when daoFactory is aliased with model
2022-06-21T16:07:43.6236589Z         hasMany
2022-06-21T16:07:43.6989908Z           ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:43.8211690Z           ✔ returns the associated tasks via worker.tasks
2022-06-21T16:07:43.9924605Z           ✔ supports sorting on renamed sub-query attribute (44ms)
2022-06-21T16:07:44.1702448Z           ✔ supports sorting DESC on renamed sub-query attribute (42ms)
2022-06-21T16:07:44.3655429Z           ✔ supports sorting on multiple renamed sub-query attributes (57ms)
2022-06-21T16:07:44.4338516Z         hasMany with alias
2022-06-21T16:07:44.5083739Z           ✔ throws an error if alias is not associated
2022-06-21T16:07:44.6406148Z           ✔ returns the associated task via worker.task
2022-06-21T16:07:44.7813459Z           ✔ returns the associated task via worker.task when daoFactory is aliased with model
2022-06-21T16:07:44.8242098Z         queryOptions
2022-06-21T16:07:44.8496526Z           ✔ should return a DAO when queryOptions are not set
2022-06-21T16:07:44.9026483Z           ✔ should return a DAO when raw is false
2022-06-21T16:07:44.9580741Z           ✔ should return raw data when raw is true
2022-06-21T16:07:44.9823954Z         include all
2022-06-21T16:07:45.2309309Z           ✔ includes all associations
2022-06-21T16:07:45.5567245Z           ✔ includes specific type of association
2022-06-21T16:07:45.8499064Z           ✔ forbids using options
2022-06-21T16:07:46.1219185Z           ✔ is over-ruled by specified include
2022-06-21T16:07:46.4263989Z           ✔ includes all nested associations
2022-06-21T16:07:46.5068267Z         properly handles attributes:[] cases
2022-06-21T16:07:46.6870028Z           ✔ N:M with ignoring include.attributes only
2022-06-21T16:07:46.9047263Z           ✔ N:M with ignoring through.attributes only
2022-06-21T16:07:47.1479220Z           ✔ N:M with ignoring include.attributes but having through.attributes
2022-06-21T16:07:47.1974698Z       order by eager loaded tables
2022-06-21T16:07:47.1975317Z         HasMany
2022-06-21T16:07:47.3647208Z           ✔ sorts simply
2022-06-21T16:07:47.8265474Z           ✔ sorts by 1st degree association
2022-06-21T16:07:48.0402709Z           ✔ sorts simply and by 1st degree association with limit where 1st degree associated instances returned for second one and not the first
2022-06-21T16:07:48.2530862Z           ✔ sorts by 2nd degree association
2022-06-21T16:07:48.5024636Z           ✔ sorts by 2nd degree association with alias
2022-06-21T16:07:48.8383108Z           ✔ sorts by 2nd degree association with alias while using limit
2022-06-21T16:07:48.9092648Z         ManyToMany
2022-06-21T16:07:49.0792414Z           ✔ sorts by 1st degree association
2022-06-21T16:07:49.2982855Z           ✔ sorts by 1st degree association while using limit
2022-06-21T16:07:49.5105685Z Executing (default): SELECT "country"."id", "country"."name", "country"."createdAt", "country"."updatedAt", "industries"."id" AS "industries.id", "industries"."name" AS "industries.name", "industries"."createdAt" AS "industries.createdAt", "industries"."updatedAt" AS "industries.updatedAt", "industries->IndustryCountry"."numYears" AS "industries.IndustryCountry.numYears", "industries->IndustryCountry"."createdAt" AS "industries.IndustryCountry.createdAt", "industries->IndustryCountry"."updatedAt" AS "industries.IndustryCountry.updatedAt", "industries->IndustryCountry"."industryId" AS "industries.IndustryCountry.industryId", "industries->IndustryCountry"."countryId" AS "industries.IndustryCountry.countryId" FROM "countries" AS "country" LEFT OUTER JOIN ( "IndustryCountries" AS "industries->IndustryCountry" INNER JOIN "industries" AS "industries" ON "industries"."id" = "industries->IndustryCountry"."industryId") ON "country"."id" = "industries->IndustryCountry"."countryId" ORDER BY "industries->IndustryCountry"."numYears" ASC;
2022-06-21T16:07:49.5110797Z Executing (default): SELECT "country"."id", "country"."name", "country"."createdAt", "country"."updatedAt", "industries"."id" AS "industries.id", "industries"."name" AS "industries.name", "industries"."createdAt" AS "industries.createdAt", "industries"."updatedAt" AS "industries.updatedAt", "industries->IndustryCountry"."numYears" AS "industries.IndustryCountry.numYears", "industries->IndustryCountry"."createdAt" AS "industries.IndustryCountry.createdAt", "industries->IndustryCountry"."updatedAt" AS "industries.IndustryCountry.updatedAt", "industries->IndustryCountry"."industryId" AS "industries.IndustryCountry.industryId", "industries->IndustryCountry"."countryId" AS "industries.IndustryCountry.countryId" FROM "countries" AS "country" LEFT OUTER JOIN ( "IndustryCountries" AS "industries->IndustryCountry" INNER JOIN "industries" AS "industries" ON "industries"."id" = "industries->IndustryCountry"."industryId") ON "country"."id" = "industries->IndustryCountry"."countryId" ORDER BY "industries->IndustryCountry"."numYears" DESC;
2022-06-21T16:07:49.5116301Z (node:21879) [SEQUELIZE0002] DeprecationWarning: The logging-option should be either a function or false. Default: console.log
2022-06-21T16:07:49.5176068Z           ✔ sorts by through table attribute
2022-06-21T16:07:49.5674212Z       normal findAll
2022-06-21T16:07:49.5960334Z         ✔ finds all entries
2022-06-21T16:07:49.6553842Z         ✔ can also handle object notation
2022-06-21T16:07:49.7209238Z         ✔ sorts the results via id in ascending order
2022-06-21T16:07:49.7776209Z         ✔ sorts the results via id in descending order
2022-06-21T16:07:49.8370662Z         ✔ sorts the results via a date column
2022-06-21T16:07:49.8974243Z         ✔ handles offset and limit
2022-06-21T16:07:49.9935753Z         ✔ should allow us to find IDs using capital letters
2022-06-21T16:07:50.0712796Z         ✔ should be possible to order by sequelize.col()
2022-06-21T16:07:50.1640398Z         ✔ should pull in dependent fields for a VIRTUAL
2022-06-21T16:07:50.2977898Z         ✔ should pull in dependent fields for a VIRTUAL in include (69ms)
2022-06-21T16:07:50.3607100Z         ✔ should throw for undefined where parameters
2022-06-21T16:07:50.3886102Z     findAndCountAll
2022-06-21T16:07:50.4780972Z       ✔ supports transactions (62ms)
2022-06-21T16:07:50.5412927Z       ✔ handles where clause {only}
2022-06-21T16:07:50.6019052Z       ✔ handles where clause with ordering {only}
2022-06-21T16:07:50.6647013Z       ✔ handles offset
2022-06-21T16:07:50.7226708Z       ✔ handles limit
2022-06-21T16:07:50.7843223Z       ✔ handles offset and limit
2022-06-21T16:07:50.9640493Z       ✔ handles offset with includes (112ms)
2022-06-21T16:07:51.0538241Z       ✔ handles attributes
2022-06-21T16:07:51.0814548Z     all
2022-06-21T16:07:51.1364055Z       ✔ supports transactions
2022-06-21T16:07:51.1947687Z       ✔ should return all users
2022-06-21T16:07:51.2246365Z     rejectOnEmpty mode
2022-06-21T16:07:51.2691957Z       ✔ works from model options
2022-06-21T16:07:51.3516908Z       ✔ throws custom error with initialized
2022-06-21T16:07:51.4353194Z       ✔ throws custom error with instance
2022-06-21T16:07:51.4737086Z 
2022-06-21T16:07:51.4740321Z   [DB2] Model
2022-06-21T16:07:51.4743389Z     findAll
2022-06-21T16:07:51.4746341Z       group
2022-06-21T16:07:51.5452533Z         ✔ should correctly group with attributes, #3009 (68ms)
2022-06-21T16:07:51.6452212Z         ✔ should not add primary key when grouping using a belongsTo association (63ms)
2022-06-21T16:07:51.6871598Z 
2022-06-21T16:07:51.6872135Z   [DB2] Model
2022-06-21T16:07:51.6872788Z     findAll
2022-06-21T16:07:51.6873177Z       groupedLimit
2022-06-21T16:07:51.6887208Z         on: belongsToMany
2022-06-21T16:07:51.8967135Z           ✔ maps attributes from a grouped limit to models
2022-06-21T16:07:52.1452524Z           ✔ maps attributes from a grouped limit to models with include
2022-06-21T16:07:52.3806398Z           ✔ [Flaky] works with computed order
2022-06-21T16:07:52.6413082Z           ✔ works with multiple orders
2022-06-21T16:07:52.9127839Z           ✔ works with paranoid junction models
2022-06-21T16:07:52.9671016Z         on: hasMany
2022-06-21T16:07:53.3629562Z           ✔ Applies limit and order correctly
2022-06-21T16:07:53.4283937Z 
2022-06-21T16:07:53.4284535Z   [DB2] Model
2022-06-21T16:07:53.4285173Z     findAll
2022-06-21T16:07:53.4285514Z       order
2022-06-21T16:07:53.4286092Z         Sequelize.literal()
2022-06-21T16:07:53.4568565Z           ✔ should work with order: literal()
2022-06-21T16:07:53.5118962Z           ✔ should work with order: [literal()]
2022-06-21T16:07:53.5675086Z           ✔ should work with order: [[literal()]]
2022-06-21T16:07:53.5960246Z         injections
2022-06-21T16:07:53.6570954Z           ✔ should not throw on a literal
2022-06-21T16:07:53.7571590Z           ✔ should not throw with include when last order argument is a field
2022-06-21T16:07:53.7956160Z 
2022-06-21T16:07:53.7956694Z   [DB2] Model
2022-06-21T16:07:53.7957468Z     findAll
2022-06-21T16:07:53.7957873Z       separate with limit
2022-06-21T16:07:53.9116291Z         ✔ should not throw syntax error (union) (114ms)
2022-06-21T16:07:53.9541363Z 
2022-06-21T16:07:53.9543074Z   [DB2] Model
2022-06-21T16:07:53.9544631Z     findOne
2022-06-21T16:07:54.0155642Z       ✔ supports transactions
2022-06-21T16:07:54.0637674Z       ✔ should support logging
2022-06-21T16:07:54.0906499Z       general / basic function
2022-06-21T16:07:54.1314961Z         ✔ treats questionmarks in an array
2022-06-21T16:07:54.2056903Z         ✔ doesn't throw an error when entering in a non integer value for a specified primary field
2022-06-21T16:07:54.2925627Z         ✔ returns a single dao
2022-06-21T16:07:54.3767648Z         ✔ returns a single dao given a string id
2022-06-21T16:07:54.4672213Z         ✔ should make aliased attributes available
2022-06-21T16:07:54.5538004Z         ✔ should fail with meaningful error message on invalid attributes definition
2022-06-21T16:07:54.6638200Z         ✔ should not try to convert boolean values if they are not selected
2022-06-21T16:07:54.7612737Z         ✔ finds a specific user via where option
2022-06-21T16:07:54.8424194Z         ✔ doesn't find a user if conditions are not matching
2022-06-21T16:07:54.9212934Z         ✔ allows sql logging
2022-06-21T16:07:55.0005585Z         ✔ ignores passed limit option
2022-06-21T16:07:55.1331441Z         ✔ finds entries via primary keys (52ms)
2022-06-21T16:07:55.2389908Z         ✔ finds entries via a string primary key called id
2022-06-21T16:07:55.3372038Z         ✔ finds entries via a bigint primary key called id
2022-06-21T16:07:55.4255511Z         ✔ always honors ZERO as primary key
2022-06-21T16:07:55.5231746Z         ✔ should allow us to find IDs using capital letters
2022-06-21T16:07:55.5678453Z       eager loading
2022-06-21T16:07:55.5682267Z         belongsTo
2022-06-21T16:07:55.6883651Z           ✔ returns the private and public ip (87ms)
2022-06-21T16:07:55.8911241Z           ✔ eager loads with non-id primary keys (125ms)
2022-06-21T16:07:56.1117369Z           ✔ getting parent data in many to one relationship (146ms)
2022-06-21T16:07:56.3657405Z           ✔ allows mulitple assocations of the same model with different alias (140ms)
2022-06-21T16:07:56.4361400Z           generic
2022-06-21T16:07:56.4674002Z             ✔ throws an error about unexpected input if include contains a non-object
2022-06-21T16:07:56.5280132Z             ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:56.6585874Z             ✔ returns the associated worker via task.worker (86ms)
2022-06-21T16:07:56.7034549Z         hasOne
2022-06-21T16:07:56.8109157Z           ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:56.9732387Z           ✔ returns the associated task via worker.task
2022-06-21T16:07:57.2654757Z           ✔ eager loads with non-id primary keys (154ms)
2022-06-21T16:07:57.3271860Z         hasOne with alias
2022-06-21T16:07:57.3465957Z           ✔ throws an error if included DaoFactory is not referenced by alias
2022-06-21T16:07:57.3712010Z           alias
2022-06-21T16:07:57.4897212Z             ✔ throws an error indicating an incorrect alias was entered if an association and alias exist but the alias doesn't match
2022-06-21T16:07:57.7924081Z             ✔ returns the associated task via worker.task
2022-06-21T16:07:57.9464473Z             ✔ returns the associated task via worker.task when daoFactory is aliased with model
2022-06-21T16:07:58.1850585Z             ✔ allows mulitple assocations of the same model with different alias (93ms)
2022-06-21T16:07:58.2275409Z         hasMany
2022-06-21T16:07:58.3436447Z           ✔ throws an error if included DaoFactory is not associated
2022-06-21T16:07:58.5012937Z           ✔ returns the associated tasks via worker.tasks
2022-06-21T16:07:59.1580392Z           ✔ including two has many relations should not result in duplicate values (469ms)
2022-06-21T16:07:59.5116259Z           ✔ eager loads with non-id primary keys (174ms)
2022-06-21T16:07:59.5825706Z         hasMany with alias
2022-06-21T16:07:59.6034973Z           ✔ throws an error if included DaoFactory is not referenced by alias
2022-06-21T16:07:59.6302153Z           alias
2022-06-21T16:07:59.7526203Z             ✔ throws an error indicating an incorrect alias was entered if an association and alias exist but the alias doesn't match
2022-06-21T16:07:59.9007765Z             ✔ returns the associated task via worker.task
2022-06-21T16:08:00.0416252Z             ✔ returns the associated task via worker.task when daoFactory is aliased with model
2022-06-21T16:08:00.2946233Z             ✔ allows mulitple assocations of the same model with different alias (97ms)
2022-06-21T16:08:00.3364933Z         hasMany (N:M) with alias
2022-06-21T16:08:00.5023025Z           ✔ returns the associated models when using through as string and alias (144ms)
2022-06-21T16:08:00.7536482Z           ✔ returns the associated models when using through as model and alias (155ms)
2022-06-21T16:08:00.8180384Z       queryOptions
2022-06-21T16:08:00.8422323Z         ✔ should return a DAO when queryOptions are not set
2022-06-21T16:08:00.8949208Z         ✔ should return a DAO when raw is false
2022-06-21T16:08:00.9417942Z         ✔ should return raw data when raw is true
2022-06-21T16:08:00.9655098Z       rejectOnEmpty mode
2022-06-21T16:08:00.9865161Z         ✔ throws error when record not found by findOne
2022-06-21T16:08:01.0405325Z         ✔ throws error when record not found by findByPk
2022-06-21T16:08:01.0851991Z         ✔ throws error when record not found by find
2022-06-21T16:08:01.1443404Z         ✔ works from model options
2022-06-21T16:08:01.2128753Z         ✔ override model options
2022-06-21T16:08:01.2812604Z         ✔ resolve null when disabled
2022-06-21T16:08:01.3116056Z 
2022-06-21T16:08:01.3116631Z   [DB2] Model
2022-06-21T16:08:01.3117420Z     findOrBuild
2022-06-21T16:08:01.3823676Z       ✔ initialize with includes
2022-06-21T16:08:01.4158790Z 
2022-06-21T16:08:01.4161467Z   [DB2] Model
2022-06-21T16:08:01.4164791Z     increment
2022-06-21T16:08:01.4504208Z       ✔ supports where conditions
2022-06-21T16:08:01.5001644Z       ✔ uses correct column names for where conditions
2022-06-21T16:08:01.5500807Z       ✔ should still work right with other concurrent increments
2022-06-21T16:08:01.6194245Z       ✔ with array
2022-06-21T16:08:01.6759423Z       ✔ with single field
2022-06-21T16:08:01.7292751Z       ✔ with single field and no value
2022-06-21T16:08:01.7835369Z       ✔ with key value pair
2022-06-21T16:08:01.8374556Z       ✔ should still work right with other concurrent updates
2022-06-21T16:08:01.9161142Z       ✔ with timestamps set to true
2022-06-21T16:08:02.0010224Z       ✔ with timestamps set to true and options.silent set to true
2022-06-21T16:08:02.0826736Z       ✔ should work with scopes
2022-06-21T16:08:02.1344079Z       ✔ should not care for attributes in the instance scope
2022-06-21T16:08:02.1879434Z       ✔ should not care for exclude-attributes in the instance scope
2022-06-21T16:08:02.2412992Z       ✔ should not care for include-attributes in the instance scope
2022-06-21T16:08:02.2651279Z     decrement
2022-06-21T16:08:02.2965208Z       ✔ supports where conditions
2022-06-21T16:08:02.3712003Z       ✔ uses correct column names for where conditions
2022-06-21T16:08:02.4241568Z       ✔ should still work right with other concurrent increments
2022-06-21T16:08:02.4897177Z       ✔ with array
2022-06-21T16:08:02.5416836Z       ✔ with single field
2022-06-21T16:08:02.5893310Z       ✔ with single field and no value
2022-06-21T16:08:02.6410623Z       ✔ with key value pair
2022-06-21T16:08:02.7022802Z       ✔ should still work right with other concurrent updates
2022-06-21T16:08:02.7720536Z       ✔ with timestamps set to true
2022-06-21T16:08:02.8512204Z       ✔ with timestamps set to true and options.silent set to true
2022-06-21T16:08:02.9288142Z       ✔ should work with scopes
2022-06-21T16:08:02.9838548Z       ✔ should not care for attributes in the instance scope
2022-06-21T16:08:03.0396634Z       ✔ should not care for exclude-attributes in the instance scope
2022-06-21T16:08:03.0944086Z       ✔ should not care for include-attributes in the instance scope
2022-06-21T16:08:03.1232402Z 
2022-06-21T16:08:03.1234295Z   [DB2] Model
2022-06-21T16:08:03.1237635Z     max
2022-06-21T16:08:03.1942307Z       ✔ type A to C should exist
2022-06-21T16:08:03.2622714Z       ✔ type D should not exist
2022-06-21T16:08:03.3018193Z 
2022-06-21T16:08:03.3018748Z   [DB2] Model
2022-06-21T16:08:03.3064757Z     optimistic locking
2022-06-21T16:08:03.3342485Z       ✔ should increment the version on save
2022-06-21T16:08:03.3911836Z       ✔ should increment the version on update
2022-06-21T16:08:03.4470810Z       ✔ prevents stale instances from being saved
2022-06-21T16:08:03.5010068Z       ✔ increment() also increments the version
2022-06-21T16:08:03.5925392Z       ✔ decrement() also increments the version
2022-06-21T16:08:03.6234113Z 
2022-06-21T16:08:03.6237669Z   [DB2] Model
2022-06-21T16:08:03.6241037Z     paranoid
2022-06-21T16:08:03.6604860Z       ✔ should be able to soft delete with timestamps
2022-06-21T16:08:03.7257193Z       ✔ should be able to soft delete without timestamps
2022-06-21T16:08:03.7519456Z 
2022-06-21T16:08:03.7522823Z   [DB2] Model
2022-06-21T16:08:03.7525989Z     global schema
2022-06-21T16:08:03.7550572Z       Add data via model.create, retrieve via model.findOne
2022-06-21T16:08:03.7980591Z         ✔ should be able to sync model without schema option
2022-06-21T16:08:03.9211936Z         ✔ should be able to insert data into default table using create
2022-06-21T16:08:04.0080247Z         ✔ should be able to insert data into schema table using create
2022-06-21T16:08:04.0632259Z       Get associated data in public schema via include
2022-06-21T16:08:04.1603485Z         ✔ should be able to insert and retrieve associated data into the table in schema_two
2022-06-21T16:08:04.2322386Z     schemas
2022-06-21T16:08:04.2344485Z       Add data via model.create, retrieve via model.findOne
2022-06-21T16:08:04.2729006Z         ✔ should be able to insert data into the table in schema_one using create
2022-06-21T16:08:04.5771163Z         ✔ should be able to insert data into the table in schema_two using create
2022-06-21T16:08:04.6351930Z       Persist and retrieve data
2022-06-21T16:08:04.6900881Z         ✔ should be able to insert data into both schemas using instance.save and retrieve/count it
2022-06-21T16:08:04.7519162Z       Get associated data in public schema via include
2022-06-21T16:08:04.8134286Z         ✔ should be able to insert and retrieve associated data into the table in schema_one
2022-06-21T16:08:04.8995219Z       Get schema specific associated data via include
2022-06-21T16:08:04.9801675Z         ✔ should be able to insert and retrieve associated data into the table in schema_one
2022-06-21T16:08:05.1500633Z         ✔ should be able to insert and retrieve associated data into the table in schema_two
2022-06-21T16:08:05.2143233Z       concurency tests
2022-06-21T16:08:05.2598578Z         ✔ should build and persist instances to 2 schemas concurrently in any order
2022-06-21T16:08:05.3202105Z 
2022-06-21T16:08:05.3202702Z   [DB2] Model
2022-06-21T16:08:05.3203388Z     scope
2022-06-21T16:08:05.3529700Z       ✔ should be able to merge attributes as array
2022-06-21T16:08:05.4165098Z       ✔ should work with Symbol operators
2022-06-21T16:08:05.4804410Z       ✔ should keep symbols after default assignment
2022-06-21T16:08:05.5412763Z       ✔ should not throw error with sequelize.where
2022-06-21T16:08:05.5669518Z 
2022-06-21T16:08:05.5671121Z   [DB2] Model
2022-06-21T16:08:05.5672439Z     scope
2022-06-21T16:08:05.5673829Z       aggregate
2022-06-21T16:08:05.6392889Z         ✔ should apply defaultScope
2022-06-21T16:08:05.7377702Z         ✔ should be able to override default scope
2022-06-21T16:08:05.8314543Z         ✔ should be able to unscope
2022-06-21T16:08:05.9279157Z         ✔ should be able to apply other scopes
2022-06-21T16:08:06.0278419Z         ✔ should be able to merge scopes with where
2022-06-21T16:08:06.1185234Z         ✔ should be able to use where on include
2022-06-21T16:08:06.3075757Z         ✔ aggregate with schema (92ms)
2022-06-21T16:08:06.4069996Z 
2022-06-21T16:08:06.4072216Z   [DB2] Model
2022-06-21T16:08:06.4074038Z     scope
2022-06-21T16:08:06.4075963Z       associations
2022-06-21T16:08:06.4077343Z         include
2022-06-21T16:08:06.6416889Z           ✔ should scope columns properly
2022-06-21T16:08:06.8895428Z           ✔ should apply default scope when including an associations
2022-06-21T16:08:07.0934306Z           ✔ should apply default scope when including a model
2022-06-21T16:08:07.3006009Z           ✔ should be able to include a scoped model
2022-06-21T16:08:07.3723287Z         get
2022-06-21T16:08:07.3724473Z           it should be able to unscope
2022-06-21T16:08:07.5403409Z             ✔ hasMany
2022-06-21T16:08:07.7680964Z             ✔ hasOne
2022-06-21T16:08:07.9950207Z             ✔ belongsTo
2022-06-21T16:08:08.2551387Z             ✔ belongsToMany
2022-06-21T16:08:08.3138785Z           it should apply default scope
2022-06-21T16:08:08.4837093Z             ✔ hasMany
2022-06-21T16:08:08.7339794Z             ✔ hasOne
2022-06-21T16:08:08.9645747Z             ✔ belongsTo
2022-06-21T16:08:09.1849291Z             ✔ belongsToMany
2022-06-21T16:08:09.2456949Z           it should be able to apply another scope
2022-06-21T16:08:09.4323469Z             ✔ hasMany
2022-06-21T16:08:09.6862363Z             ✔ hasOne
2022-06-21T16:08:09.9131465Z             ✔ belongsTo
2022-06-21T16:08:10.1518209Z             ✔ belongsToMany
2022-06-21T16:08:10.2136973Z         scope with includes
2022-06-21T16:08:10.3863578Z           ✔ should scope columns properly
2022-06-21T16:08:10.6193595Z           ✔ should apply scope conditions
2022-06-21T16:08:10.6946128Z           with different format
2022-06-21T16:08:11.1078027Z             ✔ should not throw error (217ms)
2022-06-21T16:08:11.1869736Z           with find options
2022-06-21T16:08:11.5783775Z             ✔ should merge includes correctly (222ms)
2022-06-21T16:08:11.6622657Z         scope with options
2022-06-21T16:08:12.1411779Z           ✔ should return correct object included foreign_key (323ms)
2022-06-21T16:08:12.5806364Z           ✔ should return correct object included foreign_key with defaultScope (206ms)
2022-06-21T16:08:13.0198302Z           ✔ should not throw error (222ms)
2022-06-21T16:08:13.1086306Z 
2022-06-21T16:08:13.1089667Z   [DB2] Model
2022-06-21T16:08:13.1092938Z     scope
2022-06-21T16:08:13.1096023Z       count
2022-06-21T16:08:13.1681546Z         ✔ should apply defaultScope
2022-06-21T16:08:13.2579395Z         ✔ should be able to override default scope
2022-06-21T16:08:13.3770013Z         ✔ should be able to unscope
2022-06-21T16:08:13.4771825Z         ✔ should be able to apply other scopes
2022-06-21T16:08:13.5775962Z         ✔ should be able to merge scopes with where
2022-06-21T16:08:13.6771361Z         ✔ should be able to merge scopes with where on aliased fields
2022-06-21T16:08:13.7665149Z         ✔ should ignore the order option if it is found within the scope
2022-06-21T16:08:13.8675923Z         ✔ should be able to use where on include
2022-06-21T16:08:13.9581148Z         ✔ should be able to use include with function scope
2022-06-21T16:08:14.0575991Z         ✔ should be able to use include with function scope and string association
2022-06-21T16:08:14.0905493Z 
2022-06-21T16:08:14.0906095Z   [DB2] Model
2022-06-21T16:08:14.0906551Z     scope
2022-06-21T16:08:14.0907926Z       destroy
2022-06-21T16:08:14.1196105Z         ✔ should apply defaultScope
2022-06-21T16:08:14.1698361Z         ✔ should be able to unscope destroy
2022-06-21T16:08:14.2323582Z         ✔ should be able to apply other scopes
2022-06-21T16:08:14.2876670Z         ✔ should be able to merge scopes with where
2022-06-21T16:08:14.3545323Z         ✔ should be able to merge scopes with similar where
2022-06-21T16:08:14.4138905Z         ✔ should work with empty where
2022-06-21T16:08:14.4387697Z 
2022-06-21T16:08:14.4389809Z   [DB2] Model
2022-06-21T16:08:14.4391736Z     scopes
2022-06-21T16:08:14.5007649Z       ✔ should be able use where in scope
2022-06-21T16:08:14.6310477Z       ✔ should be able to combine scope and findAll where clauses
2022-06-21T16:08:14.7302968Z       ✔ should be able to combine multiple scopes
2022-06-21T16:08:14.8203708Z       ✔ should be able to use a defaultScope if declared
2022-06-21T16:08:14.9001718Z       ✔ should be able to handle $and in scopes
2022-06-21T16:08:14.9835140Z       ✔ should have no problem performing findOrCreate
2022-06-21T16:08:15.0713009Z       ✔ should work when included with default scope
2022-06-21T16:08:15.1054681Z       should not overwrite
2022-06-21T16:08:15.1619992Z         ✔ default scope with values from previous finds
2022-06-21T16:08:15.2523151Z         ✔ other scopes with values from previous finds
2022-06-21T16:08:15.2866962Z     scope in associations
2022-06-21T16:08:15.3570670Z       ✔ should work when association with a virtual column queried with default scope (68ms)
2022-06-21T16:08:15.3994853Z 
2022-06-21T16:08:15.3998329Z   [DB2] Model
2022-06-21T16:08:15.4001664Z     scope
2022-06-21T16:08:15.4004785Z       findAndCountAll
2022-06-21T16:08:15.4350207Z         ✔ should apply defaultScope
2022-06-21T16:08:15.4928094Z         ✔ should be able to override default scope
2022-06-21T16:08:15.5517575Z         ✔ should be able to unscope
2022-06-21T16:08:15.6078598Z         ✔ should be able to apply other scopes
2022-06-21T16:08:15.6687039Z         ✔ should be able to merge scopes with where
2022-06-21T16:08:15.7241314Z         ✔ should be able to merge multiple scopes
2022-06-21T16:08:15.7770324Z         ✔ should ignore the order option if it is found within the scope
2022-06-21T16:08:15.8083260Z 
2022-06-21T16:08:15.8083827Z   [DB2] Model
2022-06-21T16:08:15.8084236Z     scope
2022-06-21T16:08:15.8084695Z       simple merge
2022-06-21T16:08:15.9113666Z         ✔ should merge simple scopes correctly
2022-06-21T16:08:15.9596409Z       complex merge
2022-06-21T16:08:16.2171231Z         ✔ [Flaky] should merge complex scopes correctly regardless of their order (119ms)
2022-06-21T16:08:16.5806465Z         ✔ should merge complex scopes with findAll options correctly regardless of their order (137ms)
2022-06-21T16:08:16.8959230Z         ✔ [Flaky] should merge complex scopes with findOne options correctly regardless of their order (112ms)
2022-06-21T16:08:16.9514428Z 
2022-06-21T16:08:16.9515214Z   [DB2] Model
2022-06-21T16:08:16.9515901Z     scope
2022-06-21T16:08:16.9516275Z       update
2022-06-21T16:08:16.9870003Z         ✔ should apply defaultScope
2022-06-21T16:08:17.0436109Z         ✔ should be able to unscope destroy
2022-06-21T16:08:17.1026907Z         ✔ should be able to apply other scopes
2022-06-21T16:08:17.1566400Z         ✔ should be able to merge scopes with where
2022-06-21T16:08:17.2208474Z         ✔ should be able to merge scopes with similar where
2022-06-21T16:08:17.2811865Z         ✔ should work with empty where
2022-06-21T16:08:17.3075418Z 
2022-06-21T16:08:17.3075959Z   [DB2] Model
2022-06-21T16:08:17.3076754Z     sum
2022-06-21T16:08:17.3421509Z       ✔ should sum without rows
2022-06-21T16:08:17.4004572Z       ✔ should sum when is 0
2022-06-21T16:08:17.4807826Z       ✔ should sum
2022-06-21T16:08:17.5070171Z 
2022-06-21T16:08:17.5070742Z   [DB2] Model.sync & Sequelize#sync
2022-06-21T16:08:17.5571567Z     ✔ removes a column if it exists in the databases schema but not the model (47ms)
2022-06-21T16:08:17.6250662Z     ✔ adds a column if it exists in the model but not the database
2022-06-21T16:08:17.6747675Z     ✔ does not remove columns if drop is set to false in alter configuration
2022-06-21T16:08:17.7340751Z     ✔ removes columns if drop is set to true in alter configuration
2022-06-21T16:08:17.7935920Z     ✔ alters a column using the correct column name (#9515)
2022-06-21T16:08:17.8927106Z     ✔ changes a column if it exists in the model but is different in the database (71ms)
2022-06-21T16:08:17.9473790Z     ✔ does not alter table if data type does not change
2022-06-21T16:08:18.0432997Z     ✔ should properly alter tables when there are foreign keys (70ms)
2022-06-21T16:08:18.1098816Z     ✔ creates one unique index for unique:true column
2022-06-21T16:08:18.1734097Z     ✔ creates one unique index per unique:true columns, and per entry in options.indexes
2022-06-21T16:08:18.2300217Z     ✔ creates one unique index per unique:name column (1 column)
2022-06-21T16:08:18.2919469Z     ✔ creates one unique index per unique:name column (multiple columns)
2022-06-21T16:08:18.3216430Z     ✔ throws if a name collision occurs between two indexes
2022-06-21T16:08:18.3569653Z     ✔ adds missing unique indexes to existing tables (unique attribute option)
2022-06-21T16:08:18.4132322Z     ✔ adds missing unique indexes to existing tables (index option)
2022-06-21T16:08:18.4731390Z     ✔ adds missing non-unique indexes to existing tables (index option)
2022-06-21T16:08:18.5418082Z     ✔ adds missing unique columns to existing tables (39ms)
2022-06-21T16:08:18.6236117Z     ✔ can create two identically named indexes in different schemas (54ms)
2022-06-21T16:08:18.7764800Z     ✔ supports creating tables with cyclic associations (75ms)
2022-06-21T16:08:18.8715301Z     ✔ supports creating two identically named tables in different schemas (53ms)
2022-06-21T16:08:18.9571205Z 
2022-06-21T16:08:18.9572879Z   [DB2] Model
2022-06-21T16:08:18.9574251Z     update
2022-06-21T16:08:18.9837370Z       ✔ should only update the passed fields
2022-06-21T16:08:19.0352382Z       ✔ changed should be false after reload
2022-06-21T16:08:19.0861256Z       ✔ should ignore undefined values without throwing not null validation
2022-06-21T16:08:19.1092778Z       skips update query
2022-06-21T16:08:19.1298977Z         ✔ if no data to update
2022-06-21T16:08:19.1933105Z         ✔ skips when timestamps disabled
2022-06-21T16:08:19.2285399Z 
2022-06-21T16:08:19.2285980Z   [DB2] Model
2022-06-21T16:08:19.2290526Z     upsert
2022-06-21T16:08:19.3043395Z       ✔ works with upsert on id
2022-06-21T16:08:19.4072304Z       ✔ works with upsert on a composite key
2022-06-21T16:08:19.5275567Z       ✔ should work with UUIDs wth default values
2022-06-21T16:08:19.6668828Z       ✔ works with upsert on a composite primary key (42ms)
2022-06-21T16:08:19.7709288Z       ✔ supports validations
2022-06-21T16:08:19.8896729Z       ✔ supports skipping validations
2022-06-21T16:08:19.9760933Z       ✔ works with BLOBs
2022-06-21T16:08:20.0663118Z       ✔ works with .field
2022-06-21T16:08:20.1606863Z       ✔ works with primary key using .field
2022-06-21T16:08:20.2587814Z       ✔ works with database functions
2022-06-21T16:08:20.3596904Z       ✔ does not overwrite createdAt time on update
2022-06-21T16:08:20.4594491Z       ✔ does not overwrite createdAt when supplied as an explicit insert value when using fields
2022-06-21T16:08:20.5850421Z       ✔ falls back to a noop if no update values are found in the upsert data
2022-06-21T16:08:20.6827935Z       ✔ does not update using default values
2022-06-21T16:08:20.7833904Z       ✔ does not update when setting current values
2022-06-21T16:08:20.9067461Z       ✔ works when two separate uniqueKeys are passed
2022-06-21T16:08:21.0294954Z       ✔ works when indexes are created via indexes array
2022-06-21T16:08:21.1637831Z       ✔ works when composite indexes are created via indexes array (41ms)
2022-06-21T16:08:21.2082756Z 
2022-06-21T16:08:21.2083399Z   [DB2] Pooling
2022-06-21T16:08:21.2083948Z     network / connection errors
2022-06-21T16:08:21.2300097Z       ✔ should obtain new connection when old connection is abruptly closed
2022-06-21T16:08:21.2451422Z       ✔ should obtain new connection when released connection dies inside pool
2022-06-21T16:08:21.2476811Z     idle
2022-06-21T16:08:21.3488705Z       ✔ should maintain connection within idle range (98ms)
2022-06-21T16:08:21.4748098Z       ✔ [MSSQL Flaky] should get new connection beyond idle range (121ms)
2022-06-21T16:08:21.4794182Z     acquire
2022-06-21T16:08:21.4933375Z       ✔ should reject with ConnectionAcquireTimeoutError when unable to acquire connection
2022-06-21T16:08:21.5095197Z       ✔ should reject with ConnectionAcquireTimeoutError when unable to acquire connection for transaction
2022-06-21T16:08:21.5116347Z 
2022-06-21T16:08:21.5117510Z   [DB2] QueryInterface
2022-06-21T16:08:21.5118323Z     dropAllSchema
2022-06-21T16:08:21.5563203Z       ✔ should drop all schema (40ms)
2022-06-21T16:08:21.5602402Z     showAllTables
2022-06-21T16:08:21.5895778Z       ✔ should not contain views
2022-06-21T16:08:21.6351020Z     renameTable
2022-06-21T16:08:21.6515341Z       ✔ should rename table
2022-06-21T16:08:21.6894808Z     dropAllTables
2022-06-21T16:08:21.7138611Z       ✔ should drop all tables
2022-06-21T16:08:21.7492623Z       ✔ should be able to skip given tables
2022-06-21T16:08:21.7864426Z     indexes
2022-06-21T16:08:21.8162649Z       ✔ adds, reads and removes an index to the table
2022-06-21T16:08:21.8811214Z       ✔ works with schemas
2022-06-21T16:08:21.9892124Z       ✔ does not fail on reserved keywords
2022-06-21T16:08:22.0263967Z     renameColumn
2022-06-21T16:08:22.0522787Z       ✔ rename a simple column
2022-06-21T16:08:22.1146147Z       ✔ works with schemas
2022-06-21T16:08:22.2031059Z       ✔ rename a column non-null without default value
2022-06-21T16:08:22.2659710Z       ✔ rename a boolean column non-null without default value
2022-06-21T16:08:22.3258409Z       ✔ shows a reasonable error message when column is missing
2022-06-21T16:08:22.3605805Z     addColumn
2022-06-21T16:08:22.3969230Z       ✔ should be able to add a foreign key reference
2022-06-21T16:08:22.4854112Z       ✔ addColumn expected error
2022-06-21T16:08:22.5866901Z       ✔ should work with schemas
2022-06-21T16:08:22.6547301Z     describeForeignKeys
2022-06-21T16:08:22.7179504Z       ✔ should get a list of foreign keys for the table
2022-06-21T16:08:22.8149307Z       ✔ should get a list of foreign key references details for the table
2022-06-21T16:08:22.8578390Z     constraints
2022-06-21T16:08:22.8578951Z       unique
2022-06-21T16:08:22.9184540Z         ✔ should add, read & remove unique constraint
2022-06-21T16:08:23.0184185Z         ✔ should add a constraint after another
2022-06-21T16:08:23.0590445Z       check
2022-06-21T16:08:23.1095406Z         ✔ should add, read & remove check constraint
2022-06-21T16:08:23.1891841Z         ✔ addconstraint missing type
2022-06-21T16:08:23.2293883Z       primary key
2022-06-21T16:08:23.4049850Z         ✔ should add, read & remove primary key constraint (133ms)
2022-06-21T16:08:23.4479049Z         - can add a constraint to a table in a non-default schema
2022-06-21T16:08:23.4480881Z       foreign key
2022-06-21T16:08:23.5464393Z         ✔ should add, read & remove foreign key constraint (56ms)
2022-06-21T16:08:23.6040036Z       unknown constraint
2022-06-21T16:08:23.6483686Z         ✔ should throw non existent constraints as UnknownConstraintError
2022-06-21T16:08:23.6880806Z 
2022-06-21T16:08:23.6881538Z   [DB2] QueryInterface
2022-06-21T16:08:23.6883038Z     changeColumn
2022-06-21T16:08:23.7179924Z       ✔ should support schemas
2022-06-21T16:08:23.7734325Z       ✔ should change columns
2022-06-21T16:08:23.8026735Z       should support foreign keys
2022-06-21T16:08:23.8407116Z         ✔ able to change column to foreign key
2022-06-21T16:08:23.9140649Z         ✔ able to change column property without affecting other properties
2022-06-21T16:08:23.9439630Z 
2022-06-21T16:08:23.9440149Z   [DB2] QueryInterface
2022-06-21T16:08:23.9440991Z     createTable
2022-06-21T16:08:23.9595535Z       ✔ should create a auto increment primary key
2022-06-21T16:08:24.0190562Z       ✔ should create unique constraint with uniqueKeys
2022-06-21T16:08:24.0623720Z       ✔ should work with schemas
2022-06-21T16:08:24.1338509Z       enums
2022-06-21T16:08:24.1477381Z         ✔ should work with enums (1)
2022-06-21T16:08:24.1943750Z         ✔ should work with enums (2)
2022-06-21T16:08:24.2407584Z         ✔ should work with enums (3)
2022-06-21T16:08:24.2927713Z         ✔ should work with enums (4)
2022-06-21T16:08:24.3422895Z         ✔ should work with enums (5)
2022-06-21T16:08:24.3854281Z 
2022-06-21T16:08:24.3856613Z   [DB2] QueryInterface
2022-06-21T16:08:24.3859746Z     describeTable
2022-06-21T16:08:24.5301775Z       ✔ reads the metadata of the table with schema (136ms)
2022-06-21T16:08:24.5695005Z       ✔ rejects when no data is available
2022-06-21T16:08:24.6050430Z       ✔ reads the metadata of the table
2022-06-21T16:08:24.6890984Z       ✔ should correctly determine the primary key columns (45ms)
2022-06-21T16:08:24.7295398Z 
2022-06-21T16:08:24.7295935Z   [DB2] QueryInterface
2022-06-21T16:08:24.7296476Z     getForeignKeyReferencesForTable
2022-06-21T16:08:24.7799707Z       ✔ should be able to provide existing foreign keys (48ms)
2022-06-21T16:08:24.8202575Z 
2022-06-21T16:08:24.8205772Z   [DB2] QueryInterface
2022-06-21T16:08:24.8209042Z     removeColumn
2022-06-21T16:08:24.8211989Z       (without a schema)
2022-06-21T16:08:24.8646831Z         ✔ should be able to remove a column with a default value
2022-06-21T16:08:24.9287248Z         ✔ should be able to remove a column without default value
2022-06-21T16:08:24.9970921Z         ✔ should be able to remove a column with a foreign key constraint
2022-06-21T16:08:25.0630061Z         ✔ should be able to remove a column with primaryKey
2022-06-21T16:08:25.1395488Z         ✔ should be able to remove a column with unique contraint
2022-06-21T16:08:25.1733870Z       (with a schema)
2022-06-21T16:08:25.1991351Z         ✔ [Flaky] should be able to remove a column with a default value
2022-06-21T16:08:25.2572803Z         ✔ should be able to remove a column without default value
2022-06-21T16:08:25.3296653Z         ✔ should be able to remove a column with primaryKey
2022-06-21T16:08:25.3987622Z         ✔ should be able to remove a column with unique contraint
2022-06-21T16:08:25.4338736Z 
2022-06-21T16:08:25.4340438Z   [DB2] Replication
2022-06-21T16:08:25.4342306Z     connection objects
2022-06-21T16:08:25.4512646Z Executing (default): DROP TABLE IF EXISTS "Users";
2022-06-21T16:08:25.4530048Z Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) , "first_name" VARCHAR(255), "createdAt" TIMESTAMP NOT NULL, "updatedAt" TIMESTAMP NOT NULL, PRIMARY KEY ("id"));
2022-06-21T16:08:25.4675992Z Executing (default): SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES WHERE TBNAME = 'Users' ORDER BY NAME;
2022-06-21T16:08:25.4704160Z Executing (default): SELECT * FROM FINAL TABLE (INSERT INTO "Users" ("first_name","createdAt","updatedAt") VALUES (?,?,?));
2022-06-21T16:08:25.4742711Z       ✔ should be able to make a write
2022-06-21T16:08:25.5106481Z Executing (default): DROP TABLE IF EXISTS "Users";
2022-06-21T16:08:25.5123659Z Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) , "first_name" VARCHAR(255), "createdAt" TIMESTAMP NOT NULL, "updatedAt" TIMESTAMP NOT NULL, PRIMARY KEY ("id"));
2022-06-21T16:08:25.5253103Z Executing (default): SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES WHERE TBNAME = 'Users' ORDER BY NAME;
2022-06-21T16:08:25.5503805Z Executing (default): SELECT "id", "first_name" AS "firstName", "createdAt", "updatedAt" FROM "Users" AS "User";
2022-06-21T16:08:25.5525894Z       ✔ should be able to make a read
2022-06-21T16:08:25.5891432Z Executing (default): DROP TABLE IF EXISTS "Users";
2022-06-21T16:08:25.5910776Z Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) , "first_name" VARCHAR(255), "createdAt" TIMESTAMP NOT NULL, "updatedAt" TIMESTAMP NOT NULL, PRIMARY KEY ("id"));
2022-06-21T16:08:25.6678679Z Executing (default): SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES WHERE TBNAME = 'Users' ORDER BY NAME;
2022-06-21T16:08:25.6731705Z Executing (569dcd20dce389ba01b2): BEGIN TRANSACTION;
2022-06-21T16:08:25.6741908Z Executing (569dcd20dce389ba01b2): SELECT "id", "first_name" AS "firstName", "createdAt", "updatedAt" FROM "Users" AS "User";
2022-06-21T16:08:25.6767120Z Executing (569dcd20dce389ba01b2): COMMIT TRANSACTION;
2022-06-21T16:08:25.6776870Z       ✔ should run read-only transactions on the replica
2022-06-21T16:08:25.7156170Z Executing (default): DROP TABLE IF EXISTS "Users";
2022-06-21T16:08:25.7172988Z Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) , "first_name" VARCHAR(255), "createdAt" TIMESTAMP NOT NULL, "updatedAt" TIMESTAMP NOT NULL, PRIMARY KEY ("id"));
2022-06-21T16:08:25.7321916Z Executing (default): SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES WHERE TBNAME = 'Users' ORDER BY NAME;
2022-06-21T16:08:25.7338193Z Executing (23d0515769f5d6b4b268): BEGIN TRANSACTION;
2022-06-21T16:08:25.7343625Z Executing (23d0515769f5d6b4b268): SELECT "id", "first_name" AS "firstName", "createdAt", "updatedAt" FROM "Users" AS "User";
2022-06-21T16:08:25.7365602Z Executing (23d0515769f5d6b4b268): COMMIT TRANSACTION;
2022-06-21T16:08:25.7371311Z       ✔ should run non-read-only transactions on the primary
2022-06-21T16:08:25.7626178Z 
2022-06-21T16:08:25.7629109Z   [DB2] Schema
2022-06-21T16:08:25.7927028Z     ✔ supports increment
2022-06-21T16:08:25.8869977Z     ✔ supports decrement
2022-06-21T16:08:25.9198922Z 
2022-06-21T16:08:25.9203297Z   [DB2] Sequelize
2022-06-21T16:08:25.9206429Z     constructor
2022-06-21T16:08:25.9241111Z       ✔ should pass the global options correctly
2022-06-21T16:08:25.9328527Z       ✔ should correctly set the host and the port
2022-06-21T16:08:25.9379774Z       ✔ should set operators aliases on dialect queryGenerator
2022-06-21T16:08:25.9382635Z (node:21879) [SEQUELIZE0003] DeprecationWarning: String based operators are deprecated. Please use Symbol based operators for better security, read more at https://sequelize.org/docs/v7/core-concepts/model-querying-basics/#deprecated-operator-aliases
2022-06-21T16:08:25.9403225Z     authenticate
2022-06-21T16:08:25.9406666Z       with valid credentials
2022-06-21T16:08:25.9438349Z         ✔ triggers the success event
2022-06-21T16:08:25.9460094Z       with an invalid connection
2022-06-21T16:08:25.9523211Z         ✔ triggers the error event
2022-06-21T16:08:25.9601857Z         ✔ triggers an actual RangeError or ConnectionError
2022-06-21T16:08:25.9678993Z         ✔ triggers the actual adapter error
2022-06-21T16:08:25.9700015Z       with invalid credentials
2022-06-21T16:08:25.9758195Z         ✔ triggers the error event
2022-06-21T16:08:25.9838002Z         ✔ triggers an actual sequlize error
2022-06-21T16:08:25.9861031Z     validate
2022-06-21T16:08:25.9883261Z       ✔ is an alias for .authenticate()
2022-06-21T16:08:25.9902872Z     getDialect
2022-06-21T16:08:25.9923835Z       ✔ returns the defined dialect
2022-06-21T16:08:25.9948390Z     getDatabaseName
2022-06-21T16:08:25.9970029Z       ✔ returns the database name
2022-06-21T16:08:25.9990199Z     isDefined
2022-06-21T16:08:26.0011905Z       ✔ returns false if the dao wasn't defined before
2022-06-21T16:08:26.0057202Z       ✔ returns true if the dao was defined before
2022-06-21T16:08:26.0079044Z     model
2022-06-21T16:08:26.0103053Z       ✔ throws an error if the dao being accessed is undefined
2022-06-21T16:08:26.0146495Z       ✔ returns the dao factory defined by daoName
2022-06-21T16:08:26.0168899Z     set
2022-06-21T16:08:26.0209149Z       ✔ should be configurable with global functions
2022-06-21T16:08:26.0231874Z     define
2022-06-21T16:08:26.0257564Z       ✔ adds a new dao to the dao manager
2022-06-21T16:08:26.0302533Z       ✔ adds a new dao to sequelize.models
2022-06-21T16:08:26.0349072Z       ✔ overwrites global options
2022-06-21T16:08:26.0396009Z       ✔ overwrites global rowFormat options
2022-06-21T16:08:26.0443143Z       ✔ inherits global collate option
2022-06-21T16:08:26.0489357Z       ✔ inherits global rowFormat option
2022-06-21T16:08:26.0716336Z       ✔ uses the passed tableName
2022-06-21T16:08:26.1011693Z     truncate
2022-06-21T16:08:26.1430351Z       ✔ truncates all models
2022-06-21T16:08:26.1713148Z     sync
2022-06-21T16:08:26.2146253Z       ✔ synchronizes all models (41ms)
2022-06-21T16:08:26.2710821Z       ✔ works with correct database credentials
2022-06-21T16:08:26.2994514Z       ✔ fails with incorrect match condition
2022-06-21T16:08:26.3047693Z       ✔ return the sequelize instance after syncing
2022-06-21T16:08:26.3279274Z       ✔ return the single dao after syncing
2022-06-21T16:08:26.3797488Z       ✔ handles alter: true with underscore correctly
2022-06-21T16:08:26.4102179Z       doesn't emit logging when explicitly saying not to
2022-06-21T16:08:26.4381682Z         ✔ through Sequelize.sync()
2022-06-21T16:08:26.4894862Z         ✔ through DAOFactory.sync()
2022-06-21T16:08:26.5153931Z       match
2022-06-21T16:08:26.5177222Z         ✔ will return an error not matching
2022-06-21T16:08:26.5198107Z     drop should work
2022-06-21T16:08:26.5516269Z       ✔ correctly succeeds
2022-06-21T16:08:26.5685785Z     define
2022-06-21T16:08:26.5713839Z       ✔ raises an error if no values are defined
2022-06-21T16:08:26.5735857Z     define
2022-06-21T16:08:26.5736301Z       enum
2022-06-21T16:08:26.6058447Z         ✔ raises an error if no values are defined
2022-06-21T16:08:26.6890304Z         ✔ correctly stores values
2022-06-21T16:08:26.7606619Z         ✔ correctly loads values
2022-06-21T16:08:26.8246288Z         ✔ doesn't save an instance if value is not in the range of enums
2022-06-21T16:08:26.8494268Z       enum
2022-06-21T16:08:26.8846022Z         ✔ raises an error if no values are defined
2022-06-21T16:08:26.9486171Z         ✔ correctly stores values
2022-06-21T16:08:27.0098768Z         ✔ correctly loads values
2022-06-21T16:08:27.0643895Z         ✔ doesn't save an instance if value is not in the range of enums
2022-06-21T16:08:27.0933563Z       table
2022-06-21T16:08:27.1119093Z         ✔ should be able to override options on the default attributes
2022-06-21T16:08:27.1576452Z         ✔ should be able to override options on the default attributes
2022-06-21T16:08:27.2022415Z         ✔ should be able to override options on the default attributes
2022-06-21T16:08:27.2269642Z       transaction
2022-06-21T16:08:27.2299297Z         ✔ is a transaction method available
2022-06-21T16:08:27.2348410Z         ✔ passes a transaction object to the callback
2022-06-21T16:08:27.2399696Z         ✔ allows me to define a callback on the result
2022-06-21T16:08:27.2678379Z (node:21879) [SEQUELIZE0001] DeprecationWarning: Use sequelize.fn / sequelize.literal to construct attributes
2022-06-21T16:08:27.2749980Z         ✔ correctly handles multiple transactions
2022-06-21T16:08:27.3485361Z         ✔ supports nested transactions using savepoints
2022-06-21T16:08:27.4187738Z         ✔ supports rolling back a nested transaction
2022-06-21T16:08:27.4912502Z         ✔ supports rolling back outermost transaction (41ms)
2022-06-21T16:08:27.5403150Z         supports rolling back to savepoints
2022-06-21T16:08:27.5729650Z           ✔ rolls back to the first savepoint, undoing everything
2022-06-21T16:08:27.6319853Z           ✔ rolls back to the most recent savepoint, only undoing recent changes
2022-06-21T16:08:27.6600418Z     databaseVersion
2022-06-21T16:08:27.6639501Z       ✔ should database/dialect version
2022-06-21T16:08:27.6660762Z     paranoid deletedAt non-null default value
2022-06-21T16:08:27.7120397Z       ✔ should use defaultValue of deletedAt in paranoid clause and restore (44ms)
2022-06-21T16:08:27.7731706Z 
2022-06-21T16:08:27.7732329Z   [DB2] Sequelize#transaction
2022-06-21T16:08:27.7733381Z     Transaction#commit
2022-06-21T16:08:27.7787160Z       ✔ returns a promise that resolves once the transaction has been committed
2022-06-21T16:08:27.7841894Z Committing transaction 5b056a11170b52bade81 failed with error "Oh no, an error!". We are killing its connection as it is now in an undetermined state.
2022-06-21T16:08:27.7845364Z       ✔ does not pollute the pool with broken connections if commit fails
2022-06-21T16:08:27.7870386Z     Transaction#rollback
2022-06-21T16:08:27.7902950Z       ✔ returns a promise that resolves once the transaction has been rolled back
2022-06-21T16:08:27.7952997Z Rolling back transaction 145bdcaa7fd4c0c02ecf failed with error "Oh no, an error!". We are killing its connection as it is now in an undetermined state.
2022-06-21T16:08:27.7960426Z       ✔ does not pollute the pool with broken connections if the rollback fails
2022-06-21T16:08:27.7982803Z     complex long running example
2022-06-21T16:08:28.8319630Z       ✔ works with promise syntax (1031ms)
2022-06-21T16:08:28.8645689Z     concurrency: having tables with uniqueness constraints
2022-06-21T16:08:28.9970839Z       ✔ triggers the error event for the second transactions (130ms)
2022-06-21T16:08:29.0284883Z 
2022-06-21T16:08:29.0286124Z   Sequelize#drop
2022-06-21T16:08:29.1373602Z     ✔ supports dropping cyclic associations (107ms)
2022-06-21T16:08:29.1557825Z 
2022-06-21T16:08:29.1561172Z   [DB2] Sequelize
2022-06-21T16:08:29.1564478Z     log
2022-06-21T16:08:29.1567389Z       with disabled logging
2022-06-21T16:08:29.1600860Z         ✔ does not call the log method of the logger
2022-06-21T16:08:29.1623085Z       with default logging options
2022-06-21T16:08:29.1623657Z         called with no arguments
2022-06-21T16:08:29.1654934Z           ✔ calls the log method
2022-06-21T16:08:29.1702797Z           ✔ logs an empty string as info event
2022-06-21T16:08:29.1726987Z         called with one argument
2022-06-21T16:08:29.1764928Z           ✔ logs the passed string as info event
2022-06-21T16:08:29.1786664Z         called with more than two arguments
2022-06-21T16:08:29.1814102Z           ✔ passes the arguments to the logger
2022-06-21T16:08:29.1834934Z       with a custom function for logging
2022-06-21T16:08:29.1861852Z         ✔ calls the custom logger method
2022-06-21T16:08:29.1912497Z         ✔ calls the custom logger method with options
2022-06-21T16:08:29.1933618Z 
2022-06-21T16:08:29.1935013Z   [DB2] Sequelize
2022-06-21T16:08:29.1936293Z     query
2022-06-21T16:08:29.2192948Z       ✔ executes a query the internal way
2022-06-21T16:08:29.2696325Z       ✔ executes a query if only the sql is passed
2022-06-21T16:08:29.3269592Z       ✔ executes select queries correctly
2022-06-21T16:08:29.3812950Z       ✔ executes select queries correctly when quoteIdentifiers is false
2022-06-21T16:08:29.4354833Z       ✔ executes select query with dot notation results
2022-06-21T16:08:29.4888346Z       ✔ executes select query with dot notation results and nest it
2022-06-21T16:08:29.5639932Z       ✔ executes stored procedures
2022-06-21T16:08:29.6661157Z       ✔ uses the passed model
2022-06-21T16:08:29.7191998Z       ✔ maps the field names to attributes based on the passed model
2022-06-21T16:08:29.7741452Z       ✔ arbitrarily map the field names
2022-06-21T16:08:29.8309401Z       ✔ keeps field names that are mapped to the same name
2022-06-21T16:08:29.8858977Z       ✔ properly adds and escapes replacement value
2022-06-21T16:08:29.9342984Z       ✔ dot separated attributes when doing a raw query without nest
2022-06-21T16:08:29.9809140Z       ✔ destructs dot separated attributes when doing a raw query using nest
2022-06-21T16:08:30.0297905Z       ✔ replaces token with the passed array
2022-06-21T16:08:30.0770206Z       ✔ replaces named parameters with the passed object
2022-06-21T16:08:30.1275630Z       ✔ replaces named parameters with the passed object and ignore those which does not qualify
2022-06-21T16:08:30.1788816Z       ✔ replaces named parameters with the passed object using the same key twice
2022-06-21T16:08:30.2911141Z       ✔ replaces named parameters with the passed object having a null property
2022-06-21T16:08:30.3422048Z       ✔ binds token with the passed array
2022-06-21T16:08:30.3923968Z       ✔ binds named parameters with the passed object
2022-06-21T16:08:30.5674722Z       ✔ binds named parameters with the passed object having a null property
2022-06-21T16:08:30.6236696Z       ✔ does not transform $$ in strings (positional)
2022-06-21T16:08:30.6728635Z       ✔ does not transform $$ in strings (named)
2022-06-21T16:08:30.7240858Z       ✔ does not treat a $ as a bind param if it's in the middle of an identifier
2022-06-21T16:08:30.7752546Z       ✔ handles AS in conjunction with functions just fine
2022-06-21T16:08:30.8007895Z       QueryTypes
2022-06-21T16:08:30.8301388Z         ✔ RAW
2022-06-21T16:08:30.8558089Z       retry
2022-06-21T16:08:30.8852743Z         ✔ properly bind parameters on extra retries
2022-06-21T16:08:30.9121736Z       logging
2022-06-21T16:08:30.9438998Z         ✔ executes a query with global benchmarking option and custom logger
2022-06-21T16:08:30.9925710Z         ✔ executes a query with benchmarking option and custom logger
2022-06-21T16:08:31.0190726Z         with logQueryParameters
2022-06-21T16:08:31.0754010Z           ✔ add parameters in log sql
2022-06-21T16:08:31.1579550Z           ✔ add parameters in log sql when use bind value
2022-06-21T16:08:31.1845675Z       stacktraces
2022-06-21T16:08:31.2331624Z         ✔ emits raw errors if requested
2022-06-21T16:08:31.3296637Z         ✔ emits full stacktraces for generic database error
2022-06-21T16:08:31.4339049Z         ✔ emits full stacktraces for unique constraint error
2022-06-21T16:08:31.5213174Z         ✔ emits full stacktraces for constraint validation error
2022-06-21T16:08:31.5592617Z       rejections
2022-06-21T16:08:31.5813895Z         ✔ reject if the query is not a string
2022-06-21T16:08:31.6471974Z         ✔ reject when key is missing in the passed object
2022-06-21T16:08:31.7026434Z         ✔ rejects if replacements is a number
2022-06-21T16:08:31.7494960Z         ✔ rejects if a replacement is missing
2022-06-21T16:08:31.7962609Z         ✔ rejects if replacements is a string
2022-06-21T16:08:31.8540288Z         ✔ reject if replacements is not a plain object
2022-06-21T16:08:31.9026900Z         ✔ reject when binds passed with object and numeric $1 is also present
2022-06-21T16:08:31.9473679Z         ✔ rejects when binds passed as array and a named parameter is also present
2022-06-21T16:08:31.9940151Z         ✔ reject when bind key is $0 and bind is an array
2022-06-21T16:08:32.0426005Z         ✔ reject when bind key is $01 and bind is an array
2022-06-21T16:08:32.0897048Z         ✔ reject when bind key is missing in the passed array
2022-06-21T16:08:32.1381062Z         ✔ reject when bind key is missing in the passed object
2022-06-21T16:08:32.1878971Z         ✔ rejects if options.bind is a number
2022-06-21T16:08:32.2727235Z         ✔ rejects if a bind parameter is not present in options.bind
2022-06-21T16:08:32.3227476Z         ✔ rejects if options.bind is a string
2022-06-21T16:08:32.3742411Z         ✔ rejects if options.bind is a non-pojo object
2022-06-21T16:08:32.4015518Z 
2022-06-21T16:08:32.4016105Z   [DB2] Timezone
2022-06-21T16:08:32.4128995Z     ✔ returns the same value for current timestamp
2022-06-21T16:08:32.4153636Z 
2022-06-21T16:08:32.4157041Z   [DB2] Transaction
2022-06-21T16:08:32.4211826Z     ✔ does not allow queries after commit
2022-06-21T16:08:32.4280137Z     ✔ does not allow queries immediately after commit call
2022-06-21T16:08:32.4358304Z     ✔ does not allow queries after rollback
2022-06-21T16:08:32.4428744Z     ✔ should not rollback if connection was not acquired
2022-06-21T16:08:32.4480234Z     ✔ does not allow queries immediately after rollback call
2022-06-21T16:08:32.4528604Z     ✔ does not allow commits after commit
2022-06-21T16:08:32.4582918Z     ✔ should run hooks if a non-auto callback transaction is committed
2022-06-21T16:08:32.4632453Z     ✔ should not run hooks if a non-auto callback transaction is rolled back
2022-06-21T16:08:32.4680638Z     ✔ should throw an error if null is passed to afterCommit
2022-06-21T16:08:32.4728358Z     ✔ should throw an error if undefined is passed to afterCommit
2022-06-21T16:08:32.4777411Z     ✔ should throw an error if an object is passed to afterCommit
2022-06-21T16:08:32.4824534Z     ✔ does not allow commits after rollback
2022-06-21T16:08:32.4877935Z     ✔ does not allow rollbacks after commit
2022-06-21T16:08:32.4966585Z     ✔ does not allow rollbacks after rollback
2022-06-21T16:08:32.5020423Z     ✔ works even if a transaction: null option is passed
2022-06-21T16:08:32.5072609Z     ✔ works even if a transaction: undefined option is passed
2022-06-21T16:08:32.5093363Z     constructor
2022-06-21T16:08:32.5115246Z       ✔ stores options
2022-06-21T16:08:32.5266729Z       ✔ generates an identifier
2022-06-21T16:08:32.5308161Z       ✔ should call dialect specific generateTransactionId method
2022-06-21T16:08:32.5329993Z     commit
2022-06-21T16:08:32.5365843Z       ✔ is a commit method available
2022-06-21T16:08:32.5390010Z     rollback
2022-06-21T16:08:32.5413317Z       ✔ is a rollback method available
2022-06-21T16:08:32.5435452Z     autoCallback
2022-06-21T16:08:32.5467507Z       ✔ supports automatically committing
2022-06-21T16:08:32.5519156Z       ✔ supports automatically rolling back with a thrown error
2022-06-21T16:08:32.5570290Z       ✔ supports automatically rolling back with a rejection
2022-06-21T16:08:32.5628678Z       ✔ supports running hooks when a transaction is committed
2022-06-21T16:08:32.5680915Z       ✔ does not run hooks when a transaction is rolled back
2022-06-21T16:08:32.5703057Z     isolation levels
2022-06-21T16:08:32.6087315Z       ✔ should read the most recent committed rows when using the READ COMMITTED isolation level
2022-06-21T16:08:32.6371857Z 
2022-06-21T16:08:32.6373310Z   [DB2] Model
2022-06-21T16:08:32.6374610Z     trigger
2022-06-21T16:08:32.6644954Z (sequelize) Warning: Model attributes (username) passed into finder method options of model user, but the options.where object is empty. Did you forget to use options.where?
2022-06-21T16:08:32.6667153Z       ✔ should return output rows after insert
2022-06-21T16:08:32.7440077Z (sequelize) Warning: Model attributes (username) passed into finder method options of model user, but the options.where object is empty. Did you forget to use options.where?
2022-06-21T16:08:32.7459983Z       ✔ should return output rows after instance update
2022-06-21T16:08:32.8142672Z (sequelize) Warning: Model attributes (username) passed into finder method options of model user, but the options.where object is empty. Did you forget to use options.where?
2022-06-21T16:08:32.8164834Z       ✔ should return output rows after Model update
2022-06-21T16:08:32.8938269Z (sequelize) Warning: Model attributes (username) passed into finder method options of model user, but the options.where object is empty. Did you forget to use options.where?
2022-06-21T16:08:32.8960399Z       ✔ should successfully delete with a trigger on the table
2022-06-21T16:08:32.9324840Z 
2022-06-21T16:08:32.9327700Z   [DB2] Utils
2022-06-21T16:08:32.9330764Z     Sequelize.fn
2022-06-21T16:08:32.9605889Z       ✔ accepts condition object (with cast)
2022-06-21T16:08:33.0092658Z       ✔ accepts condition object (auto casting)
2022-06-21T16:08:33.0347189Z 
2022-06-21T16:08:33.0347701Z   [DB2] Vectors
2022-06-21T16:08:33.0584043Z     ✔ should not allow insert backslash
2022-06-21T16:08:33.0839675Z 
2022-06-21T16:08:33.0844906Z 
2022-06-21T16:08:33.0848744Z   1639 passing (3m)
2022-06-21T16:08:33.0851362Z   2 pending
2022-06-21T16:08:33.0853862Z   1 failing
2022-06-21T16:08:33.0856606Z 
2022-06-21T16:08:33.0862388Z   1) [DB2] CLS (Async hooks)
2022-06-21T16:08:33.0862650Z        Model Hook integration
2022-06-21T16:08:33.0863095Z          passes the transaction to hooks {beforeUpsert,afterUpsert} when calling Model.upsert:
2022-06-21T16:08:33.0863540Z      Error: Primary Key or Unique key should be passed to upsert query
2022-06-21T16:08:33.0864247Z       at Db2QueryGenerator.upsertQuery (src/dialects/db2/query-generator.js:489:13)
2022-06-21T16:08:33.0864787Z       at Db2QueryInterface.upsert (src/dialects/db2/query-interface.js:79:37)
2022-06-21T16:08:33.0865379Z       at Function.upsert (src/model.js:2534:46)
2022-06-21T16:08:33.0865717Z       at Context.execute (test/integration/cls.test.js:225:11)
2022-06-21T16:08:33.0866104Z       at /home/runner/work/sequelize/sequelize/test/integration/cls.test.js:163:13
2022-06-21T16:08:33.0866509Z       at /home/runner/work/sequelize/sequelize/src/sequelize.js:1117:18
2022-06-21T16:08:33.0866889Z       at Context.<anonymous> (test/integration/cls.test.js:152:11)
2022-06-21T16:08:33.0867073Z 
2022-06-21T16:08:33.0868397Z 
2022-06-21T16:08:33.0870711Z 
2022-06-21T16:08:33.4733742Z error Command failed with exit code 1.
2022-06-21T16:08:33.4735379Z info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
2022-06-21T16:08:33.4918963Z error Command failed with exit code 1.
2022-06-21T16:08:33.4921647Z info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
2022-06-21T16:08:33.4984932Z ##[error]Process completed with exit code 1.
2022-06-21T16:08:33.5039116Z Post job cleanup.
2022-06-21T16:08:33.6293541Z [command]/usr/bin/git version
2022-06-21T16:08:33.6344733Z git version 2.36.1
2022-06-21T16:08:33.6390626Z Temporarily overriding HOME='/home/runner/work/_temp/4a0cfca4-4183-4d97-b8e2-a142214c6a9c' before making global git config changes
2022-06-21T16:08:33.6392353Z Adding repository directory to the temporary git global config as a safe directory
2022-06-21T16:08:33.6397740Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/sequelize/sequelize
2022-06-21T16:08:33.6435631Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-21T16:08:33.6470156Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-21T16:08:33.6716057Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-21T16:08:33.6734453Z http.https://github.com/.extraheader
2022-06-21T16:08:33.6745656Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2022-06-21T16:08:33.6779185Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-21T16:08:33.7238276Z Cleaning up orphan processes