2022-06-21T23:40:56.8216268Z Requested labels: ubuntu-20.04
2022-06-21T23:40:56.8216323Z Job defined at: hyperledger/fabric-sdk-node/.github/workflows/build.yml@refs/heads/main
2022-06-21T23:40:56.8216351Z Waiting for a runner to pick up this job...
2022-06-21T23:40:58.2658698Z Job is waiting for a hosted runner to come online.
2022-06-21T23:41:02.2079570Z Job is about to start running on the hosted runner: Hosted Agent (hosted)
2022-06-21T23:41:06.5548093Z Current runner version: '2.293.0'
2022-06-21T23:41:06.5579051Z ##[group]Operating System
2022-06-21T23:41:06.5579810Z Ubuntu
2022-06-21T23:41:06.5580108Z 20.04.4
2022-06-21T23:41:06.5580358Z LTS
2022-06-21T23:41:06.5580765Z ##[endgroup]
2022-06-21T23:41:06.5581111Z ##[group]Virtual Environment
2022-06-21T23:41:06.5581452Z Environment: ubuntu-20.04
2022-06-21T23:41:06.5581809Z Version: 20220614.0
2022-06-21T23:41:06.5582564Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu20/20220614.0/images/linux/Ubuntu2004-Readme.md
2022-06-21T23:41:06.5583212Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220614.0
2022-06-21T23:41:06.5583689Z ##[endgroup]
2022-06-21T23:41:06.5584064Z ##[group]Virtual Environment Provisioner
2022-06-21T23:41:06.5584654Z 1.0.0.0-main-20220531-1
2022-06-21T23:41:06.5584988Z ##[endgroup]
2022-06-21T23:41:06.5586639Z ##[group]GITHUB_TOKEN Permissions
2022-06-21T23:41:06.5587516Z Actions: write
2022-06-21T23:41:06.5588118Z Checks: write
2022-06-21T23:41:06.5588589Z Contents: write
2022-06-21T23:41:06.5588965Z Deployments: write
2022-06-21T23:41:06.5589310Z Discussions: write
2022-06-21T23:41:06.5589728Z Issues: write
2022-06-21T23:41:06.5590134Z Metadata: read
2022-06-21T23:41:06.5590448Z Packages: write
2022-06-21T23:41:06.5590823Z Pages: write
2022-06-21T23:41:06.5591193Z PullRequests: write
2022-06-21T23:41:06.5591547Z RepositoryProjects: write
2022-06-21T23:41:06.5592189Z SecurityEvents: write
2022-06-21T23:41:06.5592728Z Statuses: write
2022-06-21T23:41:06.5593055Z ##[endgroup]
2022-06-21T23:41:06.5598241Z Secret source: Actions
2022-06-21T23:41:06.5598898Z Prepare workflow directory
2022-06-21T23:41:06.7192019Z Prepare all required actions
2022-06-21T23:41:06.7428427Z Getting action download info
2022-06-21T23:41:06.9947165Z Download action repository 'actions/checkout@v3' (SHA:2541b1294d2704b0964813337f33b291d3f8596b)
2022-06-21T23:41:07.7208431Z Download action repository 'actions/setup-node@v3' (SHA:eeb10cff27034e7acf239c5d29f62154018672fd)
2022-06-21T23:41:08.5594311Z ##[group]Run actions/checkout@v3
2022-06-21T23:41:08.5594681Z with:
2022-06-21T23:41:08.5595180Z   repository: hyperledger/fabric-sdk-node
2022-06-21T23:41:08.5595996Z   token: ***
2022-06-21T23:41:08.5596247Z   ssh-strict: true
2022-06-21T23:41:08.5596555Z   persist-credentials: true
2022-06-21T23:41:08.5596879Z   clean: true
2022-06-21T23:41:08.5597128Z   fetch-depth: 1
2022-06-21T23:41:08.5597623Z   lfs: false
2022-06-21T23:41:08.5597906Z   submodules: false
2022-06-21T23:41:08.5598163Z   set-safe-directory: true
2022-06-21T23:41:08.5598481Z env:
2022-06-21T23:41:08.5598836Z   FABRIC_VERSION: 2.2
2022-06-21T23:41:08.5599370Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:41:08.5599774Z ##[endgroup]
2022-06-21T23:41:08.9407806Z Syncing repository: hyperledger/fabric-sdk-node
2022-06-21T23:41:08.9409926Z ##[group]Getting Git version info
2022-06-21T23:41:08.9411243Z Working directory is '/home/runner/work/fabric-sdk-node/fabric-sdk-node'
2022-06-21T23:41:08.9412171Z [command]/usr/bin/git version
2022-06-21T23:41:08.9561567Z git version 2.36.1
2022-06-21T23:41:08.9598787Z ##[endgroup]
2022-06-21T23:41:08.9620095Z Temporarily overriding HOME='/home/runner/work/_temp/bc3a486d-db98-4f0b-8c47-af1d62005219' before making global git config changes
2022-06-21T23:41:08.9620727Z Adding repository directory to the temporary git global config as a safe directory
2022-06-21T23:41:08.9623683Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:41:08.9670511Z Deleting the contents of '/home/runner/work/fabric-sdk-node/fabric-sdk-node'
2022-06-21T23:41:08.9675197Z ##[group]Initializing the repository
2022-06-21T23:41:08.9679147Z [command]/usr/bin/git init /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:41:08.9796085Z hint: Using 'master' as the name for the initial branch. This default branch name
2022-06-21T23:41:08.9797498Z hint: is subject to change. To configure the initial branch name to use in all
2022-06-21T23:41:08.9798134Z hint: of your new repositories, which will suppress this warning, call:
2022-06-21T23:41:08.9798522Z hint: 
2022-06-21T23:41:08.9799128Z hint: 	git config --global init.defaultBranch <name>
2022-06-21T23:41:08.9799438Z hint: 
2022-06-21T23:41:08.9799932Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2022-06-21T23:41:08.9800582Z hint: 'development'. The just-created branch can be renamed via this command:
2022-06-21T23:41:08.9801140Z hint: 
2022-06-21T23:41:08.9801445Z hint: 	git branch -m <name>
2022-06-21T23:41:08.9812150Z Initialized empty Git repository in /home/runner/work/fabric-sdk-node/fabric-sdk-node/.git/
2022-06-21T23:41:08.9821134Z [command]/usr/bin/git remote add origin https://github.com/hyperledger/fabric-sdk-node
2022-06-21T23:41:08.9869224Z ##[endgroup]
2022-06-21T23:41:08.9870406Z ##[group]Disabling automatic garbage collection
2022-06-21T23:41:08.9873804Z [command]/usr/bin/git config --local gc.auto 0
2022-06-21T23:41:08.9920905Z ##[endgroup]
2022-06-21T23:41:08.9922051Z ##[group]Setting up auth
2022-06-21T23:41:08.9931761Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-21T23:41:08.9972884Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-21T23:41:09.0441229Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-21T23:41:09.0478991Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-21T23:41:09.0760416Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2022-06-21T23:41:09.0820074Z ##[endgroup]
2022-06-21T23:41:09.0822059Z ##[group]Fetching the repository
2022-06-21T23:41:09.0833422Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +34327c667e67f5dd3a23381d05d0a3403e4df24a:refs/remotes/origin/main
2022-06-21T23:41:09.4172419Z remote: Enumerating objects: 1246, done.        
2022-06-21T23:41:09.4208948Z remote: Counting objects:   0% (1/1246)        
2022-06-21T23:41:09.4209995Z remote: Counting objects:   1% (13/1246)        
2022-06-21T23:41:09.4211621Z remote: Counting objects:   2% (25/1246)        
2022-06-21T23:41:09.4212311Z remote: Counting objects:   3% (38/1246)        
2022-06-21T23:41:09.4213175Z remote: Counting objects:   4% (50/1246)        
2022-06-21T23:41:09.4213614Z remote: Counting objects:   5% (63/1246)        
2022-06-21T23:41:09.4214529Z remote: Counting objects:   6% (75/1246)        
2022-06-21T23:41:09.4215129Z remote: Counting objects:   7% (88/1246)        
2022-06-21T23:41:09.4215654Z remote: Counting objects:   8% (100/1246)        
2022-06-21T23:41:09.4216191Z remote: Counting objects:   9% (113/1246)        
2022-06-21T23:41:09.4217764Z remote: Counting objects:  10% (125/1246)        
2022-06-21T23:41:09.4218421Z remote: Counting objects:  11% (138/1246)        
2022-06-21T23:41:09.4219110Z remote: Counting objects:  12% (150/1246)        
2022-06-21T23:41:09.4219591Z remote: Counting objects:  13% (162/1246)        
2022-06-21T23:41:09.4220175Z remote: Counting objects:  14% (175/1246)        
2022-06-21T23:41:09.4220864Z remote: Counting objects:  15% (187/1246)        
2022-06-21T23:41:09.4221431Z remote: Counting objects:  16% (200/1246)        
2022-06-21T23:41:09.4221897Z remote: Counting objects:  17% (212/1246)        
2022-06-21T23:41:09.4222327Z remote: Counting objects:  18% (225/1246)        
2022-06-21T23:41:09.4224601Z remote: Counting objects:  19% (237/1246)        
2022-06-21T23:41:09.4225180Z remote: Counting objects:  20% (250/1246)        
2022-06-21T23:41:09.4225834Z remote: Counting objects:  21% (262/1246)        
2022-06-21T23:41:09.4226851Z remote: Counting objects:  22% (275/1246)        
2022-06-21T23:41:09.4227262Z remote: Counting objects:  23% (287/1246)        
2022-06-21T23:41:09.4227586Z remote: Counting objects:  24% (300/1246)        
2022-06-21T23:41:09.4227968Z remote: Counting objects:  25% (312/1246)        
2022-06-21T23:41:09.4228412Z remote: Counting objects:  26% (324/1246)        
2022-06-21T23:41:09.4228808Z remote: Counting objects:  27% (337/1246)        
2022-06-21T23:41:09.4229148Z remote: Counting objects:  28% (349/1246)        
2022-06-21T23:41:09.4229683Z remote: Counting objects:  29% (362/1246)        
2022-06-21T23:41:09.4231737Z remote: Counting objects:  30% (374/1246)        
2022-06-21T23:41:09.4232239Z remote: Counting objects:  31% (387/1246)        
2022-06-21T23:41:09.4232800Z remote: Counting objects:  32% (399/1246)        
2022-06-21T23:41:09.4234565Z remote: Counting objects:  33% (412/1246)        
2022-06-21T23:41:09.4235221Z remote: Counting objects:  34% (424/1246)        
2022-06-21T23:41:09.4235727Z remote: Counting objects:  35% (437/1246)        
2022-06-21T23:41:09.4236354Z remote: Counting objects:  36% (449/1246)        
2022-06-21T23:41:09.4237027Z remote: Counting objects:  37% (462/1246)        
2022-06-21T23:41:09.4237510Z remote: Counting objects:  38% (474/1246)        
2022-06-21T23:41:09.4238003Z remote: Counting objects:  39% (486/1246)        
2022-06-21T23:41:09.4238615Z remote: Counting objects:  40% (499/1246)        
2022-06-21T23:41:09.4239106Z remote: Counting objects:  41% (511/1246)        
2022-06-21T23:41:09.4239588Z remote: Counting objects:  42% (524/1246)        
2022-06-21T23:41:09.4240009Z remote: Counting objects:  43% (536/1246)        
2022-06-21T23:41:09.4240623Z remote: Counting objects:  44% (549/1246)        
2022-06-21T23:41:09.4241132Z remote: Counting objects:  45% (561/1246)        
2022-06-21T23:41:09.4241622Z remote: Counting objects:  46% (574/1246)        
2022-06-21T23:41:09.4242248Z remote: Counting objects:  47% (586/1246)        
2022-06-21T23:41:09.4242909Z remote: Counting objects:  48% (599/1246)        
2022-06-21T23:41:09.4243416Z remote: Counting objects:  49% (611/1246)        
2022-06-21T23:41:09.4243901Z remote: Counting objects:  50% (623/1246)        
2022-06-21T23:41:09.4244547Z remote: Counting objects:  51% (636/1246)        
2022-06-21T23:41:09.4245050Z remote: Counting objects:  52% (648/1246)        
2022-06-21T23:41:09.4245618Z remote: Counting objects:  53% (661/1246)        
2022-06-21T23:41:09.4246106Z remote: Counting objects:  54% (673/1246)        
2022-06-21T23:41:09.4246759Z remote: Counting objects:  55% (686/1246)        
2022-06-21T23:41:09.4247261Z remote: Counting objects:  56% (698/1246)        
2022-06-21T23:41:09.4248124Z remote: Counting objects:  57% (711/1246)        
2022-06-21T23:41:09.4248645Z remote: Counting objects:  58% (723/1246)        
2022-06-21T23:41:09.4249382Z remote: Counting objects:  59% (736/1246)        
2022-06-21T23:41:09.4249916Z remote: Counting objects:  60% (748/1246)        
2022-06-21T23:41:09.4251423Z remote: Counting objects:  61% (761/1246)        
2022-06-21T23:41:09.4252386Z remote: Counting objects:  62% (773/1246)        
2022-06-21T23:41:09.4253088Z remote: Counting objects:  63% (785/1246)        
2022-06-21T23:41:09.4253898Z remote: Counting objects:  64% (798/1246)        
2022-06-21T23:41:09.4254653Z remote: Counting objects:  65% (810/1246)        
2022-06-21T23:41:09.4255305Z remote: Counting objects:  66% (823/1246)        
2022-06-21T23:41:09.4255959Z remote: Counting objects:  67% (835/1246)        
2022-06-21T23:41:09.4256872Z remote: Counting objects:  68% (848/1246)        
2022-06-21T23:41:09.4257343Z remote: Counting objects:  69% (860/1246)        
2022-06-21T23:41:09.4257799Z remote: Counting objects:  70% (873/1246)        
2022-06-21T23:41:09.4258292Z remote: Counting objects:  71% (885/1246)        
2022-06-21T23:41:09.4259425Z remote: Counting objects:  72% (898/1246)        
2022-06-21T23:41:09.4259956Z remote: Counting objects:  73% (910/1246)        
2022-06-21T23:41:09.4260714Z remote: Counting objects:  74% (923/1246)        
2022-06-21T23:41:09.4261462Z remote: Counting objects:  75% (935/1246)        
2022-06-21T23:41:09.4262226Z remote: Counting objects:  76% (947/1246)        
2022-06-21T23:41:09.4262665Z remote: Counting objects:  77% (960/1246)        
2022-06-21T23:41:09.4263665Z remote: Counting objects:  78% (972/1246)        
2022-06-21T23:41:09.4264363Z remote: Counting objects:  79% (985/1246)        
2022-06-21T23:41:09.4265011Z remote: Counting objects:  80% (997/1246)        
2022-06-21T23:41:09.4265498Z remote: Counting objects:  81% (1010/1246)        
2022-06-21T23:41:09.4266004Z remote: Counting objects:  82% (1022/1246)        
2022-06-21T23:41:09.4266793Z remote: Counting objects:  83% (1035/1246)        
2022-06-21T23:41:09.4267524Z remote: Counting objects:  84% (1047/1246)        
2022-06-21T23:41:09.4268212Z remote: Counting objects:  85% (1060/1246)        
2022-06-21T23:41:09.4268631Z remote: Counting objects:  86% (1072/1246)        
2022-06-21T23:41:09.4269135Z remote: Counting objects:  87% (1085/1246)        
2022-06-21T23:41:09.4269784Z remote: Counting objects:  88% (1097/1246)        
2022-06-21T23:41:09.4270379Z remote: Counting objects:  89% (1109/1246)        
2022-06-21T23:41:09.4271378Z remote: Counting objects:  90% (1122/1246)        
2022-06-21T23:41:09.4272012Z remote: Counting objects:  91% (1134/1246)        
2022-06-21T23:41:09.4273047Z remote: Counting objects:  92% (1147/1246)        
2022-06-21T23:41:09.4273722Z remote: Counting objects:  93% (1159/1246)        
2022-06-21T23:41:09.4274644Z remote: Counting objects:  94% (1172/1246)        
2022-06-21T23:41:09.4275107Z remote: Counting objects:  95% (1184/1246)        
2022-06-21T23:41:09.4275966Z remote: Counting objects:  96% (1197/1246)        
2022-06-21T23:41:09.4276609Z remote: Counting objects:  97% (1209/1246)        
2022-06-21T23:41:09.4277109Z remote: Counting objects:  98% (1222/1246)        
2022-06-21T23:41:09.4277669Z remote: Counting objects:  99% (1234/1246)        
2022-06-21T23:41:09.4278383Z remote: Counting objects: 100% (1246/1246)        
2022-06-21T23:41:09.4278820Z remote: Counting objects: 100% (1246/1246), done.        
2022-06-21T23:41:09.4279413Z remote: Compressing objects:   0% (1/992)        
2022-06-21T23:41:09.4279953Z remote: Compressing objects:   1% (10/992)        
2022-06-21T23:41:09.4280440Z remote: Compressing objects:   2% (20/992)        
2022-06-21T23:41:09.4280920Z remote: Compressing objects:   3% (30/992)        
2022-06-21T23:41:09.4293712Z remote: Compressing objects:   4% (40/992)        
2022-06-21T23:41:09.4294354Z remote: Compressing objects:   5% (50/992)        
2022-06-21T23:41:09.4296012Z remote: Compressing objects:   6% (60/992)        
2022-06-21T23:41:09.4350593Z remote: Compressing objects:   7% (70/992)        
2022-06-21T23:41:09.4358082Z remote: Compressing objects:   8% (80/992)        
2022-06-21T23:41:09.4364349Z remote: Compressing objects:   9% (90/992)        
2022-06-21T23:41:09.4396424Z remote: Compressing objects:  10% (100/992)        
2022-06-21T23:41:09.4397918Z remote: Compressing objects:  11% (110/992)        
2022-06-21T23:41:09.4425771Z remote: Compressing objects:  12% (120/992)        
2022-06-21T23:41:09.4427934Z remote: Compressing objects:  13% (129/992)        
2022-06-21T23:41:09.4525871Z remote: Compressing objects:  14% (139/992)        
2022-06-21T23:41:09.4527722Z remote: Compressing objects:  15% (149/992)        
2022-06-21T23:41:09.4530703Z remote: Compressing objects:  16% (159/992)        
2022-06-21T23:41:09.4531208Z remote: Compressing objects:  17% (169/992)        
2022-06-21T23:41:09.4531819Z remote: Compressing objects:  18% (179/992)        
2022-06-21T23:41:09.4532282Z remote: Compressing objects:  19% (189/992)        
2022-06-21T23:41:09.4563897Z remote: Compressing objects:  20% (199/992)        
2022-06-21T23:41:09.4568511Z remote: Compressing objects:  21% (209/992)        
2022-06-21T23:41:09.4596339Z remote: Compressing objects:  22% (219/992)        
2022-06-21T23:41:09.4647880Z remote: Compressing objects:  23% (229/992)        
2022-06-21T23:41:09.4725087Z remote: Compressing objects:  24% (239/992)        
2022-06-21T23:41:09.4744678Z remote: Compressing objects:  25% (248/992)        
2022-06-21T23:41:09.4765096Z remote: Compressing objects:  26% (258/992)        
2022-06-21T23:41:09.4838371Z remote: Compressing objects:  27% (268/992)        
2022-06-21T23:41:09.5165911Z remote: Compressing objects:  28% (278/992)        
2022-06-21T23:41:09.5166799Z remote: Compressing objects:  29% (288/992)        
2022-06-21T23:41:09.5167356Z remote: Compressing objects:  30% (298/992)        
2022-06-21T23:41:09.5168015Z remote: Compressing objects:  31% (308/992)        
2022-06-21T23:41:09.5168544Z remote: Compressing objects:  32% (318/992)        
2022-06-21T23:41:09.5169170Z remote: Compressing objects:  33% (328/992)        
2022-06-21T23:41:09.5169675Z remote: Compressing objects:  34% (338/992)        
2022-06-21T23:41:09.5170301Z remote: Compressing objects:  35% (348/992)        
2022-06-21T23:41:09.5171083Z remote: Compressing objects:  36% (358/992)        
2022-06-21T23:41:09.5171513Z remote: Compressing objects:  37% (368/992)        
2022-06-21T23:41:09.5172541Z remote: Compressing objects:  38% (377/992)        
2022-06-21T23:41:09.5173167Z remote: Compressing objects:  39% (387/992)        
2022-06-21T23:41:09.5176235Z remote: Compressing objects:  40% (397/992)        
2022-06-21T23:41:09.5176920Z remote: Compressing objects:  41% (407/992)        
2022-06-21T23:41:09.5177230Z remote: Compressing objects:  42% (417/992)        
2022-06-21T23:41:09.5177511Z remote: Compressing objects:  43% (427/992)        
2022-06-21T23:41:09.5177947Z remote: Compressing objects:  44% (437/992)        
2022-06-21T23:41:09.5178389Z remote: Compressing objects:  45% (447/992)        
2022-06-21T23:41:09.5178843Z remote: Compressing objects:  46% (457/992)        
2022-06-21T23:41:09.5179132Z remote: Compressing objects:  47% (467/992)        
2022-06-21T23:41:09.5179703Z remote: Compressing objects:  48% (477/992)        
2022-06-21T23:41:09.5180008Z remote: Compressing objects:  49% (487/992)        
2022-06-21T23:41:09.5180287Z remote: Compressing objects:  50% (496/992)        
2022-06-21T23:41:09.5180554Z remote: Compressing objects:  51% (506/992)        
2022-06-21T23:41:09.5395403Z remote: Compressing objects:  52% (516/992)        
2022-06-21T23:41:09.5395862Z remote: Compressing objects:  53% (526/992)        
2022-06-21T23:41:09.5396196Z remote: Compressing objects:  54% (536/992)        
2022-06-21T23:41:09.5396525Z remote: Compressing objects:  55% (546/992)        
2022-06-21T23:41:09.5396836Z remote: Compressing objects:  56% (556/992)        
2022-06-21T23:41:09.5397153Z remote: Compressing objects:  57% (566/992)        
2022-06-21T23:41:09.5397472Z remote: Compressing objects:  58% (576/992)        
2022-06-21T23:41:09.5397847Z remote: Compressing objects:  59% (586/992)        
2022-06-21T23:41:09.5398176Z remote: Compressing objects:  60% (596/992)        
2022-06-21T23:41:09.5398502Z remote: Compressing objects:  61% (606/992)        
2022-06-21T23:41:09.5398817Z remote: Compressing objects:  62% (616/992)        
2022-06-21T23:41:09.5399116Z remote: Compressing objects:  63% (625/992)        
2022-06-21T23:41:09.5399527Z remote: Compressing objects:  64% (635/992)        
2022-06-21T23:41:09.5399843Z remote: Compressing objects:  65% (645/992)        
2022-06-21T23:41:09.5400140Z remote: Compressing objects:  66% (655/992)        
2022-06-21T23:41:09.5400456Z remote: Compressing objects:  67% (665/992)        
2022-06-21T23:41:09.5400766Z remote: Compressing objects:  68% (675/992)        
2022-06-21T23:41:09.5401065Z remote: Compressing objects:  69% (685/992)        
2022-06-21T23:41:09.5401416Z remote: Compressing objects:  70% (695/992)        
2022-06-21T23:41:09.5401728Z remote: Compressing objects:  71% (705/992)        
2022-06-21T23:41:09.5402043Z remote: Compressing objects:  72% (715/992)        
2022-06-21T23:41:09.5402666Z remote: Compressing objects:  73% (725/992)        
2022-06-21T23:41:09.5402992Z remote: Compressing objects:  74% (735/992)        
2022-06-21T23:41:09.5403310Z remote: Compressing objects:  75% (744/992)        
2022-06-21T23:41:09.5403611Z remote: Compressing objects:  76% (754/992)        
2022-06-21T23:41:09.5403928Z remote: Compressing objects:  77% (764/992)        
2022-06-21T23:41:09.5404246Z remote: Compressing objects:  78% (774/992)        
2022-06-21T23:41:09.5404543Z remote: Compressing objects:  79% (784/992)        
2022-06-21T23:41:09.5404857Z remote: Compressing objects:  80% (794/992)        
2022-06-21T23:41:09.5405172Z remote: Compressing objects:  81% (804/992)        
2022-06-21T23:41:09.5405488Z remote: Compressing objects:  82% (814/992)        
2022-06-21T23:41:09.5405785Z remote: Compressing objects:  83% (824/992)        
2022-06-21T23:41:09.5406102Z remote: Compressing objects:  84% (834/992)        
2022-06-21T23:41:09.5406417Z remote: Compressing objects:  85% (844/992)        
2022-06-21T23:41:09.5406726Z remote: Compressing objects:  86% (854/992)        
2022-06-21T23:41:09.5407043Z remote: Compressing objects:  87% (864/992)        
2022-06-21T23:41:09.5407355Z remote: Compressing objects:  88% (873/992)        
2022-06-21T23:41:09.5407651Z remote: Compressing objects:  89% (883/992)        
2022-06-21T23:41:09.5407962Z remote: Compressing objects:  90% (893/992)        
2022-06-21T23:41:09.5408451Z remote: Compressing objects:  91% (903/992)        
2022-06-21T23:41:09.5409095Z remote: Compressing objects:  92% (913/992)        
2022-06-21T23:41:09.5409575Z remote: Compressing objects:  93% (923/992)        
2022-06-21T23:41:09.5409863Z remote: Compressing objects:  94% (933/992)        
2022-06-21T23:41:09.5410575Z remote: Compressing objects:  95% (943/992)        
2022-06-21T23:41:09.5410915Z remote: Compressing objects:  96% (953/992)        
2022-06-21T23:41:09.5411215Z remote: Compressing objects:  97% (963/992)        
2022-06-21T23:41:09.5411675Z remote: Compressing objects:  98% (973/992)        
2022-06-21T23:41:09.5412016Z remote: Compressing objects:  99% (983/992)        
2022-06-21T23:41:09.5412333Z remote: Compressing objects: 100% (992/992)        
2022-06-21T23:41:09.5412648Z remote: Compressing objects: 100% (992/992), done.        
2022-06-21T23:41:09.5758532Z Receiving objects:   0% (1/1246)
2022-06-21T23:41:09.5761615Z Receiving objects:   1% (13/1246)
2022-06-21T23:41:09.6474218Z Receiving objects:   2% (25/1246)
2022-06-21T23:41:09.6484164Z Receiving objects:   3% (38/1246)
2022-06-21T23:41:09.6490503Z Receiving objects:   4% (50/1246)
2022-06-21T23:41:09.6521022Z Receiving objects:   5% (63/1246)
2022-06-21T23:41:09.6532614Z Receiving objects:   6% (75/1246)
2022-06-21T23:41:09.6548693Z Receiving objects:   7% (88/1246)
2022-06-21T23:41:09.6561438Z Receiving objects:   8% (100/1246)
2022-06-21T23:41:09.6840759Z Receiving objects:   9% (113/1246)
2022-06-21T23:41:09.6851531Z Receiving objects:  10% (125/1246)
2022-06-21T23:41:09.6867174Z Receiving objects:  11% (138/1246)
2022-06-21T23:41:09.6884591Z Receiving objects:  12% (150/1246)
2022-06-21T23:41:09.6885071Z Receiving objects:  13% (162/1246)
2022-06-21T23:41:09.6887474Z Receiving objects:  14% (175/1246)
2022-06-21T23:41:09.6910122Z Receiving objects:  15% (187/1246)
2022-06-21T23:41:09.6910762Z Receiving objects:  16% (200/1246)
2022-06-21T23:41:09.6911092Z Receiving objects:  17% (212/1246)
2022-06-21T23:41:09.6911418Z Receiving objects:  18% (225/1246)
2022-06-21T23:41:09.6916119Z Receiving objects:  19% (237/1246)
2022-06-21T23:41:09.6927631Z Receiving objects:  20% (250/1246)
2022-06-21T23:41:09.6933400Z Receiving objects:  21% (262/1246)
2022-06-21T23:41:09.7255582Z Receiving objects:  22% (275/1246)
2022-06-21T23:41:09.7257478Z Receiving objects:  23% (287/1246)
2022-06-21T23:41:09.7259516Z Receiving objects:  24% (300/1246)
2022-06-21T23:41:09.7263787Z Receiving objects:  25% (312/1246)
2022-06-21T23:41:09.7268081Z Receiving objects:  26% (324/1246)
2022-06-21T23:41:09.7349351Z Receiving objects:  27% (337/1246)
2022-06-21T23:41:09.7355256Z Receiving objects:  28% (349/1246)
2022-06-21T23:41:09.7355598Z Receiving objects:  29% (362/1246)
2022-06-21T23:41:09.7355840Z Receiving objects:  30% (374/1246)
2022-06-21T23:41:09.7356109Z Receiving objects:  31% (387/1246)
2022-06-21T23:41:09.7375251Z Receiving objects:  32% (399/1246)
2022-06-21T23:41:09.7398332Z Receiving objects:  33% (412/1246)
2022-06-21T23:41:09.7406414Z Receiving objects:  34% (424/1246)
2022-06-21T23:41:09.7422058Z Receiving objects:  35% (437/1246)
2022-06-21T23:41:09.7436003Z Receiving objects:  36% (449/1246)
2022-06-21T23:41:09.7452065Z Receiving objects:  37% (462/1246)
2022-06-21T23:41:09.7458794Z Receiving objects:  38% (474/1246)
2022-06-21T23:41:09.7473910Z Receiving objects:  39% (486/1246)
2022-06-21T23:41:09.7501986Z Receiving objects:  40% (499/1246)
2022-06-21T23:41:09.7544725Z Receiving objects:  41% (511/1246)
2022-06-21T23:41:09.7555413Z Receiving objects:  42% (524/1246)
2022-06-21T23:41:09.7555691Z Receiving objects:  43% (536/1246)
2022-06-21T23:41:09.7576990Z Receiving objects:  44% (549/1246)
2022-06-21T23:41:09.7577943Z Receiving objects:  45% (561/1246)
2022-06-21T23:41:09.7583176Z Receiving objects:  46% (574/1246)
2022-06-21T23:41:09.7595504Z Receiving objects:  47% (586/1246)
2022-06-21T23:41:09.7603456Z Receiving objects:  48% (599/1246)
2022-06-21T23:41:09.7612735Z Receiving objects:  49% (611/1246)
2022-06-21T23:41:09.7636947Z Receiving objects:  50% (623/1246)
2022-06-21T23:41:09.7637257Z Receiving objects:  51% (636/1246)
2022-06-21T23:41:09.7643053Z Receiving objects:  52% (648/1246)
2022-06-21T23:41:09.7660038Z Receiving objects:  53% (661/1246)
2022-06-21T23:41:09.7724532Z Receiving objects:  54% (673/1246)
2022-06-21T23:41:09.7791379Z Receiving objects:  55% (686/1246)
2022-06-21T23:41:09.7812270Z Receiving objects:  56% (698/1246)
2022-06-21T23:41:09.7827959Z Receiving objects:  57% (711/1246)
2022-06-21T23:41:09.7853011Z Receiving objects:  58% (723/1246)
2022-06-21T23:41:09.7863453Z Receiving objects:  59% (736/1246)
2022-06-21T23:41:09.7897261Z Receiving objects:  60% (748/1246)
2022-06-21T23:41:09.7915073Z Receiving objects:  61% (761/1246)
2022-06-21T23:41:09.7932102Z Receiving objects:  62% (773/1246)
2022-06-21T23:41:09.7984519Z Receiving objects:  63% (785/1246)
2022-06-21T23:41:09.8014454Z Receiving objects:  64% (798/1246)
2022-06-21T23:41:09.8028395Z Receiving objects:  65% (810/1246)
2022-06-21T23:41:09.8585375Z Receiving objects:  66% (823/1246)
2022-06-21T23:41:09.8588077Z Receiving objects:  67% (835/1246)
2022-06-21T23:41:09.8619911Z Receiving objects:  68% (848/1246)
2022-06-21T23:41:09.8625602Z Receiving objects:  69% (860/1246)
2022-06-21T23:41:09.8636604Z Receiving objects:  70% (873/1246)
2022-06-21T23:41:09.8660357Z Receiving objects:  71% (885/1246)
2022-06-21T23:41:09.8681933Z Receiving objects:  72% (898/1246)
2022-06-21T23:41:09.8771928Z Receiving objects:  73% (910/1246)
2022-06-21T23:41:09.8795660Z Receiving objects:  74% (923/1246)
2022-06-21T23:41:09.8802721Z Receiving objects:  75% (935/1246)
2022-06-21T23:41:09.8815375Z Receiving objects:  76% (947/1246)
2022-06-21T23:41:09.8818657Z Receiving objects:  77% (960/1246)
2022-06-21T23:41:09.8823690Z Receiving objects:  78% (972/1246)
2022-06-21T23:41:09.8828095Z Receiving objects:  79% (985/1246)
2022-06-21T23:41:09.8833620Z Receiving objects:  80% (997/1246)
2022-06-21T23:41:09.8846851Z Receiving objects:  81% (1010/1246)
2022-06-21T23:41:09.8861201Z Receiving objects:  82% (1022/1246)
2022-06-21T23:41:09.8870536Z Receiving objects:  83% (1035/1246)
2022-06-21T23:41:09.8886921Z Receiving objects:  84% (1047/1246)
2022-06-21T23:41:09.8887709Z Receiving objects:  85% (1060/1246)
2022-06-21T23:41:09.8889486Z Receiving objects:  86% (1072/1246)
2022-06-21T23:41:09.8891505Z Receiving objects:  87% (1085/1246)
2022-06-21T23:41:09.8893417Z Receiving objects:  88% (1097/1246)
2022-06-21T23:41:09.8920971Z Receiving objects:  89% (1109/1246)
2022-06-21T23:41:09.8923192Z Receiving objects:  90% (1122/1246)
2022-06-21T23:41:09.8923763Z Receiving objects:  91% (1134/1246)
2022-06-21T23:41:09.8924796Z Receiving objects:  92% (1147/1246)
2022-06-21T23:41:09.8925248Z Receiving objects:  93% (1159/1246)
2022-06-21T23:41:09.8925912Z Receiving objects:  94% (1172/1246)
2022-06-21T23:41:09.8926358Z Receiving objects:  95% (1184/1246)
2022-06-21T23:41:09.8927003Z Receiving objects:  96% (1197/1246)
2022-06-21T23:41:09.8928333Z Receiving objects:  97% (1209/1246)
2022-06-21T23:41:09.8929228Z Receiving objects:  98% (1222/1246)
2022-06-21T23:41:09.8930275Z remote: Total 1246 (delta 211), reused 917 (delta 164), pack-reused 0        
2022-06-21T23:41:09.8937544Z Receiving objects:  99% (1234/1246)
2022-06-21T23:41:09.8938832Z Receiving objects: 100% (1246/1246)
2022-06-21T23:41:09.8940780Z Receiving objects: 100% (1246/1246), 4.16 MiB | 12.45 MiB/s, done.
2022-06-21T23:41:09.8942121Z Resolving deltas:   0% (0/211)
2022-06-21T23:41:09.8942897Z Resolving deltas:   1% (3/211)
2022-06-21T23:41:09.8944102Z Resolving deltas:   2% (5/211)
2022-06-21T23:41:09.8946039Z Resolving deltas:   3% (7/211)
2022-06-21T23:41:09.8947991Z Resolving deltas:   4% (9/211)
2022-06-21T23:41:09.8949446Z Resolving deltas:   5% (11/211)
2022-06-21T23:41:09.8951459Z Resolving deltas:   6% (13/211)
2022-06-21T23:41:09.8956007Z Resolving deltas:   7% (15/211)
2022-06-21T23:41:09.8956783Z Resolving deltas:   8% (17/211)
2022-06-21T23:41:09.8957580Z Resolving deltas:   9% (19/211)
2022-06-21T23:41:09.8958164Z Resolving deltas:  10% (22/211)
2022-06-21T23:41:09.8958909Z Resolving deltas:  11% (24/211)
2022-06-21T23:41:09.8959887Z Resolving deltas:  12% (26/211)
2022-06-21T23:41:09.8960514Z Resolving deltas:  13% (28/211)
2022-06-21T23:41:09.8961652Z Resolving deltas:  14% (30/211)
2022-06-21T23:41:09.8962397Z Resolving deltas:  15% (32/211)
2022-06-21T23:41:09.8962857Z Resolving deltas:  16% (34/211)
2022-06-21T23:41:09.8963483Z Resolving deltas:  17% (36/211)
2022-06-21T23:41:09.8965106Z Resolving deltas:  18% (38/211)
2022-06-21T23:41:09.8966876Z Resolving deltas:  19% (41/211)
2022-06-21T23:41:09.8971018Z Resolving deltas:  20% (43/211)
2022-06-21T23:41:09.8973708Z Resolving deltas:  21% (45/211)
2022-06-21T23:41:09.8992067Z Resolving deltas:  22% (47/211)
2022-06-21T23:41:09.8993002Z Resolving deltas:  23% (49/211)
2022-06-21T23:41:09.8993735Z Resolving deltas:  24% (51/211)
2022-06-21T23:41:09.8994224Z Resolving deltas:  25% (53/211)
2022-06-21T23:41:09.8994894Z Resolving deltas:  26% (55/211)
2022-06-21T23:41:09.8995365Z Resolving deltas:  27% (57/211)
2022-06-21T23:41:09.8996325Z Resolving deltas:  28% (60/211)
2022-06-21T23:41:09.8996821Z Resolving deltas:  29% (62/211)
2022-06-21T23:41:09.8997512Z Resolving deltas:  30% (64/211)
2022-06-21T23:41:09.8997995Z Resolving deltas:  31% (66/211)
2022-06-21T23:41:09.8998790Z Resolving deltas:  32% (68/211)
2022-06-21T23:41:09.9003883Z Resolving deltas:  33% (70/211)
2022-06-21T23:41:09.9016476Z Resolving deltas:  34% (72/211)
2022-06-21T23:41:09.9024253Z Resolving deltas:  35% (74/211)
2022-06-21T23:41:09.9042753Z Resolving deltas:  36% (76/211)
2022-06-21T23:41:09.9050775Z Resolving deltas:  37% (79/211)
2022-06-21T23:41:09.9057319Z Resolving deltas:  38% (81/211)
2022-06-21T23:41:09.9062272Z Resolving deltas:  39% (83/211)
2022-06-21T23:41:09.9069480Z Resolving deltas:  40% (85/211)
2022-06-21T23:41:09.9077090Z Resolving deltas:  41% (87/211)
2022-06-21T23:41:09.9083190Z Resolving deltas:  42% (89/211)
2022-06-21T23:41:09.9084302Z Resolving deltas:  43% (91/211)
2022-06-21T23:41:09.9087166Z Resolving deltas:  44% (93/211)
2022-06-21T23:41:09.9093867Z Resolving deltas:  45% (95/211)
2022-06-21T23:41:09.9097848Z Resolving deltas:  46% (98/211)
2022-06-21T23:41:09.9103077Z Resolving deltas:  47% (100/211)
2022-06-21T23:41:09.9106941Z Resolving deltas:  48% (102/211)
2022-06-21T23:41:09.9113486Z Resolving deltas:  49% (104/211)
2022-06-21T23:41:09.9118215Z Resolving deltas:  50% (106/211)
2022-06-21T23:41:09.9118791Z Resolving deltas:  51% (108/211)
2022-06-21T23:41:09.9119728Z Resolving deltas:  52% (110/211)
2022-06-21T23:41:09.9121656Z Resolving deltas:  53% (112/211)
2022-06-21T23:41:09.9142687Z Resolving deltas:  54% (114/211)
2022-06-21T23:41:09.9156138Z Resolving deltas:  55% (117/211)
2022-06-21T23:41:09.9158534Z Resolving deltas:  56% (119/211)
2022-06-21T23:41:09.9164578Z Resolving deltas:  57% (121/211)
2022-06-21T23:41:09.9168109Z Resolving deltas:  58% (123/211)
2022-06-21T23:41:09.9170782Z Resolving deltas:  59% (125/211)
2022-06-21T23:41:09.9175055Z Resolving deltas:  60% (127/211)
2022-06-21T23:41:09.9179299Z Resolving deltas:  61% (129/211)
2022-06-21T23:41:09.9188761Z Resolving deltas:  62% (131/211)
2022-06-21T23:41:09.9204121Z Resolving deltas:  63% (133/211)
2022-06-21T23:41:09.9207651Z Resolving deltas:  64% (136/211)
2022-06-21T23:41:09.9209729Z Resolving deltas:  65% (138/211)
2022-06-21T23:41:09.9214894Z Resolving deltas:  66% (140/211)
2022-06-21T23:41:09.9223576Z Resolving deltas:  67% (142/211)
2022-06-21T23:41:09.9230011Z Resolving deltas:  68% (144/211)
2022-06-21T23:41:09.9230824Z Resolving deltas:  69% (146/211)
2022-06-21T23:41:09.9231958Z Resolving deltas:  70% (148/211)
2022-06-21T23:41:09.9234443Z Resolving deltas:  71% (150/211)
2022-06-21T23:41:09.9245752Z Resolving deltas:  72% (152/211)
2022-06-21T23:41:09.9248455Z Resolving deltas:  73% (155/211)
2022-06-21T23:41:09.9253969Z Resolving deltas:  74% (157/211)
2022-06-21T23:41:09.9256805Z Resolving deltas:  75% (159/211)
2022-06-21T23:41:09.9301002Z Resolving deltas:  76% (161/211)
2022-06-21T23:41:09.9304568Z Resolving deltas:  77% (163/211)
2022-06-21T23:41:09.9307982Z Resolving deltas:  78% (165/211)
2022-06-21T23:41:09.9310929Z Resolving deltas:  79% (167/211)
2022-06-21T23:41:09.9311570Z Resolving deltas:  80% (169/211)
2022-06-21T23:41:09.9315443Z Resolving deltas:  81% (171/211)
2022-06-21T23:41:09.9316154Z Resolving deltas:  82% (174/211)
2022-06-21T23:41:09.9319650Z Resolving deltas:  83% (176/211)
2022-06-21T23:41:09.9324041Z Resolving deltas:  84% (178/211)
2022-06-21T23:41:09.9325565Z Resolving deltas:  85% (180/211)
2022-06-21T23:41:09.9327264Z Resolving deltas:  86% (182/211)
2022-06-21T23:41:09.9329007Z Resolving deltas:  87% (184/211)
2022-06-21T23:41:09.9331095Z Resolving deltas:  88% (186/211)
2022-06-21T23:41:09.9332981Z Resolving deltas:  89% (188/211)
2022-06-21T23:41:09.9334908Z Resolving deltas:  90% (190/211)
2022-06-21T23:41:09.9337606Z Resolving deltas:  91% (193/211)
2022-06-21T23:41:09.9339083Z Resolving deltas:  92% (195/211)
2022-06-21T23:41:09.9340747Z Resolving deltas:  93% (197/211)
2022-06-21T23:41:09.9342289Z Resolving deltas:  94% (199/211)
2022-06-21T23:41:09.9344530Z Resolving deltas:  95% (201/211)
2022-06-21T23:41:09.9346734Z Resolving deltas:  96% (203/211)
2022-06-21T23:41:09.9349768Z Resolving deltas:  97% (205/211)
2022-06-21T23:41:09.9352569Z Resolving deltas:  98% (207/211)
2022-06-21T23:41:09.9354268Z Resolving deltas:  99% (209/211)
2022-06-21T23:41:09.9360859Z Resolving deltas: 100% (211/211)
2022-06-21T23:41:09.9361535Z Resolving deltas: 100% (211/211), done.
2022-06-21T23:41:09.9674010Z From https://github.com/hyperledger/fabric-sdk-node
2022-06-21T23:41:09.9675336Z  * [new ref]         34327c667e67f5dd3a23381d05d0a3403e4df24a -> origin/main
2022-06-21T23:41:09.9700103Z ##[endgroup]
2022-06-21T23:41:09.9700923Z ##[group]Determining the checkout info
2022-06-21T23:41:09.9702753Z ##[endgroup]
2022-06-21T23:41:09.9703483Z ##[group]Checking out the ref
2022-06-21T23:41:09.9708566Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2022-06-21T23:41:10.4167027Z Switched to a new branch 'main'
2022-06-21T23:41:10.4168140Z branch 'main' set up to track 'origin/main'.
2022-06-21T23:41:10.4183929Z ##[endgroup]
2022-06-21T23:41:10.4237715Z [command]/usr/bin/git log -1 --format='%H'
2022-06-21T23:41:10.4311738Z '34327c667e67f5dd3a23381d05d0a3403e4df24a'
2022-06-21T23:41:10.4661728Z ##[group]Run actions/setup-node@v3
2022-06-21T23:41:10.4662036Z with:
2022-06-21T23:41:10.4662261Z   node-version: 14.x
2022-06-21T23:41:10.4662658Z   always-auth: false
2022-06-21T23:41:10.4662909Z   check-latest: false
2022-06-21T23:41:10.4663515Z   token: ***
2022-06-21T23:41:10.4663883Z env:
2022-06-21T23:41:10.4664098Z   FABRIC_VERSION: 2.2
2022-06-21T23:41:10.4664661Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:41:10.4665018Z ##[endgroup]
2022-06-21T23:41:10.7299273Z Found in cache @ /opt/hostedtoolcache/node/14.19.3/x64
2022-06-21T23:41:10.7531416Z ##[group]Run sudo apt-get install softhsm2
2022-06-21T23:41:10.7532039Z [36;1msudo apt-get install softhsm2[0m
2022-06-21T23:41:10.7532449Z [36;1msofthsm2-util --init-token --slot 0 --label "ForFabric" --pin 98765432 --so-pin 1234[0m
2022-06-21T23:41:10.7604776Z shell: /usr/bin/bash -e {0}
2022-06-21T23:41:10.7605039Z env:
2022-06-21T23:41:10.7605268Z   FABRIC_VERSION: 2.2
2022-06-21T23:41:10.7605968Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:41:10.7606296Z ##[endgroup]
2022-06-21T23:41:16.6023783Z Reading package lists...
2022-06-21T23:41:16.8386652Z Building dependency tree...
2022-06-21T23:41:16.8471975Z Reading state information...
2022-06-21T23:41:17.0326741Z The following additional packages will be installed:
2022-06-21T23:41:17.0328860Z   libsofthsm2 softhsm2-common
2022-06-21T23:41:17.1242248Z The following NEW packages will be installed:
2022-06-21T23:41:17.1243994Z   libsofthsm2 softhsm2 softhsm2-common
2022-06-21T23:41:17.1693863Z 0 upgraded, 3 newly installed, 0 to remove and 13 not upgraded.
2022-06-21T23:41:17.2814576Z Need to get 380 kB of archives.
2022-06-21T23:41:17.2815417Z After this operation, 1507 kB of additional disk space will be used.
2022-06-21T23:41:17.2827518Z Get:1 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 softhsm2-common amd64 2.5.0-1build1 [6912 B]
2022-06-21T23:41:17.3269150Z Get:2 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libsofthsm2 amd64 2.5.0-1build1 [225 kB]
2022-06-21T23:41:17.3775902Z Get:3 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 softhsm2 amd64 2.5.0-1build1 [148 kB]
2022-06-21T23:41:17.9046782Z Fetched 380 kB in 0s (2189 kB/s)
2022-06-21T23:41:18.0070508Z Selecting previously unselected package softhsm2-common.
2022-06-21T23:41:18.0577387Z (Reading database ... 
2022-06-21T23:41:18.0578055Z (Reading database ... 5%
2022-06-21T23:41:18.0578673Z (Reading database ... 10%
2022-06-21T23:41:18.0579235Z (Reading database ... 15%
2022-06-21T23:41:18.0592785Z (Reading database ... 20%
2022-06-21T23:41:18.0594007Z (Reading database ... 25%
2022-06-21T23:41:18.0594556Z (Reading database ... 30%
2022-06-21T23:41:18.0594852Z (Reading database ... 35%
2022-06-21T23:41:18.0595151Z (Reading database ... 40%
2022-06-21T23:41:18.0595459Z (Reading database ... 45%
2022-06-21T23:41:18.0595880Z (Reading database ... 50%
2022-06-21T23:41:18.7844494Z (Reading database ... 55%
2022-06-21T23:41:19.6339412Z (Reading database ... 60%
2022-06-21T23:41:20.4853413Z (Reading database ... 65%
2022-06-21T23:41:21.3535897Z (Reading database ... 70%
2022-06-21T23:41:22.2990005Z (Reading database ... 75%
2022-06-21T23:41:23.4312380Z (Reading database ... 80%
2022-06-21T23:41:24.6568142Z (Reading database ... 85%
2022-06-21T23:41:25.8404856Z (Reading database ... 90%
2022-06-21T23:41:27.1465671Z (Reading database ... 95%
2022-06-21T23:41:27.1466378Z (Reading database ... 100%
2022-06-21T23:41:27.1467094Z (Reading database ... 231598 files and directories currently installed.)
2022-06-21T23:41:27.1608464Z Preparing to unpack .../softhsm2-common_2.5.0-1build1_amd64.deb ...
2022-06-21T23:41:27.1678433Z Unpacking softhsm2-common (2.5.0-1build1) ...
2022-06-21T23:41:27.2501720Z Selecting previously unselected package libsofthsm2.
2022-06-21T23:41:27.2791073Z Preparing to unpack .../libsofthsm2_2.5.0-1build1_amd64.deb ...
2022-06-21T23:41:27.2815952Z Unpacking libsofthsm2 (2.5.0-1build1) ...
2022-06-21T23:41:27.3483480Z Selecting previously unselected package softhsm2.
2022-06-21T23:41:27.3756284Z Preparing to unpack .../softhsm2_2.5.0-1build1_amd64.deb ...
2022-06-21T23:41:27.3779835Z Unpacking softhsm2 (2.5.0-1build1) ...
2022-06-21T23:41:27.4729573Z Setting up softhsm2-common (2.5.0-1build1) ...
2022-06-21T23:41:27.7766297Z 
2022-06-21T23:41:27.7767937Z Creating config file /etc/softhsm/softhsm2.conf with new version
2022-06-21T23:41:28.0924311Z Setting up libsofthsm2 (2.5.0-1build1) ...
2022-06-21T23:41:28.1047834Z Setting up softhsm2 (2.5.0-1build1) ...
2022-06-21T23:41:28.1114765Z Processing triggers for man-db (2.9.1-1) ...
2022-06-21T23:41:31.9737902Z The token has been initialized and is reassigned to slot 1051028668
2022-06-21T23:41:31.9783353Z ##[group]Run npm install
2022-06-21T23:41:31.9783632Z [36;1mnpm install[0m
2022-06-21T23:41:31.9848646Z shell: /usr/bin/bash -e {0}
2022-06-21T23:41:31.9848876Z env:
2022-06-21T23:41:31.9849099Z   FABRIC_VERSION: 2.2
2022-06-21T23:41:31.9849489Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:41:31.9849838Z ##[endgroup]
2022-06-21T23:41:42.7947355Z npm WARN deprecated grpc@1.24.11: This library will not receive further updates other than security fixes. We recommend using @grpc/grpc-js instead.
2022-06-21T23:41:45.6668283Z npm WARN deprecated cloudant-follow@0.17.0: This package is no longer maintained.
2022-06-21T23:41:45.7098059Z npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142
2022-06-21T23:41:45.8529108Z npm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.
2022-06-21T23:41:47.2315235Z npm WARN deprecated har-validator@5.1.5: this library is no longer supported
2022-06-21T23:41:47.3740162Z npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
2022-06-21T23:42:04.8652311Z 
2022-06-21T23:42:04.8654920Z > pkcs11js@1.3.0 install /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/pkcs11js
2022-06-21T23:42:04.8655763Z > node-gyp rebuild
2022-06-21T23:42:04.8701949Z 
2022-06-21T23:42:06.9767959Z make: Entering directory '/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/pkcs11js/build'
2022-06-21T23:42:06.9846991Z   CXX(target) Release/obj.target/pkcs11/src/main.o
2022-06-21T23:42:10.1586729Z In file included from ../node_modules/nan/nan.h:60,
2022-06-21T23:42:10.1587256Z                  from ../src/main.cpp:1:
2022-06-21T23:42:10.1591587Z /home/runner/.cache/node-gyp/14.19.3/include/node/node.h:793:43: warning: cast between incompatible function types from ‘void (*)(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE)’ {aka ‘void (*)(v8::Local<v8::Object>)’} to ‘node::addon_register_func’ {aka ‘void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, void*)’} [-Wcast-function-type]
2022-06-21T23:42:10.1592685Z   793 |       (node::addon_register_func) (regfunc),                          \
2022-06-21T23:42:10.1593509Z       |                                           ^
2022-06-21T23:42:10.1594704Z /home/runner/.cache/node-gyp/14.19.3/include/node/node.h:827:3: note: in expansion of macro ‘NODE_MODULE_X’
2022-06-21T23:42:10.1595383Z   827 |   NODE_MODULE_X(modname, regfunc, NULL, 0)  // NOLINT (readability/null_usage)
2022-06-21T23:42:10.1595809Z       |   ^~~~~~~~~~~~~
2022-06-21T23:42:10.1596449Z ../src/main.cpp:27:1: note: in expansion of macro ‘NODE_MODULE’
2022-06-21T23:42:10.1596917Z    27 | NODE_MODULE(pkcs11, init)
2022-06-21T23:42:10.1597269Z       | ^~~~~~~~~~~
2022-06-21T23:42:10.8135773Z   CXX(target) Release/obj.target/pkcs11/src/dl.o
2022-06-21T23:42:10.8589183Z   CXX(target) Release/obj.target/pkcs11/src/const.o
2022-06-21T23:42:14.1756485Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/error.o
2022-06-21T23:42:14.6054568Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/v8_convert.o
2022-06-21T23:42:15.3588019Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/template.o
2022-06-21T23:42:16.5225159Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/mech.o
2022-06-21T23:42:17.8392591Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/param.o
2022-06-21T23:42:18.8346212Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/param_aes.o
2022-06-21T23:42:20.1223093Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/param_rsa.o
2022-06-21T23:42:21.1826856Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/param_ecdh.o
2022-06-21T23:42:22.1856010Z   CXX(target) Release/obj.target/pkcs11/src/pkcs11/pkcs11.o
2022-06-21T23:42:25.8048214Z   CXX(target) Release/obj.target/pkcs11/src/async.o
2022-06-21T23:42:27.3285037Z   CXX(target) Release/obj.target/pkcs11/src/node.o
2022-06-21T23:42:34.4087016Z   SOLINK_MODULE(target) Release/obj.target/pkcs11.node
2022-06-21T23:42:34.7348270Z   COPY Release/pkcs11.node
2022-06-21T23:42:34.7423871Z make: Leaving directory '/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/pkcs11js/build'
2022-06-21T23:42:34.8029473Z 
2022-06-21T23:42:34.8030431Z > grpc@1.24.11 install /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/grpc
2022-06-21T23:42:34.8031079Z > node-pre-gyp install --fallback-to-build --library=static_library
2022-06-21T23:42:34.8031280Z 
2022-06-21T23:42:35.6166732Z [grpc] Success: "/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/grpc/src/node/extension_binary/node-v83-linux-x64-glibc/grpc_node.node" is installed via remote
2022-06-21T23:42:35.6378256Z 
2022-06-21T23:42:35.6379774Z > @ampretia/x509@0.4.8 install /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/@ampretia/x509
2022-06-21T23:42:35.6380777Z > node-gyp rebuild
2022-06-21T23:42:35.6381183Z 
2022-06-21T23:42:36.2142140Z make: Entering directory '/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/@ampretia/x509/build'
2022-06-21T23:42:36.2157306Z   CXX(target) Release/obj.target/x509/src/addon.o
2022-06-21T23:42:37.1136567Z In file included from ../src/addon.cc:10:
2022-06-21T23:42:37.1138344Z ../../../nan/nan.h: In function ‘void Nan::AsyncQueueWorker(Nan::AsyncWorker*)’:
2022-06-21T23:42:37.1140311Z ../../../nan/nan.h:2298:62: warning: cast between incompatible function types from ‘void (*)(uv_work_t*)’ {aka ‘void (*)(uv_work_s*)’} to ‘uv_after_work_cb’ {aka ‘void (*)(uv_work_s*, int)’} [-Wcast-function-type]
2022-06-21T23:42:37.1141923Z  2298 |     , reinterpret_cast<uv_after_work_cb>(AsyncExecuteComplete)
2022-06-21T23:42:37.1142399Z       |                                                              ^
2022-06-21T23:42:37.2381314Z In file included from ../src/addon.cc:5:
2022-06-21T23:42:37.2382207Z ../src/addon.cc: At global scope:
2022-06-21T23:42:37.2384688Z /home/runner/.cache/node-gyp/14.19.3/include/node/node.h:793:43: warning: cast between incompatible function types from ‘void (*)(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE)’ {aka ‘void (*)(v8::Local<v8::Object>)’} to ‘node::addon_register_func’ {aka ‘void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, void*)’} [-Wcast-function-type]
2022-06-21T23:42:37.2443727Z   793 |       (node::addon_register_func) (regfunc),                          \
2022-06-21T23:42:37.2444320Z       |                                           ^
2022-06-21T23:42:37.2445289Z /home/runner/.cache/node-gyp/14.19.3/include/node/node.h:827:3: note: in expansion of macro ‘NODE_MODULE_X’
2022-06-21T23:42:37.2445832Z   827 |   NODE_MODULE_X(modname, regfunc, NULL, 0)  // NOLINT (readability/null_usage)
2022-06-21T23:42:37.2446145Z       |   ^~~~~~~~~~~~~
2022-06-21T23:42:37.2464662Z ../src/addon.cc:54:1: note: in expansion of macro ‘NODE_MODULE’
2022-06-21T23:42:37.2465299Z    54 | NODE_MODULE(x509, init)
2022-06-21T23:42:37.2465564Z       | ^~~~~~~~~~~
2022-06-21T23:42:37.4528491Z   CXX(target) Release/obj.target/x509/src/x509.o
2022-06-21T23:42:38.2522480Z In file included from ../include/x509.h:9,
2022-06-21T23:42:38.2523418Z                  from ../src/x509.cc:10:
2022-06-21T23:42:38.2524844Z ../../../nan/nan.h: In function ‘void Nan::AsyncQueueWorker(Nan::AsyncWorker*)’:
2022-06-21T23:42:38.2526481Z ../../../nan/nan.h:2298:62: warning: cast between incompatible function types from ‘void (*)(uv_work_t*)’ {aka ‘void (*)(uv_work_s*)’} to ‘uv_after_work_cb’ {aka ‘void (*)(uv_work_s*, int)’} [-Wcast-function-type]
2022-06-21T23:42:38.2527876Z  2298 |     , reinterpret_cast<uv_after_work_cb>(AsyncExecuteComplete)
2022-06-21T23:42:38.2530489Z       |                                                              ^
2022-06-21T23:42:38.3853267Z In file included from /home/runner/.cache/node-gyp/14.19.3/include/node/openssl/asn1.h:16,
2022-06-21T23:42:38.3854212Z                  from ../include/x509.h:14,
2022-06-21T23:42:38.3855163Z                  from ../src/x509.cc:10:
2022-06-21T23:42:38.3856236Z ../src/x509.cc: In function ‘v8::Local<v8::Value> try_parse(const string&)’:
2022-06-21T23:42:38.3857425Z /home/runner/.cache/node-gyp/14.19.3/include/node/openssl/bio.h:482:34: warning: value computed is not used [-Wunused-value]
2022-06-21T23:42:38.3859578Z   482 | # define BIO_set_close(b,c)      (int)BIO_ctrl(b,BIO_CTRL_SET_CLOSE,(c),NULL)
2022-06-21T23:42:38.3860092Z       |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-06-21T23:42:38.3861079Z ../src/x509.cc:409:5: note: in expansion of macro ‘BIO_set_close’
2022-06-21T23:42:38.3861820Z   409 |     BIO_set_close(ext_bio, BIO_CLOSE);
2022-06-21T23:42:38.3862267Z       |     ^~~~~~~~~~~~~
2022-06-21T23:42:39.0099187Z   SOLINK_MODULE(target) Release/obj.target/x509.node
2022-06-21T23:42:39.0803876Z   COPY Release/x509.node
2022-06-21T23:42:39.0888025Z make: Leaving directory '/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/@ampretia/x509/build'
2022-06-21T23:42:39.2574897Z 
2022-06-21T23:42:39.2576364Z > protobufjs@6.11.3 postinstall /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/protobufjs
2022-06-21T23:42:39.2576870Z > node scripts/postinstall
2022-06-21T23:42:39.2577043Z 
2022-06-21T23:42:39.3623374Z 
2022-06-21T23:42:39.3624664Z > es5-ext@0.10.61 postinstall /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/es5-ext
2022-06-21T23:42:39.3626001Z >  node -e "try{require('./_postinstall')}catch(e){}" || exit 0
2022-06-21T23:42:39.3626491Z 
2022-06-21T23:42:40.2119593Z npm notice created a lockfile as package-lock.json. You should commit this file.
2022-06-21T23:42:40.2236833Z npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules/chokidar/node_modules/fsevents):
2022-06-21T23:42:40.2239333Z npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
2022-06-21T23:42:40.2244299Z 
2022-06-21T23:42:40.2291141Z added 783 packages from 682 contributors and audited 790 packages in 62.501s
2022-06-21T23:42:40.5811646Z 
2022-06-21T23:42:40.5812489Z 129 packages are looking for funding
2022-06-21T23:42:40.5813266Z   run `npm fund` for details
2022-06-21T23:42:40.5813459Z 
2022-06-21T23:42:40.5823714Z found 5 vulnerabilities (2 moderate, 3 high)
2022-06-21T23:42:40.5824489Z   run `npm audit fix` to fix them, or `npm audit` for details
2022-06-21T23:42:40.6225650Z ##[group]Run npm run installAndGenerateCerts
2022-06-21T23:42:40.6226031Z [36;1mnpm run installAndGenerateCerts[0m
2022-06-21T23:42:40.6287616Z shell: /usr/bin/bash -e {0}
2022-06-21T23:42:40.6287837Z env:
2022-06-21T23:42:40.6288050Z   FABRIC_VERSION: 2.2
2022-06-21T23:42:40.6288419Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:42:40.6288748Z ##[endgroup]
2022-06-21T23:42:40.9316741Z 
2022-06-21T23:42:40.9318095Z > -@2.5.0-snapshot installAndGenerateCerts /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:42:40.9319314Z > node ./scripts/npm_scripts/generateCerts.js
2022-06-21T23:42:40.9319714Z 
2022-06-21T23:42:40.9982572Z 
2022-06-21T23:42:40.9984743Z 
2022-06-21T23:42:42.5196499Z 
2022-06-21T23:42:42.5205303Z --2022-06-21 23:42:41--  https://github.com/hyperledger/fabric/releases/download/v1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz
2022-06-21T23:42:42.5205976Z Resolving github.com (github.com)... 140.82.114.4
2022-06-21T23:42:42.5207013Z Connecting to github.com (github.com)|140.82.114.4|:443... connected.
2022-06-21T23:42:42.5207403Z HTTP request sent, awaiting response... 302 Found
2022-06-21T23:42:42.5211812Z Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/66573241/4dd42080-07a4-11ea-8002-39fb1633d323?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220621%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220621T234241Z&X-Amz-Expires=300&X-Amz-Signature=d356a17742c52ee7caa59debaaad6c22abcd38b358cec6609483cf73954145c8&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=66573241&response-content-disposition=attachment%3B%20filename%3Dhyperledger-fabric-linux-amd64-1.4.0.tar.gz&response-content-type=application%2Foctet-stream [following]
2022-06-21T23:42:42.5216083Z --2022-06-21 23:42:41--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/66573241/4dd42080-07a4-11ea-8002-39fb1633d323?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220621%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220621T234241Z&X-Amz-Expires=300&X-Amz-Signature=d356a17742c52ee7caa59debaaad6c22abcd38b358cec6609483cf73954145c8&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=66573241&response-content-disposition=attachment%3B%20filename%3Dhyperledger-fabric-linux-amd64-1.4.0.tar.gz&response-content-type=application%2Foctet-stream
2022-06-21T23:42:42.5217663Z Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.109.133, 185.199.110.133, 185.199.111.133, ...
2022-06-21T23:42:42.5218738Z Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.109.133|:443... connected.
2022-06-21T23:42:42.5219302Z HTTP request sent, awaiting response... 200 OK
2022-06-21T23:42:42.5219881Z Length: 53389792 (51M) [application/octet-stream]
2022-06-21T23:42:42.5220794Z Saving to: ‘/tmp/fabric-binaries/hyperledger-fabric-linux-amd64-1.4.0.tar.gz’
2022-06-21T23:42:42.5221141Z 
2022-06-21T23:42:42.5233091Z      0K .......... .......... .......... .......... ..........  0% 5.28M 10s
2022-06-21T23:42:42.5233575Z     50K .......... .......... .......... .......... ..........  0% 4.59M 10s
2022-06-21T23:42:42.5233973Z    100K .......... .......... .......... .......... ..........  0% 30.7M 7s
2022-06-21T23:42:42.5234369Z    150K .......... .......... .......... .......... ..........  0% 35.0M 6s
2022-06-21T23:42:42.5234771Z    200K .......... .......... .......... .......... ..........  0% 7.29M 6s
2022-06-21T23:42:42.5235172Z    250K .......... .......... .......... .......... ..........  0%  116M 5s
2022-06-21T23:42:42.5235550Z    300K .......... .......... .......... .......... ..........  0% 24.0M 5s
2022-06-21T23:42:42.5235951Z    350K .......... .......... .......... .......... ..........  0% 50.0M 4s
2022-06-21T23:42:42.5236349Z    400K .......... .......... .......... .......... ..........  0% 62.6M 4s
2022-06-21T23:42:42.5236958Z    450K .......... .......... .......... .......... ..........  0%  105M 4s
2022-06-21T23:42:42.5237440Z    500K .......... .......... .......... .......... ..........  1% 3.12M 5s
2022-06-21T23:42:42.5237815Z    550K .......... .......... .......... .......... ..........  1%  106M 4s
2022-06-21T23:42:42.5238206Z    600K .......... .......... .......... .......... ..........  1%  159M 4s
2022-06-21T23:42:42.5238605Z    650K .......... .......... .......... .......... ..........  1%  174M 4s
2022-06-21T23:42:42.5238997Z    700K .......... .......... .......... .......... ..........  1%  177M 4s
2022-06-21T23:42:42.5239367Z    750K .......... .......... .......... .......... ..........  1%  106M 3s
2022-06-21T23:42:42.5239762Z    800K .......... .......... .......... .......... ..........  1%  103M 3s
2022-06-21T23:42:42.5240172Z    850K .......... .......... .......... .......... ..........  1% 93.2M 3s
2022-06-21T23:42:42.5240579Z    900K .......... .......... .......... .......... ..........  1%  148M 3s
2022-06-21T23:42:42.5240952Z    950K .......... .......... .......... .......... ..........  1%  170M 3s
2022-06-21T23:42:42.5241492Z   1000K .......... .......... .......... .......... ..........  2%  135M 3s
2022-06-21T23:42:42.5241885Z   1050K .......... .......... .......... .......... ..........  2% 8.21M 3s
2022-06-21T23:42:42.5242282Z   1100K .......... .......... .......... .......... ..........  2%  121M 3s
2022-06-21T23:42:42.5242671Z   1150K .......... .......... .......... .......... ..........  2%  128M 3s
2022-06-21T23:42:42.5243231Z   1200K .......... .......... .......... .......... ..........  2%  117M 2s
2022-06-21T23:42:42.5243611Z   1250K .......... .......... .......... .......... ..........  2%  152M 2s
2022-06-21T23:42:42.5243993Z   1300K .......... .......... .......... .......... ..........  2%  116M 2s
2022-06-21T23:42:42.5244373Z   1350K .......... .......... .......... .......... ..........  2%  115M 2s
2022-06-21T23:42:42.5244665Z   1400K .......... .......... .......... .......... ..........  2% 92.0M 2s
2022-06-21T23:42:42.5245049Z   1450K .......... .......... .......... .......... ..........  2%  123M 2s
2022-06-21T23:42:42.5245432Z   1500K .......... .......... .......... .......... ..........  2%  115M 2s
2022-06-21T23:42:42.5245808Z   1550K .......... .......... .......... .......... ..........  3%  111M 2s
2022-06-21T23:42:42.5246167Z   1600K .......... .......... .......... .......... ..........  3%  100M 2s
2022-06-21T23:42:42.5246545Z   1650K .......... .......... .......... .......... ..........  3%  167M 2s
2022-06-21T23:42:42.5246924Z   1700K .......... .......... .......... .......... ..........  3%  153M 2s
2022-06-21T23:42:42.5247486Z   1750K .......... .......... .......... .......... ..........  3%  216M 2s
2022-06-21T23:42:42.5247875Z   1800K .......... .......... .......... .......... ..........  3%  177M 2s
2022-06-21T23:42:42.5248253Z   1850K .......... .......... .......... .......... ..........  3%  183M 2s
2022-06-21T23:42:42.5248645Z   1900K .......... .......... .......... .......... ..........  3%  155M 2s
2022-06-21T23:42:42.5249191Z   1950K .......... .......... .......... .......... ..........  3%  189M 2s
2022-06-21T23:42:42.5249584Z   2000K .......... .......... .......... .......... ..........  3% 82.0M 2s
2022-06-21T23:42:42.5249955Z   2050K .......... .......... .......... .......... ..........  4%  186M 2s
2022-06-21T23:42:42.5250498Z   2100K .......... .......... .......... .......... ..........  4%  219M 2s
2022-06-21T23:42:42.5251083Z   2150K .......... .......... .......... .......... ..........  4%  223M 2s
2022-06-21T23:42:42.5251467Z   2200K .......... .......... .......... .......... ..........  4% 26.4M 2s
2022-06-21T23:42:42.5251831Z   2250K .......... .......... .......... .......... ..........  4%  110M 2s
2022-06-21T23:42:42.5252212Z   2300K .......... .......... .......... .......... ..........  4%  145M 1s
2022-06-21T23:42:42.5252589Z   2350K .......... .......... .......... .......... ..........  4%  182M 1s
2022-06-21T23:42:42.5253085Z   2400K .......... .......... .......... .......... ..........  4%  131M 1s
2022-06-21T23:42:42.5253510Z   2450K .......... .......... .......... .......... ..........  4% 49.2M 1s
2022-06-21T23:42:42.5253886Z   2500K .......... .......... .......... .......... ..........  4%  196M 1s
2022-06-21T23:42:42.5254265Z   2550K .......... .......... .......... .......... ..........  4%  189M 1s
2022-06-21T23:42:42.5254644Z   2600K .......... .......... .......... .......... ..........  5% 27.5M 1s
2022-06-21T23:42:42.5255024Z   2650K .......... .......... .......... .......... ..........  5%  118M 1s
2022-06-21T23:42:42.5256730Z   2700K .......... .......... .......... .......... ..........  5%  185M 1s
2022-06-21T23:42:42.5257801Z   2750K .......... .......... .......... .......... ..........  5%  116M 1s
2022-06-21T23:42:42.5258401Z   2800K .......... .......... .......... .......... ..........  5% 21.9M 1s
2022-06-21T23:42:42.5258866Z   2850K .......... .......... .......... .......... ..........  5%  191M 1s
2022-06-21T23:42:42.5259309Z   2900K .......... .......... .......... .......... ..........  5%  113M 1s
2022-06-21T23:42:42.5259981Z   2950K .......... .......... .......... .......... ..........  5%  173M 1s
2022-06-21T23:42:42.5260747Z   3000K .......... .......... .......... .......... ..........  5% 15.1M 1s
2022-06-21T23:42:42.5261907Z   3050K .......... .......... .......... .......... ..........  5% 91.6M 1s
2022-06-21T23:42:42.5263180Z   3100K .......... .......... .......... .......... ..........  6%  176M 1s
2022-06-21T23:42:42.5263567Z   3150K .......... .......... .......... .......... ..........  6%  220M 1s
2022-06-21T23:42:42.5263970Z   3200K .......... .......... .......... .......... ..........  6%  125M 1s
2022-06-21T23:42:42.5264367Z   3250K .......... .......... .......... .......... ..........  6% 27.7M 1s
2022-06-21T23:42:42.5264958Z   3300K .......... .......... .......... .......... ..........  6% 38.9M 1s
2022-06-21T23:42:42.5265471Z   3350K .......... .......... .......... .......... ..........  6%  206M 1s
2022-06-21T23:42:42.5265887Z   3400K .......... .......... .......... .......... ..........  6%  174M 1s
2022-06-21T23:42:42.5266457Z   3450K .......... .......... .......... .......... ..........  6%  175M 1s
2022-06-21T23:42:42.5266931Z   3500K .......... .......... .......... .......... ..........  6% 27.5M 1s
2022-06-21T23:42:42.5267487Z   3550K .......... .......... .......... .......... ..........  6%  179M 1s
2022-06-21T23:42:42.5267895Z   3600K .......... .......... .......... .......... ..........  7%  172M 1s
2022-06-21T23:42:42.5268302Z   3650K .......... .......... .......... .......... ..........  7%  165M 1s
2022-06-21T23:42:42.5268712Z   3700K .......... .......... .......... .......... ..........  7%  186M 1s
2022-06-21T23:42:42.5269280Z   3750K .......... .......... .......... .......... ..........  7% 31.4M 1s
2022-06-21T23:42:42.5269661Z   3800K .......... .......... .......... .......... ..........  7%  128M 1s
2022-06-21T23:42:42.5270381Z   3850K .......... .......... .......... .......... ..........  7%  145M 1s
2022-06-21T23:42:42.5270894Z   3900K .......... .......... .......... .......... ..........  7%  196M 1s
2022-06-21T23:42:42.5271275Z   3950K .......... .......... .......... .......... ..........  7%  203M 1s
2022-06-21T23:42:42.5271725Z   4000K .......... .......... .......... .......... ..........  7% 20.4M 1s
2022-06-21T23:42:42.5272105Z   4050K .......... .......... .......... .......... ..........  7%  117M 1s
2022-06-21T23:42:42.5272480Z   4100K .......... .......... .......... .......... ..........  7%  189M 1s
2022-06-21T23:42:42.5272857Z   4150K .......... .......... .......... .......... ..........  8%  193M 1s
2022-06-21T23:42:42.5273446Z   4200K .......... .......... .......... .......... ..........  8%  181M 1s
2022-06-21T23:42:42.5273821Z   4250K .......... .......... .......... .......... ..........  8% 48.7M 1s
2022-06-21T23:42:42.5274208Z   4300K .......... .......... .......... .......... ..........  8% 37.8M 1s
2022-06-21T23:42:42.5274689Z   4350K .......... .......... .......... .......... ..........  8%  160M 1s
2022-06-21T23:42:42.5275128Z   4400K .......... .......... .......... .......... ..........  8%  169M 1s
2022-06-21T23:42:42.5275728Z   4450K .......... .......... .......... .......... ..........  8%  214M 1s
2022-06-21T23:42:42.5276417Z   4500K .......... .......... .......... .......... ..........  8%  201M 1s
2022-06-21T23:42:42.5276823Z   4550K .......... .......... .......... .......... ..........  8% 49.1M 1s
2022-06-21T23:42:42.5277231Z   4600K .......... .......... .......... .......... ..........  8%  180M 1s
2022-06-21T23:42:42.5277626Z   4650K .......... .......... .......... .......... ..........  9%  175M 1s
2022-06-21T23:42:42.5278036Z   4700K .......... .......... .......... .......... ..........  9%  203M 1s
2022-06-21T23:42:42.5278442Z   4750K .......... .......... .......... .......... ..........  9%  199M 1s
2022-06-21T23:42:42.5279017Z   4800K .......... .......... .......... .......... ..........  9%  171M 1s
2022-06-21T23:42:42.5279572Z   4850K .......... .......... .......... .......... ..........  9%  204M 1s
2022-06-21T23:42:42.5280071Z   4900K .......... .......... .......... .......... ..........  9%  216M 1s
2022-06-21T23:42:42.5280462Z   4950K .......... .......... .......... .......... ..........  9%  215M 1s
2022-06-21T23:42:42.5280847Z   5000K .......... .......... .......... .......... ..........  9%  186M 1s
2022-06-21T23:42:42.5281236Z   5050K .......... .......... .......... .......... ..........  9%  181M 1s
2022-06-21T23:42:42.5281607Z   5100K .......... .......... .......... .......... ..........  9%  212M 1s
2022-06-21T23:42:42.5281997Z   5150K .......... .......... .......... .......... ..........  9%  215M 1s
2022-06-21T23:42:42.5282386Z   5200K .......... .......... .......... .......... .......... 10%  147M 1s
2022-06-21T23:42:42.5282705Z   5250K .......... .......... .......... .......... .......... 10%  156M 1s
2022-06-21T23:42:42.5283073Z   5300K .......... .......... .......... .......... .......... 10%  195M 1s
2022-06-21T23:42:42.5283461Z   5350K .......... .......... .......... .......... .......... 10%  169M 1s
2022-06-21T23:42:42.5283858Z   5400K .......... .......... .......... .......... .......... 10%  170M 1s
2022-06-21T23:42:42.5284243Z   5450K .......... .......... .......... .......... .......... 10%  210M 1s
2022-06-21T23:42:42.5284725Z   5500K .......... .......... .......... .......... .......... 10%  213M 1s
2022-06-21T23:42:42.5285201Z   5550K .......... .......... .......... .......... .......... 10%  205M 1s
2022-06-21T23:42:42.5285770Z   5600K .......... .......... .......... .......... .......... 10%  188M 1s
2022-06-21T23:42:42.5286165Z   5650K .......... .......... .......... .......... .......... 10%  178M 1s
2022-06-21T23:42:42.5286739Z   5700K .......... .......... .......... .......... .......... 11%  217M 1s
2022-06-21T23:42:42.5287304Z   5750K .......... .......... .......... .......... .......... 11%  161M 1s
2022-06-21T23:42:42.5287702Z   5800K .......... .......... .......... .......... .......... 11%  171M 1s
2022-06-21T23:42:42.5288110Z   5850K .......... .......... .......... .......... .......... 11%  217M 1s
2022-06-21T23:42:42.5288509Z   5900K .......... .......... .......... .......... .......... 11%  186M 1s
2022-06-21T23:42:42.5288889Z   5950K .......... .......... .......... .......... .......... 11%  174M 1s
2022-06-21T23:42:42.5289501Z   6000K .......... .......... .......... .......... .......... 11%  176M 1s
2022-06-21T23:42:42.5289895Z   6050K .......... .......... .......... .......... .......... 11%  189M 1s
2022-06-21T23:42:42.5290286Z   6100K .......... .......... .......... .......... .......... 11%  183M 1s
2022-06-21T23:42:42.5290840Z   6150K .......... .......... .......... .......... .......... 11% 74.0M 1s
2022-06-21T23:42:42.5291742Z   6200K .......... .......... .......... .......... .......... 11%  155M 1s
2022-06-21T23:42:42.5292040Z   6250K .......... .......... .......... .......... .......... 12%  217M 1s
2022-06-21T23:42:42.5292473Z   6300K .......... .......... .......... .......... .......... 12%  177M 1s
2022-06-21T23:42:42.5292893Z   6350K .......... .......... .......... .......... .......... 12%  194M 1s
2022-06-21T23:42:42.5293195Z   6400K .......... .......... .......... .......... .......... 12%  160M 1s
2022-06-21T23:42:42.5293505Z   6450K .......... .......... .......... .......... .......... 12%  218M 1s
2022-06-21T23:42:42.5293875Z   6500K .......... .......... .......... .......... .......... 12%  204M 1s
2022-06-21T23:42:42.5294170Z   6550K .......... .......... .......... .......... .......... 12%  219M 1s
2022-06-21T23:42:42.5294611Z   6600K .......... .......... .......... .......... .......... 12%  177M 1s
2022-06-21T23:42:42.5294926Z   6650K .......... .......... .......... .......... .......... 12%  207M 1s
2022-06-21T23:42:42.5295232Z   6700K .......... .......... .......... .......... .......... 12%  212M 1s
2022-06-21T23:42:42.5295621Z   6750K .......... .......... .......... .......... .......... 13%  217M 1s
2022-06-21T23:42:42.5296200Z   6800K .......... .......... .......... .......... .......... 13%  179M 1s
2022-06-21T23:42:42.5296600Z   6850K .......... .......... .......... .......... .......... 13%  204M 1s
2022-06-21T23:42:42.5297011Z   6900K .......... .......... .......... .......... .......... 13%  215M 1s
2022-06-21T23:42:42.5297562Z   6950K .......... .......... .......... .......... .......... 13%  207M 1s
2022-06-21T23:42:42.5297843Z   7000K .......... .......... .......... .......... .......... 13%  159M 1s
2022-06-21T23:42:42.5298153Z   7050K .......... .......... .......... .......... .......... 13%  189M 1s
2022-06-21T23:42:42.5298480Z   7100K .......... .......... .......... .......... .......... 13%  213M 1s
2022-06-21T23:42:42.5298790Z   7150K .......... .......... .......... .......... .......... 13%  207M 1s
2022-06-21T23:42:42.5299139Z   7200K .......... .......... .......... .......... .......... 13%  175M 1s
2022-06-21T23:42:42.5299597Z   7250K .......... .......... .......... .......... .......... 14%  212M 1s
2022-06-21T23:42:42.5299895Z   7300K .......... .......... .......... .......... .......... 14%  209M 1s
2022-06-21T23:42:42.5300207Z   7350K .......... .......... .......... .......... .......... 14%  215M 1s
2022-06-21T23:42:42.5300575Z   7400K .......... .......... .......... .......... .......... 14%  163M 1s
2022-06-21T23:42:42.5301886Z   7450K .......... .......... .......... .......... .......... 14% 10.1M 1s
2022-06-21T23:42:42.5309689Z   7500K .......... .......... .......... .......... .......... 14%  159M 1s
2022-06-21T23:42:42.5310133Z   7550K .......... .......... .......... .......... .......... 14%  136M 1s
2022-06-21T23:42:42.5310516Z   7600K .......... .......... .......... .......... .......... 14%  165M 1s
2022-06-21T23:42:42.5310910Z   7650K .......... .......... .......... .......... .......... 14% 48.1M 1s
2022-06-21T23:42:42.5311301Z   7700K .......... .......... .......... .......... .......... 14%  180M 1s
2022-06-21T23:42:42.5311688Z   7750K .......... .......... .......... .......... .......... 14% 76.8M 1s
2022-06-21T23:42:42.5312084Z   7800K .......... .......... .......... .......... .......... 15%  177M 1s
2022-06-21T23:42:42.5312456Z   7850K .......... .......... .......... .......... .......... 15%  120M 1s
2022-06-21T23:42:42.5312842Z   7900K .......... .......... .......... .......... .......... 15%  102M 1s
2022-06-21T23:42:42.5313223Z   7950K .......... .......... .......... .......... .......... 15% 20.6M 1s
2022-06-21T23:42:42.5313608Z   8000K .......... .......... .......... .......... .......... 15% 10.7M 1s
2022-06-21T23:42:42.5314158Z   8050K .......... .......... .......... .......... .......... 15%  107M 1s
2022-06-21T23:42:42.5314550Z   8100K .......... .......... .......... .......... .......... 15%  171M 1s
2022-06-21T23:42:42.5315045Z   8150K .......... .......... .......... .......... .......... 15% 1.32M 1s
2022-06-21T23:42:42.5315608Z   8200K .......... .......... .......... .......... .......... 15% 59.6M 1s
2022-06-21T23:42:42.5316167Z   8250K .......... .......... .......... .......... .......... 15%  123M 1s
2022-06-21T23:42:42.5316631Z   8300K .......... .......... .......... .......... .......... 16%  162M 1s
2022-06-21T23:42:42.5317040Z   8350K .......... .......... .......... .......... .......... 16%  129M 1s
2022-06-21T23:42:42.5317437Z   8400K .......... .......... .......... .......... .......... 16%  133M 1s
2022-06-21T23:42:42.5317843Z   8450K .......... .......... .......... .......... .......... 16%  168M 1s
2022-06-21T23:42:42.5318225Z   8500K .......... .......... .......... .......... .......... 16%  175M 1s
2022-06-21T23:42:42.5318808Z   8550K .......... .......... .......... .......... .......... 16%  112M 1s
2022-06-21T23:42:42.5319350Z   8600K .......... .......... .......... .......... .......... 16%  168M 1s
2022-06-21T23:42:42.5319726Z   8650K .......... .......... .......... .......... .......... 16%  195M 1s
2022-06-21T23:42:42.5320091Z   8700K .......... .......... .......... .......... .......... 16%  156M 1s
2022-06-21T23:42:42.5320581Z   8750K .......... .......... .......... .......... .......... 16%  206M 1s
2022-06-21T23:42:42.5320975Z   8800K .......... .......... .......... .......... .......... 16%  161M 1s
2022-06-21T23:42:42.5321264Z   8850K .......... .......... .......... .......... .......... 17%  188M 1s
2022-06-21T23:42:42.5321533Z   8900K .......... .......... .......... .......... .......... 17%  213M 1s
2022-06-21T23:42:42.5321825Z   8950K .......... .......... .......... .......... .......... 17%  181M 1s
2022-06-21T23:42:42.5322268Z   9000K .......... .......... .......... .......... .......... 17%  186M 1s
2022-06-21T23:42:42.5322528Z   9050K .......... .......... .......... .......... .......... 17% 32.8M 1s
2022-06-21T23:42:42.5322799Z   9100K .......... .......... .......... .......... .......... 17%  104M 1s
2022-06-21T23:42:42.5323078Z   9150K .......... .......... .......... .......... .......... 17%  172M 1s
2022-06-21T23:42:42.5323458Z   9200K .......... .......... .......... .......... .......... 17%  178M 1s
2022-06-21T23:42:42.5330953Z   9250K .......... .......... .......... .......... .......... 17%  186M 1s
2022-06-21T23:42:42.5331322Z   9300K .......... .......... .......... .......... .......... 17%  193M 1s
2022-06-21T23:42:42.5331619Z   9350K .......... .......... .......... .......... .......... 18%  199M 1s
2022-06-21T23:42:42.5331912Z   9400K .......... .......... .......... .......... .......... 18%  197M 1s
2022-06-21T23:42:42.5332177Z   9450K .......... .......... .......... .......... .......... 18%  212M 1s
2022-06-21T23:42:42.5332674Z   9500K .......... .......... .......... .......... .......... 18%  206M 1s
2022-06-21T23:42:42.5333064Z   9550K .......... .......... .......... .......... .......... 18%  193M 1s
2022-06-21T23:42:42.5333441Z   9600K .......... .......... .......... .......... .......... 18%  142M 1s
2022-06-21T23:42:42.5333971Z   9650K .......... .......... .......... .......... .......... 18%  165M 1s
2022-06-21T23:42:42.5334357Z   9700K .......... .......... .......... .......... .......... 18%  200M 1s
2022-06-21T23:42:42.5335383Z   9750K .......... .......... .......... .......... .......... 18%  190M 1s
2022-06-21T23:42:42.5336161Z   9800K .......... .......... .......... .......... .......... 18%  153M 1s
2022-06-21T23:42:42.5336601Z   9850K .......... .......... .......... .......... .......... 18%  186M 1s
2022-06-21T23:42:42.5337019Z   9900K .......... .......... .......... .......... .......... 19%  174M 1s
2022-06-21T23:42:42.5337633Z   9950K .......... .......... .......... .......... .......... 19%  226M 1s
2022-06-21T23:42:42.5338207Z  10000K .......... .......... .......... .......... .......... 19%  144M 1s
2022-06-21T23:42:42.5338658Z  10050K .......... .......... .......... .......... .......... 19%  138M 1s
2022-06-21T23:42:42.5339281Z  10100K .......... .......... .......... .......... .......... 19%  201M 1s
2022-06-21T23:42:42.5340052Z  10150K .......... .......... .......... .......... .......... 19%  216M 1s
2022-06-21T23:42:42.5340662Z  10200K .......... .......... .......... .......... .......... 19%  191M 1s
2022-06-21T23:42:42.5341153Z  10250K .......... .......... .......... .......... .......... 19% 94.7M 1s
2022-06-21T23:42:42.5341565Z  10300K .......... .......... .......... .......... .......... 19%  191M 1s
2022-06-21T23:42:42.5342167Z  10350K .......... .......... .......... .......... .......... 19% 25.5M 1s
2022-06-21T23:42:42.5342731Z  10400K .......... .......... .......... .......... .......... 20%  165M 1s
2022-06-21T23:42:42.5343118Z  10450K .......... .......... .......... .......... .......... 20%  199M 1s
2022-06-21T23:42:42.5343662Z  10500K .......... .......... .......... .......... .......... 20%  205M 1s
2022-06-21T23:42:42.5344029Z  10550K .......... .......... .......... .......... .......... 20%  190M 1s
2022-06-21T23:42:42.5344410Z  10600K .......... .......... .......... .......... .......... 20%  177M 1s
2022-06-21T23:42:42.5344787Z  10650K .......... .......... .......... .......... .......... 20%  203M 1s
2022-06-21T23:42:42.5345171Z  10700K .......... .......... .......... .......... .......... 20%  198M 1s
2022-06-21T23:42:42.5345856Z  10750K .......... .......... .......... .......... .......... 20%  199M 1s
2022-06-21T23:42:42.5346253Z  10800K .......... .......... .......... .......... .......... 20%  166M 1s
2022-06-21T23:42:42.5346641Z  10850K .......... .......... .......... .......... .......... 20%  189M 1s
2022-06-21T23:42:42.5347030Z  10900K .......... .......... .......... .......... .......... 21%  207M 1s
2022-06-21T23:42:42.5347420Z  10950K .......... .......... .......... .......... .......... 21%  202M 1s
2022-06-21T23:42:42.5347786Z  11000K .......... .......... .......... .......... .......... 21%  198M 1s
2022-06-21T23:42:42.5348172Z  11050K .......... .......... .......... .......... .......... 21%  172M 1s
2022-06-21T23:42:42.5348552Z  11100K .......... .......... .......... .......... .......... 21%  205M 1s
2022-06-21T23:42:42.5349089Z  11150K .......... .......... .......... .......... .......... 21%  127M 1s
2022-06-21T23:42:42.5349467Z  11200K .......... .......... .......... .......... .......... 21%  127M 1s
2022-06-21T23:42:42.5349835Z  11250K .......... .......... .......... .......... .......... 21%  172M 1s
2022-06-21T23:42:42.5350221Z  11300K .......... .......... .......... .......... .......... 21%  200M 1s
2022-06-21T23:42:42.5350593Z  11350K .......... .......... .......... .......... .......... 21%  196M 1s
2022-06-21T23:42:42.5350970Z  11400K .......... .......... .......... .......... .......... 21%  205M 1s
2022-06-21T23:42:42.5351330Z  11450K .......... .......... .......... .......... .......... 22%  171M 1s
2022-06-21T23:42:42.5351705Z  11500K .......... .......... .......... .......... .......... 22%  185M 1s
2022-06-21T23:42:42.5352074Z  11550K .......... .......... .......... .......... .......... 22%  189M 1s
2022-06-21T23:42:42.5352454Z  11600K .......... .......... .......... .......... .......... 22%  173M 1s
2022-06-21T23:42:42.5352807Z  11650K .......... .......... .......... .......... .......... 22%  191M 1s
2022-06-21T23:42:42.5353189Z  11700K .......... .......... .......... .......... .......... 22%  218M 1s
2022-06-21T23:42:42.5353571Z  11750K .......... .......... .......... .......... .......... 22%  180M 1s
2022-06-21T23:42:42.5353944Z  11800K .......... .......... .......... .......... .......... 22%  186M 1s
2022-06-21T23:42:42.5354319Z  11850K .......... .......... .......... .......... .......... 22%  169M 1s
2022-06-21T23:42:42.5354678Z  11900K .......... .......... .......... .......... .......... 22%  197M 1s
2022-06-21T23:42:42.5355220Z  11950K .......... .......... .......... .......... .......... 23%  173M 1s
2022-06-21T23:42:42.5355603Z  12000K .......... .......... .......... .......... .......... 23%  216M 1s
2022-06-21T23:42:42.5356863Z  12050K .......... .......... .......... .......... .......... 23%  195M 1s
2022-06-21T23:42:42.5357345Z  12100K .......... .......... .......... .......... .......... 23%  170M 1s
2022-06-21T23:42:42.5357945Z  12150K .......... .......... .......... .......... .......... 23%  156M 1s
2022-06-21T23:42:42.5358447Z  12200K .......... .......... .......... .......... .......... 23%  130M 1s
2022-06-21T23:42:42.5358900Z  12250K .......... .......... .......... .......... .......... 23% 1.35M 1s
2022-06-21T23:42:42.5359533Z  12300K .......... .......... .......... .......... .......... 23%  136M 1s
2022-06-21T23:42:42.5360488Z  12350K .......... .......... .......... .......... .......... 23%  146M 1s
2022-06-21T23:42:42.5360905Z  12400K .......... .......... .......... .......... .......... 23%  172M 1s
2022-06-21T23:42:42.5361471Z  12450K .......... .......... .......... .......... .......... 23%  119M 1s
2022-06-21T23:42:42.5361882Z  12500K .......... .......... .......... .......... .......... 24%  180M 1s
2022-06-21T23:42:42.5362638Z  12550K .......... .......... .......... .......... .......... 24%  193M 1s
2022-06-21T23:42:42.5363440Z  12600K .......... .......... .......... .......... .......... 24%  166M 1s
2022-06-21T23:42:42.5363882Z  12650K .......... .......... .......... .......... .......... 24%  184M 1s
2022-06-21T23:42:42.5364469Z  12700K .......... .......... .......... .......... .......... 24%  170M 1s
2022-06-21T23:42:42.5364876Z  12750K .......... .......... .......... .......... .......... 24%  173M 1s
2022-06-21T23:42:42.5365600Z  12800K .......... .......... .......... .......... .......... 24%  162M 1s
2022-06-21T23:42:42.5366140Z  12850K .......... .......... .......... .......... .......... 24%  105M 1s
2022-06-21T23:42:42.5366514Z  12900K .......... .......... .......... .......... .......... 24%  135M 1s
2022-06-21T23:42:42.5366884Z  12950K .......... .......... .......... .......... .......... 24%  169M 1s
2022-06-21T23:42:42.5367245Z  13000K .......... .......... .......... .......... .......... 25%  152M 1s
2022-06-21T23:42:42.5367620Z  13050K .......... .......... .......... .......... .......... 25%  146M 1s
2022-06-21T23:42:42.5368151Z  13100K .......... .......... .......... .......... .......... 25%  172M 1s
2022-06-21T23:42:42.5368523Z  13150K .......... .......... .......... .......... .......... 25%  148M 1s
2022-06-21T23:42:42.5368878Z  13200K .......... .......... .......... .......... .......... 25%  154M 1s
2022-06-21T23:42:42.5369248Z  13250K .......... .......... .......... .......... .......... 25%  197M 1s
2022-06-21T23:42:42.5369611Z  13300K .......... .......... .......... .......... .......... 25%  208M 1s
2022-06-21T23:42:42.5369976Z  13350K .......... .......... .......... .......... .......... 25%  175M 1s
2022-06-21T23:42:42.5370441Z  13400K .......... .......... .......... .......... .......... 25%  177M 1s
2022-06-21T23:42:42.5370837Z  13450K .......... .......... .......... .......... .......... 25%  232M 1s
2022-06-21T23:42:42.5371201Z  13500K .......... .......... .......... .......... .......... 25%  233M 1s
2022-06-21T23:42:42.5371567Z  13550K .......... .......... .......... .......... .......... 26%  216M 1s
2022-06-21T23:42:42.5371931Z  13600K .......... .......... .......... .......... .......... 26%  199M 1s
2022-06-21T23:42:42.5372287Z  13650K .......... .......... .......... .......... .......... 26%  209M 1s
2022-06-21T23:42:42.5372663Z  13700K .......... .......... .......... .......... .......... 26%  159M 1s
2022-06-21T23:42:42.5373031Z  13750K .......... .......... .......... .......... .......... 26%  155M 1s
2022-06-21T23:42:42.5373392Z  13800K .......... .......... .......... .......... .......... 26%  202M 1s
2022-06-21T23:42:42.5373740Z  13850K .......... .......... .......... .......... .......... 26%  236M 1s
2022-06-21T23:42:42.5374104Z  13900K .......... .......... .......... .......... .......... 26%  233M 1s
2022-06-21T23:42:42.5374467Z  13950K .......... .......... .......... .......... .......... 26%  204M 1s
2022-06-21T23:42:42.5374830Z  14000K .......... .......... .......... .......... .......... 26%  170M 1s
2022-06-21T23:42:42.5375180Z  14050K .......... .......... .......... .......... .......... 27%  163M 1s
2022-06-21T23:42:42.5375655Z  14100K .......... .......... .......... .......... .......... 27%  199M 1s
2022-06-21T23:42:42.5376238Z  14150K .......... .......... .......... .......... .......... 27%  198M 1s
2022-06-21T23:42:42.5376614Z  14200K .......... .......... .......... .......... .......... 27%  213M 1s
2022-06-21T23:42:42.5377356Z  14250K .......... .......... .......... .......... .......... 27%  228M 1s
2022-06-21T23:42:42.5377735Z  14300K .......... .......... .......... .......... .......... 27% 18.7M 1s
2022-06-21T23:42:42.5378128Z  14350K .......... .......... .......... .......... .......... 27%  180M 1s
2022-06-21T23:42:42.5378520Z  14400K .......... .......... .......... .......... .......... 27%  115M 1s
2022-06-21T23:42:42.5379083Z  14450K .......... .......... .......... .......... .......... 27%  110M 1s
2022-06-21T23:42:42.5379470Z  14500K .......... .......... .......... .......... .......... 27%  155M 1s
2022-06-21T23:42:42.5379876Z  14550K .......... .......... .......... .......... .......... 28% 13.3M 1s
2022-06-21T23:42:42.5380441Z  14600K .......... .......... .......... .......... .......... 28% 72.1M 1s
2022-06-21T23:42:42.5380957Z  14650K .......... .......... .......... .......... .......... 28%  177M 1s
2022-06-21T23:42:42.5381521Z  14700K .......... .......... .......... .......... .......... 28%  112M 1s
2022-06-21T23:42:42.5381932Z  14750K .......... .......... .......... .......... .......... 28%  187M 1s
2022-06-21T23:42:42.5382335Z  14800K .......... .......... .......... .......... .......... 28% 51.8M 1s
2022-06-21T23:42:42.5382751Z  14850K .......... .......... .......... .......... .......... 28%  204M 1s
2022-06-21T23:42:42.5383161Z  14900K .......... .......... .......... .......... .......... 28%  219M 1s
2022-06-21T23:42:42.5383548Z  14950K .......... .......... .......... .......... .......... 28%  148M 1s
2022-06-21T23:42:42.5384273Z  15000K .......... .......... .......... .......... .......... 28%  164M 1s
2022-06-21T23:42:42.5384972Z  15050K .......... .......... .......... .......... .......... 28%  202M 1s
2022-06-21T23:42:42.5385339Z  15100K .......... .......... .......... .......... .......... 29% 37.2M 1s
2022-06-21T23:42:42.5385691Z  15150K .......... .......... .......... .......... .......... 29% 18.8M 1s
2022-06-21T23:42:42.5386057Z  15200K .......... .......... .......... .......... .......... 29%  150M 1s
2022-06-21T23:42:42.5386416Z  15250K .......... .......... .......... .......... .......... 29%  215M 1s
2022-06-21T23:42:42.5386784Z  15300K .......... .......... .......... .......... .......... 29%  137M 1s
2022-06-21T23:42:42.5387137Z  15350K .......... .......... .......... .......... .......... 29% 77.0M 1s
2022-06-21T23:42:42.5387502Z  15400K .......... .......... .......... .......... .......... 29%  125M 1s
2022-06-21T23:42:42.5387867Z  15450K .......... .......... .......... .......... .......... 29%  206M 1s
2022-06-21T23:42:42.5388233Z  15500K .......... .......... .......... .......... .......... 29%  144M 1s
2022-06-21T23:42:42.5388597Z  15550K .......... .......... .......... .......... .......... 29%  140M 1s
2022-06-21T23:42:42.5388946Z  15600K .......... .......... .......... .......... .......... 30% 35.9M 1s
2022-06-21T23:42:42.5389315Z  15650K .......... .......... .......... .......... .......... 30%  221M 1s
2022-06-21T23:42:42.5389856Z  15700K .......... .......... .......... .......... .......... 30%  222M 1s
2022-06-21T23:42:42.5390229Z  15750K .......... .......... .......... .......... .......... 30%  216M 1s
2022-06-21T23:42:42.5390997Z  15800K .......... .......... .......... .......... .......... 30%  145M 1s
2022-06-21T23:42:42.5391574Z  15850K .......... .......... .......... .......... .......... 30% 24.5M 1s
2022-06-21T23:42:42.5391981Z  15900K .......... .......... .......... .......... .......... 30%  219M 1s
2022-06-21T23:42:42.5392387Z  15950K .......... .......... .......... .......... .......... 30%  229M 1s
2022-06-21T23:42:42.5392794Z  16000K .......... .......... .......... .......... .......... 30%  200M 1s
2022-06-21T23:42:42.5393275Z  16050K .......... .......... .......... .......... .......... 30%  166M 1s
2022-06-21T23:42:42.5393719Z  16100K .......... .......... .......... .......... .......... 30%  108M 1s
2022-06-21T23:42:42.5394444Z  16150K .......... .......... .......... .......... .......... 31%  175M 1s
2022-06-21T23:42:42.5394836Z  16200K .......... .......... .......... .......... .......... 31%  172M 1s
2022-06-21T23:42:42.5395214Z  16250K .......... .......... .......... .......... .......... 31%  196M 1s
2022-06-21T23:42:42.5395772Z  16300K .......... .......... .......... .......... .......... 31%  207M 1s
2022-06-21T23:42:42.5396555Z  16350K .......... .......... .......... .......... .......... 31% 1.37M 1s
2022-06-21T23:42:42.5396959Z  16400K .......... .......... .......... .......... .......... 31% 78.5M 1s
2022-06-21T23:42:42.5397351Z  16450K .......... .......... .......... .......... .......... 31%  133M 1s
2022-06-21T23:42:42.5397761Z  16500K .......... .......... .......... .......... .......... 31%  198M 1s
2022-06-21T23:42:42.5398165Z  16550K .......... .......... .......... .......... .......... 31%  129M 1s
2022-06-21T23:42:42.5398691Z  16600K .......... .......... .......... .......... .......... 31%  130M 1s
2022-06-21T23:42:42.5399468Z  16650K .......... .......... .......... .......... .......... 32%  197M 1s
2022-06-21T23:42:42.5400270Z  16700K .......... .......... .......... .......... .......... 32%  163M 1s
2022-06-21T23:42:42.5400674Z  16750K .......... .......... .......... .......... .......... 32%  187M 1s
2022-06-21T23:42:42.5401266Z  16800K .......... .......... .......... .......... .......... 32%  157M 1s
2022-06-21T23:42:42.5401878Z  16850K .......... .......... .......... .......... .......... 32%  174M 1s
2022-06-21T23:42:42.5402298Z  16900K .......... .......... .......... .......... .......... 32%  198M 1s
2022-06-21T23:42:42.5402724Z  16950K .......... .......... .......... .......... .......... 32% 98.3M 1s
2022-06-21T23:42:42.5403153Z  17000K .......... .......... .......... .......... .......... 32%  104M 1s
2022-06-21T23:42:42.5403767Z  17050K .......... .......... .......... .......... .......... 32%  139M 1s
2022-06-21T23:42:42.5404710Z  17100K .......... .......... .......... .......... .......... 32%  116M 1s
2022-06-21T23:42:42.5405546Z  17150K .......... .......... .......... .......... .......... 32%  129M 1s
2022-06-21T23:42:42.5405918Z  17200K .......... .......... .......... .......... .......... 33%  149M 1s
2022-06-21T23:42:42.5406292Z  17250K .......... .......... .......... .......... .......... 33%  174M 1s
2022-06-21T23:42:42.5406899Z  17300K .......... .......... .......... .......... .......... 33%  211M 1s
2022-06-21T23:42:42.5407394Z  17350K .......... .......... .......... .......... .......... 33% 27.7M 1s
2022-06-21T23:42:42.5407781Z  17400K .......... .......... .......... .......... .......... 33%  188M 1s
2022-06-21T23:42:42.5408164Z  17450K .......... .......... .......... .......... .......... 33%  177M 1s
2022-06-21T23:42:42.5408701Z  17500K .......... .......... .......... .......... .......... 33%  172M 1s
2022-06-21T23:42:42.5409064Z  17550K .......... .......... .......... .......... .......... 33%  178M 1s
2022-06-21T23:42:42.5409444Z  17600K .......... .......... .......... .......... .......... 33% 95.0M 1s
2022-06-21T23:42:42.5409946Z  17650K .......... .......... .......... .......... .......... 33%  174M 1s
2022-06-21T23:42:42.5410496Z  17700K .......... .......... .......... .......... .......... 34%  176M 1s
2022-06-21T23:42:42.5410905Z  17750K .......... .......... .......... .......... .......... 34%  174M 1s
2022-06-21T23:42:42.5411288Z  17800K .......... .......... .......... .......... .......... 34% 65.2M 1s
2022-06-21T23:42:42.5411665Z  17850K .......... .......... .......... .......... .......... 34%  102M 1s
2022-06-21T23:42:42.5412041Z  17900K .......... .......... .......... .......... .......... 34%  155M 1s
2022-06-21T23:42:42.5412408Z  17950K .......... .......... .......... .......... .......... 34%  193M 1s
2022-06-21T23:42:42.5412876Z  18000K .......... .......... .......... .......... .......... 34%  186M 1s
2022-06-21T23:42:42.5413303Z  18050K .......... .......... .......... .......... .......... 34% 38.8M 1s
2022-06-21T23:42:42.5413682Z  18100K .......... .......... .......... .......... .......... 34% 37.4M 1s
2022-06-21T23:42:42.5414059Z  18150K .......... .......... .......... .......... .......... 34%  172M 1s
2022-06-21T23:42:42.5414629Z  18200K .......... .......... .......... .......... .......... 35%  143M 1s
2022-06-21T23:42:42.5415008Z  18250K .......... .......... .......... .......... .......... 35%  195M 1s
2022-06-21T23:42:42.5415571Z  18300K .......... .......... .......... .......... .......... 35%  173M 1s
2022-06-21T23:42:42.5415965Z  18350K .......... .......... .......... .......... .......... 35%  214M 1s
2022-06-21T23:42:42.5416346Z  18400K .......... .......... .......... .......... .......... 35%  127M 1s
2022-06-21T23:42:42.5416919Z  18450K .......... .......... .......... .......... .......... 35%  186M 1s
2022-06-21T23:42:42.5417660Z  18500K .......... .......... .......... .......... .......... 35%  162M 1s
2022-06-21T23:42:42.5418580Z  18550K .......... .......... .......... .......... .......... 35%  190M 1s
2022-06-21T23:42:42.5419200Z  18600K .......... .......... .......... .......... .......... 35%  176M 1s
2022-06-21T23:42:42.5419603Z  18650K .......... .......... .......... .......... .......... 35%  178M 1s
2022-06-21T23:42:42.5420026Z  18700K .......... .......... .......... .......... .......... 35%  208M 1s
2022-06-21T23:42:42.5420441Z  18750K .......... .......... .......... .......... .......... 36%  146M 1s
2022-06-21T23:42:42.5420857Z  18800K .......... .......... .......... .......... .......... 36%  138M 1s
2022-06-21T23:42:42.5421256Z  18850K .......... .......... .......... .......... .......... 36%  176M 1s
2022-06-21T23:42:42.5421674Z  18900K .......... .......... .......... .......... .......... 36%  186M 1s
2022-06-21T23:42:42.5422252Z  18950K .......... .......... .......... .......... .......... 36%  202M 1s
2022-06-21T23:42:42.5422662Z  19000K .......... .......... .......... .......... .......... 36%  166M 1s
2022-06-21T23:42:42.5423215Z  19050K .......... .......... .......... .......... .......... 36%  215M 1s
2022-06-21T23:42:42.5423613Z  19100K .......... .......... .......... .......... .......... 36%  164M 1s
2022-06-21T23:42:42.5424010Z  19150K .......... .......... .......... .......... .......... 36%  191M 1s
2022-06-21T23:42:42.5424572Z  19200K .......... .......... .......... .......... .......... 36%  180M 1s
2022-06-21T23:42:42.5425111Z  19250K .......... .......... .......... .......... .......... 37%  198M 1s
2022-06-21T23:42:42.5425470Z  19300K .......... .......... .......... .......... .......... 37%  186M 1s
2022-06-21T23:42:42.5425850Z  19350K .......... .......... .......... .......... .......... 37%  208M 1s
2022-06-21T23:42:42.5426224Z  19400K .......... .......... .......... .......... .......... 37%  170M 1s
2022-06-21T23:42:42.5426604Z  19450K .......... .......... .......... .......... .......... 37%  201M 1s
2022-06-21T23:42:42.5426967Z  19500K .......... .......... .......... .......... .......... 37%  192M 1s
2022-06-21T23:42:42.5427344Z  19550K .......... .......... .......... .......... .......... 37%  216M 1s
2022-06-21T23:42:42.5427720Z  19600K .......... .......... .......... .......... .......... 37%  175M 1s
2022-06-21T23:42:42.5428092Z  19650K .......... .......... .......... .......... .......... 37%  198M 1s
2022-06-21T23:42:42.5428449Z  19700K .......... .......... .......... .......... .......... 37% 14.9M 1s
2022-06-21T23:42:42.5428827Z  19750K .......... .......... .......... .......... .......... 37%  173M 1s
2022-06-21T23:42:42.5429200Z  19800K .......... .......... .......... .......... .......... 38%  137M 1s
2022-06-21T23:42:42.5429572Z  19850K .......... .......... .......... .......... .......... 38%  184M 1s
2022-06-21T23:42:42.5429952Z  19900K .......... .......... .......... .......... .......... 38%  198M 1s
2022-06-21T23:42:42.5430395Z  19950K .......... .......... .......... .......... .......... 38% 2.62M 1s
2022-06-21T23:42:42.5430808Z  20000K .......... .......... .......... .......... .......... 38%  101M 1s
2022-06-21T23:42:42.5431185Z  20050K .......... .......... .......... .......... .......... 38%  157M 1s
2022-06-21T23:42:42.5431556Z  20100K .......... .......... .......... .......... .......... 38%  196M 1s
2022-06-21T23:42:42.5431916Z  20150K .......... .......... .......... .......... .......... 38%  205M 1s
2022-06-21T23:42:42.5432291Z  20200K .......... .......... .......... .......... .......... 38% 86.9M 1s
2022-06-21T23:42:42.5432688Z  20250K .......... .......... .......... .......... .......... 38%  128M 1s
2022-06-21T23:42:42.5433065Z  20300K .......... .......... .......... .......... .......... 39%  161M 1s
2022-06-21T23:42:42.5433425Z  20350K .......... .......... .......... .......... .......... 39%  156M 1s
2022-06-21T23:42:42.5433802Z  20400K .......... .......... .......... .......... .......... 39%  130M 1s
2022-06-21T23:42:42.5434394Z  20450K .......... .......... .......... .......... .......... 39%  914K 1s
2022-06-21T23:42:42.5435073Z  20500K .......... .......... .......... .......... .......... 39%  184M 1s
2022-06-21T23:42:42.5435739Z  20550K .......... .......... .......... .......... .......... 39% 51.7M 1s
2022-06-21T23:42:42.5436302Z  20600K .......... .......... .......... .......... .......... 39% 44.7M 1s
2022-06-21T23:42:42.5436718Z  20650K .......... .......... .......... .......... .......... 39% 22.7M 1s
2022-06-21T23:42:42.5437139Z  20700K .......... .......... .......... .......... .......... 39%  147M 1s
2022-06-21T23:42:42.5437556Z  20750K .......... .......... .......... .......... .......... 39% 9.06M 1s
2022-06-21T23:42:42.5437958Z  20800K .......... .......... .......... .......... .......... 39%  130M 1s
2022-06-21T23:42:42.5438379Z  20850K .......... .......... .......... .......... .......... 40%  197M 1s
2022-06-21T23:42:42.5438792Z  20900K .......... .......... .......... .......... .......... 40%  154M 1s
2022-06-21T23:42:42.5439220Z  20950K .......... .......... .......... .......... .......... 40% 13.9M 1s
2022-06-21T23:42:42.5439629Z  21000K .......... .......... .......... .......... .......... 40%  159M 1s
2022-06-21T23:42:42.5440047Z  21050K .......... .......... .......... .......... .......... 40% 13.9M 1s
2022-06-21T23:42:42.5440464Z  21100K .......... .......... .......... .......... .......... 40% 5.84M 1s
2022-06-21T23:42:42.5440879Z  21150K .......... .......... .......... .......... .......... 40% 36.7M 1s
2022-06-21T23:42:42.5441472Z  21200K .......... .......... .......... .......... .......... 40%  120M 1s
2022-06-21T23:42:42.5441889Z  21250K .......... .......... .......... .......... .......... 40%  138M 1s
2022-06-21T23:42:42.5442654Z  21300K .......... .......... .......... .......... .......... 40%  152M 1s
2022-06-21T23:42:42.5443225Z  21350K .......... .......... .......... .......... .......... 41%  207M 1s
2022-06-21T23:42:42.5443620Z  21400K .......... .......... .......... .......... .......... 41%  146M 1s
2022-06-21T23:42:42.5443998Z  21450K .......... .......... .......... .......... .......... 41%  198M 1s
2022-06-21T23:42:42.5444400Z  21500K .......... .......... .......... .......... .......... 41%  202M 1s
2022-06-21T23:42:42.5444793Z  21550K .......... .......... .......... .......... .......... 41%  106M 1s
2022-06-21T23:42:42.5445187Z  21600K .......... .......... .......... .......... .......... 41%  173M 1s
2022-06-21T23:42:42.5445576Z  21650K .......... .......... .......... .......... .......... 41%  196M 1s
2022-06-21T23:42:42.5445957Z  21700K .......... .......... .......... .......... .......... 41%  210M 1s
2022-06-21T23:42:42.5446346Z  21750K .......... .......... .......... .......... .......... 41%  216M 1s
2022-06-21T23:42:42.5446737Z  21800K .......... .......... .......... .......... .......... 41%  194M 1s
2022-06-21T23:42:42.5447289Z  21850K .......... .......... .......... .......... .......... 42%  223M 1s
2022-06-21T23:42:42.5447728Z  21900K .......... .......... .......... .......... .......... 42%  226M 1s
2022-06-21T23:42:42.5448135Z  21950K .......... .......... .......... .......... .......... 42%  229M 1s
2022-06-21T23:42:42.5448512Z  22000K .......... .......... .......... .......... .......... 42% 11.5M 1s
2022-06-21T23:42:42.5448886Z  22050K .......... .......... .......... .......... .......... 42% 75.1M 1s
2022-06-21T23:42:42.5449246Z  22100K .......... .......... .......... .......... .......... 42% 85.5M 1s
2022-06-21T23:42:42.5449618Z  22150K .......... .......... .......... .......... .......... 42%  102M 1s
2022-06-21T23:42:42.5449991Z  22200K .......... .......... .......... .......... .......... 42% 39.3M 1s
2022-06-21T23:42:42.5450876Z  22250K .......... .......... .......... .......... .......... 42% 99.8M 1s
2022-06-21T23:42:42.5451427Z  22300K .......... .......... .......... .......... .......... 42%  126M 1s
2022-06-21T23:42:42.5451721Z  22350K .......... .......... .......... .......... .......... 42%  117M 1s
2022-06-21T23:42:42.5452034Z  22400K .......... .......... .......... .......... .......... 43% 47.6M 1s
2022-06-21T23:42:42.5452784Z  22450K .......... .......... .......... .......... .......... 43%  126M 1s
2022-06-21T23:42:42.5453186Z  22500K .......... .......... .......... .......... .......... 43% 88.2M 1s
2022-06-21T23:42:42.5453614Z  22550K .......... .......... .......... .......... .......... 43% 83.1M 1s
2022-06-21T23:42:42.5454162Z  22600K .......... .......... .......... .......... .......... 43%  116M 1s
2022-06-21T23:42:42.5454582Z  22650K .......... .......... .......... .......... .......... 43%  205M 1s
2022-06-21T23:42:42.5454997Z  22700K .......... .......... .......... .......... .......... 43% 4.53M 1s
2022-06-21T23:42:42.5455397Z  22750K .......... .......... .......... .......... .......... 43% 38.0M 1s
2022-06-21T23:42:42.5455815Z  22800K .......... .......... .......... .......... .......... 43% 88.8M 1s
2022-06-21T23:42:42.5456232Z  22850K .......... .......... .......... .......... .......... 43%  157M 1s
2022-06-21T23:42:42.5456648Z  22900K .......... .......... .......... .......... .......... 44%  198M 1s
2022-06-21T23:42:42.5458103Z  22950K .......... .......... .......... .......... .......... 44%  129M 1s
2022-06-21T23:42:42.5459631Z  23000K .......... .......... .......... .......... .......... 44%  164M 1s
2022-06-21T23:42:42.5460211Z  23050K .......... .......... .......... .......... .......... 44%  179M 1s
2022-06-21T23:42:42.5460901Z  23100K .......... .......... .......... .......... .......... 44%  183M 1s
2022-06-21T23:42:42.5461662Z  23150K .......... .......... .......... .......... .......... 44%  155M 1s
2022-06-21T23:42:42.5462541Z  23200K .......... .......... .......... .......... .......... 44%  118M 1s
2022-06-21T23:42:42.5463231Z  23250K .......... .......... .......... .......... .......... 44%  173M 1s
2022-06-21T23:42:42.5463731Z  23300K .......... .......... .......... .......... .......... 44%  190M 1s
2022-06-21T23:42:42.5464167Z  23350K .......... .......... .......... .......... .......... 44%  174M 1s
2022-06-21T23:42:42.5464857Z  23400K .......... .......... .......... .......... .......... 44%  176M 1s
2022-06-21T23:42:42.5465556Z  23450K .......... .......... .......... .......... .......... 45%  214M 1s
2022-06-21T23:42:42.5466213Z  23500K .......... .......... .......... .......... .......... 45%  156M 1s
2022-06-21T23:42:42.5466977Z  23550K .......... .......... .......... .......... .......... 45%  194M 1s
2022-06-21T23:42:42.5467427Z  23600K .......... .......... .......... .......... .......... 45%  167M 1s
2022-06-21T23:42:42.5467990Z  23650K .......... .......... .......... .......... .......... 45%  187M 1s
2022-06-21T23:42:42.5468517Z  23700K .......... .......... .......... .......... .......... 45%  190M 1s
2022-06-21T23:42:42.5469023Z  23750K .......... .......... .......... .......... .......... 45%  170M 1s
2022-06-21T23:42:42.5469824Z  23800K .......... .......... .......... .......... .......... 45%  176M 1s
2022-06-21T23:42:42.5471056Z  23850K .......... .......... .......... .......... .......... 45%  179M 1s
2022-06-21T23:42:42.5471657Z  23900K .......... .......... .......... .......... .......... 45% 18.1M 1s
2022-06-21T23:42:42.5472177Z  23950K .......... .......... .......... .......... .......... 46%  193M 1s
2022-06-21T23:42:42.5472639Z  24000K .......... .......... .......... .......... .......... 46%  170M 1s
2022-06-21T23:42:42.5473354Z  24050K .......... .......... .......... .......... .......... 46%  211M 1s
2022-06-21T23:42:42.5473978Z  24100K .......... .......... .......... .......... .......... 46%  207M 1s
2022-06-21T23:42:42.5474513Z  24150K .......... .......... .......... .......... .......... 46%  201M 1s
2022-06-21T23:42:42.5475051Z  24200K .......... .......... .......... .......... .......... 46%  170M 1s
2022-06-21T23:42:42.5475608Z  24250K .......... .......... .......... .......... .......... 46%  220M 1s
2022-06-21T23:42:42.5480394Z  24300K .......... .......... .......... .......... .......... 46%  178M 1s
2022-06-21T23:42:42.5481284Z  24350K .......... .......... .......... .......... .......... 46%  205M 1s
2022-06-21T23:42:42.5481937Z  24400K .......... .......... .......... .......... .......... 46%  157M 1s
2022-06-21T23:42:42.5482362Z  24450K .......... .......... .......... .......... .......... 46%  189M 1s
2022-06-21T23:42:42.5482865Z  24500K .......... .......... .......... .......... .......... 47%  211M 1s
2022-06-21T23:42:42.5483407Z  24550K .......... .......... .......... .......... .......... 47%  208M 1s
2022-06-21T23:42:42.5483891Z  24600K .......... .......... .......... .......... .......... 47% 16.9M 1s
2022-06-21T23:42:42.5484311Z  24650K .......... .......... .......... .......... .......... 47%  186M 1s
2022-06-21T23:42:42.5485072Z  24700K .......... .......... .......... .......... .......... 47%  201M 1s
2022-06-21T23:42:42.5485715Z  24750K .......... .......... .......... .......... .......... 47%  216M 1s
2022-06-21T23:42:42.5486444Z  24800K .......... .......... .......... .......... .......... 47%  179M 1s
2022-06-21T23:42:42.5487034Z  24850K .......... .......... .......... .......... .......... 47%  212M 1s
2022-06-21T23:42:42.5487675Z  24900K .......... .......... .......... .......... .......... 47% 16.6M 1s
2022-06-21T23:42:42.5488171Z  24950K .......... .......... .......... .......... .......... 47%  195M 1s
2022-06-21T23:42:42.5488750Z  25000K .......... .......... .......... .......... .......... 48%  163M 1s
2022-06-21T23:42:42.5489248Z  25050K .......... .......... .......... .......... .......... 48%  106M 1s
2022-06-21T23:42:42.5489890Z  25100K .......... .......... .......... .......... .......... 48%  175M 1s
2022-06-21T23:42:42.5519029Z  25150K .......... .......... .......... .......... .......... 48%  187M 1s
2022-06-21T23:42:42.5521930Z  25200K .......... .......... .......... .......... .......... 48%  142M 1s
2022-06-21T23:42:42.5522936Z  25250K .......... .......... .......... .......... .......... 48%  212M 1s
2022-06-21T23:42:42.5584150Z  25300K .......... .......... .......... .......... .......... 48%  152M 1s
2022-06-21T23:42:42.5584645Z  25350K .......... .......... .......... .......... .......... 48%  156M 1s
2022-06-21T23:42:42.5585165Z  25400K .......... .......... .......... .......... .......... 48%  167M 1s
2022-06-21T23:42:42.5585656Z  25450K .......... .......... .......... .......... .......... 48%  175M 1s
2022-06-21T23:42:42.5586205Z  25500K .......... .......... .......... .......... .......... 49%  160M 1s
2022-06-21T23:42:42.5586746Z  25550K .......... .......... .......... .......... .......... 49%  192M 1s
2022-06-21T23:42:42.5587234Z  25600K .......... .......... .......... .......... .......... 49%  154M 1s
2022-06-21T23:42:42.5587658Z  25650K .......... .......... .......... .......... .......... 49%  188M 1s
2022-06-21T23:42:42.5588149Z  25700K .......... .......... .......... .......... .......... 49%  198M 1s
2022-06-21T23:42:42.5588696Z  25750K .......... .......... .......... .......... .......... 49%  186M 0s
2022-06-21T23:42:42.5589298Z  25800K .......... .......... .......... .......... .......... 49%  151M 0s
2022-06-21T23:42:42.5589827Z  25850K .......... .......... .......... .......... .......... 49%  186M 0s
2022-06-21T23:42:42.5590262Z  25900K .......... .......... .......... .......... .......... 49%  204M 0s
2022-06-21T23:42:42.5590805Z  25950K .......... .......... .......... .......... .......... 49%  203M 0s
2022-06-21T23:42:42.5591288Z  26000K .......... .......... .......... .......... .......... 49%  180M 0s
2022-06-21T23:42:42.5591926Z  26050K .......... .......... .......... .......... .......... 50%  197M 0s
2022-06-21T23:42:42.5592531Z  26100K .......... .......... .......... .......... .......... 50%  208M 0s
2022-06-21T23:42:42.5592927Z  26150K .......... .......... .......... .......... .......... 50%  205M 0s
2022-06-21T23:42:42.5593527Z  26200K .......... .......... .......... .......... .......... 50%  187M 0s
2022-06-21T23:42:42.5593908Z  26250K .......... .......... .......... .......... .......... 50%  199M 0s
2022-06-21T23:42:42.5594548Z  26300K .......... .......... .......... .......... .......... 50%  117M 0s
2022-06-21T23:42:42.5595220Z  26350K .......... .......... .......... .......... .......... 50%  193M 0s
2022-06-21T23:42:42.5595825Z  26400K .......... .......... .......... .......... .......... 50%  159M 0s
2022-06-21T23:42:42.5596343Z  26450K .......... .......... .......... .......... .......... 50%  207M 0s
2022-06-21T23:42:42.5596919Z  26500K .......... .......... .......... .......... .......... 50% 13.2M 0s
2022-06-21T23:42:42.5597447Z  26550K .......... .......... .......... .......... .......... 51%  154M 0s
2022-06-21T23:42:42.5598391Z  26600K .......... .......... .......... .......... .......... 51%  154M 0s
2022-06-21T23:42:42.5599092Z  26650K .......... .......... .......... .......... .......... 51% 82.5M 0s
2022-06-21T23:42:42.5599553Z  26700K .......... .......... .......... .......... .......... 51%  198M 0s
2022-06-21T23:42:42.5600089Z  26750K .......... .......... .......... .......... .......... 51%  194M 0s
2022-06-21T23:42:42.5600871Z  26800K .......... .......... .......... .......... .......... 51% 97.7M 0s
2022-06-21T23:42:42.5601464Z  26850K .......... .......... .......... .......... .......... 51%  184M 0s
2022-06-21T23:42:42.5601998Z  26900K .......... .......... .......... .......... .......... 51%  170M 0s
2022-06-21T23:42:42.5602627Z  26950K .......... .......... .......... .......... .......... 51%  199M 0s
2022-06-21T23:42:42.5603732Z  27000K .......... .......... .......... .......... .......... 51%  176M 0s
2022-06-21T23:42:42.5604273Z  27050K .......... .......... .......... .......... .......... 51%  194M 0s
2022-06-21T23:42:42.5604855Z  27100K .......... .......... .......... .......... .......... 52%  194M 0s
2022-06-21T23:42:42.5605536Z  27150K .......... .......... .......... .......... .......... 52%  198M 0s
2022-06-21T23:42:42.5606117Z  27200K .......... .......... .......... .......... .......... 52%  170M 0s
2022-06-21T23:42:42.5606748Z  27250K .......... .......... .......... .......... .......... 52%  200M 0s
2022-06-21T23:42:42.5607286Z  27300K .......... .......... .......... .......... .......... 52% 4.03M 0s
2022-06-21T23:42:42.5607705Z  27350K .......... .......... .......... .......... .......... 52%  131M 0s
2022-06-21T23:42:42.5608227Z  27400K .......... .......... .......... .......... .......... 52%  167M 0s
2022-06-21T23:42:42.5608690Z  27450K .......... .......... .......... .......... .......... 52%  157M 0s
2022-06-21T23:42:42.5609190Z  27500K .......... .......... .......... .......... .......... 52%  140M 0s
2022-06-21T23:42:42.5609659Z  27550K .......... .......... .......... .......... .......... 52%  177M 0s
2022-06-21T23:42:42.5610085Z  27600K .......... .......... .......... .......... .......... 53%  147M 0s
2022-06-21T23:42:42.5610703Z  27650K .......... .......... .......... .......... .......... 53%  175M 0s
2022-06-21T23:42:42.5611151Z  27700K .......... .......... .......... .......... .......... 53%  187M 0s
2022-06-21T23:42:42.5611783Z  27750K .......... .......... .......... .......... .......... 53%  200M 0s
2022-06-21T23:42:42.5612265Z  27800K .......... .......... .......... .......... .......... 53%  132M 0s
2022-06-21T23:42:42.5612731Z  27850K .......... .......... .......... .......... .......... 53% 4.78M 0s
2022-06-21T23:42:42.5613190Z  27900K .......... .......... .......... .......... .......... 53%  200M 0s
2022-06-21T23:42:42.5613709Z  27950K .......... .......... .......... .......... .......... 53%  217M 0s
2022-06-21T23:42:42.5614118Z  28000K .......... .......... .......... .......... .......... 53%  168M 0s
2022-06-21T23:42:42.5614602Z  28050K .......... .......... .......... .......... .......... 53%  195M 0s
2022-06-21T23:42:42.5615055Z  28100K .......... .......... .......... .......... .......... 53%  192M 0s
2022-06-21T23:42:42.5615589Z  28150K .......... .......... .......... .......... .......... 54%  179M 0s
2022-06-21T23:42:42.5616070Z  28200K .......... .......... .......... .......... .......... 54%  151M 0s
2022-06-21T23:42:42.5616490Z  28250K .......... .......... .......... .......... .......... 54%  226M 0s
2022-06-21T23:42:42.5617076Z  28300K .......... .......... .......... .......... .......... 54%  224M 0s
2022-06-21T23:42:42.5617540Z  28350K .......... .......... .......... .......... .......... 54%  216M 0s
2022-06-21T23:42:42.5618073Z  28400K .......... .......... .......... .......... .......... 54%  178M 0s
2022-06-21T23:42:42.5618489Z  28450K .......... .......... .......... .......... .......... 54% 58.4M 0s
2022-06-21T23:42:42.5618948Z  28500K .......... .......... .......... .......... .......... 54%  190M 0s
2022-06-21T23:42:42.5619405Z  28550K .......... .......... .......... .......... .......... 54%  142M 0s
2022-06-21T23:42:42.5619898Z  28600K .......... .......... .......... .......... .......... 54%  152M 0s
2022-06-21T23:42:42.5620325Z  28650K .......... .......... .......... .......... .......... 55% 1.27M 0s
2022-06-21T23:42:42.5620791Z  28700K .......... .......... .......... .......... .......... 55%  193M 0s
2022-06-21T23:42:42.5621254Z  28750K .......... .......... .......... .......... .......... 55%  170M 0s
2022-06-21T23:42:42.5621721Z  28800K .......... .......... .......... .......... .......... 55%  135M 0s
2022-06-21T23:42:42.5622244Z  28850K .......... .......... .......... .......... .......... 55%  196M 0s
2022-06-21T23:42:42.5622657Z  28900K .......... .......... .......... .......... .......... 55%  176M 0s
2022-06-21T23:42:42.5623137Z  28950K .......... .......... .......... .......... .......... 55%  148M 0s
2022-06-21T23:42:42.5623599Z  29000K .......... .......... .......... .......... .......... 55%  194M 0s
2022-06-21T23:42:42.5624300Z  29050K .......... .......... .......... .......... .......... 55% 83.6M 0s
2022-06-21T23:42:42.5624701Z  29100K .......... .......... .......... .......... .......... 55% 30.8M 0s
2022-06-21T23:42:42.5625153Z  29150K .......... .......... .......... .......... .......... 56% 55.5M 0s
2022-06-21T23:42:42.5625791Z  29200K .......... .......... .......... .......... .......... 56%  177M 0s
2022-06-21T23:42:42.5626311Z  29250K .......... .......... .......... .......... .......... 56% 28.1M 0s
2022-06-21T23:42:42.5626933Z  29300K .......... .......... .......... .......... .......... 56%  160M 0s
2022-06-21T23:42:42.5627418Z  29350K .......... .......... .......... .......... .......... 56%  194M 0s
2022-06-21T23:42:42.5627891Z  29400K .......... .......... .......... .......... .......... 56%  149M 0s
2022-06-21T23:42:42.5628360Z  29450K .......... .......... .......... .......... .......... 56%  175M 0s
2022-06-21T23:42:42.5629034Z  29500K .......... .......... .......... .......... .......... 56%  185M 0s
2022-06-21T23:42:42.5629463Z  29550K .......... .......... .......... .......... .......... 56%  184M 0s
2022-06-21T23:42:42.5629936Z  29600K .......... .......... .......... .......... .......... 56%  156M 0s
2022-06-21T23:42:42.5630407Z  29650K .......... .......... .......... .......... .......... 56%  168M 0s
2022-06-21T23:42:42.5631588Z  29700K .......... .......... .......... .......... .......... 57% 56.0M 0s
2022-06-21T23:42:42.5632113Z  29750K .......... .......... .......... .......... .......... 57%  183M 0s
2022-06-21T23:42:42.5632817Z  29800K .......... .......... .......... .......... .......... 57%  163M 0s
2022-06-21T23:42:42.5633462Z  29850K .......... .......... .......... .......... .......... 57%  187M 0s
2022-06-21T23:42:42.5634203Z  29900K .......... .......... .......... .......... .......... 57%  185M 0s
2022-06-21T23:42:42.5634888Z  29950K .......... .......... .......... .......... .......... 57%  195M 0s
2022-06-21T23:42:42.5635411Z  30000K .......... .......... .......... .......... .......... 57%  156M 0s
2022-06-21T23:42:42.5651672Z  30050K .......... .......... .......... .......... .......... 57%  197M 0s
2022-06-21T23:42:42.5652452Z  30100K .......... .......... .......... .......... .......... 57%  172M 0s
2022-06-21T23:42:42.5653029Z  30150K .......... .......... .......... .......... .......... 57%  204M 0s
2022-06-21T23:42:42.5653472Z  30200K .......... .......... .......... .......... .......... 58%  163M 0s
2022-06-21T23:42:42.5654214Z  30250K .......... .......... .......... .......... .......... 58%  168M 0s
2022-06-21T23:42:42.5654669Z  30300K .......... .......... .......... .......... .......... 58%  209M 0s
2022-06-21T23:42:42.5655236Z  30350K .......... .......... .......... .......... .......... 58%  175M 0s
2022-06-21T23:42:42.5655662Z  30400K .......... .......... .......... .......... .......... 58%  151M 0s
2022-06-21T23:42:42.5656111Z  30450K .......... .......... .......... .......... .......... 58% 86.1M 0s
2022-06-21T23:42:42.5656586Z  30500K .......... .......... .......... .......... .......... 58%  182M 0s
2022-06-21T23:42:42.5657038Z  30550K .......... .......... .......... .......... .......... 58%  205M 0s
2022-06-21T23:42:42.5657497Z  30600K .......... .......... .......... .......... .......... 58%  175M 0s
2022-06-21T23:42:42.5658130Z  30650K .......... .......... .......... .......... .......... 58%  193M 0s
2022-06-21T23:42:42.5658596Z  30700K .......... .......... .......... .......... .......... 58%  190M 0s
2022-06-21T23:42:42.5706355Z  30750K .......... .......... .......... .......... .......... 59%  177M 0s
2022-06-21T23:42:42.5710814Z  30800K .......... .......... .......... .......... .......... 59%  156M 0s
2022-06-21T23:42:42.5711256Z  30850K .......... .......... .......... .......... .......... 59%  180M 0s
2022-06-21T23:42:42.5711946Z  30900K .......... .......... .......... .......... .......... 59%  191M 0s
2022-06-21T23:42:42.5712514Z  30950K .......... .......... .......... .......... .......... 59%  188M 0s
2022-06-21T23:42:42.5712930Z  31000K .......... .......... .......... .......... .......... 59% 99.6M 0s
2022-06-21T23:42:42.5713502Z  31050K .......... .......... .......... .......... .......... 59%  192M 0s
2022-06-21T23:42:42.5713913Z  31100K .......... .......... .......... .......... .......... 59%  183M 0s
2022-06-21T23:42:42.5714332Z  31150K .......... .......... .......... .......... .......... 59%  183M 0s
2022-06-21T23:42:42.5714996Z  31200K .......... .......... .......... .......... .......... 59%  138M 0s
2022-06-21T23:42:42.5715379Z  31250K .......... .......... .......... .......... .......... 60%  194M 0s
2022-06-21T23:42:42.5715854Z  31300K .......... .......... .......... .......... .......... 60%  206M 0s
2022-06-21T23:42:42.5716280Z  31350K .......... .......... .......... .......... .......... 60%  206M 0s
2022-06-21T23:42:42.5716716Z  31400K .......... .......... .......... .......... .......... 60%  167M 0s
2022-06-21T23:42:42.5717090Z  31450K .......... .......... .......... .......... .......... 60%  100M 0s
2022-06-21T23:42:42.5717718Z  31500K .......... .......... .......... .......... .......... 60%  182M 0s
2022-06-21T23:42:42.5718164Z  31550K .......... .......... .......... .......... .......... 60%  190M 0s
2022-06-21T23:42:42.5718520Z  31600K .......... .......... .......... .......... .......... 60%  109M 0s
2022-06-21T23:42:42.5719490Z  31650K .......... .......... .......... .......... .......... 60%  143M 0s
2022-06-21T23:42:42.5720172Z  31700K .......... .......... .......... .......... .......... 60%  187M 0s
2022-06-21T23:42:42.5720884Z  31750K .......... .......... .......... .......... .......... 60%  122M 0s
2022-06-21T23:42:42.5721236Z  31800K .......... .......... .......... .......... .......... 61% 15.7M 0s
2022-06-21T23:42:42.5721924Z  31850K .......... .......... .......... .......... .......... 61%  175M 0s
2022-06-21T23:42:42.5722501Z  31900K .......... .......... .......... .......... .......... 61% 75.5M 0s
2022-06-21T23:42:42.5722856Z  31950K .......... .......... .......... .......... .......... 61% 69.1M 0s
2022-06-21T23:42:42.5723330Z  32000K .......... .......... .......... .......... .......... 61% 86.1M 0s
2022-06-21T23:42:42.5723761Z  32050K .......... .......... .......... .......... .......... 61%  189M 0s
2022-06-21T23:42:42.5724172Z  32100K .......... .......... .......... .......... .......... 61%  187M 0s
2022-06-21T23:42:42.5724687Z  32150K .......... .......... .......... .......... .......... 61%  189M 0s
2022-06-21T23:42:42.5725251Z  32200K .......... .......... .......... .......... .......... 61%  186M 0s
2022-06-21T23:42:42.5725664Z  32250K .......... .......... .......... .......... .......... 61%  218M 0s
2022-06-21T23:42:42.5726058Z  32300K .......... .......... .......... .......... .......... 62%  212M 0s
2022-06-21T23:42:42.5726399Z  32350K .......... .......... .......... .......... .......... 62%  197M 0s
2022-06-21T23:42:42.5726834Z  32400K .......... .......... .......... .......... .......... 62%  165M 0s
2022-06-21T23:42:42.5727270Z  32450K .......... .......... .......... .......... .......... 62%  106M 0s
2022-06-21T23:42:42.5727631Z  32500K .......... .......... .......... .......... .......... 62%  223M 0s
2022-06-21T23:42:42.5728051Z  32550K .......... .......... .......... .......... .......... 62%  228M 0s
2022-06-21T23:42:42.5728443Z  32600K .......... .......... .......... .......... .......... 62%  195M 0s
2022-06-21T23:42:42.5728876Z  32650K .......... .......... .......... .......... .......... 62%  133M 0s
2022-06-21T23:42:42.5729428Z  32700K .......... .......... .......... .......... .......... 62%  170M 0s
2022-06-21T23:42:42.5729838Z  32750K .......... .......... .......... .......... .......... 62% 1.48M 0s
2022-06-21T23:42:42.5730245Z  32800K .......... .......... .......... .......... .......... 63% 32.0M 0s
2022-06-21T23:42:42.5730885Z  32850K .......... .......... .......... .......... .......... 63%  200M 0s
2022-06-21T23:42:42.5731351Z  32900K .......... .......... .......... .......... .......... 63%  150M 0s
2022-06-21T23:42:42.5731988Z  32950K .......... .......... .......... .......... .......... 63%  215M 0s
2022-06-21T23:42:42.5732622Z  33000K .......... .......... .......... .......... .......... 63%  115M 0s
2022-06-21T23:42:42.5732975Z  33050K .......... .......... .......... .......... .......... 63%  248M 0s
2022-06-21T23:42:42.5733551Z  33100K .......... .......... .......... .......... .......... 63%  176M 0s
2022-06-21T23:42:42.5734010Z  33150K .......... .......... .......... .......... .......... 63%  219M 0s
2022-06-21T23:42:42.5734410Z  33200K .......... .......... .......... .......... .......... 63%  182M 0s
2022-06-21T23:42:42.5734750Z  33250K .......... .......... .......... .......... .......... 63% 87.9M 0s
2022-06-21T23:42:42.5735148Z  33300K .......... .......... .......... .......... .......... 63%  173M 0s
2022-06-21T23:42:42.5735627Z  33350K .......... .......... .......... .......... .......... 64%  188M 0s
2022-06-21T23:42:42.5735973Z  33400K .......... .......... .......... .......... .......... 64%  152M 0s
2022-06-21T23:42:42.5736377Z  33450K .......... .......... .......... .......... .......... 64%  173M 0s
2022-06-21T23:42:42.5736773Z  33500K .......... .......... .......... .......... .......... 64%  176M 0s
2022-06-21T23:42:42.5737181Z  33550K .......... .......... .......... .......... .......... 64%  166M 0s
2022-06-21T23:42:42.5737670Z  33600K .......... .......... .......... .......... .......... 64%  177M 0s
2022-06-21T23:42:42.5738095Z  33650K .......... .......... .......... .......... .......... 64%  221M 0s
2022-06-21T23:42:42.5738490Z  33700K .......... .......... .......... .......... .......... 64%  156M 0s
2022-06-21T23:42:42.5738835Z  33750K .......... .......... .......... .......... .......... 64%  167M 0s
2022-06-21T23:42:42.5739248Z  33800K .......... .......... .......... .......... .......... 64%  159M 0s
2022-06-21T23:42:42.5739691Z  33850K .......... .......... .......... .......... .......... 65%  199M 0s
2022-06-21T23:42:42.5740087Z  33900K .......... .......... .......... .......... .......... 65%  165M 0s
2022-06-21T23:42:42.5740429Z  33950K .......... .......... .......... .......... .......... 65%  170M 0s
2022-06-21T23:42:42.5740840Z  34000K .......... .......... .......... .......... .......... 65%  178M 0s
2022-06-21T23:42:42.5741271Z  34050K .......... .......... .......... .......... .......... 65%  129M 0s
2022-06-21T23:42:42.5741671Z  34100K .......... .......... .......... .......... .......... 65%  171M 0s
2022-06-21T23:42:42.5742111Z  34150K .......... .......... .......... .......... .......... 65%  183M 0s
2022-06-21T23:42:42.5742567Z  34200K .......... .......... .......... .......... .......... 65%  190M 0s
2022-06-21T23:42:42.5742969Z  34250K .......... .......... .......... .......... .......... 65%  217M 0s
2022-06-21T23:42:42.5743520Z  34300K .......... .......... .......... .......... .......... 65%  201M 0s
2022-06-21T23:42:42.5743908Z  34350K .......... .......... .......... .......... .......... 65%  174M 0s
2022-06-21T23:42:42.5744303Z  34400K .......... .......... .......... .......... .......... 66%  110M 0s
2022-06-21T23:42:42.5744686Z  34450K .......... .......... .......... .......... .......... 66%  130M 0s
2022-06-21T23:42:42.5745014Z  34500K .......... .......... .......... .......... .......... 66%  163M 0s
2022-06-21T23:42:42.5745438Z  34550K .......... .......... .......... .......... .......... 66%  187M 0s
2022-06-21T23:42:42.5746001Z  34600K .......... .......... .......... .......... .......... 66%  189M 0s
2022-06-21T23:42:42.5746361Z  34650K .......... .......... .......... .......... .......... 66%  202M 0s
2022-06-21T23:42:42.5747093Z  34700K .......... .......... .......... .......... .......... 66%  214M 0s
2022-06-21T23:42:42.5747526Z  34750K .......... .......... .......... .......... .......... 66%  206M 0s
2022-06-21T23:42:42.5747927Z  34800K .......... .......... .......... .......... .......... 66%  120M 0s
2022-06-21T23:42:42.5748282Z  34850K .......... .......... .......... .......... .......... 66%  170M 0s
2022-06-21T23:42:42.5748681Z  34900K .......... .......... .......... .......... .......... 67% 73.8M 0s
2022-06-21T23:42:42.5749078Z  34950K .......... .......... .......... .......... .......... 67%  149M 0s
2022-06-21T23:42:42.5749460Z  35000K .......... .......... .......... .......... .......... 67%  165M 0s
2022-06-21T23:42:42.5750037Z  35050K .......... .......... .......... .......... .......... 67%  220M 0s
2022-06-21T23:42:42.5750469Z  35100K .......... .......... .......... .......... .......... 67%  187M 0s
2022-06-21T23:42:42.5750921Z  35150K .......... .......... .......... .......... .......... 67%  179M 0s
2022-06-21T23:42:42.5751276Z  35200K .......... .......... .......... .......... .......... 67%  172M 0s
2022-06-21T23:42:42.5751723Z  35250K .......... .......... .......... .......... .......... 67%  181M 0s
2022-06-21T23:42:42.5752159Z  35300K .......... .......... .......... .......... .......... 67%  170M 0s
2022-06-21T23:42:42.5752565Z  35350K .......... .......... .......... .......... .......... 67%  157M 0s
2022-06-21T23:42:42.5752916Z  35400K .......... .......... .......... .......... .......... 67%  114M 0s
2022-06-21T23:42:42.5753514Z  35450K .......... .......... .......... .......... .......... 68%  213M 0s
2022-06-21T23:42:42.5754112Z  35500K .......... .......... .......... .......... .......... 68%  182M 0s
2022-06-21T23:42:42.5754720Z  35550K .......... .......... .......... .......... .......... 68%  204M 0s
2022-06-21T23:42:42.5755165Z  35600K .......... .......... .......... .......... .......... 68%  176M 0s
2022-06-21T23:42:42.5755592Z  35650K .......... .......... .......... .......... .......... 68%  189M 0s
2022-06-21T23:42:42.5756084Z  35700K .......... .......... .......... .......... .......... 68%  114M 0s
2022-06-21T23:42:42.5756606Z  35750K .......... .......... .......... .......... .......... 68%  165M 0s
2022-06-21T23:42:42.5757016Z  35800K .......... .......... .......... .......... .......... 68%  120M 0s
2022-06-21T23:42:42.5757425Z  35850K .......... .......... .......... .......... .......... 68%  167M 0s
2022-06-21T23:42:42.5757932Z  35900K .......... .......... .......... .......... .......... 68% 91.2M 0s
2022-06-21T23:42:42.5902736Z  35950K .......... .......... .......... .......... .......... 69%  160M 0s
2022-06-21T23:42:42.5903103Z  36000K .......... .......... .......... .......... .......... 69%  132M 0s
2022-06-21T23:42:42.5903440Z  36050K .......... .......... .......... .......... .......... 69%  206M 0s
2022-06-21T23:42:42.5903988Z  36100K .......... .......... .......... .......... .......... 69%  160M 0s
2022-06-21T23:42:42.5904285Z  36150K .......... .......... .......... .......... .......... 69%  191M 0s
2022-06-21T23:42:42.5904608Z  36200K .......... .......... .......... .......... .......... 69%  151M 0s
2022-06-21T23:42:42.5904924Z  36250K .......... .......... .......... .......... .......... 69%  189M 0s
2022-06-21T23:42:42.5905219Z  36300K .......... .......... .......... .......... .......... 69%  165M 0s
2022-06-21T23:42:42.5905544Z  36350K .......... .......... .......... .......... .......... 69%  189M 0s
2022-06-21T23:42:42.5905860Z  36400K .......... .......... .......... .......... .......... 69%  160M 0s
2022-06-21T23:42:42.5906171Z  36450K .......... .......... .......... .......... .......... 70%  159M 0s
2022-06-21T23:42:42.5906461Z  36500K .......... .......... .......... .......... .......... 70%  216M 0s
2022-06-21T23:42:42.5906788Z  36550K .......... .......... .......... .......... .......... 70% 2.35M 0s
2022-06-21T23:42:42.5907108Z  36600K .......... .......... .......... .......... .......... 70%  165M 0s
2022-06-21T23:42:42.5907406Z  36650K .......... .......... .......... .......... .......... 70%  200M 0s
2022-06-21T23:42:42.5907932Z  36700K .......... .......... .......... .......... .......... 70%  225M 0s
2022-06-21T23:42:42.5908238Z  36750K .......... .......... .......... .......... .......... 70%  168M 0s
2022-06-21T23:42:42.5908539Z  36800K .......... .......... .......... .......... .......... 70% 79.7M 0s
2022-06-21T23:42:42.5908823Z  36850K .......... .......... .......... .......... .......... 70%  875K 0s
2022-06-21T23:42:42.5909130Z  36900K .......... .......... .......... .......... .......... 70%  154M 0s
2022-06-21T23:42:42.5909429Z  36950K .......... .......... .......... .......... .......... 70%  207M 0s
2022-06-21T23:42:42.5909730Z  37000K .......... .......... .......... .......... .......... 71%  131M 0s
2022-06-21T23:42:42.5910018Z  37050K .......... .......... .......... .......... .......... 71%  150M 0s
2022-06-21T23:42:42.5910323Z  37100K .......... .......... .......... .......... .......... 71%  196M 0s
2022-06-21T23:42:42.5910798Z  37150K .......... .......... .......... .......... .......... 71%  166M 0s
2022-06-21T23:42:42.5911091Z  37200K .......... .......... .......... .......... .......... 71%  138M 0s
2022-06-21T23:42:42.5911560Z  37250K .......... .......... .......... .......... .......... 71%  141M 0s
2022-06-21T23:42:42.5911861Z  37300K .......... .......... .......... .......... .......... 71%  154M 0s
2022-06-21T23:42:42.5912159Z  37350K .......... .......... .......... .......... .......... 71%  155M 0s
2022-06-21T23:42:42.5912441Z  37400K .......... .......... .......... .......... .......... 71%  190M 0s
2022-06-21T23:42:42.5912738Z  37450K .......... .......... .......... .......... .......... 71%  212M 0s
2022-06-21T23:42:42.5913147Z  37500K .......... .......... .......... .......... .......... 72%  215M 0s
2022-06-21T23:42:42.5913447Z  37550K .......... .......... .......... .......... .......... 72%  200M 0s
2022-06-21T23:42:42.5913730Z  37600K .......... .......... .......... .......... .......... 72%  160M 0s
2022-06-21T23:42:42.5914032Z  37650K .......... .......... .......... .......... .......... 72%  221M 0s
2022-06-21T23:42:42.5914330Z  37700K .......... .......... .......... .......... .......... 72%  178M 0s
2022-06-21T23:42:42.5914609Z  37750K .......... .......... .......... .......... .......... 72%  147M 0s
2022-06-21T23:42:42.5914911Z  37800K .......... .......... .......... .......... .......... 72%  114M 0s
2022-06-21T23:42:42.5915210Z  37850K .......... .......... .......... .......... .......... 72%  195M 0s
2022-06-21T23:42:42.5915511Z  37900K .......... .......... .......... .......... .......... 72%  144M 0s
2022-06-21T23:42:42.5915791Z  37950K .......... .......... .......... .......... .......... 72%  172M 0s
2022-06-21T23:42:42.5916096Z  38000K .......... .......... .......... .......... .......... 72%  136M 0s
2022-06-21T23:42:42.5916483Z  38050K .......... .......... .......... .......... .......... 73%  157M 0s
2022-06-21T23:42:42.5916765Z  38100K .......... .......... .......... .......... .......... 73%  180M 0s
2022-06-21T23:42:42.5917067Z  38150K .......... .......... .......... .......... .......... 73%  176M 0s
2022-06-21T23:42:42.5917368Z  38200K .......... .......... .......... .......... .......... 73%  152M 0s
2022-06-21T23:42:42.5917662Z  38250K .......... .......... .......... .......... .......... 73%  169M 0s
2022-06-21T23:42:42.5917939Z  38300K .......... .......... .......... .......... .......... 73%  185M 0s
2022-06-21T23:42:42.5918245Z  38350K .......... .......... .......... .......... .......... 73%  185M 0s
2022-06-21T23:42:42.5918549Z  38400K .......... .......... .......... .......... .......... 73%  144M 0s
2022-06-21T23:42:42.5918831Z  38450K .......... .......... .......... .......... .......... 73%  169M 0s
2022-06-21T23:42:42.5919137Z  38500K .......... .......... .......... .......... .......... 73%  175M 0s
2022-06-21T23:42:42.5919445Z  38550K .......... .......... .......... .......... .......... 74%  157M 0s
2022-06-21T23:42:42.5919748Z  38600K .......... .......... .......... .......... .......... 74%  185M 0s
2022-06-21T23:42:42.5920032Z  38650K .......... .......... .......... .......... .......... 74%  156M 0s
2022-06-21T23:42:42.5920331Z  38700K .......... .......... .......... .......... .......... 74%  179M 0s
2022-06-21T23:42:42.5920625Z  38750K .......... .......... .......... .......... .......... 74%  209M 0s
2022-06-21T23:42:42.5920924Z  38800K .......... .......... .......... .......... .......... 74%  177M 0s
2022-06-21T23:42:42.5921205Z  38850K .......... .......... .......... .......... .......... 74%  182M 0s
2022-06-21T23:42:42.5921503Z  38900K .......... .......... .......... .......... .......... 74%  195M 0s
2022-06-21T23:42:42.5921803Z  38950K .......... .......... .......... .......... .......... 74% 23.1M 0s
2022-06-21T23:42:42.5922088Z  39000K .......... .......... .......... .......... .......... 74%  195M 0s
2022-06-21T23:42:42.5922396Z  39050K .......... .......... .......... .......... .......... 74%  194M 0s
2022-06-21T23:42:42.5922692Z  39100K .......... .......... .......... .......... .......... 75%  211M 0s
2022-06-21T23:42:42.5922984Z  39150K .......... .......... .......... .......... .......... 75%  165M 0s
2022-06-21T23:42:42.5923266Z  39200K .......... .......... .......... .......... .......... 75%  105M 0s
2022-06-21T23:42:42.5923564Z  39250K .......... .......... .......... .......... .......... 75% 52.5M 0s
2022-06-21T23:42:42.5923863Z  39300K .......... .......... .......... .......... .......... 75%  124M 0s
2022-06-21T23:42:42.5924141Z  39350K .......... .......... .......... .......... .......... 75% 88.5M 0s
2022-06-21T23:42:42.5924636Z  39400K .......... .......... .......... .......... .......... 75%  118M 0s
2022-06-21T23:42:42.5925377Z  39450K .......... .......... .......... .......... .......... 75%  202M 0s
2022-06-21T23:42:42.5925881Z  39500K .......... .......... .......... .......... .......... 75%  217M 0s
2022-06-21T23:42:42.5926185Z  39550K .......... .......... .......... .......... .......... 75%  215M 0s
2022-06-21T23:42:42.5926508Z  39600K .......... .......... .......... .......... .......... 76%  134M 0s
2022-06-21T23:42:42.5926829Z  39650K .......... .......... .......... .......... .......... 76%  153M 0s
2022-06-21T23:42:42.5927151Z  39700K .......... .......... .......... .......... .......... 76%  174M 0s
2022-06-21T23:42:42.5927609Z  39750K .......... .......... .......... .......... .......... 76%  199M 0s
2022-06-21T23:42:42.5927922Z  39800K .......... .......... .......... .......... .......... 76%  164M 0s
2022-06-21T23:42:42.5928408Z  39850K .......... .......... .......... .......... .......... 76%  193M 0s
2022-06-21T23:42:42.5928711Z  39900K .......... .......... .......... .......... .......... 76%  160M 0s
2022-06-21T23:42:42.5929033Z  39950K .......... .......... .......... .......... .......... 76%  192M 0s
2022-06-21T23:42:42.5929441Z  40000K .......... .......... .......... .......... .......... 76%  140M 0s
2022-06-21T23:42:42.5929759Z  40050K .......... .......... .......... .......... .......... 76%  198M 0s
2022-06-21T23:42:42.5930063Z  40100K .......... .......... .......... .......... .......... 77%  184M 0s
2022-06-21T23:42:42.5930695Z  40150K .......... .......... .......... .......... .......... 77%  171M 0s
2022-06-21T23:42:42.5931040Z  40200K .......... .......... .......... .......... .......... 77%  150M 0s
2022-06-21T23:42:42.5931501Z  40250K .......... .......... .......... .......... .......... 77%  184M 0s
2022-06-21T23:42:42.5931813Z  40300K .......... .......... .......... .......... .......... 77%  171M 0s
2022-06-21T23:42:42.5932278Z  40350K .......... .......... .......... .......... .......... 77%  186M 0s
2022-06-21T23:42:42.5932581Z  40400K .......... .......... .......... .......... .......... 77%  176M 0s
2022-06-21T23:42:42.5932871Z  40450K .......... .......... .......... .......... .......... 77%  197M 0s
2022-06-21T23:42:42.5933350Z  40500K .......... .......... .......... .......... .......... 77%  146M 0s
2022-06-21T23:42:42.5933665Z  40550K .......... .......... .......... .......... .......... 77%  187M 0s
2022-06-21T23:42:42.5934138Z  40600K .......... .......... .......... .......... .......... 77%  148M 0s
2022-06-21T23:42:42.5934457Z  40650K .......... .......... .......... .......... .......... 78%  202M 0s
2022-06-21T23:42:42.5934813Z  40700K .......... .......... .......... .......... .......... 78%  198M 0s
2022-06-21T23:42:42.5935134Z  40750K .......... .......... .......... .......... .......... 78%  201M 0s
2022-06-21T23:42:42.5935435Z  40800K .......... .......... .......... .......... .......... 78%  138M 0s
2022-06-21T23:42:42.5935760Z  40850K .......... .......... .......... .......... .......... 78%  157M 0s
2022-06-21T23:42:42.5936079Z  40900K .......... .......... .......... .......... .......... 78%  137M 0s
2022-06-21T23:42:42.5936401Z  40950K .......... .......... .......... .......... .......... 78% 1.46M 0s
2022-06-21T23:42:42.5936706Z  41000K .......... .......... .......... .......... .......... 78% 85.4M 0s
2022-06-21T23:42:42.5937029Z  41050K .......... .......... .......... .......... .......... 78% 75.9M 0s
2022-06-21T23:42:42.5937499Z  41100K .......... .......... .......... .......... .......... 78%  189M 0s
2022-06-21T23:42:42.5937793Z  41150K .......... .......... .......... .......... .......... 79%  165M 0s
2022-06-21T23:42:42.5938285Z  41200K .......... .......... .......... .......... .......... 79% 94.1M 0s
2022-06-21T23:42:42.5938606Z  41250K .......... .......... .......... .......... .......... 79%  147M 0s
2022-06-21T23:42:42.5938924Z  41300K .......... .......... .......... .......... .......... 79%  110M 0s
2022-06-21T23:42:42.5939407Z  41350K .......... .......... .......... .......... .......... 79% 99.8M 0s
2022-06-21T23:42:42.5940058Z  41400K .......... .......... .......... .......... .......... 79%  142M 0s
2022-06-21T23:42:42.5940404Z  41450K .......... .......... .......... .......... .......... 79%  215M 0s
2022-06-21T23:42:42.5940707Z  41500K .......... .......... .......... .......... .......... 79%  152M 0s
2022-06-21T23:42:42.5941026Z  41550K .......... .......... .......... .......... .......... 79%  189M 0s
2022-06-21T23:42:42.5941353Z  41600K .......... .......... .......... .......... .......... 79%  157M 0s
2022-06-21T23:42:42.5941719Z  41650K .......... .......... .......... .......... .......... 79%  138M 0s
2022-06-21T23:42:42.5942020Z  41700K .......... .......... .......... .......... .......... 80%  162M 0s
2022-06-21T23:42:42.5942344Z  41750K .......... .......... .......... .......... .......... 80%  215M 0s
2022-06-21T23:42:42.5942657Z  41800K .......... .......... .......... .......... .......... 80%  177M 0s
2022-06-21T23:42:42.5943291Z  41850K .......... .......... .......... .......... .......... 80% 89.8M 0s
2022-06-21T23:42:42.5943575Z  41900K .......... .......... .......... .......... .......... 80%  102M 0s
2022-06-21T23:42:42.5943971Z  41950K .......... .......... .......... .......... .......... 80%  111M 0s
2022-06-21T23:42:42.5944275Z  42000K .......... .......... .......... .......... .......... 80%  122M 0s
2022-06-21T23:42:42.5944559Z  42050K .......... .......... .......... .......... .......... 80%  118M 0s
2022-06-21T23:42:42.5944865Z  42100K .......... .......... .......... .......... .......... 80%  175M 0s
2022-06-21T23:42:42.5945163Z  42150K .......... .......... .......... .......... .......... 80% 96.4M 0s
2022-06-21T23:42:42.5945465Z  42200K .......... .......... .......... .......... .......... 81% 71.2M 0s
2022-06-21T23:42:42.5945744Z  42250K .......... .......... .......... .......... .......... 81% 95.4M 0s
2022-06-21T23:42:42.5946044Z  42300K .......... .......... .......... .......... .......... 81% 94.1M 0s
2022-06-21T23:42:42.5946344Z  42350K .......... .......... .......... .......... .......... 81%  177M 0s
2022-06-21T23:42:42.5946630Z  42400K .......... .......... .......... .......... .......... 81% 94.5M 0s
2022-06-21T23:42:42.5946933Z  42450K .......... .......... .......... .......... .......... 81%  192M 0s
2022-06-21T23:42:42.5947236Z  42500K .......... .......... .......... .......... .......... 81% 97.2M 0s
2022-06-21T23:42:42.5947536Z  42550K .......... .......... .......... .......... .......... 81%  120M 0s
2022-06-21T23:42:42.5947816Z  42600K .......... .......... .......... .......... .......... 81%  112M 0s
2022-06-21T23:42:42.5948117Z  42650K .......... .......... .......... .......... .......... 81%  109M 0s
2022-06-21T23:42:42.5948418Z  42700K .......... .......... .......... .......... .......... 81%  134M 0s
2022-06-21T23:42:42.5948714Z  42750K .......... .......... .......... .......... .......... 82% 97.5M 0s
2022-06-21T23:42:42.5948993Z  42800K .......... .......... .......... .......... .......... 82%  161M 0s
2022-06-21T23:42:42.5949292Z  42850K .......... .......... .......... .......... .......... 82%  200M 0s
2022-06-21T23:42:42.5949594Z  42900K .......... .......... .......... .......... .......... 82%  190M 0s
2022-06-21T23:42:42.5949876Z  42950K .......... .......... .......... .......... .......... 82%  178M 0s
2022-06-21T23:42:42.5950179Z  43000K .......... .......... .......... .......... .......... 82%  159M 0s
2022-06-21T23:42:42.5950481Z  43050K .......... .......... .......... .......... .......... 82%  203M 0s
2022-06-21T23:42:42.5950780Z  43100K .......... .......... .......... .......... .......... 82%  200M 0s
2022-06-21T23:42:42.5951060Z  43150K .......... .......... .......... .......... .......... 82%  102M 0s
2022-06-21T23:42:42.5951362Z  43200K .......... .......... .......... .......... .......... 82%  111M 0s
2022-06-21T23:42:42.5951699Z  43250K .......... .......... .......... .......... .......... 83%  129M 0s
2022-06-21T23:42:42.5951983Z  43300K .......... .......... .......... .......... .......... 83%  106M 0s
2022-06-21T23:42:42.5952361Z  43350K .......... .......... .......... .......... .......... 83%  151M 0s
2022-06-21T23:42:42.5952683Z  43400K .......... .......... .......... .......... .......... 83%  167M 0s
2022-06-21T23:42:42.5955882Z  43450K .......... .......... .......... .......... .......... 83%  190M 0s
2022-06-21T23:42:42.5956186Z  43500K .......... .......... .......... .......... .......... 83%  200M 0s
2022-06-21T23:42:42.5956493Z  43550K .......... .......... .......... .......... .......... 83%  201M 0s
2022-06-21T23:42:42.5956797Z  43600K .......... .......... .......... .......... .......... 83%  180M 0s
2022-06-21T23:42:42.5957100Z  43650K .......... .......... .......... .......... .......... 83%  213M 0s
2022-06-21T23:42:42.5957383Z  43700K .......... .......... .......... .......... .......... 83%  226M 0s
2022-06-21T23:42:42.5957685Z  43750K .......... .......... .......... .......... .......... 84%  214M 0s
2022-06-21T23:42:42.5957986Z  43800K .......... .......... .......... .......... .......... 84%  138M 0s
2022-06-21T23:42:42.5958275Z  43850K .......... .......... .......... .......... .......... 84%  207M 0s
2022-06-21T23:42:42.5958760Z  43900K .......... .......... .......... .......... .......... 84%  191M 0s
2022-06-21T23:42:42.5959068Z  43950K .......... .......... .......... .......... .......... 84%  204M 0s
2022-06-21T23:42:42.5959371Z  44000K .......... .......... .......... .......... .......... 84%  178M 0s
2022-06-21T23:42:42.5959654Z  44050K .......... .......... .......... .......... .......... 84%  238M 0s
2022-06-21T23:42:42.5959964Z  44100K .......... .......... .......... .......... .......... 84% 51.8M 0s
2022-06-21T23:42:42.5960268Z  44150K .......... .......... .......... .......... .......... 84%  193M 0s
2022-06-21T23:42:42.5960551Z  44200K .......... .......... .......... .......... .......... 84%  178M 0s
2022-06-21T23:42:42.5961540Z  44250K .......... .......... .......... .......... .......... 84%  237M 0s
2022-06-21T23:42:42.5961890Z  44300K .......... .......... .......... .......... .......... 85%  229M 0s
2022-06-21T23:42:42.5962249Z  44350K .......... .......... .......... .......... .......... 85% 1.83M 0s
2022-06-21T23:42:42.5962578Z  44400K .......... .......... .......... .......... .......... 85% 82.8M 0s
2022-06-21T23:42:42.5962927Z  44450K .......... .......... .......... .......... .......... 85%  122M 0s
2022-06-21T23:42:42.5963268Z  44500K .......... .......... .......... .......... .......... 85%  144M 0s
2022-06-21T23:42:42.5963609Z  44550K .......... .......... .......... .......... .......... 85%  127M 0s
2022-06-21T23:42:42.5963933Z  44600K .......... .......... .......... .......... .......... 85% 22.7M 0s
2022-06-21T23:42:42.5964275Z  44650K .......... .......... .......... .......... .......... 85% 92.8M 0s
2022-06-21T23:42:42.5964623Z  44700K .......... .......... .......... .......... .......... 85%  125M 0s
2022-06-21T23:42:42.5964944Z  44750K .......... .......... .......... .......... .......... 85%  121M 0s
2022-06-21T23:42:42.5965292Z  44800K .......... .......... .......... .......... .......... 86% 89.7M 0s
2022-06-21T23:42:42.5965715Z  44850K .......... .......... .......... .......... .......... 86%  162M 0s
2022-06-21T23:42:42.5966061Z  44900K .......... .......... .......... .......... .......... 86% 36.7M 0s
2022-06-21T23:42:42.5966383Z  44950K .......... .......... .......... .......... .......... 86%  181M 0s
2022-06-21T23:42:42.5966726Z  45000K .......... .......... .......... .......... .......... 86%  184M 0s
2022-06-21T23:42:42.5967068Z  45050K .......... .......... .......... .......... .......... 86% 1.12M 0s
2022-06-21T23:42:42.5967391Z  45100K .......... .......... .......... .......... .......... 86% 75.6M 0s
2022-06-21T23:42:42.5967730Z  45150K .......... .......... .......... .......... .......... 86% 80.2M 0s
2022-06-21T23:42:42.5968074Z  45200K .......... .......... .......... .......... .......... 86%  110M 0s
2022-06-21T23:42:42.5968642Z  45250K .......... .......... .......... .......... .......... 86%  153M 0s
2022-06-21T23:42:42.5969271Z  45300K .......... .......... .......... .......... .......... 86% 95.0M 0s
2022-06-21T23:42:42.5969624Z  45350K .......... .......... .......... .......... .......... 87%  128M 0s
2022-06-21T23:42:42.5969945Z  45400K .......... .......... .......... .......... .......... 87%  102M 0s
2022-06-21T23:42:42.5970268Z  45450K .......... .......... .......... .......... .......... 87%  194M 0s
2022-06-21T23:42:42.5970729Z  45500K .......... .......... .......... .......... .......... 87%  192M 0s
2022-06-21T23:42:42.5971053Z  45550K .......... .......... .......... .......... .......... 87%  131M 0s
2022-06-21T23:42:42.5971532Z  45600K .......... .......... .......... .......... .......... 87%  181M 0s
2022-06-21T23:42:42.5971815Z  45650K .......... .......... .......... .......... .......... 87%  130M 0s
2022-06-21T23:42:42.5972117Z  45700K .......... .......... .......... .......... .......... 87%  237M 0s
2022-06-21T23:42:42.5972420Z  45750K .......... .......... .......... .......... .......... 87% 73.2M 0s
2022-06-21T23:42:42.5972721Z  45800K .......... .......... .......... .......... .......... 87%  172M 0s
2022-06-21T23:42:42.5973117Z  45850K .......... .......... .......... .......... .......... 88%  112M 0s
2022-06-21T23:42:42.5973420Z  45900K .......... .......... .......... .......... .......... 88%  154M 0s
2022-06-21T23:42:42.5973721Z  45950K .......... .......... .......... .......... .......... 88%  186M 0s
2022-06-21T23:42:42.5974004Z  46000K .......... .......... .......... .......... .......... 88%  110M 0s
2022-06-21T23:42:42.5974304Z  46050K .......... .......... .......... .......... .......... 88%  201M 0s
2022-06-21T23:42:42.5974606Z  46100K .......... .......... .......... .......... .......... 88%  116M 0s
2022-06-21T23:42:42.5974907Z  46150K .......... .......... .......... .......... .......... 88%  195M 0s
2022-06-21T23:42:42.5975190Z  46200K .......... .......... .......... .......... .......... 88% 93.3M 0s
2022-06-21T23:42:42.5975493Z  46250K .......... .......... .......... .......... .......... 88%  201M 0s
2022-06-21T23:42:42.5975796Z  46300K .......... .......... .......... .......... .......... 88% 97.8M 0s
2022-06-21T23:42:42.5976102Z  46350K .......... .......... .......... .......... .......... 88%  174M 0s
2022-06-21T23:42:42.5976384Z  46400K .......... .......... .......... .......... .......... 89%  103M 0s
2022-06-21T23:42:42.5976686Z  46450K .......... .......... .......... .......... .......... 89%  216M 0s
2022-06-21T23:42:42.5976989Z  46500K .......... .......... .......... .......... .......... 89%  125M 0s
2022-06-21T23:42:42.5977273Z  46550K .......... .......... .......... .......... .......... 89%  176M 0s
2022-06-21T23:42:42.5977576Z  46600K .......... .......... .......... .......... .......... 89%  102M 0s
2022-06-21T23:42:42.5977877Z  46650K .......... .......... .......... .......... .......... 89%  160M 0s
2022-06-21T23:42:42.5978178Z  46700K .......... .......... .......... .......... .......... 89%  107M 0s
2022-06-21T23:42:42.5978459Z  46750K .......... .......... .......... .......... .......... 89%  163M 0s
2022-06-21T23:42:42.5978765Z  46800K .......... .......... .......... .......... .......... 89%  116M 0s
2022-06-21T23:42:42.5979068Z  46850K .......... .......... .......... .......... .......... 89%  181M 0s
2022-06-21T23:42:42.5979350Z  46900K .......... .......... .......... .......... .......... 90% 82.0M 0s
2022-06-21T23:42:42.5979647Z  46950K .......... .......... .......... .......... .......... 90% 95.0M 0s
2022-06-21T23:42:42.5979950Z  47000K .......... .......... .......... .......... .......... 90%  148M 0s
2022-06-21T23:42:42.5980245Z  47050K .......... .......... .......... .......... .......... 90% 77.5M 0s
2022-06-21T23:42:42.5980530Z  47100K .......... .......... .......... .......... .......... 90%  101M 0s
2022-06-21T23:42:42.5980829Z  47150K .......... .......... .......... .......... .......... 90%  206M 0s
2022-06-21T23:42:42.5981126Z  47200K .......... .......... .......... .......... .......... 90% 95.5M 0s
2022-06-21T23:42:42.5981503Z  47250K .......... .......... .......... .......... .......... 90%  110M 0s
2022-06-21T23:42:42.5981803Z  47300K .......... .......... .......... .......... .......... 90%  189M 0s
2022-06-21T23:42:42.5982144Z  47350K .......... .......... .......... .......... .......... 90%  162M 0s
2022-06-21T23:42:42.5982622Z  47400K .......... .......... .......... .......... .......... 91%  136M 0s
2022-06-21T23:42:42.5982917Z  47450K .......... .......... .......... .......... .......... 91%  193M 0s
2022-06-21T23:42:42.5983229Z  47500K .......... .......... .......... .......... .......... 91%  174M 0s
2022-06-21T23:42:42.5983539Z  47550K .......... .......... .......... .......... .......... 91%  226M 0s
2022-06-21T23:42:42.5983883Z  47600K .......... .......... .......... .......... .......... 91%  193M 0s
2022-06-21T23:42:42.5984175Z  47650K .......... .......... .......... .......... .......... 91%  219M 0s
2022-06-21T23:42:42.5984488Z  47700K .......... .......... .......... .......... .......... 91%  207M 0s
2022-06-21T23:42:42.5984804Z  47750K .......... .......... .......... .......... .......... 91%  224M 0s
2022-06-21T23:42:42.5985187Z  47800K .......... .......... .......... .......... .......... 91%  162M 0s
2022-06-21T23:42:42.5985501Z  47850K .......... .......... .......... .......... .......... 91%  202M 0s
2022-06-21T23:42:42.5985815Z  47900K .......... .......... .......... .......... .......... 91%  189M 0s
2022-06-21T23:42:42.5986126Z  47950K .......... .......... .......... .......... .......... 92%  142M 0s
2022-06-21T23:42:42.5986414Z  48000K .......... .......... .......... .......... .......... 92%  148M 0s
2022-06-21T23:42:42.5986724Z  48050K .......... .......... .......... .......... .......... 92%  151M 0s
2022-06-21T23:42:42.5987033Z  48100K .......... .......... .......... .......... .......... 92%  164M 0s
2022-06-21T23:42:42.5987324Z  48150K .......... .......... .......... .......... .......... 92%  158M 0s
2022-06-21T23:42:42.5987632Z  48200K .......... .......... .......... .......... .......... 92%  158M 0s
2022-06-21T23:42:42.5987948Z  48250K .......... .......... .......... .......... .......... 92%  209M 0s
2022-06-21T23:42:42.5988424Z  48300K .......... .......... .......... .......... .......... 92%  177M 0s
2022-06-21T23:42:42.5988705Z  48350K .......... .......... .......... .......... .......... 92%  204M 0s
2022-06-21T23:42:42.5989011Z  48400K .......... .......... .......... .......... .......... 92%  126M 0s
2022-06-21T23:42:42.5989311Z  48450K .......... .......... .......... .......... .......... 93% 81.8M 0s
2022-06-21T23:42:42.5989610Z  48500K .......... .......... .......... .......... .......... 93%  201M 0s
2022-06-21T23:42:42.5989889Z  48550K .......... .......... .......... .......... .......... 93%  181M 0s
2022-06-21T23:42:42.5990193Z  48600K .......... .......... .......... .......... .......... 93%  183M 0s
2022-06-21T23:42:42.5990655Z  48650K .......... .......... .......... .......... .......... 93%  152M 0s
2022-06-21T23:42:42.5990932Z  48700K .......... .......... .......... .......... .......... 93% 88.0M 0s
2022-06-21T23:42:42.5991226Z  48750K .......... .......... .......... .......... .......... 93%  129M 0s
2022-06-21T23:42:42.5991523Z  48800K .......... .......... .......... .......... .......... 93%  137M 0s
2022-06-21T23:42:42.5991815Z  48850K .......... .......... .......... .......... .......... 93%  146M 0s
2022-06-21T23:42:42.5992090Z  48900K .......... .......... .......... .......... .......... 93%  174M 0s
2022-06-21T23:42:42.5992381Z  48950K .......... .......... .......... .......... .......... 93%  166M 0s
2022-06-21T23:42:42.5992671Z  49000K .......... .......... .......... .......... .......... 94%  173M 0s
2022-06-21T23:42:42.5992943Z  49050K .......... .......... .......... .......... .......... 94%  205M 0s
2022-06-21T23:42:42.5993231Z  49100K .......... .......... .......... .......... .......... 94%  208M 0s
2022-06-21T23:42:42.5993523Z  49150K .......... .......... .......... .......... .......... 94%  664K 0s
2022-06-21T23:42:42.5993892Z  49200K .......... .......... .......... .......... .......... 94% 8.39M 0s
2022-06-21T23:42:42.5994187Z  49250K .......... .......... .......... .......... .......... 94% 92.3M 0s
2022-06-21T23:42:42.5994485Z  49300K .......... .......... .......... .......... .......... 94% 90.4M 0s
2022-06-21T23:42:42.5994778Z  49350K .......... .......... .......... .......... .......... 94% 84.3M 0s
2022-06-21T23:42:42.5995073Z  49400K .......... .......... .......... .......... .......... 94% 63.9M 0s
2022-06-21T23:42:42.5995346Z  49450K .......... .......... .......... .......... .......... 94%  212M 0s
2022-06-21T23:42:42.5995641Z  49500K .......... .......... .......... .......... .......... 95% 76.5M 0s
2022-06-21T23:42:42.5995932Z  49550K .......... .......... .......... .......... .......... 95% 84.8M 0s
2022-06-21T23:42:42.5996207Z  49600K .......... .......... .......... .......... .......... 95%  139M 0s
2022-06-21T23:42:42.5996494Z  49650K .......... .......... .......... .......... .......... 95%  194M 0s
2022-06-21T23:42:42.5996788Z  49700K .......... .......... .......... .......... .......... 95%  183M 0s
2022-06-21T23:42:42.5997177Z  49750K .......... .......... .......... .......... .......... 95%  225M 0s
2022-06-21T23:42:42.5997451Z  49800K .......... .......... .......... .......... .......... 95%  188M 0s
2022-06-21T23:42:42.5997745Z  49850K .......... .......... .......... .......... .......... 95%  158M 0s
2022-06-21T23:42:42.5998038Z  49900K .......... .......... .......... .......... .......... 95%  165M 0s
2022-06-21T23:42:42.5998313Z  49950K .......... .......... .......... .......... .......... 95%  159M 0s
2022-06-21T23:42:42.5998600Z  50000K .......... .......... .......... .......... .......... 95%  155M 0s
2022-06-21T23:42:42.5998878Z  50050K .......... .......... .......... .......... .......... 96%  193M 0s
2022-06-21T23:42:42.5999160Z  50100K .......... .......... .......... .......... .......... 96%  124M 0s
2022-06-21T23:42:42.5999480Z  50150K .......... .......... .......... .......... .......... 96%  146M 0s
2022-06-21T23:42:42.5999770Z  50200K .......... .......... .......... .......... .......... 96%  202M 0s
2022-06-21T23:42:42.6000053Z  50250K .......... .......... .......... .......... .......... 96%  228M 0s
2022-06-21T23:42:42.6000331Z  50300K .......... .......... .......... .......... .......... 96%  222M 0s
2022-06-21T23:42:42.6000600Z  50350K .......... .......... .......... .......... .......... 96%  218M 0s
2022-06-21T23:42:42.6000890Z  50400K .......... .......... .......... .......... .......... 96%  117M 0s
2022-06-21T23:42:42.6001177Z  50450K .......... .......... .......... .......... .......... 96%  214M 0s
2022-06-21T23:42:42.6001450Z  50500K .......... .......... .......... .......... .......... 96%  254M 0s
2022-06-21T23:42:42.6001738Z  50550K .......... .......... .......... .......... .......... 97%  212M 0s
2022-06-21T23:42:42.6002027Z  50600K .......... .......... .......... .......... .......... 97%  208M 0s
2022-06-21T23:42:42.6002309Z  50650K .......... .......... .......... .......... .......... 97%  217M 0s
2022-06-21T23:42:42.6002574Z  50700K .......... .......... .......... .......... .......... 97%  144M 0s
2022-06-21T23:42:42.6002863Z  50750K .......... .......... .......... .......... .......... 97%  147M 0s
2022-06-21T23:42:42.6003149Z  50800K .......... .......... .......... .......... .......... 97%  149M 0s
2022-06-21T23:42:42.6003423Z  50850K .......... .......... .......... .......... .......... 97%  229M 0s
2022-06-21T23:42:42.6003854Z  50900K .......... .......... .......... .......... .......... 97%  155M 0s
2022-06-21T23:42:42.6004137Z  50950K .......... .......... .......... .......... .......... 97%  197M 0s
2022-06-21T23:42:42.6004414Z  51000K .......... .......... .......... .......... .......... 97%  144M 0s
2022-06-21T23:42:42.6004679Z  51050K .......... .......... .......... .......... .......... 98%  148M 0s
2022-06-21T23:42:42.6005137Z  51100K .......... .......... .......... .......... .......... 98%  164M 0s
2022-06-21T23:42:42.6005501Z  51150K .......... .......... .......... .......... .......... 98%  184M 0s
2022-06-21T23:42:42.6006026Z  51200K .......... .......... .......... .......... .......... 98%  152M 0s
2022-06-21T23:42:42.6006485Z  51250K .......... .......... .......... .......... .......... 98%  159M 0s
2022-06-21T23:42:42.6006792Z  51300K .......... .......... .......... .......... .......... 98%  183M 0s
2022-06-21T23:42:42.6007096Z  51350K .......... .......... .......... .......... .......... 98%  133M 0s
2022-06-21T23:42:42.6007607Z  51400K .......... .......... .......... .......... .......... 98%  157M 0s
2022-06-21T23:42:42.6008100Z  51450K .......... .......... .......... .......... .......... 98%  213M 0s
2022-06-21T23:42:42.6008430Z  51500K .......... .......... .......... .......... .......... 98%  225M 0s
2022-06-21T23:42:42.6008758Z  51550K .......... .......... .......... .......... .......... 98%  225M 0s
2022-06-21T23:42:42.6009064Z  51600K .......... .......... .......... .......... .......... 99%  170M 0s
2022-06-21T23:42:42.6009601Z  51650K .......... .......... .......... .......... .......... 99%  206M 0s
2022-06-21T23:42:42.6010040Z  51700K .......... .......... .......... .......... .......... 99%  160M 0s
2022-06-21T23:42:42.6010468Z  51750K .......... .......... .......... .......... .......... 99%  175M 0s
2022-06-21T23:42:42.6010935Z  51800K .......... .......... .......... .......... .......... 99%  111M 0s
2022-06-21T23:42:42.6011280Z  51850K .......... .......... .......... .......... .......... 99% 56.5M 0s
2022-06-21T23:42:42.6011626Z  51900K .......... .......... .......... .......... .......... 99%  160M 0s
2022-06-21T23:42:42.6011949Z  51950K .......... .......... .......... .......... .......... 99%  180M 0s
2022-06-21T23:42:42.6012475Z  52000K .......... .......... .......... .......... .......... 99%  186M 0s
2022-06-21T23:42:42.6013302Z  52050K .......... .......... .......... .......... .......... 99%  208M 0s
2022-06-21T23:42:42.6013758Z  52100K .......... .......... .......... ........             100%  177M=1.0s
2022-06-21T23:42:42.6013893Z 
2022-06-21T23:42:42.6014739Z 2022-06-21 23:42:42 (49.5 MB/s) - ‘/tmp/fabric-binaries/hyperledger-fabric-linux-amd64-1.4.0.tar.gz’ saved [53389792/53389792]
2022-06-21T23:42:42.6015022Z 
2022-06-21T23:42:42.6015029Z 
2022-06-21T23:42:44.0491656Z bin/
2022-06-21T23:42:44.0492743Z bin/get-docker-images.sh
2022-06-21T23:42:44.0494110Z bin/orderer
2022-06-21T23:42:44.0494757Z bin/peer
2022-06-21T23:42:44.0495282Z bin/configtxlator
2022-06-21T23:42:44.0495685Z bin/discover
2022-06-21T23:42:44.0496155Z bin/idemixgen
2022-06-21T23:42:44.0496815Z bin/cryptogen
2022-06-21T23:42:44.0499380Z bin/configtxgen
2022-06-21T23:42:44.0499986Z config/
2022-06-21T23:42:44.0500827Z config/orderer.yaml
2022-06-21T23:42:44.0501245Z config/core.yaml
2022-06-21T23:42:44.0501661Z config/configtx.yaml
2022-06-21T23:42:44.0549758Z 
2022-06-21T23:42:44.0549769Z 
2022-06-21T23:42:44.7919889Z 
2022-06-21T23:42:44.7920831Z Crypto-gen scripts running based on binaries location /tmp/fabric-binaries/bin
2022-06-21T23:42:44.7922526Z Creating new crypto material and tx blocks from within directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base
2022-06-21T23:42:44.7923290Z Generating base crypto-material and channel tx files....
2022-06-21T23:42:44.7923615Z org1.example.com
2022-06-21T23:42:44.7923862Z org2.example.com
2022-06-21T23:42:44.7924525Z Generating crypto-material complete, now renaming keys...
2022-06-21T23:42:44.7925011Z Renaming keys complete
2022-06-21T23:42:44.7925171Z 
2022-06-21T23:42:44.7925879Z Creating new channel update tx blocks from within directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-update
2022-06-21T23:42:44.7926226Z 
2022-06-21T23:42:44.7926236Z 
2022-06-21T23:42:44.7927457Z 2022-06-21 23:42:44.188 UTC [common.tools.configtxgen] main -> WARN 001 Omitting the channel ID for configtxgen for output operations is deprecated.  Explicitly passing the channel ID will be required in the future, defaulting to 'testchainid'.
2022-06-21T23:42:44.7928762Z 2022-06-21 23:42:44.188 UTC [common.tools.configtxgen] main -> INFO 002 Loading configuration
2022-06-21T23:42:44.7929682Z 2022-06-21 23:42:44.201 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7931305Z 2022-06-21 23:42:44.201 UTC [common.tools.configtxgen.localconfig] Load -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7933472Z 2022-06-21 23:42:44.214 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 005 orderer type: solo
2022-06-21T23:42:44.7935068Z 2022-06-21 23:42:44.214 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 006 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7935999Z 2022-06-21 23:42:44.215 UTC [common.tools.configtxgen] doOutputBlock -> INFO 007 Generating genesis block
2022-06-21T23:42:44.7936765Z 2022-06-21 23:42:44.216 UTC [common.tools.configtxgen] doOutputBlock -> INFO 008 Writing genesis block
2022-06-21T23:42:44.7937668Z 2022-06-21 23:42:44.248 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7938883Z 2022-06-21 23:42:44.261 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7939887Z 2022-06-21 23:42:44.273 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7941132Z 2022-06-21 23:42:44.273 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7942131Z 2022-06-21 23:42:44.273 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7942981Z 2022-06-21 23:42:44.274 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7943716Z 2022-06-21 23:42:44.310 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7944865Z 2022-06-21 23:42:44.323 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7945866Z 2022-06-21 23:42:44.336 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7947089Z 2022-06-21 23:42:44.336 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7948107Z 2022-06-21 23:42:44.336 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7948937Z 2022-06-21 23:42:44.337 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7949664Z 2022-06-21 23:42:44.372 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7950802Z 2022-06-21 23:42:44.384 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7951799Z 2022-06-21 23:42:44.397 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7953022Z 2022-06-21 23:42:44.397 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7954139Z 2022-06-21 23:42:44.397 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7954996Z 2022-06-21 23:42:44.398 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7955870Z 2022-06-21 23:42:44.433 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7956968Z 2022-06-21 23:42:44.445 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7957937Z 2022-06-21 23:42:44.457 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7959120Z 2022-06-21 23:42:44.457 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7960272Z 2022-06-21 23:42:44.457 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7961219Z 2022-06-21 23:42:44.459 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7961947Z 2022-06-21 23:42:44.493 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7963251Z 2022-06-21 23:42:44.506 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7964215Z 2022-06-21 23:42:44.519 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7968034Z 2022-06-21 23:42:44.519 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7969220Z 2022-06-21 23:42:44.519 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7970091Z 2022-06-21 23:42:44.520 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7971160Z 2022-06-21 23:42:44.556 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7972353Z 2022-06-21 23:42:44.568 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7973400Z 2022-06-21 23:42:44.581 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7974680Z 2022-06-21 23:42:44.581 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:44.7975811Z 2022-06-21 23:42:44.581 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:44.7976664Z 2022-06-21 23:42:44.582 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:44.7977420Z 2022-06-21 23:42:44.696 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7978761Z 2022-06-21 23:42:44.711 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:44.7980080Z 2022-06-21 23:42:44.724 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7981810Z 2022-06-21 23:42:44.724 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:44.7983069Z 2022-06-21 23:42:44.724 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:44.7984362Z 2022-06-21 23:42:44.724 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:44.7985134Z 2022-06-21 23:42:44.758 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:44.7986339Z 2022-06-21 23:42:44.772 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:44.7987385Z 2022-06-21 23:42:44.787 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:44.7988667Z 2022-06-21 23:42:44.787 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:44.7989854Z 2022-06-21 23:42:44.787 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:44.7990749Z 2022-06-21 23:42:44.787 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:44.7991057Z 
2022-06-21T23:42:46.1731547Z 
2022-06-21T23:42:46.1733909Z Crypto-gen scripts running based on binaries location /tmp/fabric-binaries/bin
2022-06-21T23:42:46.1735275Z Creating new crypto material and tx blocks from within directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base
2022-06-21T23:42:46.1736444Z Generating base crypto-material and channel tx files....
2022-06-21T23:42:46.1736980Z org1.example.com
2022-06-21T23:42:46.1737415Z org2.example.com
2022-06-21T23:42:46.1738249Z org3.example.com
2022-06-21T23:42:46.1738951Z Generating crypto-material complete, now renaming keys...
2022-06-21T23:42:46.1739319Z Renaming keys complete
2022-06-21T23:42:46.1739482Z 
2022-06-21T23:42:46.1740214Z Creating new channel update tx blocks from within directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2
2022-06-21T23:42:46.1741591Z 
2022-06-21T23:42:46.1742765Z Creating new channel update tx blocks from within directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-update
2022-06-21T23:42:46.1743143Z 
2022-06-21T23:42:46.1743152Z 
2022-06-21T23:42:46.1745109Z 2022-06-21 23:42:44.921 UTC [common.tools.configtxgen] main -> WARN 001 Omitting the channel ID for configtxgen for output operations is deprecated.  Explicitly passing the channel ID will be required in the future, defaulting to 'testchainid'.
2022-06-21T23:42:46.1746261Z 2022-06-21 23:42:44.921 UTC [common.tools.configtxgen] main -> INFO 002 Loading configuration
2022-06-21T23:42:46.1747968Z 2022-06-21 23:42:44.936 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1749340Z 2022-06-21 23:42:44.936 UTC [common.tools.configtxgen.localconfig] Load -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1751241Z 2022-06-21 23:42:44.950 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 005 orderer type: solo
2022-06-21T23:42:46.1752577Z 2022-06-21 23:42:44.950 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 006 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1754538Z 2022-06-21 23:42:44.952 UTC [common.tools.configtxgen] doOutputBlock -> INFO 007 Generating genesis block
2022-06-21T23:42:46.1755885Z 2022-06-21 23:42:44.952 UTC [common.tools.configtxgen] doOutputBlock -> INFO 008 Writing genesis block
2022-06-21T23:42:46.1757668Z 2022-06-21 23:42:44.987 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1759081Z 2022-06-21 23:42:45.004 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1760980Z 2022-06-21 23:42:45.019 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1763220Z 2022-06-21 23:42:45.019 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1764356Z 2022-06-21 23:42:45.019 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1765963Z 2022-06-21 23:42:45.021 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1767019Z 2022-06-21 23:42:45.055 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1768927Z 2022-06-21 23:42:45.071 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1770228Z 2022-06-21 23:42:45.086 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1772551Z 2022-06-21 23:42:45.086 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1773677Z 2022-06-21 23:42:45.086 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1775406Z 2022-06-21 23:42:45.087 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1776192Z 2022-06-21 23:42:45.123 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1778378Z 2022-06-21 23:42:45.138 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1782128Z 2022-06-21 23:42:45.152 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1784248Z 2022-06-21 23:42:45.152 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-base/configtx.yaml
2022-06-21T23:42:46.1785399Z 2022-06-21 23:42:45.152 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1787115Z 2022-06-21 23:42:45.153 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1787956Z 2022-06-21 23:42:45.277 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1789945Z 2022-06-21 23:42:45.294 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1791435Z 2022-06-21 23:42:45.310 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1793797Z 2022-06-21 23:42:45.310 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1795945Z 2022-06-21 23:42:45.310 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1796930Z 2022-06-21 23:42:45.313 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1797649Z 2022-06-21 23:42:45.347 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1799620Z 2022-06-21 23:42:45.366 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1800815Z 2022-06-21 23:42:45.382 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1803029Z 2022-06-21 23:42:45.382 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1804333Z 2022-06-21 23:42:45.382 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1807339Z 2022-06-21 23:42:45.384 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1808129Z 2022-06-21 23:42:45.417 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1809320Z 2022-06-21 23:42:45.433 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1810564Z 2022-06-21 23:42:45.450 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1811908Z 2022-06-21 23:42:45.450 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1813945Z 2022-06-21 23:42:45.450 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1814877Z 2022-06-21 23:42:45.452 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1815644Z 2022-06-21 23:42:45.489 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1817698Z 2022-06-21 23:42:45.506 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1818773Z 2022-06-21 23:42:45.522 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1820913Z 2022-06-21 23:42:45.522 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1821988Z 2022-06-21 23:42:45.522 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1823695Z 2022-06-21 23:42:45.524 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1824474Z 2022-06-21 23:42:45.557 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1827163Z 2022-06-21 23:42:45.573 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1828300Z 2022-06-21 23:42:45.590 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1830615Z 2022-06-21 23:42:45.590 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1831779Z 2022-06-21 23:42:45.590 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1832661Z 2022-06-21 23:42:45.592 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1833434Z 2022-06-21 23:42:45.623 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1835515Z 2022-06-21 23:42:45.640 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1837290Z 2022-06-21 23:42:45.657 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1838739Z 2022-06-21 23:42:45.657 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1841385Z 2022-06-21 23:42:45.657 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2022-06-21T23:42:46.1842236Z 2022-06-21 23:42:45.660 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx
2022-06-21T23:42:46.1843992Z 2022-06-21 23:42:45.695 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1845265Z 2022-06-21 23:42:45.713 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1847351Z 2022-06-21 23:42:45.730 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1849187Z 2022-06-21 23:42:45.730 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1851480Z 2022-06-21 23:42:45.730 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1852508Z 2022-06-21 23:42:45.730 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1853294Z 2022-06-21 23:42:45.767 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1855498Z 2022-06-21 23:42:45.784 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1856576Z 2022-06-21 23:42:45.801 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1858259Z 2022-06-21 23:42:45.801 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1859227Z 2022-06-21 23:42:45.801 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1860201Z 2022-06-21 23:42:45.802 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1861000Z 2022-06-21 23:42:45.840 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1862029Z 2022-06-21 23:42:45.858 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1862957Z 2022-06-21 23:42:45.875 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1864271Z 2022-06-21 23:42:45.876 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1865614Z 2022-06-21 23:42:45.876 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1866910Z 2022-06-21 23:42:45.876 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1867731Z 2022-06-21 23:42:45.911 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1868915Z 2022-06-21 23:42:45.931 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1869963Z 2022-06-21 23:42:45.948 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1871260Z 2022-06-21 23:42:45.948 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1872456Z 2022-06-21 23:42:45.948 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1873361Z 2022-06-21 23:42:45.948 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1874500Z 2022-06-21 23:42:45.982 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1876078Z 2022-06-21 23:42:46.000 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1877531Z 2022-06-21 23:42:46.016 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1879064Z 2022-06-21 23:42:46.016 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-v2/configtx.yaml
2022-06-21T23:42:46.1880227Z 2022-06-21 23:42:46.016 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1881141Z 2022-06-21 23:42:46.017 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1881944Z 2022-06-21 23:42:46.062 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1883153Z 2022-06-21 23:42:46.078 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:46.1884214Z 2022-06-21 23:42:46.094 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1885568Z 2022-06-21 23:42:46.094 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:46.1886631Z 2022-06-21 23:42:46.094 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1887536Z 2022-06-21 23:42:46.095 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1888319Z 2022-06-21 23:42:46.131 UTC [common.tools.configtxgen] main -> INFO 001 Loading configuration
2022-06-21T23:42:46.1889520Z 2022-06-21 23:42:46.147 UTC [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:46.1891717Z 2022-06-21 23:42:46.169 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2022-06-21T23:42:46.1893113Z 2022-06-21 23:42:46.169 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/config-update/configtx.yaml
2022-06-21T23:42:46.1894198Z 2022-06-21 23:42:46.169 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2022-06-21T23:42:46.1895109Z 2022-06-21 23:42:46.169 UTC [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update
2022-06-21T23:42:46.1895422Z 
2022-06-21T23:42:46.3668563Z Generating fabricca cetificates and keys in directory /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/fabricca
2022-06-21T23:42:46.3669078Z Generation complete
2022-06-21T23:42:46.3669250Z 
2022-06-21T23:42:46.3669678Z Generating a RSA private key
2022-06-21T23:42:46.3670369Z ..................................................................................+++++
2022-06-21T23:42:46.3671156Z ................................+++++
2022-06-21T23:42:46.3672034Z writing new private key to '/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/fabricca/test.key'
2022-06-21T23:42:46.3672557Z -----
2022-06-21T23:42:46.3672941Z Generating a RSA private key
2022-06-21T23:42:46.3673381Z ..............+++++++++++++++++++++++++++
2022-06-21T23:42:46.3673785Z ......+++++++++++++++++++++++++++
2022-06-21T23:42:46.3674633Z writing new private key to '/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/fixtures/fabricca/enroll-key.pem'
2022-06-21T23:42:46.3675169Z -----
2022-06-21T23:42:46.3675398Z 
2022-06-21T23:42:46.3798528Z ##[group]Run npm run pullFabricImages
2022-06-21T23:42:46.3798901Z [36;1mnpm run pullFabricImages[0m
2022-06-21T23:42:46.3873393Z shell: /usr/bin/bash -e {0}
2022-06-21T23:42:46.3873659Z env:
2022-06-21T23:42:46.3873872Z   FABRIC_VERSION: 2.2
2022-06-21T23:42:46.3874273Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:42:46.3874667Z ##[endgroup]
2022-06-21T23:42:46.6892045Z 
2022-06-21T23:42:46.6893394Z > -@2.5.0-snapshot pullFabricImages /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:42:46.6894036Z > ./scripts/utility/fabric_images.sh
2022-06-21T23:42:46.6894318Z 
2022-06-21T23:42:52.7151098Z hyperledger-fabric.jfrog.io/fabric-peer:amd64-2.2-stable
2022-06-21T23:42:54.8873338Z hyperledger-fabric.jfrog.io/fabric-orderer:amd64-2.2-stable
2022-06-21T23:43:09.8429380Z hyperledger-fabric.jfrog.io/fabric-ccenv:amd64-2.2-stable
2022-06-21T23:43:11.3052200Z hyperledger-fabric.jfrog.io/fabric-baseos:amd64-2.2-stable
2022-06-21T23:43:19.2271388Z hyperledger-fabric.jfrog.io/fabric-nodeenv:amd64-2.2-stable
2022-06-21T23:43:31.1610095Z hyperledger-fabric.jfrog.io/fabric-javaenv:amd64-2.2-stable
2022-06-21T23:43:35.8483310Z hyperledger-fabric.jfrog.io/fabric-tools:amd64-2.2-stable
2022-06-21T23:43:42.3393756Z docker.io/library/couchdb:3.1
2022-06-21T23:43:48.8262271Z docker.io/hyperledger/fabric-ca:1.4
2022-06-21T23:43:48.9258735Z ##[group]Run npm test
2022-06-21T23:43:48.9259045Z [36;1mnpm test[0m
2022-06-21T23:43:48.9325895Z shell: /usr/bin/bash -e {0}
2022-06-21T23:43:48.9326145Z env:
2022-06-21T23:43:48.9326349Z   FABRIC_VERSION: 2.2
2022-06-21T23:43:48.9326736Z   SOFTHSM2_CONF: /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/hsm/softhsm2.conf
2022-06-21T23:43:48.9327103Z ##[endgroup]
2022-06-21T23:43:49.2378408Z 
2022-06-21T23:43:49.2379780Z > -@2.5.0-snapshot test /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:49.2380888Z > run-s checkLicense cleanUp dockerClean compile lint docs unitTest:all dockerReady tapeIntegration cucumberScenario
2022-06-21T23:43:49.2381303Z 
2022-06-21T23:43:49.6818301Z 
2022-06-21T23:43:49.6819623Z > -@2.5.0-snapshot checkLicense /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:49.6820119Z > ./scripts/npm_scripts/checkLicense.sh
2022-06-21T23:43:49.6820323Z 
2022-06-21T23:43:49.8286867Z All files have SPDX-License-Identifier headers
2022-06-21T23:43:50.1087476Z 
2022-06-21T23:43:50.1089086Z > -@2.5.0-snapshot cleanUp /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:50.1090179Z > node -e 'require("./scripts/npm_scripts/testFunctions.js").cleanUp()'
2022-06-21T23:43:50.1091029Z 
2022-06-21T23:43:50.4745554Z 
2022-06-21T23:43:50.4746749Z > -@2.5.0-snapshot dockerClean /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:50.4747233Z > ./scripts/npm_scripts/dockerClean.sh
2022-06-21T23:43:50.4747396Z 
2022-06-21T23:43:50.4811000Z 
2022-06-21T23:43:50.4822740Z dockerClean() {
2022-06-21T23:43:50.4823387Z     #stop and remove docker containers
2022-06-21T23:43:50.4824170Z     docker kill $(docker ps -aq)
2022-06-21T23:43:50.4828230Z     docker rm $(docker ps -aq) -f
2022-06-21T23:43:50.4828619Z     #remove chaincode images so that they get rebuilt during test
2022-06-21T23:43:50.4829361Z     docker rmi $(docker images | grep "^dev-" | awk '{print $3}')
2022-06-21T23:43:50.4830223Z }
2022-06-21T23:43:50.4830464Z 
2022-06-21T23:43:50.4831095Z dockerClean || true # kill, rm, and rmi may fail because the containers may have been cleaned up or do not exist
2022-06-21T23:43:50.5555255Z "docker kill" requires at least 1 argument.
2022-06-21T23:43:50.5555881Z See 'docker kill --help'.
2022-06-21T23:43:50.5556048Z 
2022-06-21T23:43:50.5556307Z Usage:  docker kill [OPTIONS] CONTAINER [CONTAINER...]
2022-06-21T23:43:50.5556506Z 
2022-06-21T23:43:50.5556682Z Kill one or more running containers
2022-06-21T23:43:50.6303855Z "docker rm" requires at least 1 argument.
2022-06-21T23:43:50.6304922Z See 'docker rm --help'.
2022-06-21T23:43:50.6305205Z 
2022-06-21T23:43:50.6305675Z Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]
2022-06-21T23:43:50.6305901Z 
2022-06-21T23:43:50.6306055Z Remove one or more containers
2022-06-21T23:43:50.7101076Z "docker rmi" requires at least 1 argument.
2022-06-21T23:43:50.7102319Z See 'docker rmi --help'.
2022-06-21T23:43:50.7152647Z 
2022-06-21T23:43:50.7153006Z Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]
2022-06-21T23:43:50.7153212Z 
2022-06-21T23:43:50.7153559Z Remove one or more images
2022-06-21T23:43:50.9762531Z 
2022-06-21T23:43:50.9763805Z > -@2.5.0-snapshot compile /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:50.9764426Z > tsc --project fabric-network/tsconfig.json
2022-06-21T23:43:50.9766444Z 
2022-06-21T23:43:55.5599056Z 
2022-06-21T23:43:55.5600144Z > -@2.5.0-snapshot lint /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:43:55.5600720Z > eslint . --ext .ts,.js
2022-06-21T23:43:55.5600967Z 
2022-06-21T23:44:20.3246474Z 
2022-06-21T23:44:20.3247756Z > -@2.5.0-snapshot docs /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:20.3249280Z > node -e 'require("./scripts/npm_scripts/testFunctions.js").cleanUpDocs()' && jsdoc -c docs/jsdoc.json -t ./node_modules/ink-docstrap/template --pedantic --recurse
2022-06-21T23:44:20.3249761Z 
2022-06-21T23:44:24.6929047Z 
2022-06-21T23:44:24.6933092Z > -@2.5.0-snapshot unitTest:all /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:24.6934155Z > export HFC_LOGGING='{"debug":"test/temp/debug.log"}' && nyc run-s unitTest:common unitTest:ca-client unitTest:network
2022-06-21T23:44:24.6934411Z 
2022-06-21T23:44:25.5550365Z 
2022-06-21T23:44:25.5552043Z > -@2.5.0-snapshot unitTest:common /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:25.5553420Z > mocha --reporter list 'fabric-common/test/**/*.js'
2022-06-21T23:44:25.5603222Z 
2022-06-21T23:44:33.9966743Z 
2022-06-21T23:44:34.0071959Z     BaseClient #constructor should set `_cryptoSuite` to null: 
2022-06-21T23:44:34.0073270Z   ✔ BaseClient #constructor should set `_cryptoSuite` to null: 1ms
2022-06-21T23:44:34.0095734Z     BaseClient #BaseClient.newCryptoSuite should call `sdkUtils.newCryptoSuite` with passed parameters and return result: 
2022-06-21T23:44:34.0096945Z   ✔ BaseClient #BaseClient.newCryptoSuite should call `sdkUtils.newCryptoSuite` with passed parameters and return result: 2ms
2022-06-21T23:44:34.0110470Z     BaseClient #BaseClient.newCryptoKeyStore should call `sdkUtils.newCryptoKeyStore` with passed parameters and return result: 
2022-06-21T23:44:34.0111870Z   ✔ BaseClient #BaseClient.newCryptoKeyStore should call `sdkUtils.newCryptoKeyStore` with passed parameters and return result: 1ms
2022-06-21T23:44:34.0122980Z     BaseClient #BaseClient.newDefaultKeyValueStore should call `sdkUtils.newKeyValueStore` and return result: 
2022-06-21T23:44:34.0124532Z   ✔ BaseClient #BaseClient.newDefaultKeyValueStore should call `sdkUtils.newKeyValueStore` and return result: 0ms
2022-06-21T23:44:34.0139110Z     BaseClient #BaseClient.setLogger should throw if passed logger does not implement any methods: 
2022-06-21T23:44:34.0140316Z   ✔ BaseClient #BaseClient.setLogger should throw if passed logger does not implement any methods: 1ms
2022-06-21T23:44:34.0151560Z     BaseClient #BaseClient.setLogger should throw if passed logger does not implement debug: 
2022-06-21T23:44:34.0154069Z   ✔ BaseClient #BaseClient.setLogger should throw if passed logger does not implement debug: 1ms
2022-06-21T23:44:34.0164803Z     BaseClient #BaseClient.setLogger should throw if passed logger does not implement info: 
2022-06-21T23:44:34.0165839Z   ✔ BaseClient #BaseClient.setLogger should throw if passed logger does not implement info: 1ms
2022-06-21T23:44:34.0176363Z     BaseClient #BaseClient.setLogger should throw if passed logger does not implement warn: 
2022-06-21T23:44:34.0177408Z   ✔ BaseClient #BaseClient.setLogger should throw if passed logger does not implement warn: 1ms
2022-06-21T23:44:34.0187875Z     BaseClient #BaseClient.setLogger should throw if passed logger does not implement error: 
2022-06-21T23:44:34.0188929Z   ✔ BaseClient #BaseClient.setLogger should throw if passed logger does not implement error: 1ms
2022-06-21T23:44:34.0203645Z     BaseClient #BaseClient.setLogger should overwrite the NodeJS.global logger if it already exists: 
2022-06-21T23:44:34.0204797Z   ✔ BaseClient #BaseClient.setLogger should overwrite the NodeJS.global logger if it already exists: 1ms
2022-06-21T23:44:34.0231915Z     BaseClient #BaseClient.setLogger should set the NodeJS.global logger if it doesnt exist: 
2022-06-21T23:44:34.0232955Z   ✔ BaseClient #BaseClient.setLogger should set the NodeJS.global logger if it doesnt exist: 1ms
2022-06-21T23:44:34.0233842Z     BaseClient #BaseClient.getConfigSetting should call `sdkUtils.getConfigSetting` with passed parameters and return result: 
2022-06-21T23:44:34.0325752Z   ✔ BaseClient #BaseClient.getConfigSetting should call `sdkUtils.getConfigSetting` with passed parameters and return result: 0ms
2022-06-21T23:44:34.0334893Z     BaseClient #getConfigSetting should call `BaseClient.getConfigSetting` with passed parameters and return result: 
2022-06-21T23:44:34.0335789Z   ✔ BaseClient #getConfigSetting should call `BaseClient.getConfigSetting` with passed parameters and return result: 0ms
2022-06-21T23:44:34.0336874Z     BaseClient #BaseClient.addConfigFile should call `sdkUtils.addConfigFile` with passed parameters: 
2022-06-21T23:44:34.0337642Z   ✔ BaseClient #BaseClient.addConfigFile should call `sdkUtils.addConfigFile` with passed parameters: 0ms
2022-06-21T23:44:34.0338683Z     BaseClient #BaseClient.setConfigSetting should call `sdkUtils.setConfigSetting` with passed parameters: 
2022-06-21T23:44:34.0339445Z   ✔ BaseClient #BaseClient.setConfigSetting should call `sdkUtils.setConfigSetting` with passed parameters: 0ms
2022-06-21T23:44:34.0340280Z     BaseClient #setConfigSetting should call `BaseClient.setConfigSetting` with passed parameters and return result: 
2022-06-21T23:44:34.0345741Z   ✔ BaseClient #setConfigSetting should call `BaseClient.setConfigSetting` with passed parameters and return result: 0ms
2022-06-21T23:44:34.0346380Z     BaseClient #BaseClient.getLogger should call `sdkUtils.getLogger` with passed parameters and return result: 
2022-06-21T23:44:34.0347141Z   ✔ BaseClient #BaseClient.getLogger should call `sdkUtils.getLogger` with passed parameters and return result: 0ms
2022-06-21T23:44:34.0349175Z     BaseClient #setCryptoSuite should set the CryptoSuite: 
2022-06-21T23:44:34.0349730Z   ✔ BaseClient #setCryptoSuite should set the CryptoSuite: 0ms
2022-06-21T23:44:34.0350765Z     BaseClient #getCryptoSuite should return the CryptoSuite: 
2022-06-21T23:44:34.0351316Z   ✔ BaseClient #getCryptoSuite should return the CryptoSuite: 0ms
2022-06-21T23:44:34.0351907Z     BaseClient #BaseClient.normalizeX509 should call `sdkUtils.normalizeX509` with passed parameters and return result: 
2022-06-21T23:44:34.0352684Z   ✔ BaseClient #BaseClient.normalizeX509 should call `sdkUtils.normalizeX509` with passed parameters and return result: 1ms
2022-06-21T23:44:34.0379495Z     BlockDecoder #BlockDecoder.decode should throw error if not given a byte buffer: 
2022-06-21T23:44:34.0380564Z   ✔ BlockDecoder #BlockDecoder.decode should throw error if not given a byte buffer: 1ms
2022-06-21T23:44:34.0563110Z     BlockDecoder #BlockDecoder.decode should parse genesis block with IMPLICIT_META type: 
2022-06-21T23:44:34.0564970Z   ✔ BlockDecoder #BlockDecoder.decode should parse genesis block with IMPLICIT_META type: 17ms
2022-06-21T23:44:34.0593854Z     BlockDecoder #BlockDecoder.decode should throw and log error object: 
2022-06-21T23:44:34.0595262Z   ✔ BlockDecoder #BlockDecoder.decode should throw and log error object: 1ms
2022-06-21T23:44:34.0613200Z     BlockDecoder #BlockDecoder.decode should throw and log string: 
2022-06-21T23:44:34.0614227Z   ✔ BlockDecoder #BlockDecoder.decode should throw and log string: 0ms
2022-06-21T23:44:34.0633034Z     BlockDecoder #BlockDecoder.decodeBlock should throw error if block input data is missing: 
2022-06-21T23:44:34.0633879Z   ✔ BlockDecoder #BlockDecoder.decodeBlock should throw error if block input data is missing: 0ms
2022-06-21T23:44:34.0661937Z     BlockDecoder #BlockDecoder.decodeBlock should decode Block object: 
2022-06-21T23:44:34.0662664Z   ✔ BlockDecoder #BlockDecoder.decodeBlock should decode Block object: 1ms
2022-06-21T23:44:34.0682775Z     BlockDecoder #BlockDecoder.decodeBlock should throw and log error object: 
2022-06-21T23:44:34.0684379Z   ✔ BlockDecoder #BlockDecoder.decodeBlock should throw and log error object: 0ms
2022-06-21T23:44:34.0707248Z     BlockDecoder #BlockDecoder.decodeBlock should throw and log string: 
2022-06-21T23:44:34.0708270Z   ✔ BlockDecoder #BlockDecoder.decodeBlock should throw and log string: 1ms
2022-06-21T23:44:34.0733733Z     BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should throw error if block input data is missing: 
2022-06-21T23:44:34.0734911Z   ✔ BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should throw error if block input data is missing: 0ms
2022-06-21T23:44:34.0751708Z     BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should decode Block object: 
2022-06-21T23:44:34.0752941Z   ✔ BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should decode Block object: 0ms
2022-06-21T23:44:34.0784964Z     BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should throw and log error object: 
2022-06-21T23:44:34.0786816Z   ✔ BlockDecoder #BlockDecoder.decodeBlockWithPrivateData should throw and log error object: 1ms
2022-06-21T23:44:34.0798582Z     BlockDecoder #BlockDecoder.decodeTransaction should throw error if not given a byte buffer: 
2022-06-21T23:44:34.0799803Z   ✔ BlockDecoder #BlockDecoder.decodeTransaction should throw error if not given a byte buffer: 1ms
2022-06-21T23:44:34.0814665Z     BlockDecoder #BlockDecoder.decodeTransaction should generate a processed transaction: 
2022-06-21T23:44:34.0815805Z   ✔ BlockDecoder #BlockDecoder.decodeTransaction should generate a processed transaction: 0ms
2022-06-21T23:44:34.0828579Z     BlockDecoder #BlockDecoder.decodeFilterBlock should throw error if not given a filtered block: 
2022-06-21T23:44:34.0829708Z   ✔ BlockDecoder #BlockDecoder.decodeFilterBlock should throw error if not given a filtered block: 1ms
2022-06-21T23:44:34.0843255Z     BlockDecoder #BlockDecoder.decodeFilterBlock should decode a block if empty: 
2022-06-21T23:44:34.0844760Z   ✔ BlockDecoder #BlockDecoder.decodeFilterBlock should decode a block if empty: 0ms
2022-06-21T23:44:34.0857345Z     BlockDecoder #BlockDecoder.decodeFilterBlock should decode a filtered block: 
2022-06-21T23:44:34.0859022Z   ✔ BlockDecoder #BlockDecoder.decodeFilterBlock should decode a filtered block: 1ms
2022-06-21T23:44:34.0871287Z     BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction if undefined: 
2022-06-21T23:44:34.0872398Z   ✔ BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction if undefined: 0ms
2022-06-21T23:44:34.0929392Z     BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction if empty: 
2022-06-21T23:44:34.0930652Z   ✔ BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction if empty: 0ms
2022-06-21T23:44:34.0944614Z     BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction: 
2022-06-21T23:44:34.0946303Z   ✔ BlockDecoder #decodeFilteredTransactions should decode a filtered trasaction: 1ms
2022-06-21T23:44:34.0957527Z     BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions if undefined: 
2022-06-21T23:44:34.0958824Z   ✔ BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions if undefined: 0ms
2022-06-21T23:44:34.0969328Z     BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions if empty: 
2022-06-21T23:44:34.0970722Z   ✔ BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions if empty: 0ms
2022-06-21T23:44:34.0980292Z     BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions: 
2022-06-21T23:44:34.0981121Z   ✔ BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions: 0ms
2022-06-21T23:44:34.0990672Z     BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions with chaincode actions: 
2022-06-21T23:44:34.0991774Z   ✔ BlockDecoder #decodeFilteredTransactionActions should decode a filtered trasaction actions with chaincode actions: 0ms
2022-06-21T23:44:34.1002341Z     BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action if undefined: 
2022-06-21T23:44:34.1003157Z   ✔ BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action if undefined: 0ms
2022-06-21T23:44:34.1017335Z     BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action if empty: 
2022-06-21T23:44:34.1018164Z   ✔ BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action if empty: 0ms
2022-06-21T23:44:34.1021760Z     BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action: 
2022-06-21T23:44:34.1022518Z   ✔ BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action: 0ms
2022-06-21T23:44:34.1033414Z     BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action and not keep payload: 
2022-06-21T23:44:34.1034850Z   ✔ BlockDecoder #decodeFilteredChaincodeAction should decode a filtered chaincode action and not keep payload: 0ms
2022-06-21T23:44:34.1047279Z     BlockDecoder #decodeBlockHeader should return a decoded block header: 
2022-06-21T23:44:34.1047929Z   ✔ BlockDecoder #decodeBlockHeader should return a decoded block header: 0ms
2022-06-21T23:44:34.1065163Z     BlockDecoder #decodeBlockData should call _commonProto.Envelope.decode with buffer twice: 
2022-06-21T23:44:34.1066311Z   ✔ BlockDecoder #decodeBlockData should call _commonProto.Envelope.decode with buffer twice: 0ms
2022-06-21T23:44:34.1082167Z     BlockDecoder #decodeBlockMetaData should return the correct meta data with no paramaters: 
2022-06-21T23:44:34.1083278Z   ✔ BlockDecoder #decodeBlockMetaData should return the correct meta data with no paramaters: 0ms
2022-06-21T23:44:34.1101993Z     BlockDecoder #decodeBlockMetaData should populate the metadata: 
2022-06-21T23:44:34.1102693Z   ✔ BlockDecoder #decodeBlockMetaData should populate the metadata: 0ms
2022-06-21T23:44:34.1114535Z     BlockDecoder #decodeTransactionFilter should return empty array if metadata_bytes not given: 
2022-06-21T23:44:34.1115299Z   ✔ BlockDecoder #decodeTransactionFilter should return empty array if metadata_bytes not given: 1ms
2022-06-21T23:44:34.1124667Z     BlockDecoder #decodeTransactionFilter should return empty array if string given: 
2022-06-21T23:44:34.1125527Z   ✔ BlockDecoder #decodeTransactionFilter should return empty array if string given: 1ms
2022-06-21T23:44:34.1136793Z     BlockDecoder #decodeTransactionFilter should add each value in metadata_bytes to transaction_filter: 
2022-06-21T23:44:34.1137568Z   ✔ BlockDecoder #decodeTransactionFilter should add each value in metadata_bytes to transaction_filter: 1ms
2022-06-21T23:44:34.1147469Z     BlockDecoder #decodeCommitHash should return as given: 
2022-06-21T23:44:34.1148028Z   ✔ BlockDecoder #decodeCommitHash should return as given: 0ms
2022-06-21T23:44:34.1165474Z     BlockDecoder #decodeMetadataSignatures should decode the metadata signatures and call decodeMetadataValueSignatures: 
2022-06-21T23:44:34.1166608Z   ✔ BlockDecoder #decodeMetadataSignatures should decode the metadata signatures and call decodeMetadataValueSignatures: 1ms
2022-06-21T23:44:34.1181211Z     BlockDecoder #decodeMetadataValueSignatures should return an empty array if no meta signatures are given: 
2022-06-21T23:44:34.1182263Z   ✔ BlockDecoder #decodeMetadataValueSignatures should return an empty array if no meta signatures are given: 0ms
2022-06-21T23:44:34.1193207Z     BlockDecoder #decodeMetadataValueSignatures should create return a list of signatures: 
2022-06-21T23:44:34.1194017Z   ✔ BlockDecoder #decodeMetadataValueSignatures should create return a list of signatures: 0ms
2022-06-21T23:44:34.1222918Z     BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type unknown: 
2022-06-21T23:44:34.1223673Z   ✔ BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type unknown: 0ms
2022-06-21T23:44:34.1245736Z     BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 1: 
2022-06-21T23:44:34.1246906Z   ✔ BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 1: 1ms
2022-06-21T23:44:34.1268342Z     BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 2: 
2022-06-21T23:44:34.1269066Z   ✔ BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 2: 1ms
2022-06-21T23:44:34.1287903Z     BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 3: 
2022-06-21T23:44:34.1288842Z   ✔ BlockDecoder #decodeBlockDataEnvelope should return the decoded envelope type 3: 1ms
2022-06-21T23:44:34.1306483Z     BlockDecoder #decodeEndorserTransaction should log an error when an error is thrown: 
2022-06-21T23:44:34.1307268Z   ✔ BlockDecoder #decodeEndorserTransaction should log an error when an error is thrown: 1ms
2022-06-21T23:44:34.1334227Z     BlockDecoder #decodeEndorserTransaction should add actions to data when transaction with actions is given: 
2022-06-21T23:44:34.1335113Z   ✔ BlockDecoder #decodeEndorserTransaction should add actions to data when transaction with actions is given: 1ms
2022-06-21T23:44:34.1346938Z     BlockDecoder #decodeEndorserTransaction should return an empty object if transaction is not given: 
2022-06-21T23:44:34.1347733Z   ✔ BlockDecoder #decodeEndorserTransaction should return an empty object if transaction is not given: 0ms
2022-06-21T23:44:34.1358478Z     BlockDecoder #decodeEndorserTransaction should return an empty object if transaction is given with no actions: 
2022-06-21T23:44:34.1359390Z   ✔ BlockDecoder #decodeEndorserTransaction should return an empty object if transaction is given with no actions: 0ms
2022-06-21T23:44:34.1385113Z     BlockDecoder #decodeConfigEnvelope should return the correct config envelope: 
2022-06-21T23:44:34.1386761Z   ✔ BlockDecoder #decodeConfigEnvelope should return the correct config envelope: 1ms
2022-06-21T23:44:34.1401385Z     BlockDecoder #decodeConfig should decode the config given: 
2022-06-21T23:44:34.1402304Z   ✔ BlockDecoder #decodeConfig should decode the config given: 0ms
2022-06-21T23:44:34.1425328Z     BlockDecoder #decodeConfigUpdateEnvelope should return the config update envelope: 
2022-06-21T23:44:34.1426700Z   ✔ BlockDecoder #decodeConfigUpdateEnvelope should return the config update envelope: 1ms
2022-06-21T23:44:34.1448603Z     BlockDecoder #decodeConfigUpdate should create the correct config update: 
2022-06-21T23:44:34.1449722Z   ✔ BlockDecoder #decodeConfigUpdate should create the correct config update: 1ms
2022-06-21T23:44:34.1464748Z     BlockDecoder #decodeConfigGroups should return an empty object when no proto group config given: 
2022-06-21T23:44:34.1465984Z   ✔ BlockDecoder #decodeConfigGroups should return an empty object when no proto group config given: 1ms
2022-06-21T23:44:34.1479204Z     BlockDecoder #decodeConfigGroups should call decodeConfigGroup for each group: 
2022-06-21T23:44:34.1480578Z   ✔ BlockDecoder #decodeConfigGroups should call decodeConfigGroup for each group: 0ms
2022-06-21T23:44:34.1499011Z     BlockDecoder #decodeConfigGroup should return null when no proto_config_group is given: 
2022-06-21T23:44:34.1500084Z   ✔ BlockDecoder #decodeConfigGroup should return null when no proto_config_group is given: 0ms
2022-06-21T23:44:34.1519086Z     BlockDecoder #decodeConfigGroup should return decoded value: 
2022-06-21T23:44:34.1520022Z   ✔ BlockDecoder #decodeConfigGroup should return decoded value: 0ms
2022-06-21T23:44:34.1534747Z     BlockDecoder #decodeConfigValues should call decodeConfigValue for each key in config_value_map: 
2022-06-21T23:44:34.1536066Z   ✔ BlockDecoder #decodeConfigValues should call decodeConfigValue for each key in config_value_map: 1ms
2022-06-21T23:44:34.1563690Z     BlockDecoder #decodeConfigValue should return the correct config value for AnchorPeers: 
2022-06-21T23:44:34.1567038Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for AnchorPeers: 0ms
2022-06-21T23:44:34.1582620Z     BlockDecoder #decodeConfigValue should return an empty config for AnchorPeers when no anchor peers given: 
2022-06-21T23:44:34.1584047Z   ✔ BlockDecoder #decodeConfigValue should return an empty config for AnchorPeers when no anchor peers given: 0ms
2022-06-21T23:44:34.1599612Z     BlockDecoder #decodeConfigValue should return the correct config value for MSP when config type is 0: 
2022-06-21T23:44:34.1600655Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for MSP when config type is 0: 0ms
2022-06-21T23:44:34.1620812Z     BlockDecoder #decodeConfigValue should return the correct config value for MSP when config type is not 0: 
2022-06-21T23:44:34.1622089Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for MSP when config type is not 0: 1ms
2022-06-21T23:44:34.1644526Z     BlockDecoder #decodeConfigValue should return the correct config value for Consortium: 
2022-06-21T23:44:34.1645970Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for Consortium: 1ms
2022-06-21T23:44:34.1662610Z     BlockDecoder #decodeConfigValue should return the correct config value for OrdererAddresses: 
2022-06-21T23:44:34.1663709Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for OrdererAddresses: 0ms
2022-06-21T23:44:34.1681305Z     BlockDecoder #decodeConfigValue should return the correct config value for BlockDataHashingStructure: 
2022-06-21T23:44:34.1682478Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for BlockDataHashingStructure: 0ms
2022-06-21T23:44:34.1699297Z     BlockDecoder #decodeConfigValue should return the correct config value for HashingAlgorithm: 
2022-06-21T23:44:34.1700541Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for HashingAlgorithm: 1ms
2022-06-21T23:44:34.1739493Z     BlockDecoder #decodeConfigValue should return the correct config value for ChannelRestrictions: 
2022-06-21T23:44:34.1740748Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for ChannelRestrictions: 1ms
2022-06-21T23:44:34.1744406Z     BlockDecoder #decodeConfigValue should return the correct config value for BatchTimeout: 
2022-06-21T23:44:34.1745842Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for BatchTimeout: 0ms
2022-06-21T23:44:34.1759275Z     BlockDecoder #decodeConfigValue should return the correct config value for BatchSize: 
2022-06-21T23:44:34.1760218Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for BatchSize: 0ms
2022-06-21T23:44:34.1778598Z     BlockDecoder #decodeConfigValue should return the correct config value for ConsensusType: 
2022-06-21T23:44:34.1779772Z   ✔ BlockDecoder #decodeConfigValue should return the correct config value for ConsensusType: 1ms
2022-06-21T23:44:34.1794701Z     BlockDecoder #decodeConfigValue should return an array of strings for Capabilities: 
2022-06-21T23:44:34.1796290Z   ✔ BlockDecoder #decodeConfigValue should return an array of strings for Capabilities: 1ms
2022-06-21T23:44:34.1820841Z     BlockDecoder #decodeConfigValue should return an object with ACLs: 
2022-06-21T23:44:34.1822068Z   ✔ BlockDecoder #decodeConfigValue should return an object with ACLs: 1ms
2022-06-21T23:44:34.1836706Z     BlockDecoder #decodeConfigPolicies should call deocdeConfigPolicy twice: 
2022-06-21T23:44:34.1837613Z   ✔ BlockDecoder #decodeConfigPolicies should call deocdeConfigPolicy twice: 1ms
2022-06-21T23:44:34.1850668Z     BlockDecoder #decodeConfigPolicy should return the correct config policy if no policy is given: 
2022-06-21T23:44:34.1852309Z   ✔ BlockDecoder #decodeConfigPolicy should return the correct config policy if no policy is given: 0ms
2022-06-21T23:44:34.1863203Z     BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is MSP: 
2022-06-21T23:44:34.1864213Z   ✔ BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is MSP: 0ms
2022-06-21T23:44:34.1876218Z     BlockDecoder #decodeConfigPolicy should throw error if it doesnt recognise the policy type: 
2022-06-21T23:44:34.1877482Z   ✔ BlockDecoder #decodeConfigPolicy should throw error if it doesnt recognise the policy type: 1ms
2022-06-21T23:44:34.1890795Z     BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is SIGNATURE: 
2022-06-21T23:44:34.1891855Z   ✔ BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is SIGNATURE: 0ms
2022-06-21T23:44:34.1907071Z     BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is IMPLICIT_META: 
2022-06-21T23:44:34.1908112Z   ✔ BlockDecoder #decodeConfigPolicy should return the correct config policy if policy is IMPLICIT_META: 1ms
2022-06-21T23:44:34.1923970Z     BlockDecoder #decodeImplicitMetaPolicy should decode the implicit meta policy: 
2022-06-21T23:44:34.1924973Z   ✔ BlockDecoder #decodeImplicitMetaPolicy should decode the implicit meta policy: 1ms
2022-06-21T23:44:34.1946742Z     BlockDecoder #decodeSignaturePolicyEnvelope should return the correct signature policy envelope without identities given: 
2022-06-21T23:44:34.1948087Z   ✔ BlockDecoder #decodeSignaturePolicyEnvelope should return the correct signature policy envelope without identities given: 1ms
2022-06-21T23:44:34.1959456Z     BlockDecoder #decodeSignaturePolicy should decode signature policy noutofn given: 
2022-06-21T23:44:34.1960455Z   ✔ BlockDecoder #decodeSignaturePolicy should decode signature policy noutofn given: 0ms
2022-06-21T23:44:34.1980066Z     BlockDecoder #decodeMSPPrincipal should return the correct msp principal with role other than 0 or 1: 
2022-06-21T23:44:34.1981253Z   ✔ BlockDecoder #decodeMSPPrincipal should return the correct msp principal with role other than 0 or 1: 1ms
2022-06-21T23:44:34.1995207Z     BlockDecoder #decodeMSPPrincipal should return the correct msp principal with principal_classification ORGANISATION_UNIT: 
2022-06-21T23:44:34.1996514Z   ✔ BlockDecoder #decodeMSPPrincipal should return the correct msp principal with principal_classification ORGANISATION_UNIT: 1ms
2022-06-21T23:44:34.2008474Z     BlockDecoder #decodeMSPPrincipal should return the correct msp principal with principal_clasification IDENTITY: 
2022-06-21T23:44:34.2010168Z   ✔ BlockDecoder #decodeMSPPrincipal should return the correct msp principal with principal_clasification IDENTITY: 0ms
2022-06-21T23:44:34.2054339Z     BlockDecoder #decodeConfigSignature should return the correct decoded config signature: 
2022-06-21T23:44:34.2055393Z   ✔ BlockDecoder #decodeConfigSignature should return the correct decoded config signature: 1ms
2022-06-21T23:44:34.2077607Z     BlockDecoder #decodeSignatureHeader should decode the signature header and identity before returning decoded signature header: 
2022-06-21T23:44:34.2078901Z   ✔ BlockDecoder #decodeSignatureHeader should decode the signature header and identity before returning decoded signature header: 0ms
2022-06-21T23:44:34.2098239Z     BlockDecoder #decodeIdentity should return a decoded identity: 
2022-06-21T23:44:34.2099219Z   ✔ BlockDecoder #decodeIdentity should return a decoded identity: 0ms
2022-06-21T23:44:34.2118587Z     BlockDecoder #decodeIdentity should log an error when identity decoding fails: 
2022-06-21T23:44:34.2119640Z   ✔ BlockDecoder #decodeIdentity should log an error when identity decoding fails: 1ms
2022-06-21T23:44:34.2151066Z     BlockDecoder #decodeFabricMSPConfig should decode a fabric msp config: 
2022-06-21T23:44:34.2152235Z   ✔ BlockDecoder #decodeFabricMSPConfig should decode a fabric msp config: 1ms
2022-06-21T23:44:34.2168949Z     BlockDecoder #decodeFabricOUIdentifier should return an empty array if no unit identifiers given: 
2022-06-21T23:44:34.2170199Z   ✔ BlockDecoder #decodeFabricOUIdentifier should return an empty array if no unit identifiers given: 0ms
2022-06-21T23:44:34.2185243Z     BlockDecoder #decodeFabricOUIdentifier should return the correct identifiers: 
2022-06-21T23:44:34.2186333Z   ✔ BlockDecoder #decodeFabricOUIdentifier should return the correct identifiers: 1ms
2022-06-21T23:44:34.2207324Z     BlockDecoder #decodeSigningIdentityInfo should return the correct identity info: 
2022-06-21T23:44:34.2208376Z   ✔ BlockDecoder #decodeSigningIdentityInfo should return the correct identity info: 1ms
2022-06-21T23:44:34.2230541Z     BlockDecoder #decodeKeyInfo should return the correct key info: 
2022-06-21T23:44:34.2231393Z   ✔ BlockDecoder #decodeKeyInfo should return the correct key info: 0ms
2022-06-21T23:44:34.2249124Z     BlockDecoder #decodeKeyInfo should return an empty object if no key info bytes are given: 
2022-06-21T23:44:34.2250094Z   ✔ BlockDecoder #decodeKeyInfo should return an empty object if no key info bytes are given: 0ms
2022-06-21T23:44:34.2269284Z     BlockDecoder #decodeHeader should decode and return the header: 
2022-06-21T23:44:34.2270134Z   ✔ BlockDecoder #decodeHeader should decode and return the header: 0ms
2022-06-21T23:44:34.2299227Z     BlockDecoder #decodeChannelHeader should decode and return the channel header: 
2022-06-21T23:44:34.2300311Z   ✔ BlockDecoder #decodeChannelHeader should decode and return the channel header: 0ms
2022-06-21T23:44:34.2315529Z     BlockDecoder timeStampToDate() should return null for empty timestamp: 
2022-06-21T23:44:34.2316503Z   ✔ BlockDecoder timeStampToDate() should return null for empty timestamp: 1ms
2022-06-21T23:44:34.2334585Z     BlockDecoder timeStampToDate() should return ISO8601 string for a valid timestamp: 
2022-06-21T23:44:34.2335986Z   ✔ BlockDecoder timeStampToDate() should return ISO8601 string for a valid timestamp: 0ms
2022-06-21T23:44:34.2359128Z     BlockDecoder #decodeChaincodeActionPayload should return the correct chaincode action payload: 
2022-06-21T23:44:34.2360259Z   ✔ BlockDecoder #decodeChaincodeActionPayload should return the correct chaincode action payload: 0ms
2022-06-21T23:44:34.2384231Z     BlockDecoder #decodeChaincodeProposalPayload should return the correct chaincode proposal payload: 
2022-06-21T23:44:34.2385979Z   ✔ BlockDecoder #decodeChaincodeProposalPayload should return the correct chaincode proposal payload: 1ms
2022-06-21T23:44:34.2406928Z     BlockDecoder #decodeChaincodeProposalPayloadInput should return the correct chaincode proposal payload input: 
2022-06-21T23:44:34.2408100Z   ✔ BlockDecoder #decodeChaincodeProposalPayloadInput should return the correct chaincode proposal payload input: 0ms
2022-06-21T23:44:34.2430991Z     BlockDecoder #decodeChaincodeSpec should return the correct decoded chaincode spec: 
2022-06-21T23:44:34.2432647Z   ✔ BlockDecoder #decodeChaincodeSpec should return the correct decoded chaincode spec: 0ms
2022-06-21T23:44:34.2452607Z     BlockDecoder #decodeChaincodeInput should return the correct decoded chaincode input: 
2022-06-21T23:44:34.2453698Z   ✔ BlockDecoder #decodeChaincodeInput should return the correct decoded chaincode input: 0ms
2022-06-21T23:44:34.2477045Z     BlockDecoder #decodeChaincodeEndorsedAction should return the correct endorsed action: 
2022-06-21T23:44:34.2478829Z   ✔ BlockDecoder #decodeChaincodeEndorsedAction should return the correct endorsed action: 1ms
2022-06-21T23:44:34.2498317Z     BlockDecoder #decodeEndorsement should return the correct endorsement: 
2022-06-21T23:44:34.2499453Z   ✔ BlockDecoder #decodeEndorsement should return the correct endorsement: 0ms
2022-06-21T23:44:34.2522961Z     BlockDecoder #decodeProposalResponsePayload should return the correct proposal response payload: 
2022-06-21T23:44:34.2524073Z   ✔ BlockDecoder #decodeProposalResponsePayload should return the correct proposal response payload: 0ms
2022-06-21T23:44:34.2557251Z     BlockDecoder #decodeChaincodeAction should return the correct chaincode action payload: 
2022-06-21T23:44:34.2558478Z   ✔ BlockDecoder #decodeChaincodeAction should return the correct chaincode action payload: 1ms
2022-06-21T23:44:34.2582018Z     BlockDecoder #decodeChaincodeEvent should return the correct decoded event: 
2022-06-21T23:44:34.2583073Z   ✔ BlockDecoder #decodeChaincodeEvent should return the correct decoded event: 0ms
2022-06-21T23:44:34.2600361Z     BlockDecoder #decodeChaincodeID should log and return an empty object when no proto_chaincode_id is given: 
2022-06-21T23:44:34.2601546Z   ✔ BlockDecoder #decodeChaincodeID should log and return an empty object when no proto_chaincode_id is given: 0ms
2022-06-21T23:44:34.2615958Z     BlockDecoder #decodeChaincodeID should return the correct decoded chaincode id: 
2022-06-21T23:44:34.2617067Z   ✔ BlockDecoder #decodeChaincodeID should return the correct decoded chaincode id: 1ms
2022-06-21T23:44:34.2639143Z     BlockDecoder #decodeReadWriteSets should return the correct read write set when data model not KV: 
2022-06-21T23:44:34.2640251Z   ✔ BlockDecoder #decodeReadWriteSets should return the correct read write set when data model not KV: 0ms
2022-06-21T23:44:34.2660394Z     BlockDecoder #decodeReadWriteSets should return the correct read write set when the data model is KV: 
2022-06-21T23:44:34.2662140Z   ✔ BlockDecoder #decodeReadWriteSets should return the correct read write set when the data model is KV: 0ms
2022-06-21T23:44:34.2691879Z     BlockDecoder #decodeKVRWSet should return the correct decoded kv_rw_set: 
2022-06-21T23:44:34.2693312Z   ✔ BlockDecoder #decodeKVRWSet should return the correct decoded kv_rw_set: 1ms
2022-06-21T23:44:34.2712302Z     BlockDecoder #decodeKVRead should return the correct kv read: 
2022-06-21T23:44:34.2713783Z   ✔ BlockDecoder #decodeKVRead should return the correct kv read: 0ms
2022-06-21T23:44:34.2726825Z     BlockDecoder #decodeKVRead should return the correct kv read when proto_version not present: 
2022-06-21T23:44:34.2728002Z   ✔ BlockDecoder #decodeKVRead should return the correct kv read when proto_version not present: 0ms
2022-06-21T23:44:34.2747896Z     BlockDecoder #decodeRangeQueryInfo should return the correct range query info with raw reads: 
2022-06-21T23:44:34.2749058Z   ✔ BlockDecoder #decodeRangeQueryInfo should return the correct range query info with raw reads: 1ms
2022-06-21T23:44:34.2765573Z     BlockDecoder #decodeRangeQueryInfo should return the correct range query info with reads merklehashes: 
2022-06-21T23:44:34.2766738Z   ✔ BlockDecoder #decodeRangeQueryInfo should return the correct range query info with reads merklehashes: 1ms
2022-06-21T23:44:34.2784491Z     BlockDecoder #decodeRangeQueryInfo should return the correct range query info where there are no raw reads or merkle hashes: 
2022-06-21T23:44:34.2787994Z   ✔ BlockDecoder #decodeRangeQueryInfo should return the correct range query info where there are no raw reads or merkle hashes: 0ms
2022-06-21T23:44:34.2801036Z     BlockDecoder #decodeKVWrite should return the correct kv write: 
2022-06-21T23:44:34.2802023Z   ✔ BlockDecoder #decodeKVWrite should return the correct kv write: 0ms
2022-06-21T23:44:34.2821958Z     BlockDecoder #decodeKVMetadataWrite should return the correct kv metadata: 
2022-06-21T23:44:34.2823162Z   ✔ BlockDecoder #decodeKVMetadataWrite should return the correct kv metadata: 0ms
2022-06-21T23:44:34.2841118Z     BlockDecoder decodeKVMetadataEntry should return the correct kv metadata entry: 
2022-06-21T23:44:34.2842188Z   ✔ BlockDecoder decodeKVMetadataEntry should return the correct kv metadata entry: 0ms
2022-06-21T23:44:34.2856185Z     BlockDecoder #decodeResponse should return the correct response: 
2022-06-21T23:44:34.2857152Z   ✔ BlockDecoder #decodeResponse should return the correct response: 1ms
2022-06-21T23:44:34.2868019Z     BlockDecoder #decodeResponse should return null when no proto response is given: 
2022-06-21T23:44:34.2869135Z   ✔ BlockDecoder #decodeResponse should return null when no proto response is given: 0ms
2022-06-21T23:44:34.2899008Z     BlockDecoder #convertVersion should return the verson number of type int: 
2022-06-21T23:44:34.2900087Z   ✔ BlockDecoder #convertVersion should return the verson number of type int: 1ms
2022-06-21T23:44:34.2905339Z     BlockDecoder #decodeCollectionHashedRWSet should return the correct collection hashed rw set: 
2022-06-21T23:44:34.2906579Z   ✔ BlockDecoder #decodeCollectionHashedRWSet should return the correct collection hashed rw set: 1ms
2022-06-21T23:44:34.2936216Z     BlockDecoder #decodeHashedRwset should return the correct hashe rw set: 
2022-06-21T23:44:34.2937293Z   ✔ BlockDecoder #decodeHashedRwset should return the correct hashe rw set: 1ms
2022-06-21T23:44:34.2954732Z     BlockDecoder #decodeKVReadHash should return the correct kv read hash: 
2022-06-21T23:44:34.2955720Z   ✔ BlockDecoder #decodeKVReadHash should return the correct kv read hash: 1ms
2022-06-21T23:44:34.2966937Z     BlockDecoder #decodeKVReadHash should return the correct kv read hash when version is not given: 
2022-06-21T23:44:34.2968013Z   ✔ BlockDecoder #decodeKVReadHash should return the correct kv read hash when version is not given: 0ms
2022-06-21T23:44:34.2987368Z     BlockDecoder #decodeKVWriteHash should return the correct key hash: 
2022-06-21T23:44:34.2990137Z   ✔ BlockDecoder #decodeKVWriteHash should return the correct key hash: 1ms
2022-06-21T23:44:34.3008546Z     BlockDecoder #decodeKVMetadataWriteHash should return the correct kv metadata write hash: 
2022-06-21T23:44:34.3009657Z   ✔ BlockDecoder #decodeKVMetadataWriteHash should return the correct kv metadata write hash: 1ms
2022-06-21T23:44:34.3029563Z     BlockDecoder #decodePrivateData should run with no data: 
2022-06-21T23:44:34.3030489Z   ✔ BlockDecoder #decodePrivateData should run with no data: 0ms
2022-06-21T23:44:34.3047501Z     BlockDecoder #decodePrivateData should return the correct rwset: 
2022-06-21T23:44:34.3048482Z   ✔ BlockDecoder #decodePrivateData should return the correct rwset: 0ms
2022-06-21T23:44:34.3186646Z     Channel #constructor should require a name: 
2022-06-21T23:44:34.3187621Z   ✔ Channel #constructor should require a name: 1ms
2022-06-21T23:44:34.3201608Z     Channel #constructor should require a client: 
2022-06-21T23:44:34.3202520Z   ✔ Channel #constructor should require a client: 0ms
2022-06-21T23:44:34.3217809Z     Channel #constructor should be able to create a channel: 
2022-06-21T23:44:34.3221662Z   ✔ Channel #constructor should be able to create a channel: 1ms
2022-06-21T23:44:34.3237006Z     Channel #constructor should be able to create a channel with no regex pattern: 
2022-06-21T23:44:34.3238619Z   ✔ Channel #constructor should be able to create a channel with no regex pattern: 1ms
2022-06-21T23:44:34.3250622Z     Channel #constructor should not be able to create a channel: 
2022-06-21T23:44:34.3251906Z   ✔ Channel #constructor should not be able to create a channel: 0ms
2022-06-21T23:44:34.3265079Z     Channel #close should be able close with no endpoints: 
2022-06-21T23:44:34.3266444Z   ✔ Channel #close should be able close with no endpoints: 1ms
2022-06-21T23:44:34.3297792Z     Channel #close should be able close with endpoints: 
2022-06-21T23:44:34.3299042Z   ✔ Channel #close should be able close with endpoints: 2ms
2022-06-21T23:44:34.3313075Z     Channel #newEndorsement should require a chaincode name: 
2022-06-21T23:44:34.3314017Z   ✔ Channel #newEndorsement should require a chaincode name: 0ms
2022-06-21T23:44:34.3361790Z     Channel #newEndorsement should be able to create an endorsement: 
2022-06-21T23:44:34.3363188Z   ✔ Channel #newEndorsement should be able to create an endorsement: 1ms
2022-06-21T23:44:34.3374224Z     Channel #newQuery should require a chaincode name: 
2022-06-21T23:44:34.3375126Z   ✔ Channel #newQuery should require a chaincode name: 0ms
2022-06-21T23:44:34.3390400Z     Channel #newQuery should be able to create a query: 
2022-06-21T23:44:34.3391587Z   ✔ Channel #newQuery should be able to create a query: 0ms
2022-06-21T23:44:34.3405270Z     Channel #newCommit should require a chaincode name: 
2022-06-21T23:44:34.3406211Z   ✔ Channel #newCommit should require a chaincode name: 1ms
2022-06-21T23:44:34.3420420Z     Channel #newCommit should be able to create a commit: 
2022-06-21T23:44:34.3421612Z   ✔ Channel #newCommit should be able to create a commit: 0ms
2022-06-21T23:44:34.3435001Z     Channel #newEventService should require a name: 
2022-06-21T23:44:34.3435940Z   ✔ Channel #newEventService should require a name: 1ms
2022-06-21T23:44:34.3450946Z     Channel #newEventService should be able to create an eventService: 
2022-06-21T23:44:34.3452215Z   ✔ Channel #newEventService should be able to create an eventService: 0ms
2022-06-21T23:44:34.3464796Z     Channel #newDiscoveryService should require a name: 
2022-06-21T23:44:34.3465708Z   ✔ Channel #newDiscoveryService should require a name: 1ms
2022-06-21T23:44:34.3479495Z     Channel #newDiscoveryService should be able to create a discovery: 
2022-06-21T23:44:34.3480896Z   ✔ Channel #newDiscoveryService should be able to create a discovery: 0ms
2022-06-21T23:44:34.3501481Z     Channel #getMspids should be able to getMspids when none: 
2022-06-21T23:44:34.3502551Z   ✔ Channel #getMspids should be able to getMspids when none: 1ms
2022-06-21T23:44:34.3514665Z     Channel #getMspids should be able to getMspids: 
2022-06-21T23:44:34.3515965Z   ✔ Channel #getMspids should be able to getMspids: 1ms
2022-06-21T23:44:34.3529758Z     Channel #getMsp should require a id: 
2022-06-21T23:44:34.3530874Z   ✔ Channel #getMsp should require a id: 0ms
2022-06-21T23:44:34.3541102Z     Channel #getMsp should be able to getMsp: 
2022-06-21T23:44:34.3542168Z   ✔ Channel #getMsp should be able to getMsp: 0ms
2022-06-21T23:44:34.3554126Z     Channel #removeMsp should require a id: 
2022-06-21T23:44:34.3554929Z   ✔ Channel #removeMsp should require a id: 1ms
2022-06-21T23:44:34.3565967Z     Channel #removeMsp should be able call removeMsp with nonexistent msp: 
2022-06-21T23:44:34.3567319Z   ✔ Channel #removeMsp should be able call removeMsp with nonexistent msp: 0ms
2022-06-21T23:44:34.3579251Z     Channel #removeMsp should be able removeMsp: 
2022-06-21T23:44:34.3580717Z   ✔ Channel #removeMsp should be able removeMsp: 0ms
2022-06-21T23:44:34.3594588Z     Channel #addMsp should require a msp: 
2022-06-21T23:44:34.3595387Z   ✔ Channel #addMsp should require a msp: 1ms
2022-06-21T23:44:34.3606733Z     Channel #addMsp should require a msp.id: 
2022-06-21T23:44:34.3607907Z   ✔ Channel #addMsp should require a msp.id: 0ms
2022-06-21T23:44:34.3618327Z     Channel #addMsp should be able to addMsp: 
2022-06-21T23:44:34.3619371Z   ✔ Channel #addMsp should be able to addMsp: 0ms
2022-06-21T23:44:34.3633720Z     Channel #addMsp should see already exist msp.id: 
2022-06-21T23:44:34.3634933Z   ✔ Channel #addMsp should see already exist msp.id: 1ms
2022-06-21T23:44:34.3648135Z     Channel #addMsp should be able to addMsp with replace true: 
2022-06-21T23:44:34.3649392Z   ✔ Channel #addMsp should be able to addMsp with replace true: 0ms
2022-06-21T23:44:34.3662486Z     Channel #addEndorser should require a endorser: 
2022-06-21T23:44:34.3663374Z   ✔ Channel #addEndorser should require a endorser: 0ms
2022-06-21T23:44:34.3675302Z     Channel #addEndorser should require a endorser.name: 
2022-06-21T23:44:34.3676403Z   ✔ Channel #addEndorser should require a endorser.name: 1ms
2022-06-21T23:44:34.3690613Z     Channel #addEndorser should require a endorser type: 
2022-06-21T23:44:34.3692107Z   ✔ Channel #addEndorser should require a endorser type: 0ms
2022-06-21T23:44:34.3785060Z     Channel #addEndorser should be able to addEndorser: 
2022-06-21T23:44:34.3786148Z   ✔ Channel #addEndorser should be able to addEndorser: 0ms
2022-06-21T23:44:34.3789503Z     Channel #addEndorser should not be able to addEndorser when not connected: 
2022-06-21T23:44:34.3790688Z   ✔ Channel #addEndorser should not be able to addEndorser when not connected: 0ms
2022-06-21T23:44:34.3791983Z     Channel #addEndorser should find a endorser.name: 
2022-06-21T23:44:34.3808565Z   ✔ Channel #addEndorser should find a endorser.name: 1ms
2022-06-21T23:44:34.3809938Z     Channel #addEndorser should be able to addEndorser with replace true: 
2022-06-21T23:44:34.3811085Z   ✔ Channel #addEndorser should be able to addEndorser with replace true: 1ms
2022-06-21T23:44:34.3812314Z     Channel #removeEndorser should require a endorser: 
2022-06-21T23:44:34.3813069Z   ✔ Channel #removeEndorser should require a endorser: 0ms
2022-06-21T23:44:34.3815789Z     Channel #removeEndorser should require a endorser: 
2022-06-21T23:44:34.3816656Z   ✔ Channel #removeEndorser should require a endorser: 0ms
2022-06-21T23:44:34.3817838Z     Channel #removeEndorser should be able call removeEndorser without a endorser added: 
2022-06-21T23:44:34.3818771Z   ✔ Channel #removeEndorser should be able call removeEndorser without a endorser added: 0ms
2022-06-21T23:44:34.3821644Z     Channel #removeEndorser should be able removeEndorser: 
2022-06-21T23:44:34.3822565Z   ✔ Channel #removeEndorser should be able removeEndorser: 0ms
2022-06-21T23:44:34.3838045Z     Channel #getEndorser should require a endorser name: 
2022-06-21T23:44:34.3838970Z   ✔ Channel #getEndorser should require a endorser name: 1ms
2022-06-21T23:44:34.3846792Z     Channel #getEndorser should be able to getEndorser null: 
2022-06-21T23:44:34.3847761Z   ✔ Channel #getEndorser should be able to getEndorser null: 0ms
2022-06-21T23:44:34.3862075Z     Channel #getEndorser should be able to getEndorser: 
2022-06-21T23:44:34.3862985Z   ✔ Channel #getEndorser should be able to getEndorser: 0ms
2022-06-21T23:44:34.3875131Z     Channel #addCommitter should require a committer: 
2022-06-21T23:44:34.3876073Z   ✔ Channel #addCommitter should require a committer: 1ms
2022-06-21T23:44:34.3888172Z     Channel #addCommitter should require a committer.name: 
2022-06-21T23:44:34.3900296Z   ✔ Channel #addCommitter should require a committer.name: 0ms
2022-06-21T23:44:34.3903798Z     Channel #addCommitter should require committer type: 
2022-06-21T23:44:34.3904758Z   ✔ Channel #addCommitter should require committer type: 0ms
2022-06-21T23:44:34.3915674Z     Channel #addCommitter should be able to addCommitter: 
2022-06-21T23:44:34.3917777Z   ✔ Channel #addCommitter should be able to addCommitter: 1ms
2022-06-21T23:44:34.3933452Z     Channel #addCommitter should not be able to addCommitter when not connected: 
2022-06-21T23:44:34.3935593Z   ✔ Channel #addCommitter should not be able to addCommitter when not connected: 0ms
2022-06-21T23:44:34.3952636Z     Channel #addCommitter should find a committer.name: 
2022-06-21T23:44:34.3953784Z   ✔ Channel #addCommitter should find a committer.name: 0ms
2022-06-21T23:44:34.3972192Z     Channel #addCommitter should be able to addCommitter with replace true: 
2022-06-21T23:44:34.3973572Z   ✔ Channel #addCommitter should be able to addCommitter with replace true: 0ms
2022-06-21T23:44:34.4003146Z     Channel #removeCommitter should require a Committer: 
2022-06-21T23:44:34.4004447Z   ✔ Channel #removeCommitter should require a Committer: 0ms
2022-06-21T23:44:34.4005475Z     Channel #removeCommitter should require a committer: 
2022-06-21T23:44:34.4006484Z   ✔ Channel #removeCommitter should require a committer: 0ms
2022-06-21T23:44:34.4012891Z     Channel #removeCommitter should be able call removeCommitter and not fail if no committer: 
2022-06-21T23:44:34.4014377Z   ✔ Channel #removeCommitter should be able call removeCommitter and not fail if no committer: 0ms
2022-06-21T23:44:34.4027371Z     Channel #removeCommitter should be able to removeCommitter: 
2022-06-21T23:44:34.4029096Z   ✔ Channel #removeCommitter should be able to removeCommitter: 0ms
2022-06-21T23:44:34.4043419Z     Channel #getCommitter should require a committer name: 
2022-06-21T23:44:34.4044386Z   ✔ Channel #getCommitter should require a committer name: 0ms
2022-06-21T23:44:34.4057068Z     Channel #getCommitter should be able to getCommitter null: 
2022-06-21T23:44:34.4058260Z   ✔ Channel #getCommitter should be able to getCommitter null: 1ms
2022-06-21T23:44:34.4118954Z     Channel #getCommitter should be able to getCommitter: 
2022-06-21T23:44:34.4120380Z   ✔ Channel #getCommitter should be able to getCommitter: 0ms
2022-06-21T23:44:34.4121747Z     Channel #getEndorsers should be able to getEndorsers empty array: 
2022-06-21T23:44:34.4122354Z   ✔ Channel #getEndorsers should be able to getEndorsers empty array: 0ms
2022-06-21T23:44:34.4122862Z     Channel #getEndorsers should be able to getEndorsers: 
2022-06-21T23:44:34.4123415Z   ✔ Channel #getEndorsers should be able to getEndorsers: 1ms
2022-06-21T23:44:34.4126965Z     Channel #getEndorsers should be able to getEndorsers: 
2022-06-21T23:44:34.4127586Z   ✔ Channel #getEndorsers should be able to getEndorsers: 1ms
2022-06-21T23:44:34.4140410Z     Channel #getCommitters should be able to getCommitters empty array: 
2022-06-21T23:44:34.4141107Z   ✔ Channel #getCommitters should be able to getCommitters empty array: 0ms
2022-06-21T23:44:34.4157960Z     Channel #getCommitters should be able to getCommitters: 
2022-06-21T23:44:34.4158910Z   ✔ Channel #getCommitters should be able to getCommitters: 1ms
2022-06-21T23:44:34.4177488Z     Channel #getCommitters should be able to getCommitters: 
2022-06-21T23:44:34.4178142Z   ✔ Channel #getCommitters should be able to getCommitters: 1ms
2022-06-21T23:44:34.4190799Z     Channel #getTargetCommitters should require targets: 
2022-06-21T23:44:34.4194924Z   ✔ Channel #getTargetCommitters should require targets: 0ms
2022-06-21T23:44:34.4207157Z     Channel #getTargetCommitters should be an array of targets: 
2022-06-21T23:44:34.4207840Z   ✔ Channel #getTargetCommitters should be an array of targets: 1ms
2022-06-21T23:44:34.4220100Z     Channel #getTargetCommitters should be not found targets: 
2022-06-21T23:44:34.4220765Z   ✔ Channel #getTargetCommitters should be not found targets: 0ms
2022-06-21T23:44:34.4233986Z     Channel #getTargetCommitters should be not valid targets: 
2022-06-21T23:44:34.4234942Z   ✔ Channel #getTargetCommitters should be not valid targets: 1ms
2022-06-21T23:44:34.4254005Z     Channel #getTargetCommitters should be able to getTargetCommitters by name: 
2022-06-21T23:44:34.4255087Z   ✔ Channel #getTargetCommitters should be able to getTargetCommitters by name: 0ms
2022-06-21T23:44:34.4267813Z     Channel #getTargetCommitters should be able to getTargetCommitters by object: 
2022-06-21T23:44:34.4268843Z   ✔ Channel #getTargetCommitters should be able to getTargetCommitters by object: 0ms
2022-06-21T23:44:34.4280943Z     Channel #getTargetEndorsers should require targets: 
2022-06-21T23:44:34.4281557Z   ✔ Channel #getTargetEndorsers should require targets: 0ms
2022-06-21T23:44:34.4299074Z     Channel #getTargetEndorsers should be an array of targets: 
2022-06-21T23:44:34.4300015Z   ✔ Channel #getTargetEndorsers should be an array of targets: 0ms
2022-06-21T23:44:34.4306464Z     Channel #getTargetEndorsers should be not found targets: 
2022-06-21T23:44:34.4307112Z   ✔ Channel #getTargetEndorsers should be not found targets: 1ms
2022-06-21T23:44:34.4320196Z     Channel #getTargetEndorsers should be not valid targets: 
2022-06-21T23:44:34.4321212Z   ✔ Channel #getTargetEndorsers should be not valid targets: 0ms
2022-06-21T23:44:34.4339940Z     Channel #getTargetEndorsers should be able to getTargetEndorsers by name: 
2022-06-21T23:44:34.4341017Z   ✔ Channel #getTargetEndorsers should be able to getTargetEndorsers by name: 1ms
2022-06-21T23:44:34.4354320Z     Channel #getTargetEndorsers should be able to getTargetEndorsers by object: 
2022-06-21T23:44:34.4355305Z   ✔ Channel #getTargetEndorsers should be able to getTargetEndorsers by object: 1ms
2022-06-21T23:44:34.4368614Z     Channel #buildChannelHeader should require type: 
2022-06-21T23:44:34.4369514Z   ✔ Channel #buildChannelHeader should require type: 0ms
2022-06-21T23:44:34.4380756Z     Channel #buildChannelHeader should require chaincode_id: 
2022-06-21T23:44:34.4382025Z   ✔ Channel #buildChannelHeader should require chaincode_id: 0ms
2022-06-21T23:44:34.4392682Z     Channel #buildChannelHeader should require tx_id: 
2022-06-21T23:44:34.4396562Z   ✔ Channel #buildChannelHeader should require tx_id: 0ms
2022-06-21T23:44:34.4413842Z     Channel #buildChannelHeader should be able to buildChannelHeader: 
2022-06-21T23:44:34.4415257Z   ✔ Channel #buildChannelHeader should be able to buildChannelHeader: 1ms
2022-06-21T23:44:34.4429356Z     Channel #toString should be able to toString: 
2022-06-21T23:44:34.4430474Z   ✔ Channel #toString should be able to toString: 0ms
2022-06-21T23:44:34.4452139Z     Channel #toString should be able to toString: 
2022-06-21T23:44:34.4452986Z   ✔ Channel #toString should be able to toString: 1ms
2022-06-21T23:44:34.4462012Z     Client #config should have loaed the default.json: 
2022-06-21T23:44:34.4463379Z   ✔ Client #config should have loaed the default.json: 0ms
2022-06-21T23:44:34.4473252Z     Client #newClient should require a name: 
2022-06-21T23:44:34.4473978Z   ✔ Client #newClient should require a name: 0ms
2022-06-21T23:44:34.4481611Z     Client #newClient should run: 
2022-06-21T23:44:34.4482288Z   ✔ Client #newClient should run: 0ms
2022-06-21T23:44:34.4503592Z     Client #constructor should require a name: 
2022-06-21T23:44:34.4504386Z   ✔ Client #constructor should require a name: 0ms
2022-06-21T23:44:34.4505473Z     Client #getConnectionOptions should add in an options and keep what is there: 
2022-06-21T23:44:34.4506297Z   ✔ Client #getConnectionOptions should add in an options and keep what is there: 0ms
2022-06-21T23:44:34.4516356Z     Client #getConnectionOptions should add in an options and add tls settings: 
2022-06-21T23:44:34.4518052Z   ✔ Client #getConnectionOptions should add in an options and add tls settings: 1ms
2022-06-21T23:44:34.4528799Z     Client #getConnectionOptions should add in an options and override tls settings: 
2022-06-21T23:44:34.4530571Z   ✔ Client #getConnectionOptions should add in an options and override tls settings: 0ms
2022-06-21T23:44:34.4546814Z     Client #getConnectionOptions should add in an options from the centralized options: 
2022-06-21T23:44:34.4548181Z   ✔ Client #getConnectionOptions should add in an options from the centralized options: 1ms
2022-06-21T23:44:34.4557194Z     Client #setCentralizedConnectionOptions should set options: 
2022-06-21T23:44:34.4558736Z   ✔ Client #setCentralizedConnectionOptions should set options: 0ms
2022-06-21T23:44:34.4568038Z     Client #setCentralizedConnectionOptions should null options: 
2022-06-21T23:44:34.4569367Z   ✔ Client #setCentralizedConnectionOptions should null options: 0ms
2022-06-21T23:44:34.4590517Z     Client #newEndpoint should require a url: 
2022-06-21T23:44:34.4592228Z   ✔ Client #newEndpoint should require a url: 1ms
2022-06-21T23:44:34.4607730Z     Client #newEndpoint should require a url: 
2022-06-21T23:44:34.4608779Z   ✔ Client #newEndpoint should require a url: 1ms
2022-06-21T23:44:34.4636533Z     Client #newEndpoint should require a valid url: 
2022-06-21T23:44:34.4637774Z   ✔ Client #newEndpoint should require a valid url: 2ms
2022-06-21T23:44:34.4652090Z     Client #newEndpoint should require a valid wait for ready timeout: 
2022-06-21T23:44:34.4653169Z   ✔ Client #newEndpoint should require a valid wait for ready timeout: 0ms
2022-06-21T23:44:34.4665034Z     Client #newEndpoint should require a valid request timeout: 
2022-06-21T23:44:34.4666346Z   ✔ Client #newEndpoint should require a valid request timeout: 1ms
2022-06-21T23:44:34.4687161Z     Client #newEndpoint should use the default wait for ready timeout: 
2022-06-21T23:44:34.4688975Z   ✔ Client #newEndpoint should use the default wait for ready timeout: 2ms
2022-06-21T23:44:34.4706360Z     Client #newEndpoint should check that wait for ready timeout is good number: 
2022-06-21T23:44:34.4707605Z   ✔ Client #newEndpoint should check that wait for ready timeout is good number: 1ms
2022-06-21T23:44:34.4720374Z     Client #newEndpoint should add in an options and keep what is there: 
2022-06-21T23:44:34.4721457Z   ✔ Client #newEndpoint should add in an options and keep what is there: 0ms
2022-06-21T23:44:34.4737759Z     Client #newEndpoint should add in an options and keep what is there: 
2022-06-21T23:44:34.4738969Z   ✔ Client #newEndpoint should add in an options and keep what is there: 1ms
2022-06-21T23:44:34.4753602Z     Client #newEndpoint should add in an options and add tls settings: 
2022-06-21T23:44:34.4754536Z   ✔ Client #newEndpoint should add in an options and add tls settings: 0ms
2022-06-21T23:44:34.4770626Z     Client #newEndpoint should add in an options and override tls settings: 
2022-06-21T23:44:34.4771940Z   ✔ Client #newEndpoint should add in an options and override tls settings: 1ms
2022-06-21T23:44:34.4782255Z     Client #newIdentityContext should require a user: 
2022-06-21T23:44:34.4783434Z   ✔ Client #newIdentityContext should require a user: 0ms
2022-06-21T23:44:34.4794253Z     Client #newIdentityContext should require a valid user: 
2022-06-21T23:44:34.4795166Z   ✔ Client #newIdentityContext should require a valid user: 0ms
2022-06-21T23:44:34.4805480Z     Client #newIdentityContext should require a valid user: 
2022-06-21T23:44:34.4806411Z   ✔ Client #newIdentityContext should require a valid user: 1ms
2022-06-21T23:44:34.4817891Z     Client #newEndorser should require a name: 
2022-06-21T23:44:34.4818900Z   ✔ Client #newEndorser should require a name: 1ms
2022-06-21T23:44:34.4828971Z     Client #newEndorser should return an instance: 
2022-06-21T23:44:34.4830145Z   ✔ Client #newEndorser should return an instance: 0ms
2022-06-21T23:44:34.4840598Z     Client #newEndorser should return an instance with mspid: 
2022-06-21T23:44:34.4841904Z   ✔ Client #newEndorser should return an instance with mspid: 0ms
2022-06-21T23:44:34.4852761Z     Client #getEndorser should require a name: 
2022-06-21T23:44:34.4853592Z   ✔ Client #getEndorser should require a name: 0ms
2022-06-21T23:44:34.4863730Z     Client #getEndorser should return an instance: 
2022-06-21T23:44:34.4864604Z   ✔ Client #getEndorser should return an instance: 1ms
2022-06-21T23:44:34.4877408Z     Client #getEndorser should return an instance with mspid: 
2022-06-21T23:44:34.4878330Z   ✔ Client #getEndorser should return an instance with mspid: 1ms
2022-06-21T23:44:34.4889772Z     Client #newCommitter should require a name: 
2022-06-21T23:44:34.4890808Z   ✔ Client #newCommitter should require a name: 0ms
2022-06-21T23:44:34.4900584Z     Client #newCommitter should return an instance: 
2022-06-21T23:44:34.4901692Z   ✔ Client #newCommitter should return an instance: 0ms
2022-06-21T23:44:34.4911710Z     Client #newCommitter should return an instance with mspid: 
2022-06-21T23:44:34.4912916Z   ✔ Client #newCommitter should return an instance with mspid: 0ms
2022-06-21T23:44:34.4924040Z     Client #getCommitter should require a name: 
2022-06-21T23:44:34.4925065Z   ✔ Client #getCommitter should require a name: 0ms
2022-06-21T23:44:34.4935614Z     Client #getCommitter should return an instance: 
2022-06-21T23:44:34.4936697Z   ✔ Client #getCommitter should return an instance: 1ms
2022-06-21T23:44:34.4949966Z     Client #getCommitter should return an instance with mspid: 
2022-06-21T23:44:34.4951119Z   ✔ Client #getCommitter should return an instance with mspid: 0ms
2022-06-21T23:44:34.4964405Z     Client #getEndorsers should be able to getEndorsers empty array: 
2022-06-21T23:44:34.4965714Z   ✔ Client #getEndorsers should be able to getEndorsers empty array: 0ms
2022-06-21T23:44:34.4979007Z     Client #getEndorsers should be able to getEndorsers no msp provided: 
2022-06-21T23:44:34.4980527Z   ✔ Client #getEndorsers should be able to getEndorsers no msp provided: 1ms
2022-06-21T23:44:34.4995172Z     Client #getEndorsers should be able to getEndorsers msp provided: 
2022-06-21T23:44:34.4996523Z   ✔ Client #getEndorsers should be able to getEndorsers msp provided: 1ms
2022-06-21T23:44:34.5009336Z     Client #getCommitters should be able to getCommitters empty array: 
2022-06-21T23:44:34.5010753Z   ✔ Client #getCommitters should be able to getCommitters empty array: 0ms
2022-06-21T23:44:34.5157606Z     Client #getCommitters should be able to getCommitters no msp provided: 
2022-06-21T23:44:34.5159037Z   ✔ Client #getCommitters should be able to getCommitters no msp provided: 3ms
2022-06-21T23:44:34.5160006Z     Client #getCommitters should be able to getCommitters msp provided: 
2022-06-21T23:44:34.5160941Z   ✔ Client #getCommitters should be able to getCommitters msp provided: 1ms
2022-06-21T23:44:34.5163424Z     Client #newEventer should require a name: 
2022-06-21T23:44:34.5164186Z   ✔ Client #newEventer should require a name: 1ms
2022-06-21T23:44:34.5166329Z     Client #newEventer should return an instance: 
2022-06-21T23:44:34.5167226Z   ✔ Client #newEventer should return an instance: 0ms
2022-06-21T23:44:34.5168439Z     Client #newEventer should return an instance with mspid: 
2022-06-21T23:44:34.5169353Z   ✔ Client #newEventer should return an instance with mspid: 0ms
2022-06-21T23:44:34.5170205Z     Client #newDiscoverer should require a name: 
2022-06-21T23:44:34.5171262Z   ✔ Client #newDiscoverer should require a name: 0ms
2022-06-21T23:44:34.5172319Z     Client #newDiscoverer should return an instance: 
2022-06-21T23:44:34.5173072Z   ✔ Client #newDiscoverer should return an instance: 1ms
2022-06-21T23:44:34.5173968Z     Client #newDiscoverer should return an instance with mspid: 
2022-06-21T23:44:34.5174789Z   ✔ Client #newDiscoverer should return an instance with mspid: 2ms
2022-06-21T23:44:34.5177000Z     Client #newChannel should require a name: 
2022-06-21T23:44:34.5178192Z   ✔ Client #newChannel should require a name: 0ms
2022-06-21T23:44:34.5181089Z     Client #newChannel should return an instance: 
2022-06-21T23:44:34.5182469Z   ✔ Client #newChannel should return an instance: 0ms
2022-06-21T23:44:34.5183358Z     Client #getChannel should require a name: 
2022-06-21T23:44:34.5184214Z   ✔ Client #getChannel should require a name: 0ms
2022-06-21T23:44:34.5185181Z     Client #getChannel should return an instance: 
2022-06-21T23:44:34.5186056Z   ✔ Client #getChannel should return an instance: 0ms
2022-06-21T23:44:34.5187083Z     Client #getChannel should return an instance with mspid: 
2022-06-21T23:44:34.5188090Z   ✔ Client #getChannel should return an instance with mspid: 1ms
2022-06-21T23:44:34.5203894Z     Client #setTlsClientCertAndKey should set selfsigned clientCert, cleintKey: 
2022-06-21T23:44:34.5205295Z   ✔ Client #setTlsClientCertAndKey should set selfsigned clientCert, cleintKey: 1ms
2022-06-21T23:44:34.5214552Z     Client #setTlsClientCertAndKey should set clientCert, cleintKey: 
2022-06-21T23:44:34.5215598Z   ✔ Client #setTlsClientCertAndKey should set clientCert, cleintKey: 1ms
2022-06-21T23:44:34.5224973Z     Client #addTlsClientCertAndKey should add the current _tls_mutual values to the options object: 
2022-06-21T23:44:34.5226138Z   ✔ Client #addTlsClientCertAndKey should add the current _tls_mutual values to the options object: 1ms
2022-06-21T23:44:34.5235059Z     Client #addTlsClientCertAndKey should add the current _tls_mutual values to the options object: 
2022-06-21T23:44:34.5236199Z   ✔ Client #addTlsClientCertAndKey should add the current _tls_mutual values to the options object: 1ms
2022-06-21T23:44:34.5244578Z     Client #getClientCertHash should return undefined: 
2022-06-21T23:44:34.5245418Z   ✔ Client #getClientCertHash should return undefined: 1ms
2022-06-21T23:44:34.5263508Z     Client #getClientCertHash should require a valid pem: 
2022-06-21T23:44:34.5265006Z   ✔ Client #getClientCertHash should require a valid pem: 1ms
2022-06-21T23:44:34.5280147Z     Client #getClientCertHash should return a hash: 
2022-06-21T23:44:34.5281247Z   ✔ Client #getClientCertHash should return a hash: 1ms
2022-06-21T23:44:34.5294170Z     Client #getClientCertHash should return same hash: 
2022-06-21T23:44:34.5295453Z   ✔ Client #getClientCertHash should return same hash: 1ms
2022-06-21T23:44:34.5305249Z     Client #set/getConfigSetting should run static: 
2022-06-21T23:44:34.5306220Z   ✔ Client #set/getConfigSetting should run static: 1ms
2022-06-21T23:44:34.5314391Z     Client #set/getConfigSetting should run static: 
2022-06-21T23:44:34.5315186Z   ✔ Client #set/getConfigSetting should run static: 1ms
2022-06-21T23:44:34.5322927Z     Client #close should be able close with no endpoints: 
2022-06-21T23:44:34.5323914Z   ✔ Client #close should be able close with no endpoints: 0ms
2022-06-21T23:44:34.5330015Z     Client #close should allow multiple close attempt: 
2022-06-21T23:44:34.5331162Z   ✔ Client #close should allow multiple close attempt: 0ms
2022-06-21T23:44:34.5353737Z     Client #close should be able close with endpoints: 
2022-06-21T23:44:34.5355084Z   ✔ Client #close should be able close with endpoints: 2ms
2022-06-21T23:44:34.5363795Z     Client #toString should return string: 
2022-06-21T23:44:34.5364650Z   ✔ Client #toString should return string: 1ms
2022-06-21T23:44:34.5377844Z     Commit #constructor should require a chaincodeId: 
2022-06-21T23:44:34.5378953Z   ✔ Commit #constructor should require a chaincodeId: 0ms
2022-06-21T23:44:34.5389155Z     Commit #constructor should require a Channel: 
2022-06-21T23:44:34.5390038Z   ✔ Commit #constructor should require a Channel: 0ms
2022-06-21T23:44:34.5400897Z     Commit #constructor should create: 
2022-06-21T23:44:34.5402114Z   ✔ Commit #constructor should create: 0ms
2022-06-21T23:44:34.5419967Z     Commit #build should require a idContext: 
2022-06-21T23:44:34.5420860Z   ✔ Commit #build should require a idContext: 1ms
2022-06-21T23:44:34.5432163Z     Commit #build should require a endorsement: 
2022-06-21T23:44:34.5433239Z   ✔ Commit #build should require a endorsement: 0ms
2022-06-21T23:44:34.5444305Z     Commit #build should require a endorsement proposal: 
2022-06-21T23:44:34.5446829Z   ✔ Commit #build should require a endorsement proposal: 1ms
2022-06-21T23:44:34.5456041Z     Commit #build should require a endorsement proposal: 
2022-06-21T23:44:34.5457224Z   ✔ Commit #build should require a endorsement proposal: 1ms
2022-06-21T23:44:34.5467172Z     Commit #build should require a endorsement proposal: 
2022-06-21T23:44:34.5468306Z   ✔ Commit #build should require a endorsement proposal: 0ms
2022-06-21T23:44:34.5482638Z     Commit #build should require a endorsement proposal: 
2022-06-21T23:44:34.5483990Z   ✔ Commit #build should require a endorsement proposal: 0ms
2022-06-21T23:44:34.5504511Z     Commit #build should build: 
2022-06-21T23:44:34.5505591Z   ✔ Commit #build should build: 2ms
2022-06-21T23:44:34.6513630Z     Commit #send throws if targets committers is missing: 
2022-06-21T23:44:34.6529692Z   ✔ Commit #send throws if targets committers is missing: 99ms
2022-06-21T23:44:34.6667293Z     Commit #send throws if targets is missing: 
2022-06-21T23:44:34.6668586Z   ✔ Commit #send throws if targets is missing: 11ms
2022-06-21T23:44:34.6774526Z     Commit #send uses a handler: 
2022-06-21T23:44:34.6775453Z   ✔ Commit #send uses a handler: 8ms
2022-06-21T23:44:34.6894057Z     Commit #send uses a target with good status: 
2022-06-21T23:44:34.6894962Z   ✔ Commit #send uses a target with good status: 9ms
2022-06-21T23:44:34.6941311Z     Commit #send uses a target with bad status: 
2022-06-21T23:44:34.6942344Z   ✔ Commit #send uses a target with bad status: 8ms
2022-06-21T23:44:34.7013712Z     Commit #send uses a target with connection: 
2022-06-21T23:44:34.7014526Z   ✔ Commit #send uses a target with connection: 6ms
2022-06-21T23:44:34.7024684Z     Commit #toString should return string: 
2022-06-21T23:44:34.7025512Z   ✔ Commit #toString should return string: 0ms
2022-06-21T23:44:34.7058271Z     Committer #constructor should require name: 
2022-06-21T23:44:34.7059364Z   ✔ Committer #constructor should require name: 1ms
2022-06-21T23:44:34.7070271Z     Committer #constructor should require client: 
2022-06-21T23:44:34.7071032Z   ✔ Committer #constructor should require client: 0ms
2022-06-21T23:44:34.7093609Z     Committer #sendBroadcast should reject if no envelope: 
2022-06-21T23:44:34.7095247Z   ✔ Committer #sendBroadcast should reject if no envelope: 0ms
2022-06-21T23:44:34.7125959Z     Committer #sendBroadcast should reject if not connected: 
2022-06-21T23:44:34.7126815Z   ✔ Committer #sendBroadcast should reject if not connected: 1ms
2022-06-21T23:44:34.7155056Z     Committer #sendBroadcast should reject on timeout: 
2022-06-21T23:44:34.7156061Z   ✔ Committer #sendBroadcast should reject on timeout: 2ms
2022-06-21T23:44:34.7202471Z     Committer #sendBroadcast should reject on invalid request: 
2022-06-21T23:44:34.7203249Z   ✔ Committer #sendBroadcast should reject on invalid request: 3ms
2022-06-21T23:44:34.7242781Z     Committer #sendBroadcast should reject on receiving an error: 
2022-06-21T23:44:34.7243976Z   ✔ Committer #sendBroadcast should reject on receiving an error: 3ms
2022-06-21T23:44:34.7261349Z     Committer #sendBroadcast should reject on receiving an service error: 
2022-06-21T23:44:34.7262565Z   ✔ Committer #sendBroadcast should reject on receiving an service error: 1ms
2022-06-21T23:44:34.7288166Z     Committer #sendBroadcast should reject on receiving a 500 error: 
2022-06-21T23:44:34.7289198Z   ✔ Committer #sendBroadcast should reject on receiving a 500 error: 2ms
2022-06-21T23:44:34.7314657Z     Committer #sendBroadcast should reject on receiving a valid response: 
2022-06-21T23:44:34.7315823Z   ✔ Committer #sendBroadcast should reject on receiving a valid response: 2ms
2022-06-21T23:44:34.7441169Z     Config #reorderFileStores should add the new file store to the bottom of an empty list: 
2022-06-21T23:44:34.7442276Z   ✔ Config #reorderFileStores should add the new file store to the bottom of an empty list: 0ms
2022-06-21T23:44:34.7539788Z     Config #reorderFileStores should add the new file store to the bottom of an non-empty list: 
2022-06-21T23:44:34.7540823Z   ✔ Config #reorderFileStores should add the new file store to the bottom of an non-empty list: 0ms
2022-06-21T23:44:34.7638531Z     Config #reorderFileStores should add the new file store to the front of an empty list: 
2022-06-21T23:44:34.7639742Z   ✔ Config #reorderFileStores should add the new file store to the front of an empty list: 0ms
2022-06-21T23:44:34.7733484Z     Config #reorderFileStores should add the new file store to the front of an non-empty list: 
2022-06-21T23:44:34.7734453Z   ✔ Config #reorderFileStores should add the new file store to the front of an non-empty list: 0ms
2022-06-21T23:44:34.7868829Z     Config #file should call Config.reorderFileStores when given a string: 
2022-06-21T23:44:34.7869912Z   ✔ Config #file should call Config.reorderFileStores when given a string: 11ms
2022-06-21T23:44:34.7978436Z     Config #file should throw an error when not given a string: 
2022-06-21T23:44:34.7979398Z   ✔ Config #file should throw an error when not given a string: 10ms
2022-06-21T23:44:34.8118811Z     Config #get should return a value when _config.get does not throw error: 
2022-06-21T23:44:34.8119883Z   ✔ Config #get should return a value when _config.get does not throw error: 13ms
2022-06-21T23:44:34.8259599Z     Config #get should return the default value when _config.get does not throw error: 
2022-06-21T23:44:34.8260860Z   ✔ Config #get should return the default value when _config.get does not throw error: 13ms
2022-06-21T23:44:34.8386422Z     Config #get should return the default value when _config.get returns null: 
2022-06-21T23:44:34.8387503Z   ✔ Config #get should return the default value when _config.get returns null: 12ms
2022-06-21T23:44:34.8535110Z     Config #get should return the default value when _config.get returns undefined: 
2022-06-21T23:44:34.8536399Z   ✔ Config #get should return the default value when _config.get returns undefined: 11ms
2022-06-21T23:44:34.8665041Z     Config environment variables should convert number-like strings to numbers: 
2022-06-21T23:44:34.8665968Z   ✔ Config environment variables should convert number-like strings to numbers: 11ms
2022-06-21T23:44:34.8811266Z     Config environment variables should convert underscores to hyphens: 
2022-06-21T23:44:34.8812231Z   ✔ Config environment variables should convert underscores to hyphens: 10ms
2022-06-21T23:44:34.8966326Z     Config environment variables should convert to lowercase: 
2022-06-21T23:44:34.8967209Z   ✔ Config environment variables should convert to lowercase: 12ms
2022-06-21T23:44:34.9111842Z     Config environment variables should convert boolean-like strings to booleans: 
2022-06-21T23:44:34.9112815Z   ✔ Config environment variables should convert boolean-like strings to booleans: 10ms
2022-06-21T23:44:34.9268171Z     Config #set should call _config.set: 
2022-06-21T23:44:34.9269154Z   ✔ Config #set should call _config.set: 11ms
2022-06-21T23:44:34.9279623Z     CryptoSuite #generateKey should throw if unimplemented: 
2022-06-21T23:44:34.9280523Z   ✔ CryptoSuite #generateKey should throw if unimplemented: 0ms
2022-06-21T23:44:34.9287779Z     CryptoSuite #generateEphemeralKey should throw if unimplemented: 
2022-06-21T23:44:34.9288876Z   ✔ CryptoSuite #generateEphemeralKey should throw if unimplemented: 0ms
2022-06-21T23:44:34.9296607Z     CryptoSuite #deriveKey should return undefined: 
2022-06-21T23:44:34.9297602Z   ✔ CryptoSuite #deriveKey should return undefined: 1ms
2022-06-21T23:44:34.9306673Z     CryptoSuite #importKey should throw if unimplemented: 
2022-06-21T23:44:34.9308239Z   ✔ CryptoSuite #importKey should throw if unimplemented: 0ms
2022-06-21T23:44:34.9315930Z     CryptoSuite #createKeyFromRaw should throw if unimplemented: 
2022-06-21T23:44:34.9316804Z   ✔ CryptoSuite #createKeyFromRaw should throw if unimplemented: 1ms
2022-06-21T23:44:34.9325363Z     CryptoSuite #getKey should return undefined: 
2022-06-21T23:44:34.9331566Z   ✔ CryptoSuite #getKey should return undefined: 1ms
2022-06-21T23:44:34.9335208Z     CryptoSuite #hash should return undefined: 
2022-06-21T23:44:34.9335991Z   ✔ CryptoSuite #hash should return undefined: 0ms
2022-06-21T23:44:34.9338926Z     CryptoSuite #sign should return undefined: 
2022-06-21T23:44:34.9340401Z   ✔ CryptoSuite #sign should return undefined: 0ms
2022-06-21T23:44:34.9348318Z     CryptoSuite #verify should return undefined: 
2022-06-21T23:44:34.9349832Z   ✔ CryptoSuite #verify should return undefined: 0ms
2022-06-21T23:44:34.9356632Z     CryptoSuite #encrypt should return undefined: 
2022-06-21T23:44:34.9357435Z   ✔ CryptoSuite #encrypt should return undefined: 0ms
2022-06-21T23:44:34.9364572Z     CryptoSuite #decrypt should return undefined: 
2022-06-21T23:44:34.9365601Z   ✔ CryptoSuite #decrypt should return undefined: 1ms
2022-06-21T23:44:34.9374078Z     CryptoSuite #setCryptoKeyStore should throw an error if cryptoKeyStore not set: 
2022-06-21T23:44:34.9375113Z   ✔ CryptoSuite #setCryptoKeyStore should throw an error if cryptoKeyStore not set: 1ms
2022-06-21T23:44:34.9382040Z     CryptoSuite #setCryptoKeyStore should throw an error if cryptoKeyStore is set: 
2022-06-21T23:44:34.9383398Z   ✔ CryptoSuite #setCryptoKeyStore should throw an error if cryptoKeyStore is set: 0ms
2022-06-21T23:44:34.9407732Z     Discoverer #constructor should require name: 
2022-06-21T23:44:34.9408599Z   ✔ Discoverer #constructor should require name: 0ms
2022-06-21T23:44:34.9423421Z     Discoverer #constructor should require client: 
2022-06-21T23:44:34.9424298Z   ✔ Discoverer #constructor should require client: 0ms
2022-06-21T23:44:34.9450700Z     Discoverer #sendDiscovery should reject if no envelope: 
2022-06-21T23:44:34.9451833Z   ✔ Discoverer #sendDiscovery should reject if no envelope: 0ms
2022-06-21T23:44:34.9469273Z     Discoverer #sendDiscovery should reject if not connected: 
2022-06-21T23:44:34.9470481Z   ✔ Discoverer #sendDiscovery should reject if not connected: 0ms
2022-06-21T23:44:34.9503799Z     Discoverer #sendDiscovery should reject on timeout: 
2022-06-21T23:44:34.9504679Z   ✔ Discoverer #sendDiscovery should reject on timeout: 3ms
2022-06-21T23:44:34.9526180Z     Discoverer #sendDiscovery should reject Error object on discover response error string: 
2022-06-21T23:44:34.9527841Z   ✔ Discoverer #sendDiscovery should reject Error object on discover response error string: 1ms
2022-06-21T23:44:34.9548476Z     Discoverer #sendDiscovery should reject Error object on send discover error object: 
2022-06-21T23:44:34.9549722Z   ✔ Discoverer #sendDiscovery should reject Error object on send discover error object: 1ms
2022-06-21T23:44:34.9570054Z     Discoverer #sendDiscovery should eject on undefined discover response: 
2022-06-21T23:44:34.9571640Z   ✔ Discoverer #sendDiscovery should eject on undefined discover response: 1ms
2022-06-21T23:44:34.9591947Z     Discoverer #sendDiscovery should get the discover response if returned: 
2022-06-21T23:44:34.9593132Z   ✔ Discoverer #sendDiscovery should get the discover response if returned: 0ms
2022-06-21T23:44:34.9711327Z     DiscoveryHandler #constructor should log on entry: 
2022-06-21T23:44:34.9712885Z   ✔ DiscoveryHandler #constructor should log on entry: 0ms
2022-06-21T23:44:34.9805920Z     DiscoveryHandler #constructor should create and have these settings: 
2022-06-21T23:44:34.9807206Z   ✔ DiscoveryHandler #constructor should create and have these settings: 1ms
2022-06-21T23:44:34.9897853Z     DiscoveryHandler #toString should run: 
2022-06-21T23:44:34.9898704Z   ✔ DiscoveryHandler #toString should run: 0ms
2022-06-21T23:44:34.9991997Z     DiscoveryHandler #query should reject if signedProposal arg is not given: 
2022-06-21T23:44:34.9992985Z   ✔ DiscoveryHandler #query should reject if signedProposal arg is not given: 0ms
2022-06-21T23:44:35.0084731Z     DiscoveryHandler #query should reject if endorsers are missing: 
2022-06-21T23:44:35.0086318Z   ✔ DiscoveryHandler #query should reject if endorsers are missing: 1ms
2022-06-21T23:44:35.0192132Z     DiscoveryHandler #query should run with endorsers assigned by mspid: 
2022-06-21T23:44:35.0193445Z   ✔ DiscoveryHandler #query should run with endorsers assigned by mspid: 1ms
2022-06-21T23:44:35.0366514Z     DiscoveryHandler #query should run with endorsers assigned: 
2022-06-21T23:44:35.0367936Z   ✔ DiscoveryHandler #query should run with endorsers assigned: 1ms
2022-06-21T23:44:35.0472872Z     DiscoveryHandler #query should run with endorsers assigned: 
2022-06-21T23:44:35.0474521Z   ✔ DiscoveryHandler #query should run with endorsers assigned: 2ms
2022-06-21T23:44:35.0566918Z     DiscoveryHandler #commit should reject if signedEnvelope arg is not given: 
2022-06-21T23:44:35.0568132Z   ✔ DiscoveryHandler #commit should reject if signedEnvelope arg is not given: 1ms
2022-06-21T23:44:35.0645771Z     DiscoveryHandler #commit should reject if orderers are missing: 
2022-06-21T23:44:35.0647715Z   ✔ DiscoveryHandler #commit should reject if orderers are missing: 1ms
2022-06-21T23:44:35.0735993Z     DiscoveryHandler #commit should run: 
2022-06-21T23:44:35.0737269Z   ✔ DiscoveryHandler #commit should run: 1ms
2022-06-21T23:44:35.0841696Z     DiscoveryHandler #commit should reject: 
2022-06-21T23:44:35.0842830Z   ✔ DiscoveryHandler #commit should reject: 1ms
2022-06-21T23:44:35.0987204Z     DiscoveryHandler #_commitSend should run with some bad orderers assigned: 
2022-06-21T23:44:35.0988695Z   ✔ DiscoveryHandler #_commitSend should run with some bad orderers assigned: 2ms
2022-06-21T23:44:35.1073688Z     DiscoveryHandler #_commitSend should reject orderer returns missing results: 
2022-06-21T23:44:35.1075172Z   ✔ DiscoveryHandler #_commitSend should reject orderer returns missing results: 1ms
2022-06-21T23:44:35.1173875Z     DiscoveryHandler #_commitSend should reject when status is not correct: 
2022-06-21T23:44:35.1175038Z   ✔ DiscoveryHandler #_commitSend should reject when status is not correct: 2ms
2022-06-21T23:44:35.1282209Z     DiscoveryHandler #_commitSend should reject when orderer returns an error: 
2022-06-21T23:44:35.1283948Z   ✔ DiscoveryHandler #_commitSend should reject when orderer returns an error: 1ms
2022-06-21T23:44:35.1374842Z     DiscoveryHandler #_commitSend should reject when all orderers are not connected: 
2022-06-21T23:44:35.1376026Z   ✔ DiscoveryHandler #_commitSend should reject when all orderers are not connected: 1ms
2022-06-21T23:44:35.1463131Z     DiscoveryHandler #_commitSend should reject when all orderers are not connected and using reconnect: 
2022-06-21T23:44:35.1464812Z   ✔ DiscoveryHandler #_commitSend should reject when all orderers are not connected and using reconnect: 1ms
2022-06-21T23:44:35.1549221Z     DiscoveryHandler #endorse should reject if signedProposal arg is not given: 
2022-06-21T23:44:35.1555660Z   ✔ DiscoveryHandler #endorse should reject if signedProposal arg is not given: 0ms
2022-06-21T23:44:35.1629307Z     DiscoveryHandler #endorse should reject if no endorsement plans are available: 
2022-06-21T23:44:35.1630584Z   ✔ DiscoveryHandler #endorse should reject if no endorsement plans are available: 1ms
2022-06-21T23:44:35.1708867Z     DiscoveryHandler #endorse should run ok: 
2022-06-21T23:44:35.1709704Z   ✔ DiscoveryHandler #endorse should run ok: 1ms
2022-06-21T23:44:35.1843044Z     DiscoveryHandler #endorse should run ok with required orgs: 
2022-06-21T23:44:35.1844036Z   ✔ DiscoveryHandler #endorse should run ok with required orgs: 6ms
2022-06-21T23:44:35.1939892Z     DiscoveryHandler #_endorse should reject if endorsement_plan arg is not given: 
2022-06-21T23:44:35.1941173Z   ✔ DiscoveryHandler #_endorse should reject if endorsement_plan arg is not given: 1ms
2022-06-21T23:44:35.2013502Z     DiscoveryHandler #_endorse should reject if proposal arg is not given: 
2022-06-21T23:44:35.2014776Z   ✔ DiscoveryHandler #_endorse should reject if proposal arg is not given: 0ms
2022-06-21T23:44:35.2140771Z     DiscoveryHandler #_endorse should reject if preferred height gap not a number: 
2022-06-21T23:44:35.2142016Z   ✔ DiscoveryHandler #_endorse should reject if preferred height gap not a number: 1ms
2022-06-21T23:44:35.2219393Z     DiscoveryHandler #_endorse should reject if sort is not valid: 
2022-06-21T23:44:35.2220587Z   ✔ DiscoveryHandler #_endorse should reject if sort is not valid: 1ms
2022-06-21T23:44:35.2302431Z     DiscoveryHandler #_endorse should run ok: 
2022-06-21T23:44:35.2303392Z   ✔ DiscoveryHandler #_endorse should run ok: 1ms
2022-06-21T23:44:35.2384695Z     DiscoveryHandler #_endorse should run - show failed due to endorsement do not match: 
2022-06-21T23:44:35.2386012Z   ✔ DiscoveryHandler #_endorse should run - show failed due to endorsement do not match: 2ms
2022-06-21T23:44:35.2488481Z     DiscoveryHandler #_endorse should run - show failed: 
2022-06-21T23:44:35.2489368Z   ✔ DiscoveryHandler #_endorse should run - show failed: 1ms
2022-06-21T23:44:35.2572222Z     DiscoveryHandler #_endorse should run ok - valid sort random: 
2022-06-21T23:44:35.2573170Z   ✔ DiscoveryHandler #_endorse should run ok - valid sort random: 1ms
2022-06-21T23:44:35.2662736Z     DiscoveryHandler #_endorse should run ok - valid sort ledgerHeight: 
2022-06-21T23:44:35.2663890Z   ✔ DiscoveryHandler #_endorse should run ok - valid sort ledgerHeight: 1ms
2022-06-21T23:44:35.2744143Z     DiscoveryHandler #_endorse should set default sort: 
2022-06-21T23:44:35.2745347Z   ✔ DiscoveryHandler #_endorse should set default sort: 1ms
2022-06-21T23:44:35.2832482Z     DiscoveryHandler #_endorse_layout should run ok: 
2022-06-21T23:44:35.2833382Z   ✔ DiscoveryHandler #_endorse_layout should run ok: 1ms
2022-06-21T23:44:35.2914754Z     DiscoveryHandler #_endorse_layout should get false due to required count too large: 
2022-06-21T23:44:35.2915780Z   ✔ DiscoveryHandler #_endorse_layout should get false due to required count too large: 1ms
2022-06-21T23:44:35.3015217Z     DiscoveryHandler #_endorse_layout should get false due to endorsement failure: 
2022-06-21T23:44:35.3016338Z   ✔ DiscoveryHandler #_endorse_layout should get false due to endorsement failure: 1ms
2022-06-21T23:44:35.3089077Z     DiscoveryHandler #_endorse_layout should get false due to endorsement Error: 
2022-06-21T23:44:35.3090293Z   ✔ DiscoveryHandler #_endorse_layout should get false due to endorsement Error: 1ms
2022-06-21T23:44:35.3160217Z     DiscoveryHandler #_execute_endorsements should run ok: 
2022-06-21T23:44:35.3161614Z   ✔ DiscoveryHandler #_execute_endorsements should run ok: 0ms
2022-06-21T23:44:35.3239045Z     DiscoveryHandler #_execute_endorsements should run ok, but log an error: 
2022-06-21T23:44:35.3240105Z   ✔ DiscoveryHandler #_execute_endorsements should run ok, but log an error: 1ms
2022-06-21T23:44:35.3331143Z     DiscoveryHandler #_buildRequiredOrgPlan should run ok with all: 
2022-06-21T23:44:35.3332295Z   ✔ DiscoveryHandler #_buildRequiredOrgPlan should run ok with all: 1ms
2022-06-21T23:44:35.3398045Z     DiscoveryHandler #_buildRequiredOrgPlan should run ok with one: 
2022-06-21T23:44:35.3399110Z   ✔ DiscoveryHandler #_buildRequiredOrgPlan should run ok with one: 1ms
2022-06-21T23:44:35.3462789Z     DiscoveryHandler #_buildRequiredOrgPlan should throw for one missing with no peers: 
2022-06-21T23:44:35.3464328Z   ✔ DiscoveryHandler #_buildRequiredOrgPlan should throw for one missing with no peers: 0ms
2022-06-21T23:44:35.3538795Z     DiscoveryHandler #_buildRequiredOrgPlan should throw for two missing when not included in list: 
2022-06-21T23:44:35.3539885Z   ✔ DiscoveryHandler #_buildRequiredOrgPlan should throw for two missing when not included in list: 1ms
2022-06-21T23:44:35.3648350Z     DiscoveryHandler #_buildAllOrgPlan should run ok with all: 
2022-06-21T23:44:35.3649237Z   ✔ DiscoveryHandler #_buildAllOrgPlan should run ok with all: 1ms
2022-06-21T23:44:35.3722488Z     DiscoveryHandler #_buildAllOrgPlan should throw for no peers: 
2022-06-21T23:44:35.3723692Z   ✔ DiscoveryHandler #_buildAllOrgPlan should throw for no peers: 0ms
2022-06-21T23:44:35.3807024Z     DiscoveryHandler #_build_endorse_group_member should run ok: 
2022-06-21T23:44:35.3807944Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok: 2ms
2022-06-21T23:44:35.3913470Z     DiscoveryHandler #_build_endorse_group_member should run - show reconnect error: 
2022-06-21T23:44:35.3914597Z   ✔ DiscoveryHandler #_build_endorse_group_member should run - show reconnect error: 2ms
2022-06-21T23:44:35.3977802Z     DiscoveryHandler #_build_endorse_group_member should run ok and return error when endorser rejects: 
2022-06-21T23:44:35.3979717Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok and return error when endorser rejects: 2ms
2022-06-21T23:44:35.4053935Z     DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 
2022-06-21T23:44:35.4055302Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 1ms
2022-06-21T23:44:35.4123765Z     DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 
2022-06-21T23:44:35.4125490Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 0ms
2022-06-21T23:44:35.4201139Z     DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 
2022-06-21T23:44:35.4202878Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok when endorser failed on last layout: 1ms
2022-06-21T23:44:35.4308038Z     DiscoveryHandler #_build_endorse_group_member should run ok when no endorsement found: 
2022-06-21T23:44:35.4309558Z   ✔ DiscoveryHandler #_build_endorse_group_member should run ok when no endorsement found: 1ms
2022-06-21T23:44:35.4454600Z     DiscoveryHandler #_modify_groups should run ok: 
2022-06-21T23:44:35.4455735Z   ✔ DiscoveryHandler #_modify_groups should run ok: 4ms
2022-06-21T23:44:35.4570201Z     DiscoveryHandler #_modify_groups should convert ledgerHeight: 
2022-06-21T23:44:35.4571637Z   ✔ DiscoveryHandler #_modify_groups should convert ledgerHeight: 5ms
2022-06-21T23:44:35.4631566Z     DiscoveryHandler #_create_map should run ok with undefined: 
2022-06-21T23:44:35.4633166Z   ✔ DiscoveryHandler #_create_map should run ok with undefined: 0ms
2022-06-21T23:44:35.4689714Z     DiscoveryHandler #_create_map should run ok with null: 
2022-06-21T23:44:35.4691212Z   ✔ DiscoveryHandler #_create_map should run ok with null: 0ms
2022-06-21T23:44:35.4749154Z     DiscoveryHandler #_create_map should run ok with string: 
2022-06-21T23:44:35.4750318Z   ✔ DiscoveryHandler #_create_map should run ok with string: 0ms
2022-06-21T23:44:35.4814063Z     DiscoveryHandler #_create_map should run ok with an array: 
2022-06-21T23:44:35.4815284Z   ✔ DiscoveryHandler #_create_map should run ok with an array: 0ms
2022-06-21T23:44:35.4872574Z     DiscoveryHandler #_removePeers should ignore endorsers and orgs: 
2022-06-21T23:44:35.4874034Z   ✔ DiscoveryHandler #_removePeers should ignore endorsers and orgs: 0ms
2022-06-21T23:44:35.4936107Z     DiscoveryHandler #_removePeers should require endorsers and orgs: 
2022-06-21T23:44:35.4937384Z   ✔ DiscoveryHandler #_removePeers should require endorsers and orgs: 1ms
2022-06-21T23:44:35.4997437Z     DiscoveryHandler #_findHighest should find highest: 
2022-06-21T23:44:35.4999491Z   ✔ DiscoveryHandler #_findHighest should find highest: 1ms
2022-06-21T23:44:35.5074789Z     DiscoveryHandler #_findHighest should throw: 
2022-06-21T23:44:35.5076276Z   ✔ DiscoveryHandler #_findHighest should throw: 1ms
2022-06-21T23:44:35.5167779Z     DiscoveryHandler #_sortPeerList should run all: 
2022-06-21T23:44:35.5169023Z   ✔ DiscoveryHandler #_sortPeerList should run all: 3ms
2022-06-21T23:44:35.5275923Z     DiscoveryHandler #_splitList should run all: 
2022-06-21T23:44:35.5277059Z   ✔ DiscoveryHandler #_splitList should run all: 5ms
2022-06-21T23:44:35.5397011Z     DiscoveryHandler #_splitList should run with no highest: 
2022-06-21T23:44:35.5398572Z   ✔ DiscoveryHandler #_splitList should run with no highest: 3ms
2022-06-21T23:44:35.5459232Z     DiscoveryHandler #_getRandom should run with peer list: 
2022-06-21T23:44:35.5460348Z   ✔ DiscoveryHandler #_getRandom should run with peer list: 1ms
2022-06-21T23:44:35.5522813Z     DiscoveryHandler #_getRandom should run with int list: 
2022-06-21T23:44:35.5523928Z   ✔ DiscoveryHandler #_getRandom should run with int list: 0ms
2022-06-21T23:44:35.5594261Z     DiscoveryHandler #compareProposalResponseResults should require a proposalResponses: 
2022-06-21T23:44:35.5595511Z   ✔ DiscoveryHandler #compareProposalResponseResults should require a proposalResponses: 1ms
2022-06-21T23:44:35.5660845Z     DiscoveryHandler #compareProposalResponseResults should require an array of proposalResponses: 
2022-06-21T23:44:35.5662772Z   ✔ DiscoveryHandler #compareProposalResponseResults should require an array of proposalResponses: 0ms
2022-06-21T23:44:35.5742801Z     DiscoveryHandler #compareProposalResponseResults should require an array of proposalResponses 2: 
2022-06-21T23:44:35.5744493Z   ✔ DiscoveryHandler #compareProposalResponseResults should require an array of proposalResponses 2: 0ms
2022-06-21T23:44:35.5821433Z     DiscoveryHandler #compareProposalResponseResults if proposalResponses has any error return false: 
2022-06-21T23:44:35.5822474Z   ✔ DiscoveryHandler #compareProposalResponseResults if proposalResponses has any error return false: 0ms
2022-06-21T23:44:35.5885701Z     DiscoveryHandler #compareProposalResponseResults if only one proposalResponses return true: 
2022-06-21T23:44:35.5886918Z   ✔ DiscoveryHandler #compareProposalResponseResults if only one proposalResponses return true: 1ms
2022-06-21T23:44:35.5955557Z     DiscoveryHandler #compareProposalResponseResults if two same proposalResponses return true: 
2022-06-21T23:44:35.5956547Z   ✔ DiscoveryHandler #compareProposalResponseResults if two same proposalResponses return true: 1ms
2022-06-21T23:44:35.6020461Z     DiscoveryHandler #compareProposalResponseResults if two not same proposalResponses return false: 
2022-06-21T23:44:35.6021920Z   ✔ DiscoveryHandler #compareProposalResponseResults if two not same proposalResponses return false: 0ms
2022-06-21T23:44:35.6081557Z     DiscoveryHandler #_getProposalResponseResults should require a proposalResponse: 
2022-06-21T23:44:35.6082697Z   ✔ DiscoveryHandler #_getProposalResponseResults should require a proposalResponse: 0ms
2022-06-21T23:44:35.6291969Z     DiscoveryHandler #_getProposalResponseResults should require a proposalResponse.payload: 
2022-06-21T23:44:35.6293162Z   ✔ DiscoveryHandler #_getProposalResponseResults should require a proposalResponse.payload: 1ms
2022-06-21T23:44:35.6345447Z     DiscoveryService #constructor should require a name: 
2022-06-21T23:44:35.6346104Z   ✔ DiscoveryService #constructor should require a name: 0ms
2022-06-21T23:44:35.6346542Z     DiscoveryService #constructor should require a Channel: 
2022-06-21T23:44:35.6347075Z   ✔ DiscoveryService #constructor should require a Channel: 0ms
2022-06-21T23:44:35.6347471Z     DiscoveryService #constructor should create: 
2022-06-21T23:44:35.6347953Z   ✔ DiscoveryService #constructor should create: 0ms
2022-06-21T23:44:35.6348367Z     DiscoveryService #setTargets should require targets: 
2022-06-21T23:44:35.6348919Z   ✔ DiscoveryService #setTargets should require targets: 0ms
2022-06-21T23:44:35.6349351Z     DiscoveryService #setTargets should require targets as an array: 
2022-06-21T23:44:35.6349919Z   ✔ DiscoveryService #setTargets should require targets as an array: 0ms
2022-06-21T23:44:35.6350759Z     DiscoveryService #setTargets should require targets when array is empty: 
2022-06-21T23:44:35.6351382Z   ✔ DiscoveryService #setTargets should require targets when array is empty: 0ms
2022-06-21T23:44:35.6377148Z     DiscoveryService #setTargets should throw when target not connected: 
2022-06-21T23:44:35.6377902Z   ✔ DiscoveryService #setTargets should throw when target not connected: 0ms
2022-06-21T23:44:35.6437177Z     DiscoveryService #setTargets should handle connected target: 
2022-06-21T23:44:35.6437854Z   ✔ DiscoveryService #setTargets should handle connected target: 1ms
2022-06-21T23:44:35.6488631Z     DiscoveryService #setTargets should handle connectable target: 
2022-06-21T23:44:35.6489668Z   ✔ DiscoveryService #setTargets should handle connectable target: 1ms
2022-06-21T23:44:35.6527113Z     DiscoveryService #newHandler should return new handler: 
2022-06-21T23:44:35.6527755Z   ✔ DiscoveryService #newHandler should return new handler: 1ms
2022-06-21T23:44:35.6570718Z     DiscoveryService #build should require a idContext: 
2022-06-21T23:44:35.6571346Z   ✔ DiscoveryService #build should require a idContext: 1ms
2022-06-21T23:44:35.6608334Z     DiscoveryService #build should require an interest endorsement: 
2022-06-21T23:44:35.6609039Z   ✔ DiscoveryService #build should require an interest endorsement: 1ms
2022-06-21T23:44:35.6642822Z     DiscoveryService #build should build with default options: 
2022-06-21T23:44:35.6643493Z   ✔ DiscoveryService #build should build with default options: 1ms
2022-06-21T23:44:35.6710636Z     DiscoveryService #build should build with a config option: 
2022-06-21T23:44:35.6711322Z   ✔ DiscoveryService #build should build with a config option: 1ms
2022-06-21T23:44:35.6746221Z     DiscoveryService #build should build with a local option: 
2022-06-21T23:44:35.6746877Z   ✔ DiscoveryService #build should build with a local option: 2ms
2022-06-21T23:44:35.6802003Z     DiscoveryService #build should build with an endorsement option: 
2022-06-21T23:44:35.6803154Z   ✔ DiscoveryService #build should build with an endorsement option: 2ms
2022-06-21T23:44:35.6852855Z     DiscoveryService #build should build with an interest option with user chaincode: 
2022-06-21T23:44:35.6854333Z   ✔ DiscoveryService #build should build with an interest option with user chaincode: 1ms
2022-06-21T23:44:35.6890620Z     DiscoveryService #build should build with an interest option with system chaincode qscc: 
2022-06-21T23:44:35.6892042Z   ✔ DiscoveryService #build should build with an interest option with system chaincode qscc: 1ms
2022-06-21T23:44:35.6949712Z     DiscoveryService #build should build with an interest option with system chaincode cscc: 
2022-06-21T23:44:35.6951710Z   ✔ DiscoveryService #build should build with an interest option with system chaincode cscc: 1ms
2022-06-21T23:44:35.6976487Z     DiscoveryService #build should build with an interest option with system chaincode lscc: 
2022-06-21T23:44:35.6977812Z   ✔ DiscoveryService #build should build with an interest option with system chaincode lscc: 1ms
2022-06-21T23:44:35.7121833Z     DiscoveryService #send throws if targets is missing: 
2022-06-21T23:44:35.7123101Z   ✔ DiscoveryService #send throws if targets is missing: 9ms
2022-06-21T23:44:35.7260548Z     DiscoveryService #send throws if targets is not an array: 
2022-06-21T23:44:35.7261528Z   ✔ DiscoveryService #send throws if targets is not an array: 9ms
2022-06-21T23:44:35.7369996Z     DiscoveryService #send throws if targets is an empty array: 
2022-06-21T23:44:35.7371094Z   ✔ DiscoveryService #send throws if targets is an empty array: 7ms
2022-06-21T23:44:35.7406200Z     DiscoveryService #send throws no results if targets is not missing: 
2022-06-21T23:44:35.7407158Z   ✔ DiscoveryService #send throws no results if targets is not missing: 6ms
2022-06-21T23:44:35.7492003Z     DiscoveryService #send should be able to handle result error: 
2022-06-21T23:44:35.7493245Z   ✔ DiscoveryService #send should be able to handle result error: 5ms
2022-06-21T23:44:35.7636296Z     DiscoveryService #send should be able to handle rejected error: 
2022-06-21T23:44:35.7637704Z   ✔ DiscoveryService #send should be able to handle rejected error: 8ms
2022-06-21T23:44:35.7741416Z     DiscoveryService #send throws no results if results includes and error: 
2022-06-21T23:44:35.7742804Z   ✔ DiscoveryService #send throws no results if results includes and error: 8ms
2022-06-21T23:44:35.7936364Z     DiscoveryService #send handle results from config with preexist target: 
2022-06-21T23:44:35.7938052Z   ✔ DiscoveryService #send handle results from config with preexist target: 16ms
2022-06-21T23:44:35.8079004Z     DiscoveryService #send handle results from config: 
2022-06-21T23:44:35.8080411Z   ✔ DiscoveryService #send handle results from config: 12ms
2022-06-21T23:44:35.8202970Z     DiscoveryService #send handle results from config with no orderers: 
2022-06-21T23:44:35.8204139Z   ✔ DiscoveryService #send handle results from config with no orderers: 8ms
2022-06-21T23:44:35.8384100Z     DiscoveryService #send handle results from config if endorser exist: 
2022-06-21T23:44:35.8385392Z   ✔ DiscoveryService #send handle results from config if endorser exist: 14ms
2022-06-21T23:44:35.8642398Z     DiscoveryService #send handle results with members: 
2022-06-21T23:44:35.8646001Z   ✔ DiscoveryService #send handle results with members: 19ms
2022-06-21T23:44:35.8811065Z     DiscoveryService #send handle results with bad members: 
2022-06-21T23:44:35.8813626Z   ✔ DiscoveryService #send handle results with bad members: 14ms
2022-06-21T23:44:35.9014660Z     DiscoveryService #send handle results with chaincode query res: 
2022-06-21T23:44:35.9016078Z   ✔ DiscoveryService #send handle results with chaincode query res: 17ms
2022-06-21T23:44:35.9046736Z     DiscoveryService #getDiscoveryResults should close no targets: 
2022-06-21T23:44:35.9048041Z   ✔ DiscoveryService #getDiscoveryResults should close no targets: 1ms
2022-06-21T23:44:35.9078737Z     DiscoveryService #getDiscoveryResults should try to resend: 
2022-06-21T23:44:35.9079731Z   ✔ DiscoveryService #getDiscoveryResults should try to resend: 1ms
2022-06-21T23:44:35.9106070Z     DiscoveryService #getDiscoveryResults should not resend: 
2022-06-21T23:44:35.9107300Z   ✔ DiscoveryService #getDiscoveryResults should not resend: 1ms
2022-06-21T23:44:35.9186434Z     DiscoveryService #getDiscoveryResults should return savedResults: 
2022-06-21T23:44:35.9187460Z   ✔ DiscoveryService #getDiscoveryResults should return savedResults: 6ms
2022-06-21T23:44:35.9214148Z     DiscoveryService #hasDiscoveryResults should return false: 
2022-06-21T23:44:35.9215421Z   ✔ DiscoveryService #hasDiscoveryResults should return false: 0ms
2022-06-21T23:44:35.9240915Z     DiscoveryService #hasDiscoveryResults should return true: 
2022-06-21T23:44:35.9241934Z   ✔ DiscoveryService #hasDiscoveryResults should return true: 0ms
2022-06-21T23:44:35.9266451Z     DiscoveryService #close should close no targets: 
2022-06-21T23:44:35.9270600Z   ✔ DiscoveryService #close should close no targets: 0ms
2022-06-21T23:44:35.9324825Z     DiscoveryService #close should close all targets: 
2022-06-21T23:44:35.9325619Z   ✔ DiscoveryService #close should close all targets: 1ms
2022-06-21T23:44:35.9358127Z     DiscoveryService #toString should return string: 
2022-06-21T23:44:35.9359027Z   ✔ DiscoveryService #toString should return string: 0ms
2022-06-21T23:44:35.9389615Z     DiscoveryService #_buildProtoChaincodeInterest should handle no interest: 
2022-06-21T23:44:35.9391104Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle no interest: 0ms
2022-06-21T23:44:35.9418688Z     DiscoveryService #_buildProtoChaincodeInterest should handle one chaincode: 
2022-06-21T23:44:35.9419711Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle one chaincode: 0ms
2022-06-21T23:44:35.9462187Z     DiscoveryService #_buildProtoChaincodeInterest should handle one chaincode one collection: 
2022-06-21T23:44:35.9463336Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle one chaincode one collection: 0ms
2022-06-21T23:44:35.9478566Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincodes: 
2022-06-21T23:44:35.9479702Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincodes: 0ms
2022-06-21T23:44:35.9506575Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode two collection: 
2022-06-21T23:44:35.9507755Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode two collection: 0ms
2022-06-21T23:44:35.9537390Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection: 
2022-06-21T23:44:35.9538796Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection: 0ms
2022-06-21T23:44:35.9569974Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection in camel case: 
2022-06-21T23:44:35.9571666Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection in camel case: 0ms
2022-06-21T23:44:35.9600546Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection in camel case: 
2022-06-21T23:44:35.9601660Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincode four collection in camel case: 0ms
2022-06-21T23:44:35.9629491Z     DiscoveryService #_buildProtoChaincodeInterest should handle two chaincodes same name: 
2022-06-21T23:44:35.9630557Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should handle two chaincodes same name: 0ms
2022-06-21T23:44:35.9661858Z     DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 
2022-06-21T23:44:35.9662800Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 0ms
2022-06-21T23:44:35.9692534Z     DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 
2022-06-21T23:44:35.9693491Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 0ms
2022-06-21T23:44:35.9722067Z     DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 
2022-06-21T23:44:35.9722975Z   ✔ DiscoveryService #_buildProtoChaincodeInterest should require a idContext: 0ms
2022-06-21T23:44:35.9752583Z     DiscoveryService #_buildUrl should handle no parms: 
2022-06-21T23:44:35.9753759Z   ✔ DiscoveryService #_buildUrl should handle no parms: 0ms
2022-06-21T23:44:35.9782463Z     DiscoveryService #_buildUrl should handle no parms: 
2022-06-21T23:44:35.9783071Z   ✔ DiscoveryService #_buildUrl should handle no parms: 0ms
2022-06-21T23:44:35.9815889Z     DiscoveryService #_buildUrl should handle as localhost: 
2022-06-21T23:44:35.9816536Z   ✔ DiscoveryService #_buildUrl should handle as localhost: 1ms
2022-06-21T23:44:35.9845349Z     DiscoveryService #_buildUrl should handle not as localhost: 
2022-06-21T23:44:35.9845960Z   ✔ DiscoveryService #_buildUrl should handle not as localhost: 1ms
2022-06-21T23:44:35.9875886Z     DiscoveryService #_buildUrl should handle current target as: 
2022-06-21T23:44:35.9876757Z   ✔ DiscoveryService #_buildUrl should handle current target as: 1ms
2022-06-21T23:44:35.9911225Z     DiscoveryService #_buildUrl should handle override setting: 
2022-06-21T23:44:35.9912068Z   ✔ DiscoveryService #_buildUrl should handle override setting: 0ms
2022-06-21T23:44:35.9946882Z     DiscoveryService #_buildTlsRootCerts should handle no parms: 
2022-06-21T23:44:35.9947517Z   ✔ DiscoveryService #_buildTlsRootCerts should handle no parms: 1ms
2022-06-21T23:44:35.9977726Z     DiscoveryService #_buildTlsRootCerts should handle missing mspid when no msps: 
2022-06-21T23:44:35.9978502Z   ✔ DiscoveryService #_buildTlsRootCerts should handle missing mspid when no msps: 1ms
2022-06-21T23:44:36.0008044Z     DiscoveryService #_buildTlsRootCerts should handle missing mspid when not in msps: 
2022-06-21T23:44:36.0008820Z   ✔ DiscoveryService #_buildTlsRootCerts should handle missing mspid when not in msps: 1ms
2022-06-21T23:44:36.0039516Z     DiscoveryService #_buildTlsRootCerts should handle mspid when in msps: 
2022-06-21T23:44:36.0040188Z   ✔ DiscoveryService #_buildTlsRootCerts should handle mspid when in msps: 0ms
2022-06-21T23:44:36.0071227Z     DiscoveryService #_buildTlsRootCerts should handle mspid when in msps and no certs: 
2022-06-21T23:44:36.0072034Z   ✔ DiscoveryService #_buildTlsRootCerts should handle mspid when in msps and no certs: 0ms
2022-06-21T23:44:36.0105489Z     DiscoveryService #_buildOrderers should handle no parms: 
2022-06-21T23:44:36.0106141Z   ✔ DiscoveryService #_buildOrderers should handle no parms: 1ms
2022-06-21T23:44:36.0150492Z     DiscoveryService #_buildOrderers should run: 
2022-06-21T23:44:36.0152232Z   ✔ DiscoveryService #_buildOrderers should run: 2ms
2022-06-21T23:44:36.0191742Z     DiscoveryService #_buildOrderers should remove old orderers from channel: 
2022-06-21T23:44:36.0192465Z   ✔ DiscoveryService #_buildOrderers should remove old orderers from channel: 1ms
2022-06-21T23:44:36.0236747Z     DiscoveryService #_buildOrderer should run: 
2022-06-21T23:44:36.0237992Z   ✔ DiscoveryService #_buildOrderer should run: 2ms
2022-06-21T23:44:36.0308359Z     DiscoveryService #_buildOrderer should throw connect error: 
2022-06-21T23:44:36.0309012Z   ✔ DiscoveryService #_buildOrderer should throw connect error: 1ms
2022-06-21T23:44:36.0357637Z     DiscoveryService #_buildOrderer should handle found same name committer on the channel: 
2022-06-21T23:44:36.0358597Z   ✔ DiscoveryService #_buildOrderer should handle found same name committer on the channel: 2ms
2022-06-21T23:44:36.0409425Z     DiscoveryService #_buildPeer should handle no parms: 
2022-06-21T23:44:36.0410092Z   ✔ DiscoveryService #_buildPeer should handle no parms: 0ms
2022-06-21T23:44:36.0459466Z     DiscoveryService #_buildPeer should handle found same name endorser on the channel: 
2022-06-21T23:44:36.0460590Z   ✔ DiscoveryService #_buildPeer should handle found same name endorser on the channel: 2ms
2022-06-21T23:44:36.0505273Z     DiscoveryService #_buildPeer should run: 
2022-06-21T23:44:36.0505850Z   ✔ DiscoveryService #_buildPeer should run: 2ms
2022-06-21T23:44:36.0564529Z     DiscoveryService #_buildPeer should handle endorser not connect: 
2022-06-21T23:44:36.0565258Z   ✔ DiscoveryService #_buildPeer should handle endorser not connect: 3ms
2022-06-21T23:44:36.0613077Z     DiscoveryService #_buildPeer should handle found same name endorser on the channel: 
2022-06-21T23:44:36.0613867Z   ✔ DiscoveryService #_buildPeer should handle found same name endorser on the channel: 2ms
2022-06-21T23:44:36.0653231Z     DiscoveryService #_buildPeer should handle found same name endorser on the channel and add chaincodes: 
2022-06-21T23:44:36.0655195Z   ✔ DiscoveryService #_buildPeer should handle found same name endorser on the channel and add chaincodes: 2ms
2022-06-21T23:44:36.0691256Z     DiscoveryService #_processConfig should handle no parms: 
2022-06-21T23:44:36.0692242Z   ✔ DiscoveryService #_processConfig should handle no parms: 0ms
2022-06-21T23:44:36.0725034Z     DiscoveryService #_processConfig should handle no msps: 
2022-06-21T23:44:36.0725969Z   ✔ DiscoveryService #_processConfig should handle no msps: 1ms
2022-06-21T23:44:36.0770592Z     DiscoveryService #_processConfig should handle no msps: 
2022-06-21T23:44:36.0771588Z   ✔ DiscoveryService #_processConfig should handle no msps: 1ms
2022-06-21T23:44:36.0801228Z     DiscoveryService #_processChaincode should throw error if plans are bad: 
2022-06-21T23:44:36.0802297Z   ✔ DiscoveryService #_processChaincode should throw error if plans are bad: 0ms
2022-06-21T23:44:36.0856628Z     DiscoveryService #_processPeers should handle missing endorser state info: 
2022-06-21T23:44:36.0858216Z   ✔ DiscoveryService #_processPeers should handle missing endorser state info: 2ms
2022-06-21T23:44:36.0887429Z     DiscoveryService #_processMembership should handle missing endorser by org: 
2022-06-21T23:44:36.0888582Z   ✔ DiscoveryService #_processMembership should handle missing endorser by org: 1ms
2022-06-21T23:44:36.0901105Z     Endorsement #constructor should require a name: 
2022-06-21T23:44:36.0901997Z   ✔ Endorsement #constructor should require a name: 0ms
2022-06-21T23:44:36.0911780Z     Endorsement #constructor should require a Channel: 
2022-06-21T23:44:36.0912732Z   ✔ Endorsement #constructor should require a Channel: 0ms
2022-06-21T23:44:36.0920710Z     Endorsement #constructor should create: 
2022-06-21T23:44:36.0921792Z   ✔ Endorsement #constructor should create: 0ms
2022-06-21T23:44:36.0944699Z     Endorsement #newCommit should return string: 
2022-06-21T23:44:36.0945607Z   ✔ Endorsement #newCommit should return string: 0ms
2022-06-21T23:44:36.0948459Z     Endorsement #toString should return string: 
2022-06-21T23:44:36.0949293Z   ✔ Endorsement #toString should return string: 0ms
2022-06-21T23:44:36.0957200Z     Endorser #constructor should require name: 
2022-06-21T23:44:36.0958069Z   ✔ Endorser #constructor should require name: 0ms
2022-06-21T23:44:36.0970650Z     Endorser #constructor should require client: 
2022-06-21T23:44:36.0971802Z   ✔ Endorser #constructor should require client: 0ms
2022-06-21T23:44:36.1049388Z     Endorser #addChaincode should run without name: 
2022-06-21T23:44:36.1050615Z   ✔ Endorser #addChaincode should run without name: 0ms
2022-06-21T23:44:36.1063942Z     Endorser #addChaincode should run with name: 
2022-06-21T23:44:36.1064848Z   ✔ Endorser #addChaincode should run with name: 1ms
2022-06-21T23:44:36.1076635Z     Endorser #addChaincode should run with same name: 
2022-06-21T23:44:36.1077819Z   ✔ Endorser #addChaincode should run with same name: 0ms
2022-06-21T23:44:36.1089919Z     Endorser #addChaincode should run with different name: 
2022-06-21T23:44:36.1091573Z   ✔ Endorser #addChaincode should run with different name: 0ms
2022-06-21T23:44:36.1105856Z     Endorser #hasChaincode should be false without name and not discovered: 
2022-06-21T23:44:36.1107288Z   ✔ Endorser #hasChaincode should be false without name and not discovered: 0ms
2022-06-21T23:44:36.1118691Z     Endorser #hasChaincode should be false without name and discovered: 
2022-06-21T23:44:36.1119926Z   ✔ Endorser #hasChaincode should be false without name and discovered: 0ms
2022-06-21T23:44:36.1131015Z     Endorser #hasChaincode should be true with name and not discovered: 
2022-06-21T23:44:36.1132285Z   ✔ Endorser #hasChaincode should be true with name and not discovered: 0ms
2022-06-21T23:44:36.1144645Z     Endorser #hasChaincode should be false with name and no chaincodes discovered: 
2022-06-21T23:44:36.1145917Z   ✔ Endorser #hasChaincode should be false with name and no chaincodes discovered: 1ms
2022-06-21T23:44:36.1157199Z     Endorser #hasChaincode should be true with name and found and not discovered: 
2022-06-21T23:44:36.1158512Z   ✔ Endorser #hasChaincode should be true with name and found and not discovered: 0ms
2022-06-21T23:44:36.1171268Z     Endorser #hasChaincode should be true with name and found and discovered: 
2022-06-21T23:44:36.1172569Z   ✔ Endorser #hasChaincode should be true with name and found and discovered: 0ms
2022-06-21T23:44:36.1183767Z     Endorser #hasChaincode should be true with name and found using "maybe" and not discovered: 
2022-06-21T23:44:36.1185130Z   ✔ Endorser #hasChaincode should be true with name and found using "maybe" and not discovered: 1ms
2022-06-21T23:44:36.1195868Z     Endorser #hasChaincode should be true with name and found using "maybe" and discovered: 
2022-06-21T23:44:36.1197196Z   ✔ Endorser #hasChaincode should be true with name and found using "maybe" and discovered: 0ms
2022-06-21T23:44:36.1215087Z     Endorser #sendProposal should reject if no proposal: 
2022-06-21T23:44:36.1216080Z   ✔ Endorser #sendProposal should reject if no proposal: 1ms
2022-06-21T23:44:36.1229477Z     Endorser #sendProposal should reject if not connected: 
2022-06-21T23:44:36.1230854Z   ✔ Endorser #sendProposal should reject if not connected: 0ms
2022-06-21T23:44:36.1262943Z     Endorser #sendProposal should reject on timeout: 
2022-06-21T23:44:36.1264138Z   ✔ Endorser #sendProposal should reject on timeout: 2ms
2022-06-21T23:44:36.1283267Z     Endorser #sendProposal should reject Error object on proposal response error string: 
2022-06-21T23:44:36.1284362Z   ✔ Endorser #sendProposal should reject Error object on proposal response error string: 0ms
2022-06-21T23:44:36.1302038Z     Endorser #sendProposal should reject Error object on send response error object: 
2022-06-21T23:44:36.1303706Z   ✔ Endorser #sendProposal should reject Error object on send response error object: 0ms
2022-06-21T23:44:36.1319746Z     Endorser #sendProposal should eject on undefined proposal response: 
2022-06-21T23:44:36.1321175Z   ✔ Endorser #sendProposal should eject on undefined proposal response: 1ms
2022-06-21T23:44:36.1339185Z     Endorser #sendProposal should log and reject on invalid proposal response: 
2022-06-21T23:44:36.1340469Z   ✔ Endorser #sendProposal should log and reject on invalid proposal response: 1ms
2022-06-21T23:44:36.1364323Z     Endorser #sendProposal should reject on proposal response error status greater than or equal to 400: 
2022-06-21T23:44:36.1365800Z   ✔ Endorser #sendProposal should reject on proposal response error status greater than or equal to 400: 1ms
2022-06-21T23:44:36.1383498Z     Endorser #sendProposal should resolve on valid proposal response: 
2022-06-21T23:44:36.1384515Z   ✔ Endorser #sendProposal should resolve on valid proposal response: 0ms
2022-06-21T23:44:36.1398817Z     Endorser #sendProposal should mark errors from chaincode as proposal response: 
2022-06-21T23:44:36.1399936Z   ✔ Endorser #sendProposal should mark errors from chaincode as proposal response: 1ms
2022-06-21T23:44:36.1427914Z     Endorser #sendProposal should not mark errors as proposal response if not a proposal response: 
2022-06-21T23:44:36.1429540Z   ✔ Endorser #sendProposal should not mark errors as proposal response if not a proposal response: 2ms
2022-06-21T23:44:36.1441294Z     Endpoint #constructor should require an options: 
2022-06-21T23:44:36.1442181Z   ✔ Endpoint #constructor should require an options: 0ms
2022-06-21T23:44:36.1450919Z     Endpoint #constructor should require a url: 
2022-06-21T23:44:36.1451760Z   ✔ Endpoint #constructor should require a url: 0ms
2022-06-21T23:44:36.1459393Z     Endpoint #constructor should require a valid url: 
2022-06-21T23:44:36.1460264Z   ✔ Endpoint #constructor should require a valid url: 1ms
2022-06-21T23:44:36.1465169Z     Endpoint #constructor should require a valid url: 
2022-06-21T23:44:36.1466024Z   ✔ Endpoint #constructor should require a valid url: 1ms
2022-06-21T23:44:36.1473797Z     Endpoint #constructor should work using a pem with grpcs: 
2022-06-21T23:44:36.1474705Z   ✔ Endpoint #constructor should work using a pem with grpcs: 1ms
2022-06-21T23:44:36.1481221Z     Endpoint #constructor should work using a grpc: 
2022-06-21T23:44:36.1482405Z   ✔ Endpoint #constructor should work using a grpc: 0ms
2022-06-21T23:44:36.1489349Z     Endpoint #constructor should work using a grpc and no port: 
2022-06-21T23:44:36.1490730Z   ✔ Endpoint #constructor should work using a grpc and no port: 0ms
2022-06-21T23:44:36.1498808Z     Endpoint #constructor should require a valid url: 
2022-06-21T23:44:36.1499657Z   ✔ Endpoint #constructor should require a valid url: 0ms
2022-06-21T23:44:36.1509758Z     Endpoint #constructor should require a valid url: 
2022-06-21T23:44:36.1510645Z   ✔ Endpoint #constructor should require a valid url: 1ms
2022-06-21T23:44:36.1519589Z     Endpoint #constructor should work using a pem with grpcs: 
2022-06-21T23:44:36.1520428Z   ✔ Endpoint #constructor should work using a pem with grpcs: 0ms
2022-06-21T23:44:36.1528707Z     Endpoint #isTLS should return false: 
2022-06-21T23:44:36.1529519Z   ✔ Endpoint #isTLS should return false: 0ms
2022-06-21T23:44:36.1537299Z     Endpoint #isTLS should return true: 
2022-06-21T23:44:36.1538351Z   ✔ Endpoint #isTLS should return true: 1ms
2022-06-21T23:44:36.1555524Z     Endpoint #toString should return string: 
2022-06-21T23:44:36.1556427Z   ✔ Endpoint #toString should return string: 1ms
2022-06-21T23:44:36.1640269Z     Eventer #constructor should require name: 
2022-06-21T23:44:36.1641342Z   ✔ Eventer #constructor should require name: 0ms
2022-06-21T23:44:36.1664275Z     Eventer #constructor should require client: 
2022-06-21T23:44:36.1672909Z   ✔ Eventer #constructor should require client: 0ms
2022-06-21T23:44:36.1693381Z     Eventer #disconnect should run when not connected: 
2022-06-21T23:44:36.1694517Z   ✔ Eventer #disconnect should run when not connected: 0ms
2022-06-21T23:44:36.1716074Z     Eventer #disconnect should disconnect: 
2022-06-21T23:44:36.1717074Z   ✔ Eventer #disconnect should disconnect: 1ms
2022-06-21T23:44:36.1745347Z     Eventer #checkConnection should return true when connected start true with reset (default): 
2022-06-21T23:44:36.1746644Z   ✔ Eventer #checkConnection should return true when connected start true with reset (default): 1ms
2022-06-21T23:44:36.1766739Z     Eventer #checkConnection should return true when connected start false with no reset: 
2022-06-21T23:44:36.1768094Z   ✔ Eventer #checkConnection should return true when connected start false with no reset: 1ms
2022-06-21T23:44:36.1850241Z     Eventer #checkConnection should return true with waitForReady throws with reset: 
2022-06-21T23:44:36.1851576Z   ✔ Eventer #checkConnection should return true with waitForReady throws with reset: 6ms
2022-06-21T23:44:36.1879501Z     Eventer #checkConnection should return true with waitForReady sets connected true: 
2022-06-21T23:44:36.1880573Z   ✔ Eventer #checkConnection should return true with waitForReady sets connected true: 1ms
2022-06-21T23:44:36.1908938Z     Eventer #checkConnection should return true with waitForReady false resetConnection false: 
2022-06-21T23:44:36.1910042Z   ✔ Eventer #checkConnection should return true with waitForReady false resetConnection false: 1ms
2022-06-21T23:44:36.1934089Z     Eventer #checkConnection should return true with waitForReady false resetConnection true: 
2022-06-21T23:44:36.1935528Z   ✔ Eventer #checkConnection should return true with waitForReady false resetConnection true: 0ms
2022-06-21T23:44:36.1996766Z     Eventer #checkConnection should return true with connected false resetConnection false: 
2022-06-21T23:44:36.1998005Z   ✔ Eventer #checkConnection should return true with connected false resetConnection false: 1ms
2022-06-21T23:44:36.2001400Z     Eventer #checkConnection should return true with connected false resetConnection true: 
2022-06-21T23:44:36.2003132Z   ✔ Eventer #checkConnection should return true with connected false resetConnection true: 1ms
2022-06-21T23:44:36.2026131Z     Eventer #isStreamReady should return true when paused and resumed: 
2022-06-21T23:44:36.2027073Z   ✔ Eventer #isStreamReady should return true when paused and resumed: 0ms
2022-06-21T23:44:36.2055307Z     Eventer #isStreamReady should return true when not paused: 
2022-06-21T23:44:36.2056305Z   ✔ Eventer #isStreamReady should return true when not paused: 0ms
2022-06-21T23:44:36.2073931Z     Eventer #isStreamReady should return false when not paused and stream not readable: 
2022-06-21T23:44:36.2075009Z   ✔ Eventer #isStreamReady should return false when not paused and stream not readable: 0ms
2022-06-21T23:44:36.2093172Z     Eventer #isStreamReady should return false when stream does not exist: 
2022-06-21T23:44:36.2094259Z   ✔ Eventer #isStreamReady should return false when stream does not exist: 0ms
2022-06-21T23:44:36.2115057Z     Eventer #setStreamByType should setStreamByType FILTERED_BLOCK : 
2022-06-21T23:44:36.2116384Z   ✔ Eventer #setStreamByType should setStreamByType FILTERED_BLOCK : 1ms
2022-06-21T23:44:36.2135507Z     Eventer #setStreamByType should setStreamByType FULL_BLOCK : 
2022-06-21T23:44:36.2136584Z   ✔ Eventer #setStreamByType should setStreamByType FULL_BLOCK : 1ms
2022-06-21T23:44:36.2154816Z     Eventer #setStreamByType should setStreamByType PRIVATE_BLOCK : 
2022-06-21T23:44:36.2156054Z   ✔ Eventer #setStreamByType should setStreamByType PRIVATE_BLOCK : 1ms
2022-06-21T23:44:36.2176956Z     Eventer #setStreamByType should not setStreamByType with null: 
2022-06-21T23:44:36.2178981Z   ✔ Eventer #setStreamByType should not setStreamByType with null: 0ms
2022-06-21T23:44:36.2195353Z     Eventer #setStreamByType should not setStreamByType with unknown: 
2022-06-21T23:44:36.2196446Z   ✔ Eventer #setStreamByType should not setStreamByType with unknown: 1ms
2022-06-21T23:44:36.2203011Z     EventListener #constructor should require a listenerType: 
2022-06-21T23:44:36.2204256Z   ✔ EventListener #constructor should require a listenerType: 0ms
2022-06-21T23:44:36.2207004Z     EventListener #constructor should require a listenerType: 
2022-06-21T23:44:36.2208034Z   ✔ EventListener #constructor should require a listenerType: 0ms
2022-06-21T23:44:36.2210762Z     EventListener #constructor should require a callback: 
2022-06-21T23:44:36.2211631Z   ✔ EventListener #constructor should require a callback: 0ms
2022-06-21T23:44:36.2215550Z     EventListener #constructor should require an event: 
2022-06-21T23:44:36.2216428Z   ✔ EventListener #constructor should require an event: 1ms
2022-06-21T23:44:36.2219973Z     EventListener #constructor should require an event: 
2022-06-21T23:44:36.2220912Z   ✔ EventListener #constructor should require an event: 0ms
2022-06-21T23:44:36.2223598Z     EventListener #constructor should default block listener: 
2022-06-21T23:44:36.2224441Z   ✔ EventListener #constructor should default block listener: 1ms
2022-06-21T23:44:36.2226827Z     EventListener #constructor should default tx listener: 
2022-06-21T23:44:36.2227736Z   ✔ EventListener #constructor should default tx listener: 0ms
2022-06-21T23:44:36.2230314Z     EventListener #constructor should default chaincode listener: 
2022-06-21T23:44:36.2231209Z   ✔ EventListener #constructor should default chaincode listener: 0ms
2022-06-21T23:44:36.2234030Z     EventListener #constructor should with option block listener: 
2022-06-21T23:44:36.2234907Z   ✔ EventListener #constructor should with option block listener: 0ms
2022-06-21T23:44:36.2237485Z     EventListener #constructor should with option tx listener: 
2022-06-21T23:44:36.2238327Z   ✔ EventListener #constructor should with option tx listener: 0ms
2022-06-21T23:44:36.2240764Z     EventListener #constructor should with option chaincode listener: 
2022-06-21T23:44:36.2241626Z   ✔ EventListener #constructor should with option chaincode listener: 0ms
2022-06-21T23:44:36.2245831Z     EventListener #constructor should set start and end of block listener: 
2022-06-21T23:44:36.2246888Z   ✔ EventListener #constructor should set start and end of block listener: 1ms
2022-06-21T23:44:36.2255728Z     EventListener #onEvent call the onEvent with no hits on start or end: 
2022-06-21T23:44:36.2256872Z   ✔ EventListener #onEvent call the onEvent with no hits on start or end: 1ms
2022-06-21T23:44:36.2261887Z     EventListener #onEvent call the onEvent with a hit on start: 
2022-06-21T23:44:36.2262820Z   ✔ EventListener #onEvent call the onEvent with a hit on start: 0ms
2022-06-21T23:44:36.2297894Z     EventListener #onEvent call the onEvent with a hit on end: 
2022-06-21T23:44:36.2298862Z   ✔ EventListener #onEvent call the onEvent with a hit on end: 0ms
2022-06-21T23:44:36.2299857Z     EventListener #onEvent call the onEvent with an error: 
2022-06-21T23:44:36.2300654Z   ✔ EventListener #onEvent call the onEvent with an error: 0ms
2022-06-21T23:44:36.2301771Z     EventListener #onEvent have the callback throw an error: 
2022-06-21T23:44:36.2302514Z   ✔ EventListener #onEvent have the callback throw an error: 1ms
2022-06-21T23:44:36.2303383Z     EventListener #unregister should run: 
2022-06-21T23:44:36.2304062Z   ✔ EventListener #unregister should run: 1ms
2022-06-21T23:44:36.2306713Z     EventListener #toString should return string: 
2022-06-21T23:44:36.2307519Z   ✔ EventListener #toString should return string: 0ms
2022-06-21T23:44:36.2308629Z     EventListener #toString should return string: 
2022-06-21T23:44:36.2309450Z   ✔ EventListener #toString should return string: 0ms
2022-06-21T23:44:36.2330828Z     EventService #constructor should log on entry: 
2022-06-21T23:44:36.2331684Z   ✔ EventService #constructor should log on entry: 0ms
2022-06-21T23:44:36.2353194Z     EventService #constructor should throw if name arg not given: 
2022-06-21T23:44:36.2354326Z   ✔ EventService #constructor should throw if name arg not given: 0ms
2022-06-21T23:44:36.2372008Z     EventService #constructor should throw if channel arg not given: 
2022-06-21T23:44:36.2372902Z   ✔ EventService #constructor should throw if channel arg not given: 0ms
2022-06-21T23:44:36.2434798Z     EventService #constructor should create and have these settings by default: 
2022-06-21T23:44:36.2436292Z   ✔ EventService #constructor should create and have these settings by default: 1ms
2022-06-21T23:44:36.2437451Z     EventService #setTargets should require targets: 
2022-06-21T23:44:36.2438357Z   ✔ EventService #setTargets should require targets: 0ms
2022-06-21T23:44:36.2447564Z     EventService #setTargets should require targets as an array: 
2022-06-21T23:44:36.2448478Z   ✔ EventService #setTargets should require targets as an array: 0ms
2022-06-21T23:44:36.2469162Z     EventService #setTargets should require targets as an empty array: 
2022-06-21T23:44:36.2470655Z   ✔ EventService #setTargets should require targets as an empty array: 0ms
2022-06-21T23:44:36.2491346Z     EventService #setTargets should throw when target not connected: 
2022-06-21T23:44:36.2492325Z   ✔ EventService #setTargets should throw when target not connected: 0ms
2022-06-21T23:44:36.2512295Z     EventService #setTargets should handle connected target: 
2022-06-21T23:44:36.2513151Z   ✔ EventService #setTargets should handle connected target: 0ms
2022-06-21T23:44:36.2533416Z     EventService #setTargets should handle connectable target: 
2022-06-21T23:44:36.2534290Z   ✔ EventService #setTargets should handle connectable target: 0ms
2022-06-21T23:44:36.2596994Z     EventService #getLastBlockNumber should return null if no block seen: 
2022-06-21T23:44:36.2598001Z   ✔ EventService #getLastBlockNumber should return null if no block seen: 0ms
2022-06-21T23:44:36.2613828Z     EventService #getLastBlockNumber should return a long if it has been seen: 
2022-06-21T23:44:36.2614875Z   ✔ EventService #getLastBlockNumber should return a long if it has been seen: 0ms
2022-06-21T23:44:36.2634448Z     EventService #close should close: 
2022-06-21T23:44:36.2636328Z   ✔ EventService #close should close: 1ms
2022-06-21T23:44:36.2654288Z     EventService #_close should throw if reason_error arg not given: 
2022-06-21T23:44:36.2655371Z   ✔ EventService #_close should throw if reason_error arg not given: 0ms
2022-06-21T23:44:36.2672641Z     EventService #_close should see close is already running: 
2022-06-21T23:44:36.2673487Z   ✔ EventService #_close should see close is already running: 0ms
2022-06-21T23:44:36.2695431Z     EventService #_close should close without an eventer endpoint being assigned: 
2022-06-21T23:44:36.2696407Z   ✔ EventService #_close should close without an eventer endpoint being assigned: 1ms
2022-06-21T23:44:36.2718245Z     EventService #_close should close if the eventer assigned: 
2022-06-21T23:44:36.2719132Z   ✔ EventService #_close should close if the eventer assigned: 1ms
2022-06-21T23:44:36.2742455Z     EventService #build should require a idContext: 
2022-06-21T23:44:36.2743318Z   ✔ EventService #build should require a idContext: 0ms
2022-06-21T23:44:36.2772405Z     EventService #build startBlock not greater than endBlock: 
2022-06-21T23:44:36.2773543Z   ✔ EventService #build startBlock not greater than endBlock: 0ms
2022-06-21T23:44:36.2799410Z     EventService #build startBlock not greater than endBlock, newest is bigger than oldest: 
2022-06-21T23:44:36.2800436Z   ✔ EventService #build startBlock not greater than endBlock, newest is bigger than oldest: 1ms
2022-06-21T23:44:36.2821465Z     EventService #build startBlock not greater than endBlock, startBlock defaults to newest: 
2022-06-21T23:44:36.2823114Z   ✔ EventService #build startBlock not greater than endBlock, startBlock defaults to newest: 0ms
2022-06-21T23:44:36.2842192Z     EventService #build startBlock is not valid: 
2022-06-21T23:44:36.2843043Z   ✔ EventService #build startBlock is not valid: 0ms
2022-06-21T23:44:36.2863121Z     EventService #build endBlock is not valid: 
2022-06-21T23:44:36.2863936Z   ✔ EventService #build endBlock is not valid: 0ms
2022-06-21T23:44:36.2944421Z     EventService #build endBlock is not valid: 
2022-06-21T23:44:36.2945494Z   ✔ EventService #build endBlock is not valid: 0ms
2022-06-21T23:44:36.2946400Z     EventService #build blocktype must be a string: 
2022-06-21T23:44:36.2947314Z   ✔ EventService #build blocktype must be a string: 0ms
2022-06-21T23:44:36.2948164Z     EventService #build blocktype must be valid: 
2022-06-21T23:44:36.2949038Z   ✔ EventService #build blocktype must be valid: 0ms
2022-06-21T23:44:36.2968363Z     EventService #build blocktype full: 
2022-06-21T23:44:36.2968915Z   ✔ EventService #build blocktype full: 2ms
2022-06-21T23:44:36.2995848Z     EventService #build blocktype filtered: 
2022-06-21T23:44:36.2996685Z   ✔ EventService #build blocktype filtered: 1ms
2022-06-21T23:44:36.3021358Z     EventService #build blocktype private: 
2022-06-21T23:44:36.3022158Z   ✔ EventService #build blocktype private: 1ms
2022-06-21T23:44:36.3049859Z     EventService #build should build with default options: 
2022-06-21T23:44:36.3051017Z   ✔ EventService #build should build with default options: 1ms
2022-06-21T23:44:36.3078445Z     EventService #build should build with startBlock and endBlock as valid numbers: 
2022-06-21T23:44:36.3079379Z   ✔ EventService #build should build with startBlock and endBlock as valid numbers: 1ms
2022-06-21T23:44:36.3105655Z     EventService #build should build with startBlock and endBlock as valid numbers: 
2022-06-21T23:44:36.3106713Z   ✔ EventService #build should build with startBlock and endBlock as valid numbers: 1ms
2022-06-21T23:44:36.3133204Z     EventService #build should build with startBlock and endBlock as valid numbers: 
2022-06-21T23:44:36.3134402Z   ✔ EventService #build should build with startBlock and endBlock as valid numbers: 1ms
2022-06-21T23:44:36.3161821Z     EventService #build should build with startBlock and endBlock as valid strings: 
2022-06-21T23:44:36.3164129Z   ✔ EventService #build should build with startBlock and endBlock as valid strings: 1ms
2022-06-21T23:44:36.3188476Z     EventService #build should build with startBlock and endBlock as valid strings: 
2022-06-21T23:44:36.3189512Z   ✔ EventService #build should build with startBlock and endBlock as valid strings: 1ms
2022-06-21T23:44:36.3215006Z     EventService #build should build with startBlock and endBlock as valid strings: 
2022-06-21T23:44:36.3216242Z   ✔ EventService #build should build with startBlock and endBlock as valid strings: 1ms
2022-06-21T23:44:36.3238701Z     EventService #build should build with startBlock and endBlock as valid strings: 
2022-06-21T23:44:36.3239881Z   ✔ EventService #build should build with startBlock and endBlock as valid strings: 1ms
2022-06-21T23:44:36.3264746Z     EventService #build should build with startBlock and endBlock as valid strings: 
2022-06-21T23:44:36.3265752Z   ✔ EventService #build should build with startBlock and endBlock as valid strings: 1ms
2022-06-21T23:44:36.3287026Z     EventService #send throws if targets is missing: 
2022-06-21T23:44:36.3287905Z   ✔ EventService #send throws if targets is missing: 1ms
2022-06-21T23:44:36.3312671Z     EventService #send throws if eventer stream is running: 
2022-06-21T23:44:36.3313768Z   ✔ EventService #send throws if eventer stream is running: 0ms
2022-06-21T23:44:36.3347113Z     EventService #send throws if eventer is not connected: 
2022-06-21T23:44:36.3347989Z   ✔ EventService #send throws if eventer is not connected: 1ms
2022-06-21T23:44:36.3384801Z     EventService #send runs ok: 
2022-06-21T23:44:36.3385835Z   ✔ EventService #send runs ok: 2ms
2022-06-21T23:44:36.3439235Z     EventService #send rejects if not built and signed: 
2022-06-21T23:44:36.3440104Z   ✔ EventService #send rejects if not built and signed: 1ms
2022-06-21T23:44:36.3450642Z     EventService #send rejects and has failed stream message: 
2022-06-21T23:44:36.3451800Z   ✔ EventService #send rejects and has failed stream message: 1ms
2022-06-21T23:44:36.3611433Z     EventService #_startService throws timeout on stream: 
2022-06-21T23:44:36.3612685Z   ✔ EventService #_startService throws timeout on stream: 12ms
2022-06-21T23:44:36.3782227Z     EventService #_startService throws timeout on stream: 
2022-06-21T23:44:36.3783921Z   ✔ EventService #_startService throws timeout on stream: 12ms
2022-06-21T23:44:36.3836330Z     EventService #_startService throws error on stream write: 
2022-06-21T23:44:36.3837347Z   ✔ EventService #_startService throws error on stream write: 2ms
2022-06-21T23:44:36.3893118Z     EventService #_startService rejects error on stream receive error: 
2022-06-21T23:44:36.3894293Z   ✔ EventService #_startService rejects error on stream receive error: 2ms
2022-06-21T23:44:36.3943932Z     EventService #_startService rejects error on stream receive error with eventer assigned: 
2022-06-21T23:44:36.3945179Z   ✔ EventService #_startService rejects error on stream receive error with eventer assigned: 2ms
2022-06-21T23:44:36.4054784Z     EventService #_startService should call stream on data and log about an unknown response: 
2022-06-21T23:44:36.4056102Z   ✔ EventService #_startService should call stream on data and log about an unknown response: 5ms
2022-06-21T23:44:36.4168617Z     EventService #_startService should call stream on data and log about a block response with no listeners: 
2022-06-21T23:44:36.4170688Z   ✔ EventService #_startService should call stream on data and log about a block response with no listeners: 5ms
2022-06-21T23:44:36.4246241Z     EventService #_startService should call stream on data and log about a filtered block response with no listeners: 
2022-06-21T23:44:36.4248132Z   ✔ EventService #_startService should call stream on data and log about a filtered block response with no listeners: 4ms
2022-06-21T23:44:36.4312420Z     EventService #_startService should call stream on data and log about a private block response with no listeners: 
2022-06-21T23:44:36.4313734Z   ✔ EventService #_startService should call stream on data and log about a private block response with no listeners: 3ms
2022-06-21T23:44:36.4413680Z     EventService #_startService should call stream on data and log about a block response with matching endblock: 
2022-06-21T23:44:36.4414941Z   ✔ EventService #_startService should call stream on data and log about a block response with matching endblock: 4ms
2022-06-21T23:44:36.4465663Z     EventService #_startService should call stream on data and catch an error: 
2022-06-21T23:44:36.4468037Z   ✔ EventService #_startService should call stream on data and catch an error: 4ms
2022-06-21T23:44:36.4560058Z     EventService #_startService should call close when on data with SUCCESS status and end block seen: 
2022-06-21T23:44:36.4561441Z   ✔ EventService #_startService should call close when on data with SUCCESS status and end block seen: 3ms
2022-06-21T23:44:36.4632714Z     EventService #_startService should call close when on data with status SUCCESS and end block seen and newest block seen: 
2022-06-21T23:44:36.4634171Z   ✔ EventService #_startService should call close when on data with status SUCCESS and end block seen and newest block seen: 3ms
2022-06-21T23:44:36.4700409Z     EventService #_startService should call close when on data with status SUCCESS and end block not seen: 
2022-06-21T23:44:36.4701951Z   ✔ EventService #_startService should call close when on data with status SUCCESS and end block not seen: 3ms
2022-06-21T23:44:36.4794386Z     EventService #_startService should close when on data with status of SUCCESS and end block not seen with still need blocks: 
2022-06-21T23:44:36.4796029Z   ✔ EventService #_startService should close when on data with status of SUCCESS and end block not seen with still need blocks: 3ms
2022-06-21T23:44:36.4854859Z     EventService #_startService should close when on data with status of NOT FOUND end block not seen: 
2022-06-21T23:44:36.4855883Z   ✔ EventService #_startService should close when on data with status of NOT FOUND end block not seen: 3ms
2022-06-21T23:44:36.4940135Z     EventService #_startService should close when on data with status of NOT FOUND and still need blocks: 
2022-06-21T23:44:36.4941329Z   ✔ EventService #_startService should close when on data with status of NOT FOUND and still need blocks: 3ms
2022-06-21T23:44:36.4988775Z     EventService #_startService should call stream on data with type status of SUCCESS: 
2022-06-21T23:44:36.4990015Z   ✔ EventService #_startService should call stream on data with type status of SUCCESS: 2ms
2022-06-21T23:44:36.5046340Z     EventService #_startService should call stream on data with type status of not SUCCESS: 
2022-06-21T23:44:36.5047457Z   ✔ EventService #_startService should call stream on data with type status of not SUCCESS: 3ms
2022-06-21T23:44:36.5070196Z     EventService #isStarted should return true: 
2022-06-21T23:44:36.5071087Z   ✔ EventService #isStarted should return true: 1ms
2022-06-21T23:44:36.5091208Z     EventService #isStarted should return false: 
2022-06-21T23:44:36.5092105Z   ✔ EventService #isStarted should return false: 0ms
2022-06-21T23:44:36.5108678Z     EventService #isStarted should return false when no eventer assigned: 
2022-06-21T23:44:36.5109698Z   ✔ EventService #isStarted should return false when no eventer assigned: 0ms
2022-06-21T23:44:36.5128059Z     EventService #hasListeners should return true: 
2022-06-21T23:44:36.5128938Z   ✔ EventService #hasListeners should return true: 0ms
2022-06-21T23:44:36.5144657Z     EventService #hasListeners should return false: 
2022-06-21T23:44:36.5145486Z   ✔ EventService #hasListeners should return false: 0ms
2022-06-21T23:44:36.5165691Z     EventService #_closeAllCallbacks should run when no event registrations: 
2022-06-21T23:44:36.5166709Z   ✔ EventService #_closeAllCallbacks should run when no event registrations: 1ms
2022-06-21T23:44:36.5195455Z     EventService #_closeAllCallbacks should remove call all and remove all registrations: 
2022-06-21T23:44:36.5196555Z   ✔ EventService #_closeAllCallbacks should remove call all and remove all registrations: 1ms
2022-06-21T23:44:36.5293668Z     EventService #_checkBlockNum should run when undefined: 
2022-06-21T23:44:36.5294578Z   ✔ EventService #_checkBlockNum should run when undefined: 0ms
2022-06-21T23:44:36.5295874Z     EventService #_checkBlockNum should run when null: 
2022-06-21T23:44:36.5296628Z   ✔ EventService #_checkBlockNum should run when null: 0ms
2022-06-21T23:44:36.5299013Z     EventService #_checkBlockNum should return newest: 
2022-06-21T23:44:36.5299813Z   ✔ EventService #_checkBlockNum should return newest: 0ms
2022-06-21T23:44:36.5302058Z     EventService #_checkBlockNum should return oldest: 
2022-06-21T23:44:36.5302871Z   ✔ EventService #_checkBlockNum should return oldest: 0ms
2022-06-21T23:44:36.5303840Z     EventService #_checkBlockNum should return 10 Long: 
2022-06-21T23:44:36.5304566Z   ✔ EventService #_checkBlockNum should return 10 Long: 0ms
2022-06-21T23:44:36.5316371Z     EventService #_checkBlockNum should return 10 Long: 
2022-06-21T23:44:36.5317263Z   ✔ EventService #_checkBlockNum should return 10 Long: 0ms
2022-06-21T23:44:36.5335446Z     EventService #unregisterEventListener should throw if eventListener not given: 
2022-06-21T23:44:36.5336460Z   ✔ EventService #unregisterEventListener should throw if eventListener not given: 1ms
2022-06-21T23:44:36.5354590Z     EventService #unregisterEventListener should throw if eventListener not found: 
2022-06-21T23:44:36.5355607Z   ✔ EventService #unregisterEventListener should throw if eventListener not found: 1ms
2022-06-21T23:44:36.5372496Z     EventService #unregisterEventListener should not throw if eventListener not found: 
2022-06-21T23:44:36.5373966Z   ✔ EventService #unregisterEventListener should not throw if eventListener not found: 0ms
2022-06-21T23:44:36.5398301Z     EventService #unregisterEventListener should run when found: 
2022-06-21T23:44:36.5399330Z   ✔ EventService #unregisterEventListener should run when found: 1ms
2022-06-21T23:44:36.5422538Z     EventService #unregisterEventListener should set the have flags: 
2022-06-21T23:44:36.5423496Z   ✔ EventService #unregisterEventListener should set the have flags: 1ms
2022-06-21T23:44:36.5443359Z     EventService #registerChaincodeListener should throw if chaincodeId not given: 
2022-06-21T23:44:36.5444859Z   ✔ EventService #registerChaincodeListener should throw if chaincodeId not given: 1ms
2022-06-21T23:44:36.5528186Z     EventService #registerChaincodeListener should throw if eventName not given: 
2022-06-21T23:44:36.5529305Z   ✔ EventService #registerChaincodeListener should throw if eventName not given: 1ms
2022-06-21T23:44:36.5533529Z     EventService #registerChaincodeListener should throw if callback not given: 
2022-06-21T23:44:36.5534460Z   ✔ EventService #registerChaincodeListener should throw if callback not given: 0ms
2022-06-21T23:44:36.5551442Z     EventService #registerChaincodeListener should set the have flag: 
2022-06-21T23:44:36.5552463Z   ✔ EventService #registerChaincodeListener should set the have flag: 0ms
2022-06-21T23:44:36.5571494Z     EventService #registerChaincodeListener should set the have flag with options: 
2022-06-21T23:44:36.5572492Z   ✔ EventService #registerChaincodeListener should set the have flag with options: 0ms
2022-06-21T23:44:36.5591461Z     EventService #registerBlockListener should throw if callback not given: 
2022-06-21T23:44:36.5592430Z   ✔ EventService #registerBlockListener should throw if callback not given: 0ms
2022-06-21T23:44:36.5610008Z     EventService #registerBlockListener should set the have flag: 
2022-06-21T23:44:36.5612202Z   ✔ EventService #registerBlockListener should set the have flag: 0ms
2022-06-21T23:44:36.5632196Z     EventService #registerBlockListener should set the have flag with options: 
2022-06-21T23:44:36.5633267Z   ✔ EventService #registerBlockListener should set the have flag with options: 0ms
2022-06-21T23:44:36.5651618Z     EventService #registerTransactionListener should throw if txid not given: 
2022-06-21T23:44:36.5652673Z   ✔ EventService #registerTransactionListener should throw if txid not given: 0ms
2022-06-21T23:44:36.5670159Z     EventService #registerTransactionListener should throw if callback not given: 
2022-06-21T23:44:36.5671233Z   ✔ EventService #registerTransactionListener should throw if callback not given: 0ms
2022-06-21T23:44:36.5688149Z     EventService #registerTransactionListener should set the have flag: 
2022-06-21T23:44:36.5689131Z   ✔ EventService #registerTransactionListener should set the have flag: 0ms
2022-06-21T23:44:36.5744632Z     EventService #registerTransactionListener should set the have flag: 
2022-06-21T23:44:36.5745722Z   ✔ EventService #registerTransactionListener should set the have flag: 1ms
2022-06-21T23:44:36.5765692Z     EventService #registerTransactionListener should set the have flag when txid=all unregister false: 
2022-06-21T23:44:36.5766821Z   ✔ EventService #registerTransactionListener should set the have flag when txid=all unregister false: 1ms
2022-06-21T23:44:36.5788665Z     EventService #registerTransactionListener should set the have flag when txid=all unregister true: 
2022-06-21T23:44:36.5790009Z   ✔ EventService #registerTransactionListener should set the have flag when txid=all unregister true: 1ms
2022-06-21T23:44:36.5808376Z     EventService #registerTransactionListener should set the have flag when txid=all and default options: 
2022-06-21T23:44:36.5809599Z   ✔ EventService #registerTransactionListener should set the have flag when txid=all and default options: 1ms
2022-06-21T23:44:36.5825890Z     EventService #_processEndBlock should do nothing if no block: 
2022-06-21T23:44:36.5827264Z   ✔ EventService #_processEndBlock should do nothing if no block: 1ms
2022-06-21T23:44:36.5845197Z     EventService #_processEndBlock should do nothing if no registrations: 
2022-06-21T23:44:36.5846245Z   ✔ EventService #_processEndBlock should do nothing if no registrations: 1ms
2022-06-21T23:44:36.5866787Z     EventService #_processEndBlock should do nothing if no end block defined: 
2022-06-21T23:44:36.5867867Z   ✔ EventService #_processEndBlock should do nothing if no end block defined: 1ms
2022-06-21T23:44:36.5911910Z     EventService #_processEndBlock should call the callback with the block number: 
2022-06-21T23:44:36.5912998Z   ✔ EventService #_processEndBlock should call the callback with the block number: 2ms
2022-06-21T23:44:36.5934666Z     EventService #_processEndBlock should not call the callback with the block number: 
2022-06-21T23:44:36.5935877Z   ✔ EventService #_processEndBlock should not call the callback with the block number: 0ms
2022-06-21T23:44:36.5954970Z     EventService #_processBlockEvents should do nothing if no block registrations: 
2022-06-21T23:44:36.5956097Z   ✔ EventService #_processBlockEvents should do nothing if no block registrations: 1ms
2022-06-21T23:44:36.5981420Z     EventService #_processBlockEvents should process the block: 
2022-06-21T23:44:36.5982409Z   ✔ EventService #_processBlockEvents should process the block: 1ms
2022-06-21T23:44:36.6007118Z     EventService #_processBlockEvents should process the block and remove registration: 
2022-06-21T23:44:36.6008206Z   ✔ EventService #_processBlockEvents should process the block and remove registration: 1ms
2022-06-21T23:44:36.6026177Z     EventService #_processTxEvents should do nothing if no tx registrations: 
2022-06-21T23:44:36.6027156Z   ✔ EventService #_processTxEvents should do nothing if no tx registrations: 0ms
2022-06-21T23:44:36.6049583Z     EventService #_processTxEvents should work with filtered block: 
2022-06-21T23:44:36.6050795Z   ✔ EventService #_processTxEvents should work with filtered block: 1ms
2022-06-21T23:44:36.6133844Z     EventService #_processTxEvents should work with full block: 
2022-06-21T23:44:36.6134819Z   ✔ EventService #_processTxEvents should work with full block: 0ms
2022-06-21T23:44:36.6135930Z     EventService #_callTransactionListener should call tx callback and not remove the registration: 
2022-06-21T23:44:36.6136969Z   ✔ EventService #_callTransactionListener should call tx callback and not remove the registration: 1ms
2022-06-21T23:44:36.6162622Z     EventService #_callTransactionListener should call tx callback and remove the registration: 
2022-06-21T23:44:36.6163444Z   ✔ EventService #_callTransactionListener should call tx callback and remove the registration: 1ms
2022-06-21T23:44:36.6179803Z     EventService #_callTransactionListener should call tx callback and remove the registration: 
2022-06-21T23:44:36.6180641Z   ✔ EventService #_callTransactionListener should call tx callback and remove the registration: 0ms
2022-06-21T23:44:36.6190837Z     EventService #_processChaincodeEvents should do nothing if no chaincode registrations: 
2022-06-21T23:44:36.6191664Z   ✔ EventService #_processChaincodeEvents should do nothing if no chaincode registrations: 0ms
2022-06-21T23:44:36.6242672Z     EventService #_processChaincodeEvents should work with filtered block: 
2022-06-21T23:44:36.6243765Z   ✔ EventService #_processChaincodeEvents should work with filtered block: 3ms
2022-06-21T23:44:36.6286173Z     EventService #_processChaincodeEvents should get an array with 3 events on a filtered block: 
2022-06-21T23:44:36.6287319Z   ✔ EventService #_processChaincodeEvents should get an array with 3 events on a filtered block: 3ms
2022-06-21T23:44:36.6326174Z     EventService #_processChaincodeEvents should get an array with 1 events on a filtered block: 
2022-06-21T23:44:36.6327303Z   ✔ EventService #_processChaincodeEvents should get an array with 1 events on a filtered block: 3ms
2022-06-21T23:44:36.6356635Z     EventService #_processChaincodeEvents should work with full block: 
2022-06-21T23:44:36.6357991Z   ✔ EventService #_processChaincodeEvents should work with full block: 2ms
2022-06-21T23:44:36.6400211Z     EventService #_processChaincodeEvents should work with filtered block not remove reg: 
2022-06-21T23:44:36.6401523Z   ✔ EventService #_processChaincodeEvents should work with filtered block not remove reg: 3ms
2022-06-21T23:44:36.6427707Z     EventService #_processChaincodeEvents should work with full block and not remove reg: 
2022-06-21T23:44:36.6428805Z   ✔ EventService #_processChaincodeEvents should work with full block and not remove reg: 1ms
2022-06-21T23:44:36.6466227Z     EventService #_processChaincodeEvents should not call reg and not remove: 
2022-06-21T23:44:36.6467330Z   ✔ EventService #_processChaincodeEvents should not call reg and not remove: 3ms
2022-06-21T23:44:36.6496223Z     EventService #_processChaincodeEvents should not call reg and not remove: 
2022-06-21T23:44:36.6497296Z   ✔ EventService #_processChaincodeEvents should not call reg and not remove: 2ms
2022-06-21T23:44:36.6556071Z     EventService #_processChaincodeEvents should not have an error: 
2022-06-21T23:44:36.6557258Z   ✔ EventService #_processChaincodeEvents should not have an error: 1ms
2022-06-21T23:44:36.6578298Z     EventService #_processChaincodeEvents should not have an error: 
2022-06-21T23:44:36.6579473Z   ✔ EventService #_processChaincodeEvents should not have an error: 1ms
2022-06-21T23:44:36.6601880Z     EventService #_processChaincodeEvents should not have an error with no chaincode actions: 
2022-06-21T23:44:36.6603254Z   ✔ EventService #_processChaincodeEvents should not have an error with no chaincode actions: 0ms
2022-06-21T23:44:36.6628301Z     EventService #_processChaincodeEvents should not have an error with no chaincode_action in chaincode_actions: 
2022-06-21T23:44:36.6629574Z   ✔ EventService #_processChaincodeEvents should not have an error with no chaincode_action in chaincode_actions: 1ms
2022-06-21T23:44:36.6650317Z     EventService #_processChaincodeEvents should not have an error with non endorser block: 
2022-06-21T23:44:36.6652127Z   ✔ EventService #_processChaincodeEvents should not have an error with non endorser block: 1ms
2022-06-21T23:44:36.6688749Z     EventService #_processChaincodeEvents should not have an error with non endorser block: 
2022-06-21T23:44:36.6689564Z   ✔ EventService #_processChaincodeEvents should not have an error with non endorser block: 1ms
2022-06-21T23:44:36.6723894Z     EventService #_processChaincodeEvents should not have an error with non endorser block: 
2022-06-21T23:44:36.6724634Z   ✔ EventService #_processChaincodeEvents should not have an error with non endorser block: 2ms
2022-06-21T23:44:36.6746585Z     EventService #_queueChaincodeEvent should work: 
2022-06-21T23:44:36.6747165Z   ✔ EventService #_queueChaincodeEvent should work: 1ms
2022-06-21T23:44:36.6768387Z     EventService #getTransactionListener should not find listener: 
2022-06-21T23:44:36.6769070Z   ✔ EventService #getTransactionListener should not find listener: 1ms
2022-06-21T23:44:36.6790736Z     EventService #getTransactionListener should find listener: 
2022-06-21T23:44:36.6791431Z   ✔ EventService #getTransactionListener should find listener: 1ms
2022-06-21T23:44:36.6803862Z     Hash #constructor should set the _blockSize and call reset(): 
2022-06-21T23:44:36.6804538Z   ✔ Hash #constructor should set the _blockSize and call reset(): 0ms
2022-06-21T23:44:36.6820622Z     Hash #hash should return the correct function: 
2022-06-21T23:44:36.6821230Z   ✔ Hash #hash should return the correct function: 1ms
2022-06-21T23:44:36.6825599Z     Hash #reset should return an instance of itself: 
2022-06-21T23:44:36.6826111Z   ✔ Hash #reset should return an instance of itself: 1ms
2022-06-21T23:44:36.6831874Z     Hash #update should call _hash.update and return an instance of itself: 
2022-06-21T23:44:36.6832475Z   ✔ Hash #update should call _hash.update and return an instance of itself: 0ms
2022-06-21T23:44:36.6836038Z     Hash #finalize should not throw: 
2022-06-21T23:44:36.6836487Z   ✔ Hash #finalize should not throw: 0ms
2022-06-21T23:44:36.6854424Z     hash_sha2_256 #hash should call the reset reset.update.finalize and return the correct value: 
2022-06-21T23:44:36.6855270Z   ✔ hash_sha2_256 #hash should call the reset reset.update.finalize and return the correct value: 1ms
2022-06-21T23:44:36.6863763Z     hash_sha2_256 #reset should call crypto.createHash: 
2022-06-21T23:44:36.6864401Z   ✔ hash_sha2_256 #reset should call crypto.createHash: 0ms
2022-06-21T23:44:36.6876709Z     hash_sha2_256 #finalize should call _hash.digest, reset and reurn the hash: 
2022-06-21T23:44:36.6877339Z   ✔ hash_sha2_256 #finalize should call _hash.digest, reset and reurn the hash: 1ms
2022-06-21T23:44:36.6891395Z     hash_sha2_384 #hash should call the reset reset.update.finalize and return the correct value: 
2022-06-21T23:44:36.6892221Z   ✔ hash_sha2_384 #hash should call the reset reset.update.finalize and return the correct value: 1ms
2022-06-21T23:44:36.6901411Z     hash_sha2_384 #reset should call crypto.createHash: 
2022-06-21T23:44:36.6901982Z   ✔ hash_sha2_384 #reset should call crypto.createHash: 0ms
2022-06-21T23:44:36.6952085Z     hash_sha2_384 #finalize should call _hash.digest, reset and reurn the hash: 
2022-06-21T23:44:36.6952771Z   ✔ hash_sha2_384 #finalize should call _hash.digest, reset and reurn the hash: 1ms
2022-06-21T23:44:36.6953288Z     HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (default to hex): 
2022-06-21T23:44:36.6953932Z   ✔ HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (default to hex): 1ms
2022-06-21T23:44:36.6954453Z     HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (specify hex): 
2022-06-21T23:44:36.6955093Z   ✔ HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (specify hex): 1ms
2022-06-21T23:44:36.6961427Z     HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (specify null): 
2022-06-21T23:44:36.6962217Z   ✔ HashPrimitives SHA2_256 should call hash and return an insatnce of hash_sha2_256 (specify null): 1ms
2022-06-21T23:44:36.6971913Z     HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384: 
2022-06-21T23:44:36.6972678Z   ✔ HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384: 1ms
2022-06-21T23:44:36.6981535Z     HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384 (specify hex): 
2022-06-21T23:44:36.6982446Z   ✔ HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384 (specify hex): 0ms
2022-06-21T23:44:36.6991685Z     HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384 (specify null): 
2022-06-21T23:44:36.6992492Z   ✔ HashPrimitives SHA2_384 should call hash and return an insatnce of hash_sha2_384 (specify null): 1ms
2022-06-21T23:44:36.7031159Z     Identity #constructor should throw if no certificate: 
2022-06-21T23:44:36.7031789Z   ✔ Identity #constructor should throw if no certificate: 0ms
2022-06-21T23:44:36.7062686Z     Identity #constructor should throw if no MSP ID: 
2022-06-21T23:44:36.7063311Z   ✔ Identity #constructor should throw if no MSP ID: 0ms
2022-06-21T23:44:36.7103689Z     Identity #getMSPId should return the MSP ID: 
2022-06-21T23:44:36.7104243Z   ✔ Identity #getMSPId should return the MSP ID: 0ms
2022-06-21T23:44:36.7134843Z     Identity #isValid should return true: 
2022-06-21T23:44:36.7135395Z   ✔ Identity #isValid should return true: 0ms
2022-06-21T23:44:36.7164685Z     Identity #getOrganizationUnits should return dunno!: 
2022-06-21T23:44:36.7165309Z   ✔ Identity #getOrganizationUnits should return dunno!: 0ms
2022-06-21T23:44:36.7194533Z     Identity #verify should throw if no public key: 
2022-06-21T23:44:36.7195155Z   ✔ Identity #verify should throw if no public key: 0ms
2022-06-21T23:44:36.7229241Z     Identity #verify should throw if no public key: 
2022-06-21T23:44:36.7229972Z   ✔ Identity #verify should throw if no public key: 0ms
2022-06-21T23:44:36.7272097Z     Identity #verify should handle a successful verify by the crypto suite: 
2022-06-21T23:44:36.7272818Z   ✔ Identity #verify should handle a successful verify by the crypto suite: 1ms
2022-06-21T23:44:36.7307835Z     Identity #verify should handle an unsuccessful verify by the crypto suite: 
2022-06-21T23:44:36.7308525Z   ✔ Identity #verify should handle an unsuccessful verify by the crypto suite: 1ms
2022-06-21T23:44:36.7336742Z     Identity #verifyAttributes should return true: 
2022-06-21T23:44:36.7337305Z   ✔ Identity #verifyAttributes should return true: 0ms
2022-06-21T23:44:36.7411610Z     Identity #serialize should serialize the identity to a buffer: 
2022-06-21T23:44:36.7412301Z   ✔ Identity #serialize should serialize the identity to a buffer: 0ms
2022-06-21T23:44:36.7419098Z     IdentityContext #constructor should require a user: 
2022-06-21T23:44:36.7419633Z   ✔ IdentityContext #constructor should require a user: 0ms
2022-06-21T23:44:36.7422178Z     IdentityContext #constructor should require a Client: 
2022-06-21T23:44:36.7422750Z   ✔ IdentityContext #constructor should require a Client: 0ms
2022-06-21T23:44:36.7425259Z     IdentityContext #constructor should create: 
2022-06-21T23:44:36.7425737Z   ✔ IdentityContext #constructor should create: 0ms
2022-06-21T23:44:36.7437402Z     IdentityContext #calculateTransactionId should calculate txid and nonce: 
2022-06-21T23:44:36.7438350Z   ✔ IdentityContext #calculateTransactionId should calculate txid and nonce: 1ms
2022-06-21T23:44:36.7445211Z     IdentityContext #calculateTransactionId should return new identity context: 
2022-06-21T23:44:36.7446498Z   ✔ IdentityContext #calculateTransactionId should return new identity context: 1ms
2022-06-21T23:44:36.7454188Z     IdentityContext #calculateTransactionId result should have same serialized identity: 
2022-06-21T23:44:36.7455196Z   ✔ IdentityContext #calculateTransactionId result should have same serialized identity: 1ms
2022-06-21T23:44:36.7459389Z     IdentityContext #calculateTransactionId result should have matching transaction ID and nonce: 
2022-06-21T23:44:36.7460581Z   ✔ IdentityContext #calculateTransactionId result should have matching transaction ID and nonce: 0ms
2022-06-21T23:44:36.7464259Z     IdentityContext #serializeIdentity should serializeIdentity: 
2022-06-21T23:44:36.7464855Z   ✔ IdentityContext #serializeIdentity should serializeIdentity: 1ms
2022-06-21T23:44:36.7468380Z     IdentityContext #sign should require a payload: 
2022-06-21T23:44:36.7469324Z   ✔ IdentityContext #sign should require a payload: 0ms
2022-06-21T23:44:36.7519053Z     IdentityContext #sign should serializeIdentity: 
2022-06-21T23:44:36.7519599Z   ✔ IdentityContext #sign should serializeIdentity: 5ms
2022-06-21T23:44:36.7522194Z     IdentityContext #toString should return string: 
2022-06-21T23:44:36.7522707Z   ✔ IdentityContext #toString should return string: 0ms
2022-06-21T23:44:36.7554271Z     CryptoSuite_PKCS11 #constructor should throw when no params are given: 
2022-06-21T23:44:36.7555302Z   ✔ CryptoSuite_PKCS11 #constructor should throw when no params are given: 1ms
2022-06-21T23:44:36.7572342Z     CryptoSuite_PKCS11 #constructor should throw when unsupported bits key sizes are given: 
2022-06-21T23:44:36.7573011Z   ✔ CryptoSuite_PKCS11 #constructor should throw when unsupported bits key sizes are given: 0ms
2022-06-21T23:44:36.7593712Z     CryptoSuite_PKCS11 #constructor should throw when no library path is given: 
2022-06-21T23:44:36.7594359Z   ✔ CryptoSuite_PKCS11 #constructor should throw when no library path is given: 0ms
2022-06-21T23:44:36.7631513Z     CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot or label not given: 
2022-06-21T23:44:36.7632304Z   ✔ CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot or label not given: 1ms
2022-06-21T23:44:36.7655402Z     CryptoSuite_PKCS11 #constructor should throw if invalid [string] pkcs11 slot given: 
2022-06-21T23:44:36.7656094Z   ✔ CryptoSuite_PKCS11 #constructor should throw if invalid [string] pkcs11 slot given: 0ms
2022-06-21T23:44:36.7676065Z     CryptoSuite_PKCS11 #constructor should throw if invalid [double] pkcs11 slot given: 
2022-06-21T23:44:36.7677095Z   ✔ CryptoSuite_PKCS11 #constructor should throw if invalid [double] pkcs11 slot given: 1ms
2022-06-21T23:44:36.7703174Z     CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot PIN not given: 
2022-06-21T23:44:36.7703929Z   ✔ CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot PIN not given: 1ms
2022-06-21T23:44:36.7727632Z     CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot PIN is not a string: 
2022-06-21T23:44:36.7728403Z   ✔ CryptoSuite_PKCS11 #constructor should throw if pkcs11 slot PIN is not a string: 1ms
2022-06-21T23:44:36.7753079Z     CryptoSuite_PKCS11 #constructor should throw if invalid usertype: 
2022-06-21T23:44:36.7753803Z   ✔ CryptoSuite_PKCS11 #constructor should throw if invalid usertype: 0ms
2022-06-21T23:44:36.7776199Z     CryptoSuite_PKCS11 #constructor should throw if invalid readwrite: 
2022-06-21T23:44:36.7776910Z   ✔ CryptoSuite_PKCS11 #constructor should throw if invalid readwrite: 1ms
2022-06-21T23:44:36.7822856Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-lib from config setting if no opts specified: 
2022-06-21T23:44:36.7823940Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-lib from config setting if no opts specified: 3ms
2022-06-21T23:44:36.7861646Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-slot from config setting if no opts specified: 
2022-06-21T23:44:36.7862493Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-slot from config setting if no opts specified: 2ms
2022-06-21T23:44:36.7995681Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-label from config setting if no opts specified: 
2022-06-21T23:44:36.7996789Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-label from config setting if no opts specified: 5ms
2022-06-21T23:44:36.7997717Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-usertype from config setting if no opts specified: 
2022-06-21T23:44:36.7998738Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-usertype from config setting if no opts specified: 2ms
2022-06-21T23:44:36.8002995Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-readwrite from config setting if no opts specified: 
2022-06-21T23:44:36.8003846Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-pkcs11-readwrite from config setting if no opts specified: 2ms
2022-06-21T23:44:36.8068639Z     CryptoSuite_PKCS11 #constructor should retrieve crypto-hash-algo from config setting if not provided: 
2022-06-21T23:44:36.8069787Z   ✔ CryptoSuite_PKCS11 #constructor should retrieve crypto-hash-algo from config setting if not provided: 3ms
2022-06-21T23:44:36.8130171Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if no slots are returned: 
2022-06-21T23:44:36.8131702Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if no slots are returned: 4ms
2022-06-21T23:44:36.8239764Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if label cannot be found and there are slots: 
2022-06-21T23:44:36.8241523Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if label cannot be found and there are slots: 5ms
2022-06-21T23:44:36.8295620Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if the slot index provided is not within the slot list range: 
2022-06-21T23:44:36.8297090Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if the slot index provided is not within the slot list range: 3ms
2022-06-21T23:44:36.8370767Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should find the correct slot if the correct label is available: 
2022-06-21T23:44:36.8372427Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should find the correct slot if the correct label is available: 6ms
2022-06-21T23:44:36.8419742Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should use slot index if no label is provided: 
2022-06-21T23:44:36.8421150Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should use slot index if no label is provided: 3ms
2022-06-21T23:44:36.8463966Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if label cannot be found even if a valid slot index is provided: 
2022-06-21T23:44:36.8465405Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should throw an error if label cannot be found even if a valid slot index is provided: 2ms
2022-06-21T23:44:36.8505354Z     CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should find the correct slot by label even if a valid slot index is provided: 
2022-06-21T23:44:36.8508837Z   ✔ CryptoSuite_PKCS11 #constructor when determining whether to use slot or label should find the correct slot by label even if a valid slot index is provided: 3ms
2022-06-21T23:44:36.8545082Z     CryptoSuite_PKCS11 #getKeySize should run: 
2022-06-21T23:44:36.8547403Z   ✔ CryptoSuite_PKCS11 #getKeySize should run: 3ms
2022-06-21T23:44:36.9989388Z     CryptoSuite_ECDSA_AES #generateEphemeralKey should generate an ephemeral key: 
2022-06-21T23:44:36.9990754Z   ✔ CryptoSuite_ECDSA_AES #generateEphemeralKey should generate an ephemeral key: 144ms
2022-06-21T23:44:37.1009603Z     CryptoSuite_ECDSA_AES #generateKey should generate a public key with the correct curveName: 
2022-06-21T23:44:37.1011456Z   ✔ CryptoSuite_ECDSA_AES #generateKey should generate a public key with the correct curveName: 101ms
2022-06-21T23:44:37.7671191Z     CryptoSuite_ECDSA_AES #generateKey should generate a public key with the correct curveName for non-default 384 keysize: 
2022-06-21T23:44:37.7673564Z   ✔ CryptoSuite_ECDSA_AES #generateKey should generate a public key with the correct curveName for non-default 384 keysize: 666ms
2022-06-21T23:44:37.8803894Z     CryptoSuite_ECDSA_AES #generateKey should generate an ephemeral key when specified: 
2022-06-21T23:44:37.8805335Z   ✔ CryptoSuite_ECDSA_AES #generateKey should generate an ephemeral key when specified: 113ms
2022-06-21T23:44:37.8812065Z     CryptoSuite_ECDSA_AES #generateKey should throw an error when the cryptoKeyStore property has not been set: 
2022-06-21T23:44:37.8813205Z   ✔ CryptoSuite_ECDSA_AES #generateKey should throw an error when the cryptoKeyStore property has not been set: 0ms
2022-06-21T23:44:37.8822906Z     CryptoSuite_ECDSA_AES #createKeyFromRaw should generate a key from raw private key: 
2022-06-21T23:44:37.8823925Z   ✔ CryptoSuite_ECDSA_AES #createKeyFromRaw should generate a key from raw private key: 0ms
2022-06-21T23:44:37.8838162Z     CryptoSuite_ECDSA_AES #createKeyFromRaw should throw an error if the key cannot be parsed: 
2022-06-21T23:44:37.8839318Z   ✔ CryptoSuite_ECDSA_AES #createKeyFromRaw should throw an error if the key cannot be parsed: 1ms
2022-06-21T23:44:37.8877632Z     CryptoSuite_ECDSA_AES #importKey should return a public key: 
2022-06-21T23:44:37.8878592Z   ✔ CryptoSuite_ECDSA_AES #importKey should return a public key: 4ms
2022-06-21T23:44:37.8910422Z     CryptoSuite_ECDSA_AES #importKey should store the imported public key in the key store: 
2022-06-21T23:44:37.8911470Z   ✔ CryptoSuite_ECDSA_AES #importKey should store the imported public key in the key store: 3ms
2022-06-21T23:44:37.8926113Z     CryptoSuite_ECDSA_AES #importKey should return a private key: 
2022-06-21T23:44:37.8927017Z   ✔ CryptoSuite_ECDSA_AES #importKey should return a private key: 1ms
2022-06-21T23:44:37.8942223Z     CryptoSuite_ECDSA_AES #importKey should store the imported private key in the correct directory: 
2022-06-21T23:44:37.8943331Z   ✔ CryptoSuite_ECDSA_AES #importKey should store the imported private key in the correct directory: 1ms
2022-06-21T23:44:37.8949821Z     CryptoSuite_ECDSA_AES #importKey should throw an error when the cryptoKeyStore property has not been set: 
2022-06-21T23:44:37.8950966Z   ✔ CryptoSuite_ECDSA_AES #importKey should throw an error when the cryptoKeyStore property has not been set: 0ms
2022-06-21T23:44:37.8957845Z     CryptoSuite_ECDSA_AES #getKey should throw an error when the cryptoKeyStore property has not been set: 
2022-06-21T23:44:37.8958949Z   ✔ CryptoSuite_ECDSA_AES #getKey should throw an error when the cryptoKeyStore property has not been set: 1ms
2022-06-21T23:44:37.8966332Z     CryptoSuite_ECDSA_AES #hash should return a SHA2 256-bit hash signature for a string using default key size: 
2022-06-21T23:44:37.8967416Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA2 256-bit hash signature for a string using default key size: 0ms
2022-06-21T23:44:37.8973779Z     CryptoSuite_ECDSA_AES #hash should return a SHA2 256-bit hash signature for a long string using default key size: 
2022-06-21T23:44:37.8974894Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA2 256-bit hash signature for a long string using default key size: 0ms
2022-06-21T23:44:37.8980778Z     CryptoSuite_ECDSA_AES #hash should return a SHA2 384-bit hash signature for a string using a key size of 384: 
2022-06-21T23:44:37.8981990Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA2 384-bit hash signature for a string using a key size of 384: 1ms
2022-06-21T23:44:37.8994342Z     CryptoSuite_ECDSA_AES #hash should return a SHA3 256-bit hash signature for a string using default key size: 
2022-06-21T23:44:37.8995604Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA3 256-bit hash signature for a string using default key size: 2ms
2022-06-21T23:44:37.9090982Z     CryptoSuite_ECDSA_AES #hash should return a SHA3 256-bit hash signature for a long string using default key size: 
2022-06-21T23:44:37.9092150Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA3 256-bit hash signature for a long string using default key size: 9ms
2022-06-21T23:44:37.9144239Z     CryptoSuite_ECDSA_AES #hash should return a SHA3 384-bit hash signature for a string using a key size of 384: 
2022-06-21T23:44:37.9145500Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA3 384-bit hash signature for a string using a key size of 384: 1ms
2022-06-21T23:44:37.9183416Z     CryptoSuite_ECDSA_AES #hash should return a SHA3 384-bit hash signature for a long string using a key size of 384: 
2022-06-21T23:44:37.9184235Z   ✔ CryptoSuite_ECDSA_AES #hash should return a SHA3 384-bit hash signature for a long string using a key size of 384: 7ms
2022-06-21T23:44:38.0162515Z     CryptoSuite_ECDSA_AES #sign should return a signature of a string with a good s-value: 
2022-06-21T23:44:38.0164008Z   ✔ CryptoSuite_ECDSA_AES #sign should return a signature of a string with a good s-value: 6ms
2022-06-21T23:44:38.1329624Z     CryptoSuite_ECDSA_AES #sign should return a verifiable signature of a string using the given key: 
2022-06-21T23:44:38.1331774Z   ✔ CryptoSuite_ECDSA_AES #sign should return a verifiable signature of a string using the given key: 22ms
2022-06-21T23:44:38.2295559Z     CryptoSuite_ECDSA_AES #sign should return a signature of a long string with a good s-value: 
2022-06-21T23:44:38.2297333Z   ✔ CryptoSuite_ECDSA_AES #sign should return a signature of a long string with a good s-value: 5ms
2022-06-21T23:44:38.3600032Z     CryptoSuite_ECDSA_AES #sign should return a verifiable signature of a long string using the given key: 
2022-06-21T23:44:38.3602144Z   ✔ CryptoSuite_ECDSA_AES #sign should return a verifiable signature of a long string using the given key: 24ms
2022-06-21T23:44:38.4504738Z     CryptoSuite_ECDSA_AES #sign errors should throw an error when a key is not defined: 
2022-06-21T23:44:38.4506595Z   ✔ CryptoSuite_ECDSA_AES #sign errors should throw an error when a key is not defined: 0ms
2022-06-21T23:44:38.5422197Z     CryptoSuite_ECDSA_AES #sign errors should throw an error when a signing message is not defined: 
2022-06-21T23:44:38.5424177Z   ✔ CryptoSuite_ECDSA_AES #sign errors should throw an error when a signing message is not defined: 0ms
2022-06-21T23:44:38.5428848Z     CryptoSuite_ECDSA_AES #verify should throw an error when no key is specified: 
2022-06-21T23:44:38.5430385Z   ✔ CryptoSuite_ECDSA_AES #verify should throw an error when no key is specified: 0ms
2022-06-21T23:44:38.5436830Z     CryptoSuite_ECDSA_AES #verify should throw an error when no signature is specified: 
2022-06-21T23:44:38.5438252Z   ✔ CryptoSuite_ECDSA_AES #verify should throw an error when no signature is specified: 0ms
2022-06-21T23:44:38.5445349Z     CryptoSuite_ECDSA_AES #verify should throw an error when no message is specified: 
2022-06-21T23:44:38.5447520Z   ✔ CryptoSuite_ECDSA_AES #verify should throw an error when no message is specified: 1ms
2022-06-21T23:44:38.5453303Z     ECDSA_KEY constructor should throw when no params are given: 
2022-06-21T23:44:38.5454278Z   ✔ ECDSA_KEY constructor should throw when no params are given: 0ms
2022-06-21T23:44:38.5459351Z     ECDSA_KEY constructor should throw when invalid param passed: 
2022-06-21T23:44:38.5460186Z   ✔ ECDSA_KEY constructor should throw when invalid param passed: 0ms
2022-06-21T23:44:38.5466537Z     ECDSA_KEY constructor should throw when invalid key type passed: 
2022-06-21T23:44:38.5467383Z   ✔ ECDSA_KEY constructor should throw when invalid key type passed: 1ms
2022-06-21T23:44:38.5468322Z     ECDSA_KEY constructor should throw when parameter with missing pubKeyHex passed: 
2022-06-21T23:44:38.5469473Z   ✔ ECDSA_KEY constructor should throw when parameter with missing pubKeyHex passed: 0ms
2022-06-21T23:44:38.5474317Z     ECDSA_KEY constructor should set the passed key: 
2022-06-21T23:44:38.5475276Z   ✔ ECDSA_KEY constructor should set the passed key: 0ms
2022-06-21T23:44:38.6374035Z     ECDSA_KEY #getSKI should generate SKI hash string for 256 curve keys: 
2022-06-21T23:44:38.6375313Z   ✔ ECDSA_KEY #getSKI should generate SKI hash string for 256 curve keys: 89ms
2022-06-21T23:44:38.8932455Z     ECDSA_KEY #getSKI should generate SKI hash string for 384 curve keys: 
2022-06-21T23:44:38.8934921Z   ✔ ECDSA_KEY #getSKI should generate SKI hash string for 384 curve keys: 255ms
2022-06-21T23:44:39.0018891Z     ECDSA_KEY #getSKI should generate SKI hash string for 256 curve public keys: 
2022-06-21T23:44:39.0019802Z   ✔ ECDSA_KEY #getSKI should generate SKI hash string for 256 curve public keys: 106ms
2022-06-21T23:44:39.2795327Z     ECDSA_KEY #getSKI should generate SKI hash string for 384 curve public keys: 
2022-06-21T23:44:39.2796738Z   ✔ ECDSA_KEY #getSKI should generate SKI hash string for 384 curve public keys: 273ms
2022-06-21T23:44:39.2802567Z     ECDSA_KEY #getHandle should throw: 
2022-06-21T23:44:39.2803698Z   ✔ ECDSA_KEY #getHandle should throw: 0ms
2022-06-21T23:44:39.2807501Z     ECDSA_KEY #isSymmetric should return false: 
2022-06-21T23:44:39.2808154Z   ✔ ECDSA_KEY #isSymmetric should return false: 0ms
2022-06-21T23:44:39.2813091Z     ECDSA_KEY #isPrivate should return true if prvKeyHex exists: 
2022-06-21T23:44:39.2813896Z   ✔ ECDSA_KEY #isPrivate should return true if prvKeyHex exists: 0ms
2022-06-21T23:44:39.2817102Z     ECDSA_KEY #isPrivate should return false if null prvKeyHex: 
2022-06-21T23:44:39.2818125Z   ✔ ECDSA_KEY #isPrivate should return false if null prvKeyHex: 0ms
2022-06-21T23:44:39.2819026Z     ECDSA_KEY #getPublicKey should return direct if public: 
2022-06-21T23:44:39.2821094Z   ✔ ECDSA_KEY #getPublicKey should return direct if public: 0ms
2022-06-21T23:44:39.2826320Z     ECDSA_KEY #getPublicKey should generate and return a new key if not public: 
2022-06-21T23:44:39.2827674Z   ✔ ECDSA_KEY #getPublicKey should generate and return a new key if not public: 1ms
2022-06-21T23:44:39.2836120Z     ECDSA_KEY #generateCSR should throw when trying to generate if public: 
2022-06-21T23:44:39.2837058Z   ✔ ECDSA_KEY #generateCSR should throw when trying to generate if public: 1ms
2022-06-21T23:44:39.2872244Z     ECDSA_KEY #generateCSR should rethrow internal errors: 
2022-06-21T23:44:39.2873461Z   ✔ ECDSA_KEY #generateCSR should rethrow internal errors: 3ms
2022-06-21T23:44:39.3988089Z     ECDSA_KEY #generateCSR should include extensions: 
2022-06-21T23:44:39.3989527Z   ✔ ECDSA_KEY #generateCSR should include extensions: 111ms
2022-06-21T23:44:39.5156526Z     ECDSA_KEY #generateCSR should include extension request format extensions: 
2022-06-21T23:44:39.5157911Z   ✔ ECDSA_KEY #generateCSR should include extension request format extensions: 117ms
2022-06-21T23:44:39.5170278Z     ECDSA_KEY #generateX509Certificate should throw when trying to generate if public: 
2022-06-21T23:44:39.5171642Z   ✔ ECDSA_KEY #generateX509Certificate should throw when trying to generate if public: 1ms
2022-06-21T23:44:39.5189210Z     ECDSA_KEY #generateX509Certificate should rethrow errors: 
2022-06-21T23:44:39.5190159Z   ✔ ECDSA_KEY #generateX509Certificate should rethrow errors: 1ms
2022-06-21T23:44:39.5203977Z     ECDSA_KEY #generateX509Certificate should call into jsra lib if private: 
2022-06-21T23:44:39.5205259Z   ✔ ECDSA_KEY #generateX509Certificate should call into jsra lib if private: 1ms
2022-06-21T23:44:39.5220190Z     ECDSA_KEY #generateX509Certificate should set CN to self if no commonName passed: 
2022-06-21T23:44:39.5221281Z   ✔ ECDSA_KEY #generateX509Certificate should set CN to self if no commonName passed: 1ms
2022-06-21T23:44:39.5233883Z     ECDSA_KEY #generateX509Certificate should set CN if passed: 
2022-06-21T23:44:39.5235235Z   ✔ ECDSA_KEY #generateX509Certificate should set CN if passed: 1ms
2022-06-21T23:44:39.5249663Z     ECDSA_KEY #toBytes should call key util with key and base if private: 
2022-06-21T23:44:39.5250828Z   ✔ ECDSA_KEY #toBytes should call key util with key and base if private: 1ms
2022-06-21T23:44:39.5261014Z     ECDSA_KEY #toBytes should call key util with key if not private: 
2022-06-21T23:44:39.5261915Z   ✔ ECDSA_KEY #toBytes should call key util with key if not private: 0ms
2022-06-21T23:44:39.5270227Z     InMemoryKeyValueStore get returns null if key does not exist: 
2022-06-21T23:44:39.5271624Z   ✔ InMemoryKeyValueStore get returns null if key does not exist: 0ms
2022-06-21T23:44:39.5277245Z     InMemoryKeyValueStore set returns the value: 
2022-06-21T23:44:39.5278081Z   ✔ InMemoryKeyValueStore set returns the value: 0ms
2022-06-21T23:44:39.5284039Z     InMemoryKeyValueStore get returns a set value: 
2022-06-21T23:44:39.5284867Z   ✔ InMemoryKeyValueStore get returns a set value: 0ms
2022-06-21T23:44:39.5285438Z     Key #getSKI should return undefined: 
2022-06-21T23:44:39.5286397Z   ✔ Key #getSKI should return undefined: 0ms
2022-06-21T23:44:39.5294952Z     Key #getHandle should return undefined: 
2022-06-21T23:44:39.5295716Z   ✔ Key #getHandle should return undefined: 1ms
2022-06-21T23:44:39.5299697Z     Key #isSymmetric should return undefined: 
2022-06-21T23:44:39.5300451Z   ✔ Key #isSymmetric should return undefined: 0ms
2022-06-21T23:44:39.5305675Z     Key #isPrivate should return undefined: 
2022-06-21T23:44:39.5306441Z   ✔ Key #isPrivate should return undefined: 1ms
2022-06-21T23:44:39.5307030Z     Key #getPublicKey should return undefined: 
2022-06-21T23:44:39.5307774Z   ✔ Key #getPublicKey should return undefined: 0ms
2022-06-21T23:44:39.5316030Z     Key #toBytes should return undefined: 
2022-06-21T23:44:39.5316796Z   ✔ Key #toBytes should return undefined: 0ms
2022-06-21T23:44:39.5320858Z     KeyValueStore #initialize should return undefined: 
2022-06-21T23:44:39.5321703Z   ✔ KeyValueStore #initialize should return undefined: 0ms
2022-06-21T23:44:39.5322376Z     KeyValueStore #getName should return undefined: 
2022-06-21T23:44:39.5323161Z   ✔ KeyValueStore #getName should return undefined: 0ms
2022-06-21T23:44:39.5331450Z     KeyValueStore #setValue should return undefined: 
2022-06-21T23:44:39.5332252Z   ✔ KeyValueStore #setValue should return undefined: 0ms
2022-06-21T23:44:39.5365284Z     Proposal #constructor should require a name: 
2022-06-21T23:44:39.5366195Z   ✔ Proposal #constructor should require a name: 1ms
2022-06-21T23:44:39.5386251Z     Proposal #constructor should require a Channel: 
2022-06-21T23:44:39.5387430Z   ✔ Proposal #constructor should require a Channel: 0ms
2022-06-21T23:44:39.5406379Z     Proposal #constructor should create: 
2022-06-21T23:44:39.5407004Z   ✔ Proposal #constructor should create: 1ms
2022-06-21T23:44:39.5424771Z     Proposal #getTransactionId should error if not built: 
2022-06-21T23:44:39.5425430Z   ✔ Proposal #getTransactionId should error if not built: 1ms
2022-06-21T23:44:39.5443605Z     Proposal #getTransactionId should return txid in use: 
2022-06-21T23:44:39.5444256Z   ✔ Proposal #getTransactionId should return txid in use: 0ms
2022-06-21T23:44:39.5464828Z     Proposal #buildProposalInterest should return interest: 
2022-06-21T23:44:39.5465467Z   ✔ Proposal #buildProposalInterest should return interest: 1ms
2022-06-21T23:44:39.5483158Z     Proposal #buildProposalInterest should return interest and collections: 
2022-06-21T23:44:39.5483879Z   ✔ Proposal #buildProposalInterest should return interest and collections: 0ms
2022-06-21T23:44:39.5501191Z     Proposal #buildProposalInterest should return interest and collections with noPrivateReads: 
2022-06-21T23:44:39.5502020Z   ✔ Proposal #buildProposalInterest should return interest and collections with noPrivateReads: 0ms
2022-06-21T23:44:39.5519070Z     Proposal #buildProposalInterest should return interest and chaincode and chaincode collections : 
2022-06-21T23:44:39.5519915Z   ✔ Proposal #buildProposalInterest should return interest and chaincode and chaincode collections : 0ms
2022-06-21T23:44:39.5536358Z     Proposal #buildProposalInterest should return interest and chaincode and chaincode collections with no private reads : 
2022-06-21T23:44:39.5537256Z   ✔ Proposal #buildProposalInterest should return interest and chaincode and chaincode collections with no private reads : 0ms
2022-06-21T23:44:39.5568558Z     Proposal #buildProposalInterest should return interest and chaincode and chaincode collections with no private reads : 
2022-06-21T23:44:39.5569891Z   ✔ Proposal #buildProposalInterest should return interest and chaincode and chaincode collections with no private reads : 0ms
2022-06-21T23:44:39.5587701Z     Proposal #addCollectionInterest should save collection interest: 
2022-06-21T23:44:39.5588393Z   ✔ Proposal #addCollectionInterest should save collection interest: 0ms
2022-06-21T23:44:39.5606904Z     Proposal #addCollectionInterest should save collection interest: 
2022-06-21T23:44:39.5607573Z   ✔ Proposal #addCollectionInterest should save collection interest: 0ms
2022-06-21T23:44:39.5624173Z     Proposal #addCollectionInterest should require a string collection name: 
2022-06-21T23:44:39.5626308Z   ✔ Proposal #addCollectionInterest should require a string collection name: 0ms
2022-06-21T23:44:39.5644660Z     Proposal #setNoPrivateReads should set no private reads: 
2022-06-21T23:44:39.5645448Z   ✔ Proposal #setNoPrivateReads should set no private reads: 0ms
2022-06-21T23:44:39.5661717Z     Proposal #setNoPrivateReads should set no private reads false: 
2022-06-21T23:44:39.5662412Z   ✔ Proposal #setNoPrivateReads should set no private reads false: 0ms
2022-06-21T23:44:39.5683669Z     Proposal #setNoPrivateReads should require a boolean: 
2022-06-21T23:44:39.5684588Z   ✔ Proposal #setNoPrivateReads should require a boolean: 0ms
2022-06-21T23:44:39.5704643Z     Proposal #addChaincodeCollectionsInterest should save chaincode collection interest: 
2022-06-21T23:44:39.5705491Z   ✔ Proposal #addChaincodeCollectionsInterest should save chaincode collection interest: 0ms
2022-06-21T23:44:39.5721454Z     Proposal #addChaincodeCollectionsInterest should save chaincode only chaincode collection interest: 
2022-06-21T23:44:39.5722296Z   ✔ Proposal #addChaincodeCollectionsInterest should save chaincode only chaincode collection interest: 0ms
2022-06-21T23:44:39.5736883Z     Proposal #addChaincodeCollectionsInterest should require a string chaincode name: 
2022-06-21T23:44:39.5737635Z   ✔ Proposal #addChaincodeCollectionsInterest should require a string chaincode name: 1ms
2022-06-21T23:44:39.5753516Z     Proposal #addChaincodeNoPrivateReadsCollectionsInterest should save chaincode collection interest: 
2022-06-21T23:44:39.5754426Z   ✔ Proposal #addChaincodeNoPrivateReadsCollectionsInterest should save chaincode collection interest: 0ms
2022-06-21T23:44:39.5773194Z     Proposal #addChaincodeNoPrivateReadsCollectionsInterest should save chaincode only chaincode collection interest: 
2022-06-21T23:44:39.5774229Z   ✔ Proposal #addChaincodeNoPrivateReadsCollectionsInterest should save chaincode only chaincode collection interest: 0ms
2022-06-21T23:44:39.5790089Z     Proposal #addChaincodeNoPrivateReadsCollectionsInterest should require a string chaincode name: 
2022-06-21T23:44:39.5791025Z   ✔ Proposal #addChaincodeNoPrivateReadsCollectionsInterest should require a string chaincode name: 0ms
2022-06-21T23:44:39.5817838Z     Proposal #build should require a idContext: 
2022-06-21T23:44:39.5818444Z   ✔ Proposal #build should require a idContext: 0ms
2022-06-21T23:44:39.5831216Z     Proposal #build should require an array of args: 
2022-06-21T23:44:39.5831877Z   ✔ Proposal #build should require an array of args: 0ms
2022-06-21T23:44:39.5859607Z     Proposal #build should build with default options: 
2022-06-21T23:44:39.5860229Z   ✔ Proposal #build should build with default options: 1ms
2022-06-21T23:44:39.5883633Z     Proposal #build should build with options: 
2022-06-21T23:44:39.5884226Z   ✔ Proposal #build should build with options: 1ms
2022-06-21T23:44:39.5971416Z     Proposal #send throws if targets is missing: 
2022-06-21T23:44:39.5972204Z   ✔ Proposal #send throws if targets is missing: 7ms
2022-06-21T23:44:39.6059874Z     Proposal #send returns no results: 
2022-06-21T23:44:39.6060465Z   ✔ Proposal #send returns no results: 7ms
2022-06-21T23:44:39.6157947Z     Proposal #send should be able to handle result error: 
2022-06-21T23:44:39.6158644Z   ✔ Proposal #send should be able to handle result error: 7ms
2022-06-21T23:44:39.6234571Z     Proposal #send should be able to handle rejected error: 
2022-06-21T23:44:39.6235537Z   ✔ Proposal #send should be able to handle rejected error: 6ms
2022-06-21T23:44:39.6308694Z     Proposal #send should have responses when status included: 
2022-06-21T23:44:39.6309446Z   ✔ Proposal #send should have responses when status included: 6ms
2022-06-21T23:44:39.6383226Z     Proposal #send should have responses from handler when status included: 
2022-06-21T23:44:39.6383976Z   ✔ Proposal #send should have responses from handler when status included: 6ms
2022-06-21T23:44:39.6460880Z     Proposal #send should have responses from handler when status included: 
2022-06-21T23:44:39.6461711Z   ✔ Proposal #send should have responses from handler when status included: 6ms
2022-06-21T23:44:39.6556945Z     Proposal #send should have errors from handler when error included: 
2022-06-21T23:44:39.6557750Z   ✔ Proposal #send should have errors from handler when error included: 7ms
2022-06-21T23:44:39.6635814Z     Proposal #send should have errors from handler when error included: 
2022-06-21T23:44:39.6636671Z   ✔ Proposal #send should have errors from handler when error included: 7ms
2022-06-21T23:44:39.6655443Z     Proposal #verifyProposalResponse should require proposalResponse: 
2022-06-21T23:44:39.6657188Z   ✔ Proposal #verifyProposalResponse should require proposalResponse: 1ms
2022-06-21T23:44:39.6671850Z     Proposal #verifyProposalResponse should be false if an error: 
2022-06-21T23:44:39.6672553Z   ✔ Proposal #verifyProposalResponse should be false if an error: 0ms
2022-06-21T23:44:39.6690207Z     Proposal #verifyProposalResponse should require proposalResponse.endorsement: 
2022-06-21T23:44:39.6691254Z   ✔ Proposal #verifyProposalResponse should require proposalResponse.endorsement: 0ms
2022-06-21T23:44:39.6708353Z     Proposal #verifyProposalResponse should get not implemented: 
2022-06-21T23:44:39.6709066Z   ✔ Proposal #verifyProposalResponse should get not implemented: 0ms
2022-06-21T23:44:39.6724623Z     Proposal #toString should return string: 
2022-06-21T23:44:39.6725198Z   ✔ Proposal #toString should return string: 1ms
2022-06-21T23:44:39.6739957Z     Query #constructor should require a name: 
2022-06-21T23:44:39.6740626Z   ✔ Query #constructor should require a name: 0ms
2022-06-21T23:44:39.6747357Z     Query #constructor should require a Channel: 
2022-06-21T23:44:39.6747922Z   ✔ Query #constructor should require a Channel: 0ms
2022-06-21T23:44:39.6756828Z     Query #constructor should create: 
2022-06-21T23:44:39.6757837Z   ✔ Query #constructor should create: 0ms
2022-06-21T23:44:39.6836986Z     Query overwrite send should have queryResults when this is a query: 
2022-06-21T23:44:39.6838090Z   ✔ Query overwrite send should have queryResults when this is a query: 7ms
2022-06-21T23:44:39.6906691Z     Query overwrite send should have empty queryResults when this is a query and no good responses: 
2022-06-21T23:44:39.6907794Z   ✔ Query overwrite send should have empty queryResults when this is a query and no good responses: 6ms
2022-06-21T23:44:39.6971934Z     Query overwrite send should have empty queryResults when this is a query and unknown responses: 
2022-06-21T23:44:39.6974019Z   ✔ Query overwrite send should have empty queryResults when this is a query and unknown responses: 6ms
2022-06-21T23:44:39.6981296Z     Query #toString should return string: 
2022-06-21T23:44:39.6981867Z   ✔ Query #toString should return string: 0ms
2022-06-21T23:44:39.6993872Z     ServiceAction #constructor should require name: 
2022-06-21T23:44:39.6994847Z   ✔ ServiceAction #constructor should require name: 0ms
2022-06-21T23:44:39.7000088Z     ServiceAction #constructor should create a new instance: 
2022-06-21T23:44:39.7001879Z   ✔ ServiceAction #constructor should create a new instance: 0ms
2022-06-21T23:44:39.7010177Z     ServiceAction #_reset should reset: 
2022-06-21T23:44:39.7011261Z   ✔ ServiceAction #_reset should reset: 0ms
2022-06-21T23:44:39.7017008Z     ServiceAction #build should indicate that needs to be implemented: 
2022-06-21T23:44:39.7018767Z   ✔ ServiceAction #build should indicate that needs to be implemented: 0ms
2022-06-21T23:44:39.7027881Z     ServiceAction #sign should require param: 
2022-06-21T23:44:39.7028973Z   ✔ ServiceAction #sign should require param: 0ms
2022-06-21T23:44:39.7035686Z     ServiceAction #sign should require a payload: 
2022-06-21T23:44:39.7036482Z   ✔ ServiceAction #sign should require a payload: 1ms
2022-06-21T23:44:39.7044472Z     ServiceAction #sign should require a signature or identityContext: 
2022-06-21T23:44:39.7045382Z   ✔ ServiceAction #sign should require a signature or identityContext: 1ms
2022-06-21T23:44:39.7099024Z     ServiceAction #sign should sign if identity context provided: 
2022-06-21T23:44:39.7099990Z   ✔ ServiceAction #sign should sign if identity context provided: 5ms
2022-06-21T23:44:39.7106532Z     ServiceAction #sign should sign if signature (byte array) provided: 
2022-06-21T23:44:39.7108377Z   ✔ ServiceAction #sign should sign if signature (byte array) provided: 0ms
2022-06-21T23:44:39.7116604Z     ServiceAction #send should indicate that needs to be implemented: 
2022-06-21T23:44:39.7117659Z   ✔ ServiceAction #send should indicate that needs to be implemented: 1ms
2022-06-21T23:44:39.7124710Z     ServiceAction #getSignedProposal should get signed proposal: 
2022-06-21T23:44:39.7126527Z   ✔ ServiceAction #getSignedProposal should get signed proposal: 1ms
2022-06-21T23:44:39.7134065Z     ServiceAction #getSignedEnvelope should get signed envelope: 
2022-06-21T23:44:39.7135836Z   ✔ ServiceAction #getSignedEnvelope should get signed envelope: 1ms
2022-06-21T23:44:39.7143771Z     ServiceAction #_checkPayloadAndSignature should require a payload: 
2022-06-21T23:44:39.7144750Z   ✔ ServiceAction #_checkPayloadAndSignature should require a payload: 0ms
2022-06-21T23:44:39.7152207Z     ServiceAction #_checkPayloadAndSignature should require a signature: 
2022-06-21T23:44:39.7152968Z   ✔ ServiceAction #_checkPayloadAndSignature should require a signature: 0ms
2022-06-21T23:44:39.7160751Z     ServiceAction #toString should indicate that needs to be implemented: 
2022-06-21T23:44:39.7163915Z   ✔ ServiceAction #toString should indicate that needs to be implemented: 0ms
2022-06-21T23:44:39.7180808Z     ServiceEndpoint #constructor should require name: 
2022-06-21T23:44:39.7181806Z   ✔ ServiceEndpoint #constructor should require name: 0ms
2022-06-21T23:44:39.7191094Z     ServiceEndpoint #constructor should require client: 
2022-06-21T23:44:39.7192915Z   ✔ ServiceEndpoint #constructor should require client: 0ms
2022-06-21T23:44:39.7205201Z     ServiceEndpoint #setEndpoint should run: 
2022-06-21T23:44:39.7205844Z   ✔ ServiceEndpoint #setEndpoint should run: 1ms
2022-06-21T23:44:39.7217543Z     ServiceEndpoint #setEndpoint should throw: 
2022-06-21T23:44:39.7219438Z   ✔ ServiceEndpoint #setEndpoint should throw: 0ms
2022-06-21T23:44:39.7311716Z     ServiceEndpoint #isConnectable should be true if connected: 
2022-06-21T23:44:39.7312405Z   ✔ ServiceEndpoint #isConnectable should be true if connected: 0ms
2022-06-21T23:44:39.7312961Z     ServiceEndpoint #isConnectable should be true if not connected and have endpoint assigned: 
2022-06-21T23:44:39.7313660Z   ✔ ServiceEndpoint #isConnectable should be true if not connected and have endpoint assigned: 0ms
2022-06-21T23:44:39.7314225Z     ServiceEndpoint #isConnectable should be false if not connected and no endpoint assigned: 
2022-06-21T23:44:39.7314904Z   ✔ ServiceEndpoint #isConnectable should be false if not connected and no endpoint assigned: 0ms
2022-06-21T23:44:39.7315470Z     ServiceEndpoint #isConnectable should be false if not connected and no service class assigned: 
2022-06-21T23:44:39.7316156Z   ✔ ServiceEndpoint #isConnectable should be false if not connected and no service class assigned: 0ms
2022-06-21T23:44:39.7316637Z     ServiceEndpoint #connect should reject if no endpoint: 
2022-06-21T23:44:39.7317156Z   ✔ ServiceEndpoint #connect should reject if no endpoint: 1ms
2022-06-21T23:44:39.7317578Z     ServiceEndpoint #connect should reject if connected: 
2022-06-21T23:44:39.7318072Z   ✔ ServiceEndpoint #connect should reject if connected: 1ms
2022-06-21T23:44:39.7318751Z     ServiceEndpoint #connect should reject if service exist: 
2022-06-21T23:44:39.7319289Z   ✔ ServiceEndpoint #connect should reject if service exist: 0ms
2022-06-21T23:44:39.8340383Z     ServiceEndpoint #connect should reject if timeout: 
2022-06-21T23:44:39.8341426Z   ✔ ServiceEndpoint #connect should reject if timeout: 102ms
2022-06-21T23:44:39.8362683Z     ServiceEndpoint #connect should run if connected: 
2022-06-21T23:44:39.8363271Z   ✔ ServiceEndpoint #connect should run if connected: 1ms
2022-06-21T23:44:39.8384320Z     ServiceEndpoint #checkConnection should resolve false if not connected: 
2022-06-21T23:44:39.8385852Z   ✔ ServiceEndpoint #checkConnection should resolve false if not connected: 2ms
2022-06-21T23:44:39.8407617Z     ServiceEndpoint #checkConnection should resolve true if connected: 
2022-06-21T23:44:39.8408632Z   ✔ ServiceEndpoint #checkConnection should resolve true if connected: 1ms
2022-06-21T23:44:39.8429501Z     ServiceEndpoint #checkConnection should resolve false if not connected and not able to reset: 
2022-06-21T23:44:39.8430666Z   ✔ ServiceEndpoint #checkConnection should resolve false if not connected and not able to reset: 1ms
2022-06-21T23:44:39.8448645Z     ServiceEndpoint #checkConnection should resolve true if not connected and able to reset: 
2022-06-21T23:44:39.8450060Z   ✔ ServiceEndpoint #checkConnection should resolve true if not connected and able to reset: 1ms
2022-06-21T23:44:39.8472099Z     ServiceEndpoint #checkConnection should resolve true if connection fails, but able to reset: 
2022-06-21T23:44:39.8473236Z   ✔ ServiceEndpoint #checkConnection should resolve true if connection fails, but able to reset: 1ms
2022-06-21T23:44:39.8502629Z     ServiceEndpoint #checkConnection should resolve false if not connectable: 
2022-06-21T23:44:39.8503769Z   ✔ ServiceEndpoint #checkConnection should resolve false if not connectable: 1ms
2022-06-21T23:44:39.8516684Z     ServiceEndpoint #disconnect should run if no service: 
2022-06-21T23:44:39.8518117Z   ✔ ServiceEndpoint #disconnect should run if no service: 0ms
2022-06-21T23:44:39.8533548Z     ServiceEndpoint #disconnect should run if service exist: 
2022-06-21T23:44:39.8534799Z   ✔ ServiceEndpoint #disconnect should run if service exist: 0ms
2022-06-21T23:44:39.8557271Z     ServiceEndpoint #resetConnection should run: 
2022-06-21T23:44:39.8558447Z   ✔ ServiceEndpoint #resetConnection should run: 1ms
2022-06-21T23:44:39.8581046Z     ServiceEndpoint #resetConnection should fail: 
2022-06-21T23:44:39.8581603Z   ✔ ServiceEndpoint #resetConnection should fail: 1ms
2022-06-21T23:44:39.8619039Z     ServiceEndpoint #waitForReady should reject if service does not exist: 
2022-06-21T23:44:39.8620424Z   ✔ ServiceEndpoint #waitForReady should reject if service does not exist: 0ms
2022-06-21T23:44:39.8633658Z     ServiceEndpoint #waitForReady should reject service.waitForReady returns error.message: 
2022-06-21T23:44:39.8634433Z   ✔ ServiceEndpoint #waitForReady should reject service.waitForReady returns error.message: 1ms
2022-06-21T23:44:39.8706957Z     ServiceEndpoint #waitForReady should reject service.waitForReady returns error as string: 
2022-06-21T23:44:39.8708111Z   ✔ ServiceEndpoint #waitForReady should reject service.waitForReady returns error as string: 0ms
2022-06-21T23:44:39.8708706Z     ServiceEndpoint #waitForReady should resolve if service.waitForReady does not return an error: 
2022-06-21T23:44:39.8726177Z   ✔ ServiceEndpoint #waitForReady should resolve if service.waitForReady does not return an error: 0ms
2022-06-21T23:44:39.8726775Z     ServiceEndpoint #getCharacteristics should get a good characteristics object: 
2022-06-21T23:44:39.8742657Z   ✔ ServiceEndpoint #getCharacteristics should get a good characteristics object: 0ms
2022-06-21T23:44:39.8743271Z     ServiceEndpoint #getCharacteristics should get a good characteristics object without endpoint: 
2022-06-21T23:44:39.8744004Z   ✔ ServiceEndpoint #getCharacteristics should get a good characteristics object without endpoint: 0ms
2022-06-21T23:44:39.8753571Z     ServiceEndpoint #getCharacteristics should get a good characteristics object without clientKey: 
2022-06-21T23:44:39.8754499Z   ✔ ServiceEndpoint #getCharacteristics should get a good characteristics object without clientKey: 0ms
2022-06-21T23:44:39.8763014Z     ServiceEndpoint #isTLS should get a false result: 
2022-06-21T23:44:39.8763610Z   ✔ ServiceEndpoint #isTLS should get a false result: 0ms
2022-06-21T23:44:39.8764021Z     ServiceEndpoint #isTLS should get a true result: 
2022-06-21T23:44:39.8764518Z   ✔ ServiceEndpoint #isTLS should get a true result: 0ms
2022-06-21T23:44:39.8765262Z     ServiceEndpoint #isTLS should get an error if not connected: 
2022-06-21T23:44:39.8765759Z   ✔ ServiceEndpoint #isTLS should get an error if not connected: 1ms
2022-06-21T23:44:39.8766151Z     ServiceEndpoint #isTLS should get a true result: 
2022-06-21T23:44:39.8766606Z   ✔ ServiceEndpoint #isTLS should get a true result: 0ms
2022-06-21T23:44:39.8778871Z     ServiceEndpoint #toString should get a string url: 
2022-06-21T23:44:39.8779524Z   ✔ ServiceEndpoint #toString should get a string url: 0ms
2022-06-21T23:44:39.8815616Z     ServiceEndpoint #toString should get a string result: 
2022-06-21T23:44:39.8816343Z   ✔ ServiceEndpoint #toString should get a string result: 0ms
2022-06-21T23:44:39.8816767Z     ServiceHandler #constructor should create a new instance: 
2022-06-21T23:44:39.8817307Z   ✔ ServiceHandler #constructor should create a new instance: 0ms
2022-06-21T23:44:39.8817775Z     ServiceHandler #commit should indicate that needs to be implemented: 
2022-06-21T23:44:39.8818369Z   ✔ ServiceHandler #commit should indicate that needs to be implemented: 1ms
2022-06-21T23:44:39.8818836Z     ServiceHandler #endorse should indicate that needs to be implemented: 
2022-06-21T23:44:39.8819428Z   ✔ ServiceHandler #endorse should indicate that needs to be implemented: 0ms
2022-06-21T23:44:39.8819930Z     ServiceHandler #query should indicate that needs to be implemented: 
2022-06-21T23:44:39.8820724Z   ✔ ServiceHandler #query should indicate that needs to be implemented: 0ms
2022-06-21T23:44:39.8821241Z     ServiceHandler #toString should indicate that needs to be implemented: 
2022-06-21T23:44:39.8821843Z   ✔ ServiceHandler #toString should indicate that needs to be implemented: 0ms
2022-06-21T23:44:39.8861402Z     Signer #constructor should throw if no crypto suite: 
2022-06-21T23:44:39.8862003Z   ✔ Signer #constructor should throw if no crypto suite: 0ms
2022-06-21T23:44:39.8910953Z     Signer #constructor should throw if no MSP ID: 
2022-06-21T23:44:39.8911549Z   ✔ Signer #constructor should throw if no MSP ID: 1ms
2022-06-21T23:44:39.8953842Z     Signer #getPublicKey should return the public key: 
2022-06-21T23:44:39.8954445Z   ✔ Signer #getPublicKey should return the public key: 0ms
2022-06-21T23:44:39.9003195Z     Signer #sign should handle a successful sign by the crypto suite: 
2022-06-21T23:44:39.9003871Z   ✔ Signer #sign should handle a successful sign by the crypto suite: 1ms
2022-06-21T23:44:39.9057603Z     Signer #sign should handle an unsuccessful sign by the crypto suite: 
2022-06-21T23:44:39.9058281Z   ✔ Signer #sign should handle an unsuccessful sign by the crypto suite: 0ms
2022-06-21T23:44:39.9088153Z     SigningIdentity #constructor should throw if no certificate: 
2022-06-21T23:44:39.9088828Z   ✔ SigningIdentity #constructor should throw if no certificate: 0ms
2022-06-21T23:44:39.9125646Z     SigningIdentity #constructor should throw if no public key: 
2022-06-21T23:44:39.9126446Z   ✔ SigningIdentity #constructor should throw if no public key: 0ms
2022-06-21T23:44:39.9161603Z     SigningIdentity #constructor should throw if no MSP ID: 
2022-06-21T23:44:39.9162206Z   ✔ SigningIdentity #constructor should throw if no MSP ID: 0ms
2022-06-21T23:44:39.9199789Z     SigningIdentity #constructor should throw if no crypto suite: 
2022-06-21T23:44:39.9200446Z   ✔ SigningIdentity #constructor should throw if no crypto suite: 1ms
2022-06-21T23:44:39.9236353Z     SigningIdentity #constructor should throw if no signer: 
2022-06-21T23:44:39.9236982Z   ✔ SigningIdentity #constructor should throw if no signer: 0ms
2022-06-21T23:44:39.9271312Z     SigningIdentity #sign should throw if options specified, but hash function specified is not a function: 
2022-06-21T23:44:39.9272151Z   ✔ SigningIdentity #sign should throw if options specified, but hash function specified is not a function: 1ms
2022-06-21T23:44:39.9322864Z     SigningIdentity #sign should handle a successful sign by the signer using the default hash function: 
2022-06-21T23:44:39.9323632Z   ✔ SigningIdentity #sign should handle a successful sign by the signer using the default hash function: 2ms
2022-06-21T23:44:39.9366602Z     SigningIdentity #sign should handle a successful sign by the signer using the specified hash function: 
2022-06-21T23:44:39.9367595Z   ✔ SigningIdentity #sign should handle a successful sign by the signer using the specified hash function: 1ms
2022-06-21T23:44:39.9427413Z     SigningIdentity #sign should handle an unsuccessful sign by the signer: 
2022-06-21T23:44:39.9428114Z   ✔ SigningIdentity #sign should handle an unsuccessful sign by the signer: 1ms
2022-06-21T23:44:39.9428503Z     User #constructor should work using a string: 
2022-06-21T23:44:39.9429136Z   ✔ User #constructor should work using a string: 0ms
2022-06-21T23:44:39.9429965Z     User #constructor should work using a config with name: 
2022-06-21T23:44:39.9430440Z   ✔ User #constructor should work using a config with name: 1ms
2022-06-21T23:44:39.9430873Z     User #constructor should work using a config with enrollment and roles: 
2022-06-21T23:44:39.9431433Z   ✔ User #constructor should work using a config with enrollment and roles: 0ms
2022-06-21T23:44:39.9431816Z     User #setters and getters should run: 
2022-06-21T23:44:39.9432213Z   ✔ User #setters and getters should run: 1ms
2022-06-21T23:44:39.9444505Z     User #setEnrollment should require a private key: 
2022-06-21T23:44:39.9445073Z   ✔ User #setEnrollment should require a private key: 0ms
2022-06-21T23:44:39.9445691Z     User #setEnrollment should require a certificate: 
2022-06-21T23:44:39.9446200Z   ✔ User #setEnrollment should require a certificate: 1ms
2022-06-21T23:44:39.9446568Z     User #setEnrollment should require a mspid: 
2022-06-21T23:44:39.9447003Z   ✔ User #setEnrollment should require a mspid: 0ms
2022-06-21T23:44:39.9534810Z     User #setEnrollment should require a mspid: 
2022-06-21T23:44:39.9563150Z   ✔ User #setEnrollment should require a mspid: 3ms
2022-06-21T23:44:39.9563542Z     User #isEnrolled should return true: 
2022-06-21T23:44:39.9563967Z   ✔ User #isEnrolled should return true: 3ms
2022-06-21T23:44:39.9564321Z     User #isEnrolled should return false: 
2022-06-21T23:44:39.9564790Z   ✔ User #isEnrolled should return false: 0ms
2022-06-21T23:44:39.9565166Z     User #fromString should require a chaincodeId: 
2022-06-21T23:44:39.9565631Z   ✔ User #fromString should require a chaincodeId: 3ms
2022-06-21T23:44:39.9617602Z     User #fromString should throw an error when the private key is missing from a user enrollment object: 
2022-06-21T23:44:39.9619618Z   ✔ User #fromString should throw an error when the private key is missing from a user enrollment object: 3ms
2022-06-21T23:44:39.9626635Z     User #toString should return string: 
2022-06-21T23:44:39.9627454Z   ✔ User #toString should return string: 0ms
2022-06-21T23:44:39.9633631Z     Utils #byteToNormalizedPEM should convert one byte to a good PEM: 
2022-06-21T23:44:39.9634961Z   ✔ Utils #byteToNormalizedPEM should convert one byte to a good PEM: 0ms
2022-06-21T23:44:39.9635734Z     Utils #byteToNormalizedPEM should convert two certs in byte to a good PEM: 
2022-06-21T23:44:39.9636711Z   ✔ Utils #byteToNormalizedPEM should convert two certs in byte to a good PEM: 0ms
2022-06-21T23:44:39.9640594Z     Utils #byteToNormalizedPEM should convert one byte to a good PEM with no ending new line: 
2022-06-21T23:44:39.9641605Z   ✔ Utils #byteToNormalizedPEM should convert one byte to a good PEM with no ending new line: 0ms
2022-06-21T23:44:39.9642265Z     Utils #byteToNormalizedPEM should convert two certs in byte to a good PEM: 
2022-06-21T23:44:39.9643105Z   ✔ Utils #byteToNormalizedPEM should convert two certs in byte to a good PEM: 0ms
2022-06-21T23:44:39.9648079Z     Utils #byteToNormalizedPEM should convert three certs in byte to a good PEM: 
2022-06-21T23:44:39.9649151Z   ✔ Utils #byteToNormalizedPEM should convert three certs in byte to a good PEM: 1ms
2022-06-21T23:44:39.9656574Z     Utils #convertBytetoString should ignore additional fields on array-like input: 
2022-06-21T23:44:39.9657514Z   ✔ Utils #convertBytetoString should ignore additional fields on array-like input: 0ms
2022-06-21T23:44:39.9658349Z     Utils #newCryptoSuite should return a default instance of CryptoSuite_ECDSA_AES with the correct properties: 
2022-06-21T23:44:39.9659645Z   ✔ Utils #newCryptoSuite should return a default instance of CryptoSuite_ECDSA_AES with the correct properties: 1ms
2022-06-21T23:44:39.9666765Z     Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the correct keysize: 
2022-06-21T23:44:39.9667891Z   ✔ Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the correct keysize: 1ms
2022-06-21T23:44:39.9726030Z     Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the correct keysize: 
2022-06-21T23:44:39.9727086Z   ✔ Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the correct keysize: 1ms
2022-06-21T23:44:39.9727838Z     Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the default keysize: 
2022-06-21T23:44:39.9728842Z   ✔ Utils #newCryptoSuite should return an instance of CryptoSuite_ECDSA_AES with the default keysize: 0ms
2022-06-21T23:44:39.9729684Z     Utils #newCryptoSuite should throw an error when an illegal key size is given: 
2022-06-21T23:44:39.9730665Z   ✔ Utils #newCryptoSuite should throw an error when an illegal key size is given: 0ms
2022-06-21T23:44:40.2828362Z     Utils #newCryptoSuite should throw an error when using HSM and a fake library path: 
2022-06-21T23:44:40.2829667Z   ✔ Utils #newCryptoSuite should throw an error when using HSM and a fake library path: 313ms
2022-06-21T23:44:40.2840266Z     Utils #newCryptoSuite should throw an error when using HSM and no library path is given: 
2022-06-21T23:44:40.2840968Z   ✔ Utils #newCryptoSuite should throw an error when using HSM and no library path is given: 1ms
2022-06-21T23:44:40.2848115Z     Utils #newCryptoSuite should throw an error when an illegal hashing algorithm has been set: 
2022-06-21T23:44:40.2849165Z   ✔ Utils #newCryptoSuite should throw an error when an illegal hashing algorithm has been set: 1ms
2022-06-21T23:44:40.2855428Z     Utils #newCryptoSuite should throw an error when an unsupported hashing algorithm has been set: 
2022-06-21T23:44:40.2856441Z   ✔ Utils #newCryptoSuite should throw an error when an unsupported hashing algorithm has been set: 0ms
2022-06-21T23:44:40.2862389Z     Utils #newCryptoSuite should throw an error when an incorrect hashing algorithm is specified: 
2022-06-21T23:44:40.2863590Z   ✔ Utils #newCryptoSuite should throw an error when an incorrect hashing algorithm is specified: 0ms
2022-06-21T23:44:40.2877048Z     Utils getLogger should return a default winston logger: 2022-06-21T23:44:40.286Z - [33mwarn[39m: Failed to parse environment variable "HFC_LOGGING". Returned a winston logger with default configurations. Error: SyntaxError: Unexpected token u in JSON at position 0
2022-06-21T23:44:40.2878052Z     at JSON.parse (<anonymous>)
2022-06-21T23:44:40.2878933Z     at Object.module.exports.getLogger (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/lib/Utils.js:51:254)
2022-06-21T23:44:40.2880026Z     at Context.<anonymous> (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/test/Utils.js:184:25)
2022-06-21T23:44:40.2882810Z     at callFn (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:366:21)
2022-06-21T23:44:40.2883775Z     at Test.Runnable.run (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:354:5)
2022-06-21T23:44:40.2887138Z     at Runner.runTest (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:678:10)
2022-06-21T23:44:40.2887979Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:801:12
2022-06-21T23:44:40.2889877Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:593:14)
2022-06-21T23:44:40.2891009Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:603:7
2022-06-21T23:44:40.2892189Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:486:14)
2022-06-21T23:44:40.2893189Z     at Immediate._onImmediate (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:571:5)
2022-06-21T23:44:40.2950474Z     at processImmediate (internal/timers.js:464:21)
2022-06-21T23:44:40.2951092Z 
2022-06-21T23:44:40.2951768Z   ✔ Utils getLogger should return a default winston logger: 2ms
2022-06-21T23:44:40.2953194Z     Utils getLogger should return a default logger if the settings are defined incorrectly: 2022-06-21T23:44:40.288Z - [33mwarn[39m: Failed to parse environment variable "HFC_LOGGING". Returned a winston logger with default configurations. Error: SyntaxError: Unexpected token ' in JSON at position 1
2022-06-21T23:44:40.2954064Z     at JSON.parse (<anonymous>)
2022-06-21T23:44:40.2955322Z     at Object.module.exports.getLogger (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/lib/Utils.js:51:254)
2022-06-21T23:44:40.2956496Z     at Context.<anonymous> (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/test/Utils.js:195:25)
2022-06-21T23:44:40.2957625Z     at callFn (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:366:21)
2022-06-21T23:44:40.2959664Z     at Test.Runnable.run (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:354:5)
2022-06-21T23:44:40.2961703Z     at Runner.runTest (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:678:10)
2022-06-21T23:44:40.2962713Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:801:12
2022-06-21T23:44:40.2963746Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:593:14)
2022-06-21T23:44:40.2964704Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:603:7
2022-06-21T23:44:40.2965622Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:486:14)
2022-06-21T23:44:40.2966560Z     at Immediate._onImmediate (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:571:5)
2022-06-21T23:44:40.2967268Z     at processImmediate (internal/timers.js:464:21)
2022-06-21T23:44:40.2967895Z 
2022-06-21T23:44:40.2968720Z   ✔ Utils getLogger should return a default logger if the settings are defined incorrectly: 1ms
2022-06-21T23:44:40.2970890Z     Utils getLogger should return a default logger if the settings are defined illegally: 2022-06-21T23:44:40.288Z - [33mwarn[39m: Failed to parse environment variable "HFC_LOGGING". Returned a winston logger with default configurations. Error: Error: Environment variable "HFC_LOGGING" must be an object conforming to the format documented.
2022-06-21T23:44:40.2972150Z     at Object.module.exports.getLogger (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/lib/Utils.js:51:440)
2022-06-21T23:44:40.2973070Z     at Context.<anonymous> (/home/runner/work/fabric-sdk-node/fabric-sdk-node/fabric-common/test/Utils.js:204:25)
2022-06-21T23:44:40.2973894Z     at callFn (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:366:21)
2022-06-21T23:44:40.2974782Z     at Test.Runnable.run (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runnable.js:354:5)
2022-06-21T23:44:40.2975669Z     at Runner.runTest (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:678:10)
2022-06-21T23:44:40.2976848Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:801:12
2022-06-21T23:44:40.2977816Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:593:14)
2022-06-21T23:44:40.2978762Z     at /home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:603:7
2022-06-21T23:44:40.2979510Z     at next (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:486:14)
2022-06-21T23:44:40.2980468Z     at Immediate._onImmediate (/home/runner/work/fabric-sdk-node/fabric-sdk-node/node_modules/mocha/lib/runner.js:571:5)
2022-06-21T23:44:40.2981004Z     at processImmediate (internal/timers.js:464:21)
2022-06-21T23:44:40.2981265Z 
2022-06-21T23:44:40.2981722Z   ✔ Utils getLogger should return a default logger if the settings are defined illegally: 0ms
2022-06-21T23:44:40.3073148Z     Utils getLogger log to a file should write to a log file with the correct logging level: 
2022-06-21T23:44:40.3074017Z   ✔ Utils getLogger log to a file should write to a log file with the correct logging level: 13ms
2022-06-21T23:44:40.3098391Z 
2022-06-21T23:44:40.3098879Z   1014 passing (6s)
2022-06-21T23:44:40.3099158Z 
2022-06-21T23:44:40.7486663Z 
2022-06-21T23:44:40.7487867Z > -@2.5.0-snapshot unitTest:ca-client /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:40.7488649Z > mocha --reporter list 'fabric-ca-client/test/**/*.js'
2022-06-21T23:44:40.7488961Z 
2022-06-21T23:44:43.7714542Z 
2022-06-21T23:44:43.7754675Z     AffiliationService #constructor should set the client as passed in the argument: 
2022-06-21T23:44:43.7756092Z   ✔ AffiliationService #constructor should set the client as passed in the argument: 1ms
2022-06-21T23:44:43.7820366Z     AffiliationService #create should throw if called with a null argument "req": 
2022-06-21T23:44:43.7821551Z   ✔ AffiliationService #create should throw if called with a null argument "req": 1ms
2022-06-21T23:44:43.7861644Z     AffiliationService #create should throw if called with an undefined argument "req": 
2022-06-21T23:44:43.7863528Z   ✔ AffiliationService #create should throw if called with an undefined argument "req": 0ms
2022-06-21T23:44:43.7930281Z     AffiliationService #create should throw if called without the parameter "req.name": 
2022-06-21T23:44:43.7931832Z   ✔ AffiliationService #create should throw if called without the parameter "req.name": 0ms
2022-06-21T23:44:43.7973211Z     AffiliationService #create should throw if registrar is null: 
2022-06-21T23:44:43.7974328Z   ✔ AffiliationService #create should throw if registrar is null: 0ms
2022-06-21T23:44:43.8008521Z     AffiliationService #create should throw if registrar is undefined: 
2022-06-21T23:44:43.8009758Z   ✔ AffiliationService #create should throw if registrar is undefined: 0ms
2022-06-21T23:44:43.8100002Z     AffiliationService #create should call "checkRegistrar": 
2022-06-21T23:44:43.8103059Z   ✔ AffiliationService #create should call "checkRegistrar": 6ms
2022-06-21T23:44:43.8168208Z     AffiliationService #create should call the client POST method with the extracted url, request and signing identity: 
2022-06-21T23:44:43.8169487Z   ✔ AffiliationService #create should call the client POST method with the extracted url, request and signing identity: 4ms
2022-06-21T23:44:43.8256567Z     AffiliationService #create should call the client POST method with a "force" option if specified: 
2022-06-21T23:44:43.8257884Z   ✔ AffiliationService #create should call the client POST method with a "force" option if specified: 6ms
2022-06-21T23:44:43.8361774Z     AffiliationService #getOne should throw if missing required argument "affiliation": 
2022-06-21T23:44:43.8363309Z   ✔ AffiliationService #getOne should throw if missing required argument "affiliation": 0ms
2022-06-21T23:44:43.8397349Z     AffiliationService #getOne should throw if argument "affiliation" is not a valid string: 
2022-06-21T23:44:43.8398467Z   ✔ AffiliationService #getOne should throw if argument "affiliation" is not a valid string: 0ms
2022-06-21T23:44:43.8458182Z     AffiliationService #getOne should call "checkRegistrar": 
2022-06-21T23:44:43.8459290Z   ✔ AffiliationService #getOne should call "checkRegistrar": 3ms
2022-06-21T23:44:43.8518409Z     AffiliationService #getOne should call the client get method with the extracted url and signing identity: 
2022-06-21T23:44:43.8519317Z   ✔ AffiliationService #getOne should call the client get method with the extracted url and signing identity: 3ms
2022-06-21T23:44:43.8588279Z     AffiliationService #getAll should call "checkRegistrar": 
2022-06-21T23:44:43.8589258Z   ✔ AffiliationService #getAll should call "checkRegistrar": 3ms
2022-06-21T23:44:43.8651292Z     AffiliationService #getAll should call the client get method with "affiliations" and the signing identity: 
2022-06-21T23:44:43.8652877Z   ✔ AffiliationService #getAll should call the client get method with "affiliations" and the signing identity: 3ms
2022-06-21T23:44:43.8696172Z     AffiliationService #delete should throw if missing required argument "req": 
2022-06-21T23:44:43.8697282Z   ✔ AffiliationService #delete should throw if missing required argument "req": 1ms
2022-06-21T23:44:43.8733870Z     AffiliationService #delete should throw if called without the parameter "req.name": 
2022-06-21T23:44:43.8734635Z   ✔ AffiliationService #delete should throw if called without the parameter "req.name": 0ms
2022-06-21T23:44:43.8768986Z     AffiliationService #delete should throw if parameter "req.name" is not a valid string: 
2022-06-21T23:44:43.8770011Z   ✔ AffiliationService #delete should throw if parameter "req.name" is not a valid string: 0ms
2022-06-21T23:44:43.8821453Z     AffiliationService #delete should throw if missing required argument "registrar": 
2022-06-21T23:44:43.8822233Z   ✔ AffiliationService #delete should throw if missing required argument "registrar": 1ms
2022-06-21T23:44:43.8864618Z     AffiliationService #delete should call "checkRegistrar": 
2022-06-21T23:44:43.8865636Z   ✔ AffiliationService #delete should call "checkRegistrar": 3ms
2022-06-21T23:44:43.8929288Z     AffiliationService #delete should call the client DELETE method with an extracted "url" and the signing identity: 
2022-06-21T23:44:43.8930212Z   ✔ AffiliationService #delete should call the client DELETE method with an extracted "url" and the signing identity: 3ms
2022-06-21T23:44:43.8990509Z     AffiliationService #delete should call the client DELETE method with a "force" option if specified: 
2022-06-21T23:44:43.8991353Z   ✔ AffiliationService #delete should call the client DELETE method with a "force" option if specified: 3ms
2022-06-21T23:44:43.9102474Z     AffiliationService #update should throw if missing required argument "affiliation": 
2022-06-21T23:44:43.9103470Z   ✔ AffiliationService #update should throw if missing required argument "affiliation": 0ms
2022-06-21T23:44:43.9118028Z     AffiliationService #update should throw if required argument "affiliation" is not a valid string: 
2022-06-21T23:44:43.9118990Z   ✔ AffiliationService #update should throw if required argument "affiliation" is not a valid string: 0ms
2022-06-21T23:44:43.9151904Z     AffiliationService #update should throw if missing required argument "req": 
2022-06-21T23:44:43.9152765Z   ✔ AffiliationService #update should throw if missing required argument "req": 0ms
2022-06-21T23:44:43.9188665Z     AffiliationService #update should throw if missing required parameter "req.name": 
2022-06-21T23:44:43.9189856Z   ✔ AffiliationService #update should throw if missing required parameter "req.name": 0ms
2022-06-21T23:44:43.9250036Z     AffiliationService #update should throw if required parameter "req.name" is not a valid string: 
2022-06-21T23:44:43.9251292Z   ✔ AffiliationService #update should throw if required parameter "req.name" is not a valid string: 0ms
2022-06-21T23:44:43.9432855Z     AffiliationService #update should call "checkRegistrar": 
2022-06-21T23:44:43.9434279Z   ✔ AffiliationService #update should call "checkRegistrar": 14ms
2022-06-21T23:44:43.9493731Z     AffiliationService #update should call the client PUT method with an extracted "url", request and the signing identity: 
2022-06-21T23:44:43.9494670Z   ✔ AffiliationService #update should call the client PUT method with an extracted "url", request and the signing identity: 3ms
2022-06-21T23:44:43.9553407Z     AffiliationService #update should call the client PUT method with a "force" option if specified: 
2022-06-21T23:44:43.9554441Z   ✔ AffiliationService #update should call the client PUT method with a "force" option if specified: 4ms
2022-06-21T23:44:43.9611338Z     AffiliationService #update should pass the caname to the request if supplied: 
2022-06-21T23:44:43.9612123Z   ✔ AffiliationService #update should pass the caname to the request if supplied: 3ms
2022-06-21T23:44:43.9621820Z     IdentityService #constructor should throw if no client passed as argument: 
2022-06-21T23:44:43.9622925Z   ✔ IdentityService #constructor should throw if no client passed as argument: 0ms
2022-06-21T23:44:43.9628463Z     IdentityService #constructor should set the client as passed in the argument: 
2022-06-21T23:44:43.9629193Z   ✔ IdentityService #constructor should set the client as passed in the argument: 0ms
2022-06-21T23:44:43.9673187Z     IdentityService #getCertificates should call "checkRegistrar": 
2022-06-21T23:44:43.9674282Z   ✔ IdentityService #getCertificates should call "checkRegistrar": 1ms
2022-06-21T23:44:43.9721200Z     IdentityService #getCertificates should provide debug logging: 
2022-06-21T23:44:43.9721909Z   ✔ IdentityService #getCertificates should provide debug logging: 1ms
2022-06-21T23:44:43.9777288Z     IdentityService #getCertificates should provide error logging on failure: 
2022-06-21T23:44:43.9778032Z   ✔ IdentityService #getCertificates should provide error logging on failure: 2ms
2022-06-21T23:44:43.9816676Z     IdentityService #getCertificates should call get with the correct url and signing identity if no request: 
2022-06-21T23:44:43.9817739Z   ✔ IdentityService #getCertificates should call get with the correct url and signing identity if no request: 1ms
2022-06-21T23:44:43.9968618Z     IdentityService #getCertificates should call get with the correctly mapped request: 
2022-06-21T23:44:44.0016979Z   ✔ IdentityService #getCertificates should call get with the correctly mapped request: 1ms
2022-06-21T23:44:44.0063798Z     FabricCAClient #constructor should call "_validateConnectionOpts": 
2022-06-21T23:44:44.0064667Z   ✔ FabricCAClient #constructor should call "_validateConnectionOpts": 2ms
2022-06-21T23:44:44.0065148Z     FabricCAClient #constructor should throw if called with invalid connection options: 
2022-06-21T23:44:44.0065748Z   ✔ FabricCAClient #constructor should throw if called with invalid connection options: 0ms
2022-06-21T23:44:44.0066208Z     FabricCAClient #constructor should set all base properties of the client: 
2022-06-21T23:44:44.0067112Z   ✔ FabricCAClient #constructor should set all base properties of the client: 2ms
2022-06-21T23:44:44.0067538Z     FabricCAClient #constructor should set http if provided: 
2022-06-21T23:44:44.0068027Z   ✔ FabricCAClient #constructor should set http if provided: 1ms
2022-06-21T23:44:44.0068408Z     FabricCAClient #constructor should set port if provided: 
2022-06-21T23:44:44.0069064Z   ✔ FabricCAClient #constructor should set port if provided: 1ms
2022-06-21T23:44:44.0069670Z     FabricCAClient #constructor should set _tlsOptions if provided: 
2022-06-21T23:44:44.0070378Z   ✔ FabricCAClient #constructor should set _tlsOptions if provided: 0ms
2022-06-21T23:44:44.0073335Z     FabricCAClient #constructor should default _tlsOptions.verify if not provided in opts: 
2022-06-21T23:44:44.0074109Z   ✔ FabricCAClient #constructor should default _tlsOptions.verify if not provided in opts: 1ms
2022-06-21T23:44:44.0081030Z     FabricCAClient #constructor should default _tlsOptions.trustedRoots if not provided in opts: 
2022-06-21T23:44:44.0081831Z   ✔ FabricCAClient #constructor should default _tlsOptions.trustedRoots if not provided in opts: 1ms
2022-06-21T23:44:44.0097115Z     FabricCAClient #register should throw if called with too few parameters: 
2022-06-21T23:44:44.0098333Z   ✔ FabricCAClient #register should throw if called with too few parameters: 1ms
2022-06-21T23:44:44.0108935Z     FabricCAClient #register should throw if called with maxEnrollements that is not a number: 
2022-06-21T23:44:44.0109712Z   ✔ FabricCAClient #register should throw if called with maxEnrollements that is not a number: 1ms
2022-06-21T23:44:44.0125572Z     FabricCAClient #register should call POST with the correct method, request, and signing identity: 
2022-06-21T23:44:44.0126461Z   ✔ FabricCAClient #register should call POST with the correct method, request, and signing identity: 1ms
2022-06-21T23:44:44.0140574Z     FabricCAClient #register should call POST without the type in the request if no role provided: 
2022-06-21T23:44:44.0141594Z   ✔ FabricCAClient #register should call POST without the type in the request if no role provided: 1ms
2022-06-21T23:44:44.0154463Z     FabricCAClient #register should call POST without the secret in the request if no enrollmentSecret provided: 
2022-06-21T23:44:44.0155770Z   ✔ FabricCAClient #register should call POST without the secret in the request if no enrollmentSecret provided: 1ms
2022-06-21T23:44:44.0169536Z     FabricCAClient #register should reject on POST failure: 
2022-06-21T23:44:44.0170141Z   ✔ FabricCAClient #register should reject on POST failure: 1ms
2022-06-21T23:44:44.0183277Z     FabricCAClient #revoke should throw if not called with the correct number of parameters: 
2022-06-21T23:44:44.0184081Z   ✔ FabricCAClient #revoke should throw if not called with the correct number of parameters: 0ms
2022-06-21T23:44:44.0198696Z     FabricCAClient #revoke should call POST with the correct method, request, and signing identity: 
2022-06-21T23:44:44.0199540Z   ✔ FabricCAClient #revoke should call POST with the correct method, request, and signing identity: 1ms
2022-06-21T23:44:44.0216085Z     FabricCAClient #revoke should reject on POST failure: 
2022-06-21T23:44:44.0216703Z   ✔ FabricCAClient #revoke should reject on POST failure: 0ms
2022-06-21T23:44:44.0227472Z     FabricCAClient #reenroll should throw if not called with the correct number of parameters: 
2022-06-21T23:44:44.0228254Z   ✔ FabricCAClient #reenroll should throw if not called with the correct number of parameters: 1ms
2022-06-21T23:44:44.0241777Z     FabricCAClient #reenroll should call POST with the correct method, request, and signing identity: 
2022-06-21T23:44:44.0242571Z   ✔ FabricCAClient #reenroll should call POST with the correct method, request, and signing identity: 1ms
2022-06-21T23:44:44.0254784Z     FabricCAClient #reenroll should call POST without attributes if not provided: 
2022-06-21T23:44:44.0255491Z   ✔ FabricCAClient #reenroll should call POST without attributes if not provided: 0ms
2022-06-21T23:44:44.0269632Z     FabricCAClient #reenroll should reject on POST failure: 
2022-06-21T23:44:44.0270433Z   ✔ FabricCAClient #reenroll should reject on POST failure: 1ms
2022-06-21T23:44:44.0285259Z     FabricCAClient #newIdentityService should return a new instance of IdentityService: 
2022-06-21T23:44:44.0286304Z   ✔ FabricCAClient #newIdentityService should return a new instance of IdentityService: 1ms
2022-06-21T23:44:44.0300892Z     FabricCAClient #newAffiliationService should return a new instance of AffiliationService: 
2022-06-21T23:44:44.0301921Z   ✔ FabricCAClient #newAffiliationService should return a new instance of AffiliationService: 1ms
2022-06-21T23:44:44.0314871Z     FabricCAClient #newCertificateService should return a new instance of CertificateService: 
2022-06-21T23:44:44.0315673Z   ✔ FabricCAClient #newCertificateService should return a new instance of CertificateService: 0ms
2022-06-21T23:44:44.0362700Z     FabricCAClient #post should call a POST request with the passed parameters: 
2022-06-21T23:44:44.0363418Z   ✔ FabricCAClient #post should call a POST request with the passed parameters: 1ms
2022-06-21T23:44:44.0363896Z     FabricCAClient #delete should call a DELETE request with the passed parameters: 
2022-06-21T23:44:44.0364463Z   ✔ FabricCAClient #delete should call a DELETE request with the passed parameters: 1ms
2022-06-21T23:44:44.0365113Z     FabricCAClient #get should call a GET request with the passed parameters: 
2022-06-21T23:44:44.0366065Z   ✔ FabricCAClient #get should call a GET request with the passed parameters: 1ms
2022-06-21T23:44:44.0390943Z     FabricCAClient #put should call a PUT request with the passed parameters: 
2022-06-21T23:44:44.0391672Z   ✔ FabricCAClient #put should call a PUT request with the passed parameters: 1ms
2022-06-21T23:44:44.0402141Z     FabricCAClient #request should reject if not passed the required parameters: 
2022-06-21T23:44:44.0402875Z   ✔ FabricCAClient #request should reject if not passed the required parameters: 1ms
2022-06-21T23:44:44.0437173Z     FabricCAClient #request should pass a correctly formulated request options: 
2022-06-21T23:44:44.0437952Z   ✔ FabricCAClient #request should pass a correctly formulated request options: 2ms
2022-06-21T23:44:44.0490854Z     FabricCAClient #request should return the response data on success: 
2022-06-21T23:44:44.0491615Z   ✔ FabricCAClient #request should return the response data on success: 1ms
2022-06-21T23:44:44.0492097Z     FabricCAClient #request should reject if no success message: 
2022-06-21T23:44:44.0492633Z   ✔ FabricCAClient #request should reject if no success message: 1ms
2022-06-21T23:44:44.0520724Z     FabricCAClient #request should reject if invalid jason recieved: 
2022-06-21T23:44:44.0521629Z   ✔ FabricCAClient #request should reject if invalid jason recieved: 2ms
2022-06-21T23:44:44.0541042Z     FabricCAClient #request should reject if no payload returned and the end data contains an error status code: 
2022-06-21T23:44:44.0542630Z   ✔ FabricCAClient #request should reject if no payload returned and the end data contains an error status code: 2ms
2022-06-21T23:44:44.0554994Z     FabricCAClient #generateAuthToken should sign the certificate if no request body provided: 
2022-06-21T23:44:44.0556173Z   ✔ FabricCAClient #generateAuthToken should sign the certificate if no request body provided: 1ms
2022-06-21T23:44:44.0573544Z     FabricCAClient #generateAuthToken should sign the certificate if a request body, path and method are provided: 
2022-06-21T23:44:44.0574437Z   ✔ FabricCAClient #generateAuthToken should sign the certificate if a request body, path and method are provided: 1ms
2022-06-21T23:44:44.0585290Z     FabricCAClient #generateAuthToken should sign the certificate if only request body is provided: 
2022-06-21T23:44:44.0586042Z   ✔ FabricCAClient #generateAuthToken should sign the certificate if only request body is provided: 1ms
2022-06-21T23:44:44.0613670Z     FabricCAClient #generateAuthToken should return a concatenation of the cert and signing in base64 string: 
2022-06-21T23:44:44.0614858Z   ✔ FabricCAClient #generateAuthToken should return a concatenation of the cert and signing in base64 string: 2ms
2022-06-21T23:44:44.0620880Z     FabricCAClient #enroll should throw if not provided the required number of arguments: 
2022-06-21T23:44:44.0621647Z   ✔ FabricCAClient #enroll should throw if not provided the required number of arguments: 1ms
2022-06-21T23:44:44.0641433Z     FabricCAClient #enroll should pass a correctly formulated request options: 
2022-06-21T23:44:44.0642183Z   ✔ FabricCAClient #enroll should pass a correctly formulated request options: 1ms
2022-06-21T23:44:44.0682294Z     FabricCAClient #enroll should return the enrollmentCert and caCertChain on success: 
2022-06-21T23:44:44.0683108Z   ✔ FabricCAClient #enroll should return the enrollmentCert and caCertChain on success: 2ms
2022-06-21T23:44:44.0686425Z     FabricCAClient #enroll should reject if no payload returned and the end data contains an error status code: 
2022-06-21T23:44:44.0687219Z   ✔ FabricCAClient #enroll should reject if no payload returned and the end data contains an error status code: 2ms
2022-06-21T23:44:44.0706880Z     FabricCAClient #enroll should reject if no success message: 
2022-06-21T23:44:44.0707517Z   ✔ FabricCAClient #enroll should reject if no success message: 1ms
2022-06-21T23:44:44.0727399Z     FabricCAClient #enroll should reject if invalid json received: 
2022-06-21T23:44:44.0728019Z   ✔ FabricCAClient #enroll should reject if invalid json received: 1ms
2022-06-21T23:44:44.0763593Z     FabricCAClient #enroll should reject on end point error: 
2022-06-21T23:44:44.0764256Z   ✔ FabricCAClient #enroll should reject on end point error: 1ms
2022-06-21T23:44:44.0776994Z     FabricCAClient #getCaInfo should throw if not provided the required number of arguments: 
2022-06-21T23:44:44.0777743Z   ✔ FabricCAClient #getCaInfo should throw if not provided the required number of arguments: 1ms
2022-06-21T23:44:44.0791024Z     FabricCAClient #getCaInfo should call POST with the correct method, request, and signing identity: 
2022-06-21T23:44:44.0792320Z   ✔ FabricCAClient #getCaInfo should call POST with the correct method, request, and signing identity: 1ms
2022-06-21T23:44:44.0805416Z     FabricCAClient #getCaInfo should return the caInfo on success: 
2022-06-21T23:44:44.0806073Z   ✔ FabricCAClient #getCaInfo should return the caInfo on success: 1ms
2022-06-21T23:44:44.0818904Z     FabricCAClient #getCaInfo should reject on POST failure: 
2022-06-21T23:44:44.0819548Z   ✔ FabricCAClient #getCaInfo should reject on POST failure: 1ms
2022-06-21T23:44:44.0831406Z     FabricCAClient #generateCRL should reject if not provided the required number of arguments: 
2022-06-21T23:44:44.0832205Z   ✔ FabricCAClient #generateCRL should reject if not provided the required number of arguments: 0ms
2022-06-21T23:44:44.0846459Z     FabricCAClient #generateCRL should call POST with the correct method, request, and signing identity: 
2022-06-21T23:44:44.0847523Z   ✔ FabricCAClient #generateCRL should call POST with the correct method, request, and signing identity: 1ms
2022-06-21T23:44:44.0862924Z     FabricCAClient #generateCRL should reject if POST does not return result in the response body: 
2022-06-21T23:44:44.0863723Z   ✔ FabricCAClient #generateCRL should reject if POST does not return result in the response body: 1ms
2022-06-21T23:44:44.0877000Z     FabricCAClient #generateCRL should reject if POST throws an error: 
2022-06-21T23:44:44.0877661Z   ✔ FabricCAClient #generateCRL should reject if POST throws an error: 1ms
2022-06-21T23:44:44.0886373Z     FabricCAClient #_validateConnectionOpts should throw if no protocol: 
2022-06-21T23:44:44.0887070Z   ✔ FabricCAClient #_validateConnectionOpts should throw if no protocol: 0ms
2022-06-21T23:44:44.0896261Z     FabricCAClient #_validateConnectionOpts should throw if protocol is not set to http or https: 
2022-06-21T23:44:44.0897073Z   ✔ FabricCAClient #_validateConnectionOpts should throw if protocol is not set to http or https: 1ms
2022-06-21T23:44:44.0906090Z     FabricCAClient #_validateConnectionOpts should throw if no hostname: 
2022-06-21T23:44:44.0906792Z   ✔ FabricCAClient #_validateConnectionOpts should throw if no hostname: 1ms
2022-06-21T23:44:44.0914440Z     FabricCAClient #_validateConnectionOpts should throw if provided port is not an integer: 
2022-06-21T23:44:44.0915240Z   ✔ FabricCAClient #_validateConnectionOpts should throw if provided port is not an integer: 1ms
2022-06-21T23:44:44.0922056Z     FabricCAClient #_validateConnectionOpts should pass with a valid input: 
2022-06-21T23:44:44.0922765Z   ✔ FabricCAClient #_validateConnectionOpts should pass with a valid input: 0ms
2022-06-21T23:44:44.0946954Z     FabricCAServices #constructor should call "parseURL" with information extracted from the URL object: 
2022-06-21T23:44:44.0947842Z   ✔ FabricCAServices #constructor should call "parseURL" with information extracted from the URL object: 1ms
2022-06-21T23:44:44.0961473Z     FabricCAServices #constructor should call "parseURL" with information from additional parameters id passed URL is a string: 
2022-06-21T23:44:44.0962662Z   ✔ FabricCAServices #constructor should call "parseURL" with information from additional parameters id passed URL is a string: 0ms
2022-06-21T23:44:44.1001548Z     FabricCAServices #constructor should set the crypto suite if passed: 
2022-06-21T23:44:44.1002568Z   ✔ FabricCAServices #constructor should set the crypto suite if passed: 3ms
2022-06-21T23:44:44.3486680Z     FabricCAServices #constructor should create a new crypto suite and store if none passed: 
2022-06-21T23:44:44.3488499Z   ✔ FabricCAServices #constructor should create a new crypto suite and store if none passed: 248ms
2022-06-21T23:44:44.3548462Z     FabricCAServices #constructor should create a new FabricCAClient and store within the FabricCAServices object: 
2022-06-21T23:44:44.3549904Z   ✔ FabricCAServices #constructor should create a new FabricCAClient and store within the FabricCAServices object: 1ms
2022-06-21T23:44:44.3561603Z     FabricCAServices #getCaName should return the caName: 
2022-06-21T23:44:44.3562917Z   ✔ FabricCAServices #getCaName should return the caName: 0ms
2022-06-21T23:44:44.3599193Z     FabricCAServices #getCaInfo should call "checkRegistrar": 
2022-06-21T23:44:44.3600100Z   ✔ FabricCAServices #getCaInfo should call "checkRegistrar": 0ms
2022-06-21T23:44:44.3640617Z     FabricCAServices #getCaInfo should return a known object on success: 
2022-06-21T23:44:44.3641574Z   ✔ FabricCAServices #getCaInfo should return a known object on success: 0ms
2022-06-21T23:44:44.3679566Z     FabricCAServices #register should throw if missing required argument "request": 
2022-06-21T23:44:44.3680513Z   ✔ FabricCAServices #register should throw if missing required argument "request": 0ms
2022-06-21T23:44:44.3719941Z     FabricCAServices #register should throw if required argument "request" is null: 
2022-06-21T23:44:44.3721172Z   ✔ FabricCAServices #register should throw if required argument "request" is null: 0ms
2022-06-21T23:44:44.3787384Z     FabricCAServices #register should throw if missing required argument "request.enrollmentID": 
2022-06-21T23:44:44.3788416Z   ✔ FabricCAServices #register should throw if missing required argument "request.enrollmentID": 0ms
2022-06-21T23:44:44.3800891Z     FabricCAServices #register should set max enrollments to "1" if req.maxEnrollments is undefined: 
2022-06-21T23:44:44.3801872Z   ✔ FabricCAServices #register should set max enrollments to "1" if req.maxEnrollments is undefined: 0ms
2022-06-21T23:44:44.3843127Z     FabricCAServices #register should set max enrollments to "1" if req.maxEnrollments is null: 
2022-06-21T23:44:44.3844292Z   ✔ FabricCAServices #register should set max enrollments to "1" if req.maxEnrollments is null: 0ms
2022-06-21T23:44:44.3881084Z     FabricCAServices #register should call "checkRegistrar": 
2022-06-21T23:44:44.3882007Z   ✔ FabricCAServices #register should call "checkRegistrar": 0ms
2022-06-21T23:44:44.3919200Z     FabricCAServices #register should call the register function on the FabricCAClient object with mapped values: 
2022-06-21T23:44:44.3920795Z   ✔ FabricCAServices #register should call the register function on the FabricCAClient object with mapped values: 1ms
2022-06-21T23:44:44.3963899Z     FabricCAServices #enroll should throw if missing required argument "request": 
2022-06-21T23:44:44.3964754Z   ✔ FabricCAServices #enroll should throw if missing required argument "request": 0ms
2022-06-21T23:44:44.4003424Z     FabricCAServices #enroll should throw if required argument "request" is null: 
2022-06-21T23:44:44.4004270Z   ✔ FabricCAServices #enroll should throw if required argument "request" is null: 0ms
2022-06-21T23:44:44.4043760Z     FabricCAServices #enroll should throw if missing required argument "request.enrollmentID": 
2022-06-21T23:44:44.4044608Z   ✔ FabricCAServices #enroll should throw if missing required argument "request.enrollmentID": 0ms
2022-06-21T23:44:44.4082400Z     FabricCAServices #enroll should throw if missing required argument "request.enrollmentSecret": 
2022-06-21T23:44:44.4083359Z   ✔ FabricCAServices #enroll should throw if missing required argument "request.enrollmentSecret": 0ms
2022-06-21T23:44:44.4121057Z     FabricCAServices #enroll should throw if request attributes is specified but not an array: 
2022-06-21T23:44:44.4121821Z   ✔ FabricCAServices #enroll should throw if request attributes is specified but not an array: 0ms
2022-06-21T23:44:44.4187060Z     FabricCAServices #enroll should throw if any request attributes are missing a name: 
2022-06-21T23:44:44.4187879Z   ✔ FabricCAServices #enroll should throw if any request attributes are missing a name: 0ms
2022-06-21T23:44:44.4235868Z     FabricCAServices #enroll should reject on enroll failure: 
2022-06-21T23:44:44.4236967Z   ✔ FabricCAServices #enroll should reject on enroll failure: 3ms
2022-06-21T23:44:44.4292273Z     FabricCAServices #enroll should reject in generate CSR failure: 
2022-06-21T23:44:44.4293150Z   ✔ FabricCAServices #enroll should reject in generate CSR failure: 2ms
2022-06-21T23:44:44.4334001Z     FabricCAServices #enroll should reject in generate key failure: 
2022-06-21T23:44:44.4335136Z   ✔ FabricCAServices #enroll should reject in generate key failure: 0ms
2022-06-21T23:44:44.4415433Z     FabricCAServices #enroll should set ephemeral option to false if `getCryptoSuite()._cryptoKeyStore` exists: 
2022-06-21T23:44:44.4417488Z   ✔ FabricCAServices #enroll should set ephemeral option to false if `getCryptoSuite()._cryptoKeyStore` exists: 5ms
2022-06-21T23:44:44.4516807Z     FabricCAServices #enroll should call the enroll function on the FabricCAClient object : 
2022-06-21T23:44:44.4517712Z   ✔ FabricCAServices #enroll should call the enroll function on the FabricCAClient object : 2ms
2022-06-21T23:44:44.4574520Z     FabricCAServices #enroll should return a known object on success: 
2022-06-21T23:44:44.4575201Z   ✔ FabricCAServices #enroll should return a known object on success: 3ms
2022-06-21T23:44:44.4614775Z     FabricCAServices #reenroll should throw if missing required argument "currentUser": 
2022-06-21T23:44:44.4615526Z   ✔ FabricCAServices #reenroll should throw if missing required argument "currentUser": 1ms
2022-06-21T23:44:44.4650320Z     FabricCAServices #reenroll should throw if required argument "currentUser" is not a valid User object: 
2022-06-21T23:44:44.4651386Z   ✔ FabricCAServices #reenroll should throw if required argument "currentUser" is not a valid User object: 0ms
2022-06-21T23:44:44.4684898Z     FabricCAServices #reenroll should throw if request attributes is specified but not an array: 
2022-06-21T23:44:44.4685665Z   ✔ FabricCAServices #reenroll should throw if request attributes is specified but not an array: 1ms
2022-06-21T23:44:44.4720630Z     FabricCAServices #reenroll should throw if any request attributes are missing a name: 
2022-06-21T23:44:44.4721518Z   ✔ FabricCAServices #reenroll should throw if any request attributes are missing a name: 0ms
2022-06-21T23:44:44.4813710Z     FabricCAServices #reenroll should throw if unable to parse enrollment certificate: 
2022-06-21T23:44:44.4814976Z   ✔ FabricCAServices #reenroll should throw if unable to parse enrollment certificate: 5ms
2022-06-21T23:44:44.4869506Z     FabricCAServices #reenroll should reject if unable to generate key: 
2022-06-21T23:44:44.4870207Z   ✔ FabricCAServices #reenroll should reject if unable to generate key: 3ms
2022-06-21T23:44:44.4950480Z     FabricCAServices #reenroll should reject if unable to generate CSR: 
2022-06-21T23:44:44.4951429Z   ✔ FabricCAServices #reenroll should reject if unable to generate CSR: 4ms
2022-06-21T23:44:44.5025347Z     FabricCAServices #reenroll should rejected if reenroll fails: 
2022-06-21T23:44:44.5026017Z   ✔ FabricCAServices #reenroll should rejected if reenroll fails: 4ms
2022-06-21T23:44:44.5161601Z     FabricCAServices #reenroll should call the reenroll function on the FabricCAClient object with mapped parameters: 
2022-06-21T23:44:44.5162654Z   ✔ FabricCAServices #reenroll should call the reenroll function on the FabricCAClient object with mapped parameters: 4ms
2022-06-21T23:44:44.5235535Z     FabricCAServices #reenroll should return the correct object on success: 
2022-06-21T23:44:44.5236312Z   ✔ FabricCAServices #reenroll should return the correct object on success: 4ms
2022-06-21T23:44:44.5271905Z     FabricCAServices #revoke should throw if missing required argument "request": 
2022-06-21T23:44:44.5272845Z   ✔ FabricCAServices #revoke should throw if missing required argument "request": 0ms
2022-06-21T23:44:44.5305946Z     FabricCAServices #revoke should throw if required argument "request" is null: 
2022-06-21T23:44:44.5306997Z   ✔ FabricCAServices #revoke should throw if required argument "request" is null: 0ms
2022-06-21T23:44:44.5341171Z     FabricCAServices #revoke should throw if no enrollmentID and missing aki: 
2022-06-21T23:44:44.5342046Z   ✔ FabricCAServices #revoke should throw if no enrollmentID and missing aki: 0ms
2022-06-21T23:44:44.5375585Z     FabricCAServices #revoke should throw if no enrollmentID and aki is an empty string: 
2022-06-21T23:44:44.5376713Z   ✔ FabricCAServices #revoke should throw if no enrollmentID and aki is an empty string: 0ms
2022-06-21T23:44:44.5410656Z     FabricCAServices #revoke should throw if no enrollmentID and missing serial: 
2022-06-21T23:44:44.5411550Z   ✔ FabricCAServices #revoke should throw if no enrollmentID and missing serial: 0ms
2022-06-21T23:44:44.5445492Z     FabricCAServices #revoke should throw if no enrollmentID and serial is an empty string: 
2022-06-21T23:44:44.5446542Z   ✔ FabricCAServices #revoke should throw if no enrollmentID and serial is an empty string: 1ms
2022-06-21T23:44:44.5479387Z     FabricCAServices #revoke should call "checkRegistrar": 
2022-06-21T23:44:44.5479965Z   ✔ FabricCAServices #revoke should call "checkRegistrar": 0ms
2022-06-21T23:44:44.5516743Z     FabricCAServices #revoke should call the revoke function on the FabricCAClient object with mapped parameters: 
2022-06-21T23:44:44.5517740Z   ✔ FabricCAServices #revoke should call the revoke function on the FabricCAClient object with mapped parameters: 1ms
2022-06-21T23:44:44.5575817Z     FabricCAServices #revoke should call the revoke function on the FabricCAClient object with conditional reasoning: 
2022-06-21T23:44:44.5577074Z   ✔ FabricCAServices #revoke should call the revoke function on the FabricCAClient object with conditional reasoning: 1ms
2022-06-21T23:44:44.5602781Z     FabricCAServices #generateCRL should throw if missing required argument "request": 
2022-06-21T23:44:44.5603717Z   ✔ FabricCAServices #generateCRL should throw if missing required argument "request": 0ms
2022-06-21T23:44:44.5640936Z     FabricCAServices #generateCRL should throw if required argument "request" is null: 
2022-06-21T23:44:44.5641683Z   ✔ FabricCAServices #generateCRL should throw if required argument "request" is null: 0ms
2022-06-21T23:44:44.5679885Z     FabricCAServices #generateCRL should call "checkRegistrar": 
2022-06-21T23:44:44.5680529Z   ✔ FabricCAServices #generateCRL should call "checkRegistrar": 0ms
2022-06-21T23:44:44.5719541Z     FabricCAServices #generateCRL should call the generateCRL function on the FabricCAClient object with the mapped parameters: 
2022-06-21T23:44:44.5720488Z   ✔ FabricCAServices #generateCRL should call the generateCRL function on the FabricCAClient object with the mapped parameters: 1ms
2022-06-21T23:44:44.5808725Z     FabricCAServices #newCertificateService should call the newCertificateService function on the FabricCAClient object : 
2022-06-21T23:44:44.5809652Z   ✔ FabricCAServices #newCertificateService should call the newCertificateService function on the FabricCAClient object : 3ms
2022-06-21T23:44:44.5845749Z     FabricCAServices #newIdentityService should call the newIdentityService function on the FabricCAClient object : 
2022-06-21T23:44:44.5846691Z   ✔ FabricCAServices #newIdentityService should call the newIdentityService function on the FabricCAClient object : 3ms
2022-06-21T23:44:44.5883382Z     FabricCAServices #newAffiliationService should call the newAffiliationService function on the FabricCAClient object : 
2022-06-21T23:44:44.5884356Z   ✔ FabricCAServices #newAffiliationService should call the newAffiliationService function on the FabricCAClient object : 2ms
2022-06-21T23:44:44.5897297Z     FabricCAServices #toString should provide a String object showing the hostname and port: 
2022-06-21T23:44:44.5898225Z   ✔ FabricCAServices #toString should provide a String object showing the hostname and port: 1ms
2022-06-21T23:44:44.5906743Z     FabricCAServices #_parseURL should call the helper parseURL() method via static call: 
2022-06-21T23:44:44.5907511Z   ✔ FabricCAServices #_parseURL should call the helper parseURL() method via static call: 0ms
2022-06-21T23:44:44.5917006Z     Helper #checkRegistrar should throw if called with missing argument: 
2022-06-21T23:44:44.5917639Z   ✔ Helper #checkRegistrar should throw if called with missing argument: 1ms
2022-06-21T23:44:44.5923583Z     Helper #checkRegistrar should throw if called with argument that in not an instance of the class "User": 
2022-06-21T23:44:44.5924632Z   ✔ Helper #checkRegistrar should throw if called with argument that in not an instance of the class "User": 0ms
2022-06-21T23:44:44.5998347Z     Helper #checkRegistrar should throw if unable to retrieve signing identity due to missing method: 
2022-06-21T23:44:44.5999336Z   ✔ Helper #checkRegistrar should throw if unable to retrieve signing identity due to missing method: 0ms
2022-06-21T23:44:44.5999843Z     Helper #checkRegistrar should throw if unable to retrieve signing identity: 
2022-06-21T23:44:44.6000622Z   ✔ Helper #checkRegistrar should throw if unable to retrieve signing identity: 1ms
2022-06-21T23:44:44.6001055Z     Helper #checkRegistrar should not throw if valid registrar: 
2022-06-21T23:44:44.6001584Z   ✔ Helper #checkRegistrar should not throw if valid registrar: 0ms
2022-06-21T23:44:44.6002009Z     Helper #getSubject should return the common name on success: 
2022-06-21T23:44:44.6002527Z   ✔ Helper #getSubject should return the common name on success: 4ms
2022-06-21T23:44:44.6003956Z     Helper #parseURL should throw if invalid protocol: 
2022-06-21T23:44:44.6004661Z   ✔ Helper #parseURL should throw if invalid protocol: 2ms
2022-06-21T23:44:44.6011409Z     Helper #parseURL should throw if not http or https protocol: 
2022-06-21T23:44:44.6012015Z   ✔ Helper #parseURL should throw if not http or https protocol: 1ms
2022-06-21T23:44:44.6012437Z     Helper #parseURL should throw if not http or https protocol: 
2022-06-21T23:44:44.6012951Z   ✔ Helper #parseURL should throw if not http or https protocol: 0ms
2022-06-21T23:44:44.6023936Z     Helper #parseURL should throw if no hostname: 
2022-06-21T23:44:44.6024502Z   ✔ Helper #parseURL should throw if no hostname: 1ms
2022-06-21T23:44:44.6030722Z     Helper #parseURL should return a URL Object on success: 
2022-06-21T23:44:44.6031530Z   ✔ Helper #parseURL should return a URL Object on success: 0ms
2022-06-21T23:44:44.6039441Z     IdentityService #constructor should set the client as passed in the argument: 
2022-06-21T23:44:44.6041794Z   ✔ IdentityService #constructor should set the client as passed in the argument: 0ms
2022-06-21T23:44:44.6087385Z     IdentityService #create should throw if called with missing request: 
2022-06-21T23:44:44.6088148Z   ✔ IdentityService #create should throw if called with missing request: 1ms
2022-06-21T23:44:44.6119499Z     IdentityService #create should throw if if missing req.enrollmentID within request argument: 
2022-06-21T23:44:44.6120308Z   ✔ IdentityService #create should throw if if missing req.enrollmentID within request argument: 0ms
2022-06-21T23:44:44.6153774Z     IdentityService #create should throw if if missing req.affiliation within request argument: 
2022-06-21T23:44:44.6154582Z   ✔ IdentityService #create should throw if if missing req.affiliation within request argument: 0ms
2022-06-21T23:44:44.6184807Z     IdentityService #create should throw if missing required argument "registrar": 
2022-06-21T23:44:44.6185576Z   ✔ IdentityService #create should throw if missing required argument "registrar": 0ms
2022-06-21T23:44:44.6212811Z     IdentityService #create should throw if required argument "registrar" is an empty object: 
2022-06-21T23:44:44.6213524Z   ✔ IdentityService #create should throw if required argument "registrar" is an empty object: 0ms
2022-06-21T23:44:44.6240990Z     IdentityService #create should throw if required argument "registrar" is null: 
2022-06-21T23:44:44.6241730Z   ✔ IdentityService #create should throw if required argument "registrar" is null: 0ms
2022-06-21T23:44:44.6273357Z     IdentityService #create should throw if required argument "registrar" is undefined: 
2022-06-21T23:44:44.6274075Z   ✔ IdentityService #create should throw if required argument "registrar" is undefined: 0ms
2022-06-21T23:44:44.6302554Z     IdentityService #create should throw if unable to get signingIdentity from registrar: 
2022-06-21T23:44:44.6303294Z   ✔ IdentityService #create should throw if unable to get signingIdentity from registrar: 0ms
2022-06-21T23:44:44.6361402Z     IdentityService #create should call `checkRegistrar` with the passed registrar: 
2022-06-21T23:44:44.6362261Z   ✔ IdentityService #create should call `checkRegistrar` with the passed registrar: 4ms
2022-06-21T23:44:44.6415345Z     IdentityService #create should call the client POST method with the correct path and signing identity: 
2022-06-21T23:44:44.6416222Z   ✔ IdentityService #create should call the client POST method with the correct path and signing identity: 2ms
2022-06-21T23:44:44.6467606Z     IdentityService #create should set max enrollments to 1 by default: 
2022-06-21T23:44:44.6468734Z   ✔ IdentityService #create should set max enrollments to 1 by default: 3ms
2022-06-21T23:44:44.6521297Z     IdentityService #create should enable override of max enrollments: 
2022-06-21T23:44:44.6522369Z   ✔ IdentityService #create should enable override of max enrollments: 2ms
2022-06-21T23:44:44.6635719Z     IdentityService #create should return a promise containing the response secret on success: 
2022-06-21T23:44:44.6637091Z   ✔ IdentityService #create should return a promise containing the response secret on success: 3ms
2022-06-21T23:44:44.6694288Z     IdentityService #create should reject a promise containing an error message on failure: 
2022-06-21T23:44:44.6695469Z   ✔ IdentityService #create should reject a promise containing an error message on failure: 3ms
2022-06-21T23:44:44.6726669Z     IdentityService #getOne should throw if missing required argument "enrollmentID": 
2022-06-21T23:44:44.6727925Z   ✔ IdentityService #getOne should throw if missing required argument "enrollmentID": 0ms
2022-06-21T23:44:44.6765356Z     IdentityService #getOne should throw if required argument "enrollmentID" is not a valid string: 
2022-06-21T23:44:44.6766526Z   ✔ IdentityService #getOne should throw if required argument "enrollmentID" is not a valid string: 1ms
2022-06-21T23:44:44.6819814Z     IdentityService #getOne should call `checkRegistrar` with the passed registrar: 
2022-06-21T23:44:44.6820946Z   ✔ IdentityService #getOne should call `checkRegistrar` with the passed registrar: 2ms
2022-06-21T23:44:44.6879191Z     IdentityService #getOne should call the client GET method with the extracted url and signing identity: 
2022-06-21T23:44:44.6880470Z   ✔ IdentityService #getOne should call the client GET method with the extracted url and signing identity: 3ms
2022-06-21T23:44:44.6934263Z     IdentityService #getAll should call `checkRegistrar` with the passed registrar: 
2022-06-21T23:44:44.6935377Z   ✔ IdentityService #getAll should call `checkRegistrar` with the passed registrar: 3ms
2022-06-21T23:44:44.6993038Z     IdentityService #getAll should call the client GET method with the extracted url and signing identity: 
2022-06-21T23:44:44.6994407Z   ✔ IdentityService #getAll should call the client GET method with the extracted url and signing identity: 2ms
2022-06-21T23:44:44.7024504Z     IdentityService #delete should throw if missing required argument "enrollmentID": 
2022-06-21T23:44:44.7025623Z   ✔ IdentityService #delete should throw if missing required argument "enrollmentID": 1ms
2022-06-21T23:44:44.7053501Z     IdentityService #delete should throw if required argument "enrollmentID" is not a valid string: 
2022-06-21T23:44:44.7054710Z   ✔ IdentityService #delete should throw if required argument "enrollmentID" is not a valid string: 1ms
2022-06-21T23:44:44.7107648Z     IdentityService #delete should call `checkRegistrar` with the passed registrar: 
2022-06-21T23:44:44.7108927Z   ✔ IdentityService #delete should call `checkRegistrar` with the passed registrar: 3ms
2022-06-21T23:44:44.7176258Z     IdentityService #delete should call the client DELETE method with an extracted "url" and the signing identity: 
2022-06-21T23:44:44.7177560Z   ✔ IdentityService #delete should call the client DELETE method with an extracted "url" and the signing identity: 4ms
2022-06-21T23:44:44.7287885Z     IdentityService #delete should call the client DELETE method with a "force" option if specified: 
2022-06-21T23:44:44.7289735Z   ✔ IdentityService #delete should call the client DELETE method with a "force" option if specified: 3ms
2022-06-21T23:44:44.7320420Z     IdentityService #update should throw if missing required argument "enrollmentID": 
2022-06-21T23:44:44.7321574Z   ✔ IdentityService #update should throw if missing required argument "enrollmentID": 0ms
2022-06-21T23:44:44.7349778Z     IdentityService #update should throw if required argument "enrollmentID" is not a valid string: 
2022-06-21T23:44:44.7350943Z   ✔ IdentityService #update should throw if required argument "enrollmentID" is not a valid string: 0ms
2022-06-21T23:44:44.7409052Z     IdentityService #update should call `checkRegistrar` with the passed registrar: 
2022-06-21T23:44:44.7410217Z   ✔ IdentityService #update should call `checkRegistrar` with the passed registrar: 3ms
2022-06-21T23:44:44.7466304Z     IdentityService #update should call the client PUT method with an extracted "url", request, and the signing identity: 
2022-06-21T23:44:44.7467667Z   ✔ IdentityService #update should call the client PUT method with an extracted "url", request, and the signing identity: 3ms
2022-06-21T23:44:44.7522974Z     IdentityService #update should call the client PUT method with with extracted request options: 
2022-06-21T23:44:44.7524212Z   ✔ IdentityService #update should call the client PUT method with with extracted request options: 3ms
2022-06-21T23:44:44.7528876Z 
2022-06-21T23:44:44.7529339Z   193 passing (982ms)
2022-06-21T23:44:44.7530116Z 
2022-06-21T23:44:45.1923781Z 
2022-06-21T23:44:45.1925227Z > -@2.5.0-snapshot unitTest:network /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:45.1926395Z > run-s compile "unitTest -- --project ./fabric-network/tsconfig.json 'fabric-network/test/**/*.{js,ts}'"
2022-06-21T23:44:45.1926962Z 
2022-06-21T23:44:45.8784647Z 
2022-06-21T23:44:45.8785663Z > -@2.5.0-snapshot compile /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:45.8786511Z > tsc --project fabric-network/tsconfig.json
2022-06-21T23:44:45.8789777Z 
2022-06-21T23:44:50.7429361Z 
2022-06-21T23:44:50.7430593Z > -@2.5.0-snapshot unitTest /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:44:50.7431441Z > ts-mocha --reporter list "--project" "./fabric-network/tsconfig.json" "fabric-network/test/**/*.{js,ts}"
2022-06-21T23:44:50.7431739Z 
2022-06-21T23:44:59.9992031Z 
2022-06-21T23:45:00.0279907Z     Contract #constructor throws if namespace is not a string: 
2022-06-21T23:45:00.0281143Z   ✔ Contract #constructor throws if namespace is not a string: 1ms
2022-06-21T23:45:00.0453864Z     Contract #createTransaction returns a transaction with only a name: 
2022-06-21T23:45:00.0455464Z   ✔ Contract #createTransaction returns a transaction with only a name: 1ms
2022-06-21T23:45:00.0616428Z     Contract #createTransaction returns a transaction with both name and namespace: 
2022-06-21T23:45:00.0617865Z   ✔ Contract #createTransaction returns a transaction with both name and namespace: 0ms
2022-06-21T23:45:00.0846547Z     Contract #createTransaction throws if name is an empty string: 
2022-06-21T23:45:00.0848140Z   ✔ Contract #createTransaction throws if name is an empty string: 0ms
2022-06-21T23:45:00.1023245Z     Contract #createTransaction throws is name is not a string: 
2022-06-21T23:45:00.1024555Z   ✔ Contract #createTransaction throws is name is not a string: 0ms
2022-06-21T23:45:00.1200413Z     Contract #submitTransaction submits a transaction with supplied arguments: 
2022-06-21T23:45:00.1201793Z   ✔ Contract #submitTransaction submits a transaction with supplied arguments: 1ms
2022-06-21T23:45:00.1386529Z     Contract #evaluateTransaction evaluates a transaction with supplied arguments: 
2022-06-21T23:45:00.1387853Z   ✔ Contract #evaluateTransaction evaluates a transaction with supplied arguments: 2ms
2022-06-21T23:45:00.1570518Z     Contract #getDiscoveryHandler should run with no discovery: 
2022-06-21T23:45:00.1573623Z   ✔ Contract #getDiscoveryHandler should run with no discovery: 1ms
2022-06-21T23:45:00.1721319Z     Contract #getDiscoveryHandler should run when discover is assigned to network and contract: 
2022-06-21T23:45:00.1722606Z   ✔ Contract #getDiscoveryHandler should run when discover is assigned to network and contract: 0ms
2022-06-21T23:45:00.1886162Z     Contract #getDiscoveryHandler should run when discover is assigned to network and not to contract: 
2022-06-21T23:45:00.1887489Z   ✔ Contract #getDiscoveryHandler should run when discover is assigned to network and not to contract: 2ms
2022-06-21T23:45:00.2039945Z     Contract #addDiscoveryInterest throws when not an interest: 
2022-06-21T23:45:00.2041164Z   ✔ Contract #addDiscoveryInterest throws when not an interest: 0ms
2022-06-21T23:45:00.2228327Z     Contract #addDiscoveryInterest update collection: 
2022-06-21T23:45:00.2229463Z   ✔ Contract #addDiscoveryInterest update collection: 4ms
2022-06-21T23:45:00.2433354Z     Contract #addDiscoveryInterest update collection with no private reads: 
2022-06-21T23:45:00.2435009Z   ✔ Contract #addDiscoveryInterest update collection with no private reads: 0ms
2022-06-21T23:45:00.2595180Z     Contract #addDiscoveryInterest add chaincode: 
2022-06-21T23:45:00.2596553Z   ✔ Contract #addDiscoveryInterest add chaincode: 1ms
2022-06-21T23:45:00.2753286Z     Contract #addDiscoveryInterest add chaincode and collection: 
2022-06-21T23:45:00.2754645Z   ✔ Contract #addDiscoveryInterest add chaincode and collection: 0ms
2022-06-21T23:45:00.2911942Z     Contract #addDiscoveryInterest add chaincode and collection with no private reads: 
2022-06-21T23:45:00.2913121Z   ✔ Contract #addDiscoveryInterest add chaincode and collection with no private reads: 0ms
2022-06-21T23:45:00.3074123Z     Contract #getDiscoveryInterests get default: 
2022-06-21T23:45:00.3075169Z   ✔ Contract #getDiscoveryInterests get default: 0ms
2022-06-21T23:45:00.3286540Z     Contract #getDiscoveryInterests get after an add chaincode and collection: 
2022-06-21T23:45:00.3289182Z   ✔ Contract #getDiscoveryInterests get after an add chaincode and collection: 0ms
2022-06-21T23:45:00.3480449Z     Contract #registerDiscoveryResultsListener add: 
2022-06-21T23:45:00.3481920Z   ✔ Contract #registerDiscoveryResultsListener add: 0ms
2022-06-21T23:45:00.3631427Z     Contract #notifyDiscoveryResultsListeners run with none added: 
2022-06-21T23:45:00.3632931Z   ✔ Contract #notifyDiscoveryResultsListeners run with none added: 0ms
2022-06-21T23:45:00.3782369Z     Contract #notifyDiscoveryResultsListeners run with one added: 
2022-06-21T23:45:00.3783615Z   ✔ Contract #notifyDiscoveryResultsListeners run with one added: 0ms
2022-06-21T23:45:00.4191305Z     Contract #waitDiscoveryResults runs: 
2022-06-21T23:45:00.4192519Z   ✔ Contract #waitDiscoveryResults runs: 17ms
2022-06-21T23:45:00.4346675Z     Contract #waitDiscoveryResults runs: 
2022-06-21T23:45:00.4348188Z   ✔ Contract #waitDiscoveryResults runs: 0ms
2022-06-21T23:45:00.4448870Z     Gateway #mergeOptions should return the default options when there are no overrides: 
2022-06-21T23:45:00.4450266Z   ✔ Gateway #mergeOptions should return the default options when there are no overrides: 0ms
2022-06-21T23:45:00.4516855Z     Gateway #mergeOptions should change all top option: 
2022-06-21T23:45:00.4517848Z   ✔ Gateway #mergeOptions should change all top option: 1ms
2022-06-21T23:45:00.4581799Z     Gateway #mergeOptions should change a one inner option: 
2022-06-21T23:45:00.4583258Z   ✔ Gateway #mergeOptions should change a one inner option: 0ms
2022-06-21T23:45:00.4673353Z     Gateway #mergeOptions should null out one inner option: 
2022-06-21T23:45:00.4674855Z   ✔ Gateway #mergeOptions should null out one inner option: 0ms
2022-06-21T23:45:00.4734675Z     Gateway #mergeOptions should null out one inner option using reference null: 
2022-06-21T23:45:00.4736421Z   ✔ Gateway #mergeOptions should null out one inner option using reference null: 0ms
2022-06-21T23:45:00.4868940Z     Gateway #mergeOptions should add a non structure top option: 
2022-06-21T23:45:00.4870344Z   ✔ Gateway #mergeOptions should add a non structure top option: 0ms
2022-06-21T23:45:00.4935092Z     Gateway #mergeOptions should add a null non structure top option: 
2022-06-21T23:45:00.4936795Z   ✔ Gateway #mergeOptions should add a null non structure top option: 0ms
2022-06-21T23:45:00.4995458Z     Gateway #mergeOptions should null a structure top option: 
2022-06-21T23:45:00.4996554Z   ✔ Gateway #mergeOptions should null a structure top option: 1ms
2022-06-21T23:45:00.5069118Z     Gateway #mergeOptions should add an option structure: 
2022-06-21T23:45:00.5070697Z   ✔ Gateway #mergeOptions should add an option structure: 0ms
2022-06-21T23:45:00.5129740Z     Gateway #mergeOptions should add inner-inner structure to top option: 
2022-06-21T23:45:00.5131116Z   ✔ Gateway #mergeOptions should add inner-inner structure to top option: 0ms
2022-06-21T23:45:00.5191314Z     Gateway #constructor should instantiate a Gateway object: 
2022-06-21T23:45:00.5192369Z   ✔ Gateway #constructor should instantiate a Gateway object: 0ms
2022-06-21T23:45:00.5263374Z     Gateway #connect should fail without options supplied: 
2022-06-21T23:45:00.5264522Z   ✔ Gateway #connect should fail without options supplied: 1ms
2022-06-21T23:45:00.5328529Z     Gateway #connect should fail for identity string without wallet: 
2022-06-21T23:45:00.5329739Z   ✔ Gateway #connect should fail for identity string without wallet: 1ms
2022-06-21T23:45:00.7919181Z     Gateway #connect should connect to the gateway with wallet identity: 
2022-06-21T23:45:00.7923625Z   ✔ Gateway #connect should connect to the gateway with wallet identity: 247ms
2022-06-21T23:45:00.9383560Z     Gateway #connect should connect to the gateway with an X.509 identity object: 
2022-06-21T23:45:00.9384909Z   ✔ Gateway #connect should connect to the gateway with an X.509 identity object: 141ms
2022-06-21T23:45:00.9457120Z     Gateway #connect should fail for non-default identity object type without provider: 
2022-06-21T23:45:00.9458328Z   ✔ Gateway #connect should fail for non-default identity object type without provider: 1ms
2022-06-21T23:45:01.0694914Z     Gateway #connect should connect to the gateway with non-default identity object type and provider: 
2022-06-21T23:45:01.0696703Z   ✔ Gateway #connect should connect to the gateway with non-default identity object type and provider: 116ms
2022-06-21T23:45:01.0776571Z     Gateway #connect should set client tls credentials: 
2022-06-21T23:45:01.0777774Z   ✔ Gateway #connect should set client tls credentials: 2ms
2022-06-21T23:45:01.0849359Z     Gateway #connect should connect to the gateway with identity and set client tls crypto material using tlsInfo: 
2022-06-21T23:45:01.0850908Z   ✔ Gateway #connect should connect to the gateway with identity and set client tls crypto material using tlsInfo: 1ms
2022-06-21T23:45:01.0918700Z     Gateway #connect should connect from an existing client object: 
2022-06-21T23:45:01.0919577Z   ✔ Gateway #connect should connect from an existing client object: 1ms
2022-06-21T23:45:01.2053890Z     Gateway #connect has default transaction event handling strategy if none specified: 
2022-06-21T23:45:01.2055323Z   ✔ Gateway #connect has default transaction event handling strategy if none specified: 107ms
2022-06-21T23:45:01.3151170Z     Gateway #connect allows transaction event handling strategy to be specified: 
2022-06-21T23:45:01.3152047Z   ✔ Gateway #connect allows transaction event handling strategy to be specified: 103ms
2022-06-21T23:45:01.4234680Z     Gateway #connect allows null transaction event handling strategy to be set: 
2022-06-21T23:45:01.4235837Z   ✔ Gateway #connect allows null transaction event handling strategy to be set: 101ms
2022-06-21T23:45:01.4335268Z     Gateway #connect should assign connection options to the client: 
2022-06-21T23:45:01.4336961Z   ✔ Gateway #connect should assign connection options to the client: 1ms
2022-06-21T23:45:01.4404029Z     Gateway #connect throws if the identity does not exist: 
2022-06-21T23:45:01.4405484Z   ✔ Gateway #connect throws if the identity does not exist: 0ms
2022-06-21T23:45:01.4555802Z     Gateway #connect throws if the TLS identity does not exist: 
2022-06-21T23:45:01.4558108Z   ✔ Gateway #connect throws if the TLS identity does not exist: 1ms
2022-06-21T23:45:01.4624704Z     Gateway #connect throws if the TLS identity is not an X.509 identity: 
2022-06-21T23:45:01.4625751Z   ✔ Gateway #connect throws if the TLS identity is not an X.509 identity: 1ms
2022-06-21T23:45:01.6740867Z     Gateway #connect options do not pollute other gateway instances: 
2022-06-21T23:45:01.6742424Z   ✔ Gateway #connect options do not pollute other gateway instances: 206ms
2022-06-21T23:45:01.6841457Z     Gateway #getOptions should include default options: 
2022-06-21T23:45:01.6842589Z   ✔ Gateway #getOptions should include default options: 3ms
2022-06-21T23:45:01.6903510Z     Gateway Unconnected behavior getIdentity() should throw if gateway not connected: 
2022-06-21T23:45:01.6904236Z   ✔ Gateway Unconnected behavior getIdentity() should throw if gateway not connected: 0ms
2022-06-21T23:45:01.6967626Z     Gateway Unconnected behavior getOptions() should throw if gateway not connected: 
2022-06-21T23:45:01.6968382Z   ✔ Gateway Unconnected behavior getOptions() should throw if gateway not connected: 1ms
2022-06-21T23:45:01.7031760Z     Gateway Unconnected behavior getNetwork() should throw if gateway not connected: 
2022-06-21T23:45:01.7032483Z   ✔ Gateway Unconnected behavior getNetwork() should throw if gateway not connected: 0ms
2022-06-21T23:45:01.8201152Z     Gateway #getNetwork/#disconnect should get a new network with new name: 
2022-06-21T23:45:01.8202587Z   ✔ Gateway #getNetwork/#disconnect should get a new network with new name: 4ms
2022-06-21T23:45:01.9352813Z     Gateway #getNetwork/#disconnect should return a cached network object: 
2022-06-21T23:45:01.9354265Z   ✔ Gateway #getNetwork/#disconnect should return a cached network object: 1ms
2022-06-21T23:45:02.0449782Z     Gateway #getNetwork/#disconnect should cleanup the gateway and its networks: 
2022-06-21T23:45:02.0452328Z   ✔ Gateway #getNetwork/#disconnect should cleanup the gateway and its networks: 2ms
2022-06-21T23:45:02.0521716Z     NetworkConfig #loadFromConfig should run with no config: 
2022-06-21T23:45:02.0522776Z   ✔ NetworkConfig #loadFromConfig should run with no config: 0ms
2022-06-21T23:45:02.0600447Z     NetworkConfig #loadFromConfig should run with a config: 
2022-06-21T23:45:02.0601664Z   ✔ NetworkConfig #loadFromConfig should run with a config: 1ms
2022-06-21T23:45:02.0675603Z     NetworkConfig #buildChannel - peer as object should run with params: 
2022-06-21T23:45:02.0676625Z   ✔ NetworkConfig #buildChannel - peer as object should run with params: 2ms
2022-06-21T23:45:02.0738637Z     NetworkConfig #buildChannel - peer as object should run with only channel defined: 
2022-06-21T23:45:02.0739775Z   ✔ NetworkConfig #buildChannel - peer as object should run with only channel defined: 1ms
2022-06-21T23:45:02.0804295Z     NetworkConfig #buildChannel - peer as object should run with only chaincodes defined: 
2022-06-21T23:45:02.0805427Z   ✔ NetworkConfig #buildChannel - peer as object should run with only chaincodes defined: 0ms
2022-06-21T23:45:02.0873896Z     NetworkConfig #buildChannel - peer as array should run with params: 
2022-06-21T23:45:02.0874925Z   ✔ NetworkConfig #buildChannel - peer as array should run with params: 1ms
2022-06-21T23:45:02.0945554Z     NetworkConfig #buildChannel - peer as array should run with only channel defined: 
2022-06-21T23:45:02.0946623Z   ✔ NetworkConfig #buildChannel - peer as array should run with only channel defined: 1ms
2022-06-21T23:45:02.1004475Z     NetworkConfig #buildChannel - peer as array should run with only chaincodes defined: 
2022-06-21T23:45:02.1005537Z   ✔ NetworkConfig #buildChannel - peer as array should run with only chaincodes defined: 0ms
2022-06-21T23:45:02.1069766Z     NetworkConfig #buildOrderer should run buildOrderer with params and bad connect: 
2022-06-21T23:45:02.1078091Z   ✔ NetworkConfig #buildOrderer should run buildOrderer with params and bad connect: 1ms
2022-06-21T23:45:02.1134406Z     NetworkConfig #buildOrderer should run buildOrderer with params and good connect: 
2022-06-21T23:45:02.1135871Z   ✔ NetworkConfig #buildOrderer should run buildOrderer with params and good connect: 1ms
2022-06-21T23:45:02.1211956Z     NetworkConfig #buildPeer should run buildPeer with params and bad connect: 
2022-06-21T23:45:02.1213086Z   ✔ NetworkConfig #buildPeer should run buildPeer with params and bad connect: 1ms
2022-06-21T23:45:02.1310173Z     NetworkConfig #buildPeer should run buildPeer with params and good connect: 
2022-06-21T23:45:02.1311782Z   ✔ NetworkConfig #buildPeer should run buildPeer with params and good connect: 1ms
2022-06-21T23:45:02.1380472Z     NetworkConfig #findPeerMspid should run findPeerMspid with params: 
2022-06-21T23:45:02.1382068Z   ✔ NetworkConfig #findPeerMspid should run findPeerMspid with params: 0ms
2022-06-21T23:45:02.1442986Z     NetworkConfig #buildOptions should run buildOptions with params: 
2022-06-21T23:45:02.1444080Z   ✔ NetworkConfig #buildOptions should run buildOptions with params: 0ms
2022-06-21T23:45:02.1499371Z     NetworkConfig #buildOptions should run buildOptions with only request-timeout: 
2022-06-21T23:45:02.1500356Z   ✔ NetworkConfig #buildOptions should run buildOptions with only request-timeout: 0ms
2022-06-21T23:45:02.1554244Z     NetworkConfig #buildOptions should run buildOptions with both request-timeout and requestTimeout: 
2022-06-21T23:45:02.1555366Z   ✔ NetworkConfig #buildOptions should run buildOptions with both request-timeout and requestTimeout: 1ms
2022-06-21T23:45:02.1613987Z     NetworkConfig #getPEMfromConfig should run getPEMfromConfig with pem param: 
2022-06-21T23:45:02.1615088Z   ✔ NetworkConfig #getPEMfromConfig should run getPEMfromConfig with pem param: 0ms
2022-06-21T23:45:02.1673890Z     NetworkConfig #getPEMfromConfig should run getPEMfromConfig with path param: 
2022-06-21T23:45:02.1674926Z   ✔ NetworkConfig #getPEMfromConfig should run getPEMfromConfig with path param: 0ms
2022-06-21T23:45:02.1730227Z     NetworkConfig #getPEMfromConfig should run getPEMfromConfig with no pem config: 
2022-06-21T23:45:02.1731824Z   ✔ NetworkConfig #getPEMfromConfig should run getPEMfromConfig with no pem config: 0ms
2022-06-21T23:45:02.1791323Z     NetworkConfig #getPEMfromConfig should run getPEMfromConfig with no pem config: 
2022-06-21T23:45:02.1792516Z   ✔ NetworkConfig #getPEMfromConfig should run getPEMfromConfig with no pem config: 0ms
2022-06-21T23:45:02.1803954Z     AsyncNotifier does not call listener if no events: 
2022-06-21T23:45:02.1804847Z   ✔ AsyncNotifier does not call listener if no events: 0ms
2022-06-21T23:45:02.1815037Z     AsyncNotifier passes event to listener: 
2022-06-21T23:45:02.1815863Z   ✔ AsyncNotifier passes event to listener: 1ms
2022-06-21T23:45:02.2275459Z     AsyncNotifier passes events to listener in order: 
2022-06-21T23:45:02.2276275Z   ✔ AsyncNotifier passes events to listener in order: 45ms
2022-06-21T23:45:02.2284735Z     AsyncNotifier unnecessary notifies have no effect: 
2022-06-21T23:45:02.2285310Z   ✔ AsyncNotifier unnecessary notifies have no effect: 0ms
2022-06-21T23:45:02.2888556Z     AsyncNotifier interleaved send and receive delivers all events in order: 
2022-06-21T23:45:02.2889955Z   ✔ AsyncNotifier interleaved send and receive delivers all events in order: 58ms
2022-06-21T23:45:02.3110203Z     block listener common behavior add listener returns the listener: 
2022-06-21T23:45:02.3111385Z   ✔ block listener common behavior add listener returns the listener: 2ms
2022-06-21T23:45:02.3262597Z     block listener common behavior listener receives events: 
2022-06-21T23:45:02.3263737Z   ✔ block listener common behavior listener receives events: 2ms
2022-06-21T23:45:02.3406471Z     block listener common behavior removed listener does not receive events: 
2022-06-21T23:45:02.3407678Z   ✔ block listener common behavior removed listener does not receive events: 1ms
2022-06-21T23:45:02.3537644Z     block listener common behavior add listener multiple times has no effect: 
2022-06-21T23:45:02.3538870Z   ✔ block listener common behavior add listener multiple times has no effect: 1ms
2022-06-21T23:45:02.3721250Z     block listener common behavior remove listener multiple times has no effect: 
2022-06-21T23:45:02.3722122Z   ✔ block listener common behavior remove listener multiple times has no effect: 1ms
2022-06-21T23:45:02.3864828Z     block listener common behavior listener can remove itself when receiving event: 
2022-06-21T23:45:02.3865836Z   ✔ block listener common behavior listener can remove itself when receiving event: 1ms
2022-06-21T23:45:02.4016517Z     block listener common behavior listener does not auto-unregister when receiving events: 
2022-06-21T23:45:02.4017310Z   ✔ block listener common behavior listener does not auto-unregister when receiving events: 1ms
2022-06-21T23:45:02.4371631Z     block listener common behavior error thrown by listener does not stop subsequent events being delivered: 
2022-06-21T23:45:02.4373160Z   ✔ block listener common behavior error thrown by listener does not stop subsequent events being delivered: 22ms
2022-06-21T23:45:02.4528010Z     block listener common behavior error thrown by listener does not stop other listeners being notified: 
2022-06-21T23:45:02.4529303Z   ✔ block listener common behavior error thrown by listener does not stop other listeners being notified: 2ms
2022-06-21T23:45:02.4696701Z     block listener common behavior listener receives blocks in order: 
2022-06-21T23:45:02.4697847Z   ✔ block listener common behavior listener receives blocks in order: 1ms
2022-06-21T23:45:02.4832528Z     block listener common behavior listener does not receive old blocks: 
2022-06-21T23:45:02.4833591Z   ✔ block listener common behavior listener does not receive old blocks: 1ms
2022-06-21T23:45:02.4979657Z     block listener common behavior errors trigger reconnect of event service with no start block if no events received: 
2022-06-21T23:45:02.4980852Z   ✔ block listener common behavior errors trigger reconnect of event service with no start block if no events received: 2ms
2022-06-21T23:45:02.5138560Z     block listener common behavior errors trigger reconnect of event service with last received block as start block if events received: 
2022-06-21T23:45:02.5140711Z   ✔ block listener common behavior errors trigger reconnect of event service with last received block as start block if events received: 2ms
2022-06-21T23:45:02.5315239Z     block listener common behavior retry initial connect of event service: 
2022-06-21T23:45:02.5316667Z   ✔ block listener common behavior retry initial connect of event service: 2ms
2022-06-21T23:45:02.5510876Z     block listener common behavior retry reconnect of event service after disconnection: 
2022-06-21T23:45:02.5512329Z   ✔ block listener common behavior retry reconnect of event service after disconnection: 3ms
2022-06-21T23:45:02.5696100Z     block listener common behavior end infinite event loop condition on peer disconnect: 
2022-06-21T23:45:02.5697452Z   ✔ block listener common behavior end infinite event loop condition on peer disconnect: 5ms
2022-06-21T23:45:02.5847735Z     block listener common behavior end infinite event loop condition on peer initial connect: 
2022-06-21T23:45:02.5849173Z   ✔ block listener common behavior end infinite event loop condition on peer initial connect: 3ms
2022-06-21T23:45:02.6013559Z     block listener common behavior listener does not receive old blocks on reconnect: 
2022-06-21T23:45:02.6014815Z   ✔ block listener common behavior listener does not receive old blocks on reconnect: 2ms
2022-06-21T23:45:02.6141563Z     block listener common behavior listener changing event data does not affect other listeners: 
2022-06-21T23:45:02.6143065Z   ✔ block listener common behavior listener changing event data does not affect other listeners: 1ms
2022-06-21T23:45:02.6328947Z     block listener realtime remove of realtime filtered listener does not close shared event service: 
2022-06-21T23:45:02.6330308Z   ✔ block listener realtime remove of realtime filtered listener does not close shared event service: 1ms
2022-06-21T23:45:02.6482524Z     block listener realtime remove of realtime full listener does not close shared event service: 
2022-06-21T23:45:02.6486472Z   ✔ block listener realtime remove of realtime full listener does not close shared event service: 1ms
2022-06-21T23:45:02.6615425Z     block listener replay replay listener sends (startBlock - 1) to event service: 
2022-06-21T23:45:02.6616523Z   ✔ block listener replay replay listener sends (startBlock - 1) to event service: 1ms
2022-06-21T23:45:02.6743692Z     block listener replay replay listener does not send start block less than zero to event service: 
2022-06-21T23:45:02.6744919Z   ✔ block listener replay replay listener does not send start block less than zero to event service: 1ms
2022-06-21T23:45:02.6933832Z     block listener replay replay listener does not receive events earlier than start block: 
2022-06-21T23:45:02.6935430Z   ✔ block listener replay replay listener does not receive events earlier than start block: 1ms
2022-06-21T23:45:02.7065746Z     block listener replay replay listener does not miss start block if later block arrive first: 
2022-06-21T23:45:02.7067391Z   ✔ block listener replay replay listener does not miss start block if later block arrive first: 0ms
2022-06-21T23:45:02.7275843Z     block listener replay remove of replay listener closes isolated event service: 
2022-06-21T23:45:02.7277114Z   ✔ block listener replay remove of replay listener closes isolated event service: 1ms
2022-06-21T23:45:02.7338014Z     block listener default options listener defaults to full blocks: 
2022-06-21T23:45:02.7339107Z   ✔ block listener default options listener defaults to full blocks: 1ms
2022-06-21T23:45:02.7535343Z     block listener default options listener defaults to no start block: 
2022-06-21T23:45:02.7536591Z   ✔ block listener default options listener defaults to no start block: 2ms
2022-06-21T23:45:02.7666476Z     block listener event types listener can specify filtered blocks: 
2022-06-21T23:45:02.7667579Z   ✔ block listener event types listener can specify filtered blocks: 0ms
2022-06-21T23:45:02.7793447Z     block listener event types listener can specify private blocks: 
2022-06-21T23:45:02.7794501Z   ✔ block listener event types listener can specify private blocks: 1ms
2022-06-21T23:45:02.7930919Z     block listener event types listener receives full block events: 
2022-06-21T23:45:02.7932008Z   ✔ block listener event types listener receives full block events: 1ms
2022-06-21T23:45:02.8134207Z     block listener event types listener receives private block events: 
2022-06-21T23:45:02.8135344Z   ✔ block listener event types listener receives private block events: 1ms
2022-06-21T23:45:02.8287523Z     block listener event types Timestamp matches in full block transactionevent: 
2022-06-21T23:45:02.8288503Z   ✔ block listener event types Timestamp matches in full block transactionevent: 2ms
2022-06-21T23:45:02.8439898Z     block listener event types Timestamp matches in private block transactionevent: 
2022-06-21T23:45:02.8441133Z   ✔ block listener event types Timestamp matches in private block transactionevent: 1ms
2022-06-21T23:45:02.8585638Z     block listener event types Timestamp does not exist in filtered block transactionevent: 
2022-06-21T23:45:02.8586631Z   ✔ block listener event types Timestamp does not exist in filtered block transactionevent: 1ms
2022-06-21T23:45:02.8867294Z     block listener checkpoint new checkpoint listener receives events: 
2022-06-21T23:45:02.8868207Z   ✔ block listener checkpoint new checkpoint listener receives events: 1ms
2022-06-21T23:45:02.8999270Z     block listener checkpoint checkpoint listener sends (block number - 1) to event service: 
2022-06-21T23:45:02.9000011Z   ✔ block listener checkpoint checkpoint listener sends (block number - 1) to event service: 1ms
2022-06-21T23:45:02.9153673Z     block listener checkpoint checkpoint block number takes precedence over startBlock option: 
2022-06-21T23:45:02.9301356Z   ✔ block listener checkpoint checkpoint block number takes precedence over startBlock option: 1ms
2022-06-21T23:45:02.9302390Z     block listener checkpoint checkpoint listener receives events from checkpoint block number: 
2022-06-21T23:45:02.9303533Z   ✔ block listener checkpoint checkpoint listener receives events from checkpoint block number: 1ms
2022-06-21T23:45:02.9510542Z     block listener checkpoint new checkpoint listener receives events from startBlock: 
2022-06-21T23:45:02.9512141Z   ✔ block listener checkpoint new checkpoint listener receives events from startBlock: 2ms
2022-06-21T23:45:02.9666651Z     commit listener add listener returns the listener: 
2022-06-21T23:45:02.9667963Z   ✔ commit listener add listener returns the listener: 2ms
2022-06-21T23:45:02.9817077Z     commit listener listener receives events: 
2022-06-21T23:45:02.9817992Z   ✔ commit listener listener receives events: 1ms
2022-06-21T23:45:02.9959052Z     commit listener events include endorser: 
2022-06-21T23:45:02.9959819Z   ✔ commit listener events include endorser: 1ms
2022-06-21T23:45:03.0136066Z     commit listener listener receives errors: 
2022-06-21T23:45:03.0137281Z   ✔ commit listener listener receives errors: 1ms
2022-06-21T23:45:03.0382016Z     commit listener errors include endorser: 
2022-06-21T23:45:03.0382997Z   ✔ commit listener errors include endorser: 1ms
2022-06-21T23:45:03.0523632Z     commit listener removed listener does not receive events: 
2022-06-21T23:45:03.0524984Z   ✔ commit listener removed listener does not receive events: 1ms
2022-06-21T23:45:03.0662612Z     commit listener removed listener does not receive errors: 
2022-06-21T23:45:03.0663860Z   ✔ commit listener removed listener does not receive errors: 1ms
2022-06-21T23:45:03.0808115Z     commit listener add listener multiple times has no effect: 
2022-06-21T23:45:03.0809361Z   ✔ commit listener add listener multiple times has no effect: 0ms
2022-06-21T23:45:03.1068922Z     commit listener remove listener multiple times has no effect: 
2022-06-21T23:45:03.1070286Z   ✔ commit listener remove listener multiple times has no effect: 2ms
2022-06-21T23:45:03.1231659Z     commit listener listener receives errors starting event service: 
2022-06-21T23:45:03.1232950Z   ✔ commit listener listener receives errors starting event service: 1ms
2022-06-21T23:45:03.1371527Z     commit listener errors starting event service include endorser: 
2022-06-21T23:45:03.1372900Z   ✔ commit listener errors starting event service include endorser: 1ms
2022-06-21T23:45:03.1505538Z     commit listener listener can remove itself on error starting event service: 
2022-06-21T23:45:03.1507131Z   ✔ commit listener listener can remove itself on error starting event service: 1ms
2022-06-21T23:45:03.1710977Z     commit listener listener does not auto-unregister when receiving events: 
2022-06-21T23:45:03.1712173Z   ✔ commit listener listener does not auto-unregister when receiving events: 1ms
2022-06-21T23:45:03.1865171Z     commit listener error thrown by listener is handled: 
2022-06-21T23:45:03.1866502Z   ✔ commit listener error thrown by listener is handled: 4ms
2022-06-21T23:45:03.2011182Z     contract event listener add listener returns the listener: 
2022-06-21T23:45:03.2012680Z   ✔ contract event listener add listener returns the listener: 1ms
2022-06-21T23:45:03.2160043Z     contract event listener listener not called if block contains no chaincode events: 
2022-06-21T23:45:03.2161489Z   ✔ contract event listener listener not called if block contains no chaincode events: 1ms
2022-06-21T23:45:03.2393505Z     contract event listener listener receives events: 
2022-06-21T23:45:03.2394861Z   ✔ contract event listener listener receives events: 2ms
2022-06-21T23:45:03.2534814Z     contract event listener stops listening for events after the listener has been removed: 
2022-06-21T23:45:03.2536859Z   ✔ contract event listener stops listening for events after the listener has been removed: 1ms
2022-06-21T23:45:03.2681482Z     contract event listener listener is invoked for each contract event in a block: 
2022-06-21T23:45:03.2682733Z   ✔ contract event listener listener is invoked for each contract event in a block: 1ms
2022-06-21T23:45:03.2834865Z     contract event listener listener only receives events matching its chaincode id: 
2022-06-21T23:45:03.2836075Z   ✔ contract event listener listener only receives events matching its chaincode id: 2ms
2022-06-21T23:45:03.3094638Z     contract event listener error thrown by listener does not disrupt other listeners: 
2022-06-21T23:45:03.3095845Z   ✔ contract event listener error thrown by listener does not disrupt other listeners: 6ms
2022-06-21T23:45:03.3267183Z     contract event listener error thrown by listener does not prevent subsequent contract events being processed: 
2022-06-21T23:45:03.3268398Z   ✔ contract event listener error thrown by listener does not prevent subsequent contract events being processed: 3ms
2022-06-21T23:45:03.3527455Z     contract event listener replay contract listener does not receive events earlier than start block: 
2022-06-21T23:45:03.3528721Z   ✔ contract event listener replay contract listener does not receive events earlier than start block: 1ms
2022-06-21T23:45:03.3660718Z     contract event listener listener defaults to full blocks: 
2022-06-21T23:45:03.3661778Z   ✔ contract event listener listener defaults to full blocks: 1ms
2022-06-21T23:45:03.3878717Z     contract event listener listener can receive filtered blocks: 
2022-06-21T23:45:03.3879998Z   ✔ contract event listener listener can receive filtered blocks: 2ms
2022-06-21T23:45:03.4018377Z     contract event listener listener can receive private blocks: 
2022-06-21T23:45:03.4019527Z   ✔ contract event listener listener can receive private blocks: 1ms
2022-06-21T23:45:03.4177590Z     contract event listener listener does not receive events for invalid transactions: 
2022-06-21T23:45:03.4179097Z   ✔ contract event listener listener does not receive events for invalid transactions: 2ms
2022-06-21T23:45:03.4305939Z     contract event listener filtered events do not contain payload: 
2022-06-21T23:45:03.4307371Z   ✔ contract event listener filtered events do not contain payload: 1ms
2022-06-21T23:45:03.4518452Z     contract event listener full events contain payload: 
2022-06-21T23:45:03.4519754Z   ✔ contract event listener full events contain payload: 1ms
2022-06-21T23:45:03.4669944Z     contract event listener can navigate event hierarchy for filtered events: 
2022-06-21T23:45:03.4671287Z   ✔ contract event listener can navigate event hierarchy for filtered events: 2ms
2022-06-21T23:45:03.4818424Z     contract event listener can navigate event hierarchy for full events: 
2022-06-21T23:45:03.4819914Z   ✔ contract event listener can navigate event hierarchy for full events: 2ms
2022-06-21T23:45:03.4959937Z     contract event listener can navigate event hierarchy for private events: 
2022-06-21T23:45:03.4961368Z   ✔ contract event listener can navigate event hierarchy for private events: 1ms
2022-06-21T23:45:03.5170914Z     contract event listener checkpoint new checkpoint listener receives events: 
2022-06-21T23:45:03.5172438Z   ✔ contract event listener checkpoint new checkpoint listener receives events: 2ms
2022-06-21T23:45:03.5308800Z     contract event listener checkpoint checkpoint listener receives events from checkpoint block number: 
2022-06-21T23:45:03.5310249Z   ✔ contract event listener checkpoint checkpoint listener receives events from checkpoint block number: 2ms
2022-06-21T23:45:03.5464278Z     contract event listener checkpoint checkpointer records block numbers: 
2022-06-21T23:45:03.5465453Z   ✔ contract event listener checkpoint checkpointer records block numbers: 1ms
2022-06-21T23:45:03.5685180Z     contract event listener checkpoint checkpointer records transaction IDs: 
2022-06-21T23:45:03.5686847Z   ✔ contract event listener checkpoint checkpointer records transaction IDs: 1ms
2022-06-21T23:45:03.5776540Z     DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.5777738Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Returns a TransactionEventHandler: 0ms
2022-06-21T23:45:03.5856957Z     DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.5858528Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.5939711Z     DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.5941014Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets correct strategy on event handler: 0ms
2022-06-21T23:45:03.6027314Z     DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets correct peers: 
2022-06-21T23:45:03.6028743Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ALLFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.6097279Z     DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.6098509Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Returns a TransactionEventHandler: 1ms
2022-06-21T23:45:03.6176129Z     DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.6177563Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.6324999Z     DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.6326992Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets correct strategy on event handler: 0ms
2022-06-21T23:45:03.6397516Z     DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets correct peers: 
2022-06-21T23:45:03.6398868Z   ✔ DefaultEventHandlerStrategies MSPID_SCOPE_ANYFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.6478612Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.6479877Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Returns a TransactionEventHandler: 0ms
2022-06-21T23:45:03.6560285Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.6562010Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.6640104Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.6641252Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets correct strategy on event handler: 0ms
2022-06-21T23:45:03.6726120Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets correct peers: 
2022-06-21T23:45:03.6727225Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ALLFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.6805495Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.6806760Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Returns a TransactionEventHandler: 0ms
2022-06-21T23:45:03.6954327Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.6955519Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.7036063Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.7037791Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets correct strategy on event handler: 1ms
2022-06-21T23:45:03.7116940Z     DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets correct peers: 
2022-06-21T23:45:03.7117842Z   ✔ DefaultEventHandlerStrategies NETWORK_SCOPE_ANYFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.7225725Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.7226802Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Returns a TransactionEventHandler: 0ms
2022-06-21T23:45:03.7304346Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.7305354Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.7392054Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.7393424Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets correct strategy on event handler: 0ms
2022-06-21T23:45:03.7473940Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets correct peers: 
2022-06-21T23:45:03.7475076Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.7622070Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Returns a TransactionEventHandler: 
2022-06-21T23:45:03.7623512Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Returns a TransactionEventHandler: 0ms
2022-06-21T23:45:03.7701644Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets transaction ID on event handler: 
2022-06-21T23:45:03.7702859Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets transaction ID on event handler: 0ms
2022-06-21T23:45:03.7782038Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets correct strategy on event handler: 
2022-06-21T23:45:03.7783503Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets correct strategy on event handler: 0ms
2022-06-21T23:45:03.7864443Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets correct peers: 
2022-06-21T23:45:03.7865451Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX Sets correct peers: 0ms
2022-06-21T23:45:03.7949264Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX (no peers in organization) Sets correct peers: 
2022-06-21T23:45:03.7950274Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ALLFORTX (no peers in organization) Sets correct peers: 0ms
2022-06-21T23:45:03.8038340Z     DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX (no peers in organization) Sets correct peers: 
2022-06-21T23:45:03.8039356Z   ✔ DefaultEventHandlerStrategies PREFER_MSPID_SCOPE_ANYFORTX (no peers in organization) Sets correct peers: 0ms
2022-06-21T23:45:03.8089177Z     Event Strategy Implementations AllForTxStrategy common behaviour #constructor throws if no peers supplied: 
2022-06-21T23:45:03.8090073Z   ✔ Event Strategy Implementations AllForTxStrategy common behaviour #constructor throws if no peers supplied: 1ms
2022-06-21T23:45:03.8209650Z     Event Strategy Implementations AllForTxStrategy common behaviour #getPeers returns the supplied peers: 
2022-06-21T23:45:03.8211196Z   ✔ Event Strategy Implementations AllForTxStrategy common behaviour #getPeers returns the supplied peers: 0ms
2022-06-21T23:45:03.8246993Z     Event Strategy Implementations AnyForTxStrategy common behaviour #constructor throws if no peers supplied: 
2022-06-21T23:45:03.8247945Z   ✔ Event Strategy Implementations AnyForTxStrategy common behaviour #constructor throws if no peers supplied: 0ms
2022-06-21T23:45:03.8308778Z     Event Strategy Implementations AnyForTxStrategy common behaviour #getPeers returns the supplied peers: 
2022-06-21T23:45:03.8309741Z   ✔ Event Strategy Implementations AnyForTxStrategy common behaviour #getPeers returns the supplied peers: 0ms
2022-06-21T23:45:03.8363600Z     Event Strategy Implementations AllForTxStrategy event handling does not call callbacks on first event of two expected events: 
2022-06-21T23:45:03.8364834Z   ✔ Event Strategy Implementations AllForTxStrategy event handling does not call callbacks on first event of two expected events: 1ms
2022-06-21T23:45:03.8419392Z     Event Strategy Implementations AllForTxStrategy event handling calls success callback on second event of two expected events: 
2022-06-21T23:45:03.8420459Z   ✔ Event Strategy Implementations AllForTxStrategy event handling calls success callback on second event of two expected events: 0ms
2022-06-21T23:45:03.8468820Z     Event Strategy Implementations AllForTxStrategy event handling calls success callback on error then event of two expected events: 
2022-06-21T23:45:03.8470089Z   ✔ Event Strategy Implementations AllForTxStrategy event handling calls success callback on error then event of two expected events: 0ms
2022-06-21T23:45:03.8513207Z     Event Strategy Implementations AllForTxStrategy event handling does not call callbacks on first error of two expected events: 
2022-06-21T23:45:03.8514175Z   ✔ Event Strategy Implementations AllForTxStrategy event handling does not call callbacks on first error of two expected events: 0ms
2022-06-21T23:45:03.8565067Z     Event Strategy Implementations AllForTxStrategy event handling calls fail callback on second error of two expected events: 
2022-06-21T23:45:03.8566037Z   ✔ Event Strategy Implementations AllForTxStrategy event handling calls fail callback on second error of two expected events: 1ms
2022-06-21T23:45:03.8611259Z     Event Strategy Implementations AllForTxStrategy event handling calls success callback on event then error of two expected events: 
2022-06-21T23:45:03.8612126Z   ✔ Event Strategy Implementations AllForTxStrategy event handling calls success callback on event then error of two expected events: 1ms
2022-06-21T23:45:03.8658290Z     Event Strategy Implementations AnyForTxStrategy event handling calls success callback on first event of two expected events: 
2022-06-21T23:45:03.8659121Z   ✔ Event Strategy Implementations AnyForTxStrategy event handling calls success callback on first event of two expected events: 0ms
2022-06-21T23:45:03.8699060Z     Event Strategy Implementations AnyForTxStrategy event handling calls success callback on error then event of two expected events: 
2022-06-21T23:45:03.8699901Z   ✔ Event Strategy Implementations AnyForTxStrategy event handling calls success callback on error then event of two expected events: 1ms
2022-06-21T23:45:03.8744565Z     Event Strategy Implementations AnyForTxStrategy event handling does not call callbacks on first error of two expected events: 
2022-06-21T23:45:03.8745408Z   ✔ Event Strategy Implementations AnyForTxStrategy event handling does not call callbacks on first error of two expected events: 0ms
2022-06-21T23:45:03.8850666Z     Event Strategy Implementations AnyForTxStrategy event handling calls fail callback on second error of two expected events: 
2022-06-21T23:45:03.8851682Z   ✔ Event Strategy Implementations AnyForTxStrategy event handling calls fail callback on second error of two expected events: 1ms
2022-06-21T23:45:03.8865537Z     listeners #checkpointBlockListener new checkpoint block number set after processing event: 
2022-06-21T23:45:03.8866400Z   ✔ listeners #checkpointBlockListener new checkpoint block number set after processing event: 0ms
2022-06-21T23:45:03.8873747Z     listeners #checkpointBlockListener checkpoint block number incremented after processing event: 
2022-06-21T23:45:03.8874553Z   ✔ listeners #checkpointBlockListener checkpoint block number incremented after processing event: 0ms
2022-06-21T23:45:03.8882428Z     listeners #checkpointBlockListener checkpoint block number not incremented on listener failure: 
2022-06-21T23:45:03.8883273Z   ✔ listeners #checkpointBlockListener checkpoint block number not incremented on listener failure: 0ms
2022-06-21T23:45:03.8892032Z     listeners #checkpointBlockListener ignores events with unexpected block numbers: 
2022-06-21T23:45:03.8892804Z   ✔ listeners #checkpointBlockListener ignores events with unexpected block numbers: 0ms
2022-06-21T23:45:03.8903470Z     listeners #blockFromContractListener received transaction IDs registered with checkpointer: 
2022-06-21T23:45:03.8904314Z   ✔ listeners #blockFromContractListener received transaction IDs registered with checkpointer: 0ms
2022-06-21T23:45:03.8909975Z     listeners #blockFromContractListener checkpoint block number incremented after processing event: 
2022-06-21T23:45:03.8910811Z   ✔ listeners #blockFromContractListener checkpoint block number incremented after processing event: 0ms
2022-06-21T23:45:03.8920559Z     listeners #blockFromContractListener ignores previously seen transaction IDs: 
2022-06-21T23:45:03.8921303Z   ✔ listeners #blockFromContractListener ignores previously seen transaction IDs: 0ms
2022-06-21T23:45:03.8949095Z     listeners #blockFromContractListener transaction ID not registered with checkpointer on listener failure: 
2022-06-21T23:45:03.8949949Z   ✔ listeners #blockFromContractListener transaction ID not registered with checkpointer on listener failure: 3ms
2022-06-21T23:45:03.8962259Z     listeners #blockFromContractListener checkpoint block number not incremented on listener failure: 
2022-06-21T23:45:03.8963124Z   ✔ listeners #blockFromContractListener checkpoint block number not incremented on listener failure: 1ms
2022-06-21T23:45:03.8969538Z     OrderedBlockQueue next block for empty queue is undefined: 
2022-06-21T23:45:03.8970176Z   ✔ OrderedBlockQueue next block for empty queue is undefined: 0ms
2022-06-21T23:45:03.8978646Z     OrderedBlockQueue first block added can be retrieved: 
2022-06-21T23:45:03.8979273Z   ✔ OrderedBlockQueue first block added can be retrieved: 1ms
2022-06-21T23:45:03.8985555Z     OrderedBlockQueue lower block numbers are ignored: 
2022-06-21T23:45:03.8986175Z   ✔ OrderedBlockQueue lower block numbers are ignored: 0ms
2022-06-21T23:45:03.8993063Z     OrderedBlockQueue orders out-of-order blocks: 
2022-06-21T23:45:03.8993606Z   ✔ OrderedBlockQueue orders out-of-order blocks: 0ms
2022-06-21T23:45:03.8997175Z     OrderedBlockQueue empty queue has size zero: 
2022-06-21T23:45:03.8997736Z   ✔ OrderedBlockQueue empty queue has size zero: 0ms
2022-06-21T23:45:03.9003434Z     OrderedBlockQueue add block increases queue size: 
2022-06-21T23:45:03.9004043Z   ✔ OrderedBlockQueue add block increases queue size: 0ms
2022-06-21T23:45:03.9009409Z     OrderedBlockQueue retrieve block decreases queue size: 
2022-06-21T23:45:03.9010022Z   ✔ OrderedBlockQueue retrieve block decreases queue size: 0ms
2022-06-21T23:45:03.9015584Z     OrderedBlockQueue queue size does not go below zero: 
2022-06-21T23:45:03.9016201Z   ✔ OrderedBlockQueue queue size does not go below zero: 1ms
2022-06-21T23:45:03.9021685Z     OrderedBlockQueue ignores block numbers lower than start block: 
2022-06-21T23:45:03.9022686Z   ✔ OrderedBlockQueue ignores block numbers lower than start block: 0ms
2022-06-21T23:45:03.9029223Z     OrderedBlockQueue accepts block numbers same or higher than start block: 
2022-06-21T23:45:03.9029944Z   ✔ OrderedBlockQueue accepts block numbers same or higher than start block: 0ms
2022-06-21T23:45:03.9039357Z     OrderedBlockQueue next block number for empty queue without start block is undefined: 
2022-06-21T23:45:03.9040158Z   ✔ OrderedBlockQueue next block number for empty queue without start block is undefined: 0ms
2022-06-21T23:45:03.9040705Z     OrderedBlockQueue next block number for empty queue with start block is start block: 
2022-06-21T23:45:03.9041363Z   ✔ OrderedBlockQueue next block number for empty queue with start block is start block: 0ms
2022-06-21T23:45:03.9049993Z     OrderedBlockQueue next block number is first added block number: 
2022-06-21T23:45:03.9051016Z   ✔ OrderedBlockQueue next block number is first added block number: 0ms
2022-06-21T23:45:03.9060834Z     OrderedBlockQueue next block number is last retrieved block number plus one: 
2022-06-21T23:45:03.9061596Z   ✔ OrderedBlockQueue next block number is last retrieved block number plus one: 0ms
2022-06-21T23:45:03.9176662Z     TransactionEventHandler #constructor has a default timeout: 
2022-06-21T23:45:03.9177540Z   ✔ TransactionEventHandler #constructor has a default timeout: 0ms
2022-06-21T23:45:03.9303052Z     TransactionEventHandler event handling calls eventReceived() on strategy when event service sends valid event: 
2022-06-21T23:45:03.9304535Z   ✔ TransactionEventHandler event handling calls eventReceived() on strategy when event service sends valid event: 1ms
2022-06-21T23:45:03.9425309Z     TransactionEventHandler event handling does not call errorReceived() on strategy when event service sends valid event: 
2022-06-21T23:45:03.9426358Z   ✔ TransactionEventHandler event handling does not call errorReceived() on strategy when event service sends valid event: 0ms
2022-06-21T23:45:03.9540365Z     TransactionEventHandler event handling calls errorReceived() on strategy when event service sends an error: 
2022-06-21T23:45:03.9541412Z   ✔ TransactionEventHandler event handling calls errorReceived() on strategy when event service sends an error: 1ms
2022-06-21T23:45:03.9730258Z     TransactionEventHandler event handling does not call eventReceived() on strategy when peer sends an error: 
2022-06-21T23:45:03.9731616Z   ✔ TransactionEventHandler event handling does not call eventReceived() on strategy when peer sends an error: 1ms
2022-06-21T23:45:03.9909181Z     TransactionEventHandler event handling fails when peer sends an invalid event: 
2022-06-21T23:45:03.9910517Z   ✔ TransactionEventHandler event handling fails when peer sends an invalid event: 6ms
2022-06-21T23:45:04.0043501Z     TransactionEventHandler event handling succeeds when strategy calls success function after event received: 
2022-06-21T23:45:04.0044905Z   ✔ TransactionEventHandler event handling succeeds when strategy calls success function after event received: 1ms
2022-06-21T23:45:04.0191525Z     TransactionEventHandler event handling fails when strategy calls fail function after event received: 
2022-06-21T23:45:04.0192967Z   ✔ TransactionEventHandler event handling fails when strategy calls fail function after event received: 2ms
2022-06-21T23:45:04.0322438Z     TransactionEventHandler event handling succeeds when strategy calls success function after error received: 
2022-06-21T23:45:04.0323978Z   ✔ TransactionEventHandler event handling succeeds when strategy calls success function after error received: 1ms
2022-06-21T23:45:04.0525501Z     TransactionEventHandler event handling fails when strategy calls fail function after error received: 
2022-06-21T23:45:04.0527689Z   ✔ TransactionEventHandler event handling fails when strategy calls fail function after error received: 2ms
2022-06-21T23:45:04.0647655Z     TransactionEventHandler event handling succeeds immediately with no peers: 
2022-06-21T23:45:04.0648966Z   ✔ TransactionEventHandler event handling succeeds immediately with no peers: 1ms
2022-06-21T23:45:04.0778413Z     TransactionEventHandler event handling ignores anything from peer that has already sent an event: 
2022-06-21T23:45:04.0779713Z   ✔ TransactionEventHandler event handling ignores anything from peer that has already sent an event: 1ms
2022-06-21T23:45:04.1060425Z     TransactionEventHandler event handling ignores anything from peer that has already sent an error: 
2022-06-21T23:45:04.1062104Z   ✔ TransactionEventHandler event handling ignores anything from peer that has already sent an error: 1ms
2022-06-21T23:45:04.1100258Z     TransactionEventHandler event handling fails when receiving invalid event from peer that previously disconnected: 
2022-06-21T23:45:04.1101415Z   ✔ TransactionEventHandler event handling fails when receiving invalid event from peer that previously disconnected: 2ms
2022-06-21T23:45:04.1300130Z     TransactionEventHandler event handling fails when receiving an invalid event from peer: 
2022-06-21T23:45:04.1301651Z   ✔ TransactionEventHandler event handling fails when receiving an invalid event from peer: 2ms
2022-06-21T23:45:04.1442919Z     TransactionEventHandler event handling #startListening registers listener with event service using transaction ID: 
2022-06-21T23:45:04.1444270Z   ✔ TransactionEventHandler event handling #startListening registers listener with event service using transaction ID: 1ms
2022-06-21T23:45:04.1559468Z     TransactionEventHandler event handling #startListening starts event service: 
2022-06-21T23:45:04.1560549Z   ✔ TransactionEventHandler event handling #startListening starts event service: 1ms
2022-06-21T23:45:04.1728083Z     TransactionEventHandler timeouts fails on timeout if timeout set: 
2022-06-21T23:45:04.1728928Z   ✔ TransactionEventHandler timeouts fails on timeout if timeout set: 4ms
2022-06-21T23:45:04.1737630Z (node:4207) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 43)
2022-06-21T23:45:04.1738966Z (Use `node --trace-warnings ...` to show where the warning was created)
2022-06-21T23:45:04.1868098Z     TransactionEventHandler timeouts does not timeout if timeout set to zero: 
2022-06-21T23:45:04.1869623Z   ✔ TransactionEventHandler timeouts does not timeout if timeout set to zero: 1ms
2022-06-21T23:45:04.2063447Z (node:4207) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 44)
2022-06-21T23:45:04.2064297Z     TransactionEventHandler timeouts timeout failure message includes peers that have not responded: 
2022-06-21T23:45:04.2065808Z   ✔ TransactionEventHandler timeouts timeout failure message includes peers that have not responded: 2ms
2022-06-21T23:45:04.2188369Z     TransactionEventHandler timeouts does not timeout if no peers: 
2022-06-21T23:45:04.2189517Z   ✔ TransactionEventHandler timeouts does not timeout if no peers: 1ms
2022-06-21T23:45:04.2335180Z (node:4207) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 45)
2022-06-21T23:45:04.2335845Z     TransactionEventHandler timeouts timeout failure error has transaction ID property: 
2022-06-21T23:45:04.2337044Z   ✔ TransactionEventHandler timeouts timeout failure error has transaction ID property: 2ms
2022-06-21T23:45:04.2447997Z (node:4207) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 46)
2022-06-21T23:45:04.2448615Z     TransactionEventHandler timeouts timeout failure error message has timeout information: 
2022-06-21T23:45:04.2449780Z   ✔ TransactionEventHandler timeouts timeout failure error message has timeout information: 2ms
2022-06-21T23:45:04.2480717Z     FileCheckpointer new checkpointer has undefined block number: 
2022-06-21T23:45:04.2481729Z   ✔ FileCheckpointer new checkpointer has undefined block number: 0ms
2022-06-21T23:45:04.2521019Z     FileCheckpointer new checkpointer has empty transaction IDs: 
2022-06-21T23:45:04.2522220Z   ✔ FileCheckpointer new checkpointer has empty transaction IDs: 0ms
2022-06-21T23:45:04.2547399Z     FileCheckpointer can get added transaction IDs: 
2022-06-21T23:45:04.2548410Z   ✔ FileCheckpointer can get added transaction IDs: 1ms
2022-06-21T23:45:04.2674758Z     FileCheckpointer duplicate transaction IDs are ignored: 
2022-06-21T23:45:04.2675600Z   ✔ FileCheckpointer duplicate transaction IDs are ignored: 1ms
2022-06-21T23:45:04.2720785Z     FileCheckpointer can get updated block number: 
2022-06-21T23:45:04.2721780Z   ✔ FileCheckpointer can get updated block number: 2ms
2022-06-21T23:45:04.2749608Z     FileCheckpointer setting block number clears transaction IDs: 
2022-06-21T23:45:04.2750631Z   ✔ FileCheckpointer setting block number clears transaction IDs: 1ms
2022-06-21T23:45:04.2778973Z     FileCheckpointer initial state retained on reopen of checkpointer: 
2022-06-21T23:45:04.2780125Z   ✔ FileCheckpointer initial state retained on reopen of checkpointer: 1ms
2022-06-21T23:45:04.2804208Z     FileCheckpointer state is persisted when block number updated: 
2022-06-21T23:45:04.2805237Z   ✔ FileCheckpointer state is persisted when block number updated: 1ms
2022-06-21T23:45:04.2831671Z     FileCheckpointer state is persisted when transaction IDs added: 
2022-06-21T23:45:04.2832692Z   ✔ FileCheckpointer state is persisted when transaction IDs added: 1ms
2022-06-21T23:45:04.2883775Z     FileCheckpointer persistent state is consistent on multiple updates: 
2022-06-21T23:45:04.2884939Z   ✔ FileCheckpointer persistent state is consistent on multiple updates: 3ms
2022-06-21T23:45:04.2913019Z     FileCheckpointer create fails for bad persistent data: 
2022-06-21T23:45:04.2913743Z   ✔ FileCheckpointer create fails for bad persistent data: 1ms
2022-06-21T23:45:04.2933578Z     FileCheckpointer create fails for non-writable path: 
2022-06-21T23:45:04.2934542Z   ✔ FileCheckpointer create fails for non-writable path: 0ms
2022-06-21T23:45:04.3030123Z     DefaultQueryHandlerStrategies MSPID_SCOPE_SINGLE returns correct strategy implementation: 
2022-06-21T23:45:04.3037603Z   ✔ DefaultQueryHandlerStrategies MSPID_SCOPE_SINGLE returns correct strategy implementation: 0ms
2022-06-21T23:45:04.3199780Z     DefaultQueryHandlerStrategies MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation: 
2022-06-21T23:45:04.3201319Z   ✔ DefaultQueryHandlerStrategies MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation: 0ms
2022-06-21T23:45:04.3290845Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE returns correct strategy implementation: 
2022-06-21T23:45:04.3292045Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE returns correct strategy implementation: 0ms
2022-06-21T23:45:04.3380362Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation: 
2022-06-21T23:45:04.3381644Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation: 0ms
2022-06-21T23:45:04.3465402Z     DefaultQueryHandlerStrategies MSPID_SCOPE_SINGLE returns correct strategy implementation with default timeout: 
2022-06-21T23:45:04.3466716Z   ✔ DefaultQueryHandlerStrategies MSPID_SCOPE_SINGLE returns correct strategy implementation with default timeout: 1ms
2022-06-21T23:45:04.3550623Z     DefaultQueryHandlerStrategies MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation with default timeout: 
2022-06-21T23:45:04.3552082Z   ✔ DefaultQueryHandlerStrategies MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation with default timeout: 0ms
2022-06-21T23:45:04.3633299Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE returns correct strategy implementation with default timeout: 
2022-06-21T23:45:04.3634673Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE returns correct strategy implementation with default timeout: 0ms
2022-06-21T23:45:04.3797843Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation with default timeout: 
2022-06-21T23:45:04.3799500Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN returns correct strategy implementation with default timeout: 1ms
2022-06-21T23:45:04.3879550Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE Sets correct peers: 
2022-06-21T23:45:04.3880641Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE Sets correct peers: 0ms
2022-06-21T23:45:04.3957505Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN Sets correct peers: 
2022-06-21T23:45:04.3958778Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN Sets correct peers: 0ms
2022-06-21T23:45:04.4045038Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE (no peers in organization) Sets correct peers: 
2022-06-21T23:45:04.4046238Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_SINGLE (no peers in organization) Sets correct peers: 0ms
2022-06-21T23:45:04.4127800Z     DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN (no peers in organization) Sets correct peers: 
2022-06-21T23:45:04.4128986Z   ✔ DefaultQueryHandlerStrategies PREFER_MSPID_SCOPE_ROUND_ROBIN (no peers in organization) Sets correct peers: 0ms
2022-06-21T23:45:04.4168402Z     Query #constructor no options: 
2022-06-21T23:45:04.4169207Z   ✔ Query #constructor no options: 0ms
2022-06-21T23:45:04.4201189Z     Query #constructor with options: 
2022-06-21T23:45:04.4201942Z   ✔ Query #constructor with options: 0ms
2022-06-21T23:45:04.4232276Z     Query #constructor with timeout options: 
2022-06-21T23:45:04.4233314Z   ✔ Query #constructor with timeout options: 0ms
2022-06-21T23:45:04.4285974Z     Query #constructor check timeout passed to low level: 
2022-06-21T23:45:04.4287028Z   ✔ Query #constructor check timeout passed to low level: 2ms
2022-06-21T23:45:04.4364527Z     Query #evaluate calls low level with a single peer: 
2022-06-21T23:45:04.4365453Z   ✔ Query #evaluate calls low level with a single peer: 0ms
2022-06-21T23:45:04.4440171Z     Query #evaluate calls low level with multiple peers: 
2022-06-21T23:45:04.4441185Z   ✔ Query #evaluate calls low level with multiple peers: 1ms
2022-06-21T23:45:04.4655966Z     Query #evaluate returns query results from one peer status 200: 
2022-06-21T23:45:04.4657556Z   ✔ Query #evaluate returns query results from one peer status 200: 3ms
2022-06-21T23:45:04.4658701Z     Query #evaluate returns query results from one peer status 500: 
2022-06-21T23:45:04.4659553Z   ✔ Query #evaluate returns query results from one peer status 500: 1ms
2022-06-21T23:45:04.4663048Z     Query #evaluate returns query error result from one peer: 
2022-06-21T23:45:04.4663958Z   ✔ Query #evaluate returns query error result from one peer: 2ms
2022-06-21T23:45:04.4722464Z     Query #evaluate returns missing error result from one peer: 
2022-06-21T23:45:04.4723457Z   ✔ Query #evaluate returns missing error result from one peer: 1ms
2022-06-21T23:45:04.4811936Z     Query #evaluate returns query results from two peers status 200: 
2022-06-21T23:45:04.4813447Z   ✔ Query #evaluate returns query results from two peers status 200: 3ms
2022-06-21T23:45:04.4877880Z     Query #evaluate returns query results from two peers status 500: 
2022-06-21T23:45:04.4879537Z   ✔ Query #evaluate returns query results from two peers status 500: 1ms
2022-06-21T23:45:04.4958373Z     Query #evaluate returns query error result from two peers: 
2022-06-21T23:45:04.4960281Z   ✔ Query #evaluate returns query error result from two peers: 2ms
2022-06-21T23:45:04.5030571Z     Query #evaluate returns no result error result from two peers: 
2022-06-21T23:45:04.5032061Z   ✔ Query #evaluate returns no result error result from two peers: 1ms
2022-06-21T23:45:04.5091450Z     Query #evaluate returns no result error result from one peer: 
2022-06-21T23:45:04.5092484Z   ✔ Query #evaluate returns no result error result from one peer: 1ms
2022-06-21T23:45:04.5245672Z     Query #evaluate returns empty result and valid result: 
2022-06-21T23:45:04.5247127Z   ✔ Query #evaluate returns empty result and valid result: 2ms
2022-06-21T23:45:04.5580060Z     Query #evaluate returns no result error result from one peer and error from the other: 
2022-06-21T23:45:04.5581557Z   ✔ Query #evaluate returns no result error result from one peer and error from the other: 1ms
2022-06-21T23:45:04.5665850Z     Query #evaluate returns mixed valid from two peers status 200 and 500: 
2022-06-21T23:45:04.5667246Z   ✔ Query #evaluate returns mixed valid from two peers status 200 and 500: 3ms
2022-06-21T23:45:04.5716766Z     Query #evaluate returns mixed valid and error result from two peers: 
2022-06-21T23:45:04.5718104Z   ✔ Query #evaluate returns mixed valid and error result from two peers: 1ms
2022-06-21T23:45:04.5800195Z     QueryHandlers SingleQueryHandler with one peer returns valid results - all good: 
2022-06-21T23:45:04.5800845Z   ✔ QueryHandlers SingleQueryHandler with one peer returns valid results - all good: 1ms
2022-06-21T23:45:04.5857182Z     QueryHandlers SingleQueryHandler with one peer returns an error with the peer status 400 results: 
2022-06-21T23:45:04.5857980Z   ✔ QueryHandlers SingleQueryHandler with one peer returns an error with the peer status 400 results: 1ms
2022-06-21T23:45:04.5914196Z     QueryHandlers SingleQueryHandler with one peer returns an error with the peer status 500 results: 
2022-06-21T23:45:04.5914999Z   ✔ QueryHandlers SingleQueryHandler with one peer returns an error with the peer status 500 results: 1ms
2022-06-21T23:45:04.5984197Z     QueryHandlers SingleQueryHandler with one peer returns an error with the grpc sending error: 
2022-06-21T23:45:04.5985050Z   ✔ QueryHandlers SingleQueryHandler with one peer returns an error with the grpc sending error: 1ms
2022-06-21T23:45:04.6077679Z     QueryHandlers SingleQueryHandler with one peer returns an error with internal error: 
2022-06-21T23:45:04.6079171Z   ✔ QueryHandlers SingleQueryHandler with one peer returns an error with internal error: 1ms
2022-06-21T23:45:04.6139881Z     QueryHandlers SingleQueryHandler with two peers returns valid results - all 200: 
2022-06-21T23:45:04.6140886Z   ✔ QueryHandlers SingleQueryHandler with two peers returns valid results - all 200: 1ms
2022-06-21T23:45:04.6204472Z     QueryHandlers SingleQueryHandler with two peers returns error results - with 400 first: 
2022-06-21T23:45:04.6205742Z   ✔ QueryHandlers SingleQueryHandler with two peers returns error results - with 400 first: 1ms
2022-06-21T23:45:04.6261286Z     QueryHandlers SingleQueryHandler with two peers returns valid results - with 500 first: 
2022-06-21T23:45:04.6262374Z   ✔ QueryHandlers SingleQueryHandler with two peers returns valid results - with 500 first: 1ms
2022-06-21T23:45:04.6324128Z     QueryHandlers SingleQueryHandler with two peers returns valid results - with error: 
2022-06-21T23:45:04.6325228Z   ✔ QueryHandlers SingleQueryHandler with two peers returns valid results - with error: 1ms
2022-06-21T23:45:04.6405278Z     QueryHandlers SingleQueryHandler with two peers continues to use first peer with 400 return second peer: 
2022-06-21T23:45:04.6406515Z   ✔ QueryHandlers SingleQueryHandler with two peers continues to use first peer with 400 return second peer: 2ms
2022-06-21T23:45:04.6471574Z     QueryHandlers SingleQueryHandler with two peers continues to use second peer: 
2022-06-21T23:45:04.6473030Z   ✔ QueryHandlers SingleQueryHandler with two peers continues to use second peer: 2ms
2022-06-21T23:45:04.6624834Z     QueryHandlers SingleQueryHandler with two peers switches to second peer after error: 
2022-06-21T23:45:04.6626999Z   ✔ QueryHandlers SingleQueryHandler with two peers switches to second peer after error: 5ms
2022-06-21T23:45:04.6715473Z     QueryHandlers SingleQueryHandler with two peers returns an error with the both peers 500 results: 
2022-06-21T23:45:04.6716816Z   ✔ QueryHandlers SingleQueryHandler with two peers returns an error with the both peers 500 results: 2ms
2022-06-21T23:45:04.6778207Z     QueryHandlers SingleQueryHandler with two peers returns an error with the grpc sending error: 
2022-06-21T23:45:04.6779328Z   ✔ QueryHandlers SingleQueryHandler with two peers returns an error with the grpc sending error: 2ms
2022-06-21T23:45:04.6832713Z     QueryHandlers SingleQueryHandler with two peers returns an error with internal error: 
2022-06-21T23:45:04.6833886Z   ✔ QueryHandlers SingleQueryHandler with two peers returns an error with internal error: 0ms
2022-06-21T23:45:04.6885445Z     QueryHandlers RoundRobinQueryHandler with one peer returns  valid results - all good: 
2022-06-21T23:45:04.6886808Z   ✔ QueryHandlers RoundRobinQueryHandler with one peer returns  valid results - all good: 1ms
2022-06-21T23:45:04.6940699Z     QueryHandlers RoundRobinQueryHandler with one peer returns an error with the peer status 400 results: 
2022-06-21T23:45:04.6941751Z   ✔ QueryHandlers RoundRobinQueryHandler with one peer returns an error with the peer status 400 results: 0ms
2022-06-21T23:45:04.6990313Z     QueryHandlers RoundRobinQueryHandler with one peer returns an error with the peer status 500 results: 
2022-06-21T23:45:04.6991883Z   ✔ QueryHandlers RoundRobinQueryHandler with one peer returns an error with the peer status 500 results: 0ms
2022-06-21T23:45:04.7051440Z     QueryHandlers RoundRobinQueryHandler with one peer returns an error with the grpc sending error: 
2022-06-21T23:45:04.7052620Z   ✔ QueryHandlers RoundRobinQueryHandler with one peer returns an error with the grpc sending error: 1ms
2022-06-21T23:45:04.7100612Z     QueryHandlers RoundRobinQueryHandler with one peer returns an error with internal sending error: 
2022-06-21T23:45:04.7108697Z   ✔ QueryHandlers RoundRobinQueryHandler with one peer returns an error with internal sending error: 0ms
2022-06-21T23:45:04.7172508Z     QueryHandlers RoundRobinQueryHandler with two peers returns valid results - all 200: 
2022-06-21T23:45:04.7173169Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns valid results - all 200: 1ms
2022-06-21T23:45:04.7231340Z     QueryHandlers RoundRobinQueryHandler with two peers returns error results - with 400 first: 
2022-06-21T23:45:04.7232049Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns error results - with 400 first: 1ms
2022-06-21T23:45:04.7287285Z     QueryHandlers RoundRobinQueryHandler with two peers returns valid results - with 500 first: 
2022-06-21T23:45:04.7288205Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns valid results - with 500 first: 1ms
2022-06-21T23:45:04.7346536Z     QueryHandlers RoundRobinQueryHandler with two peers returns valid results - with error first: 
2022-06-21T23:45:04.7347229Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns valid results - with error first: 1ms
2022-06-21T23:45:04.7435822Z     QueryHandlers RoundRobinQueryHandler with two peers switches from peer1 to peer2 with 400 and 200: 
2022-06-21T23:45:04.7436938Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers switches from peer1 to peer2 with 400 and 200: 2ms
2022-06-21T23:45:04.7533237Z     QueryHandlers RoundRobinQueryHandler with two peers switches between peers: 
2022-06-21T23:45:04.7534452Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers switches between peers: 2ms
2022-06-21T23:45:04.7613946Z     QueryHandlers RoundRobinQueryHandler with two peers continues to use second peer: 
2022-06-21T23:45:04.7615810Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers continues to use second peer: 2ms
2022-06-21T23:45:04.7692415Z     QueryHandlers RoundRobinQueryHandler with two peers stays with second peer after error: 
2022-06-21T23:45:04.7693614Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers stays with second peer after error: 2ms
2022-06-21T23:45:04.7760979Z     QueryHandlers RoundRobinQueryHandler with two peers returns an error with the both peers 500 results: 
2022-06-21T23:45:04.7762122Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns an error with the both peers 500 results: 1ms
2022-06-21T23:45:04.7825624Z     QueryHandlers RoundRobinQueryHandler with two peers returns an error with the grpc sending error: 
2022-06-21T23:45:04.7826725Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns an error with the grpc sending error: 2ms
2022-06-21T23:45:04.7878969Z     QueryHandlers RoundRobinQueryHandler with two peers returns an error with internal error: 
2022-06-21T23:45:04.7879968Z   ✔ QueryHandlers RoundRobinQueryHandler with two peers returns an error with internal error: 1ms
2022-06-21T23:45:04.7890783Z     IdentityProvider HsmX509 common behaviour v2 Identity created from JSON: 
2022-06-21T23:45:04.7891749Z   ✔ IdentityProvider HsmX509 common behaviour v2 Identity created from JSON: 0ms
2022-06-21T23:45:04.7897016Z     IdentityProvider HsmX509 common behaviour v2 Throws for JSON with no version: 
2022-06-21T23:45:04.7898491Z   ✔ IdentityProvider HsmX509 common behaviour v2 Throws for JSON with no version: 1ms
2022-06-21T23:45:04.7904257Z     IdentityProvider HsmX509 common behaviour v2 Throws for JSON with unsupported version: 
2022-06-21T23:45:04.7905723Z   ✔ IdentityProvider HsmX509 common behaviour v2 Throws for JSON with unsupported version: 0ms
2022-06-21T23:45:04.7990019Z     IdentityProvider HsmX509 common behaviour v2 Throws for JSON with incorrect type: 
2022-06-21T23:45:04.7991060Z   ✔ IdentityProvider HsmX509 common behaviour v2 Throws for JSON with incorrect type: 1ms
2022-06-21T23:45:04.7992246Z     IdentityProvider HsmX509 common behaviour v2 Identity serializes to JSON that can be used to recreate the identity: 
2022-06-21T23:45:04.7994053Z   ✔ IdentityProvider HsmX509 common behaviour v2 Identity serializes to JSON that can be used to recreate the identity: 0ms
2022-06-21T23:45:04.7994722Z     IdentityProvider HsmX509 common behaviour v2 getUserContext fails with message containing missing identity: 
2022-06-21T23:45:04.7995453Z   ✔ IdentityProvider HsmX509 common behaviour v2 getUserContext fails with message containing missing identity: 1ms
2022-06-21T23:45:04.7996070Z     IdentityProvider HsmX509 common behaviour v2 getUserContext fails with message containing missing identity credentials: 
2022-06-21T23:45:04.7996844Z   ✔ IdentityProvider HsmX509 common behaviour v2 getUserContext fails with message containing missing identity credentials: 0ms
2022-06-21T23:45:04.7997370Z     IdentityProvider HsmX509 common behaviour v1 Identity created from JSON: 
2022-06-21T23:45:04.7998194Z   ✔ IdentityProvider HsmX509 common behaviour v1 Identity created from JSON: 0ms
2022-06-21T23:45:04.7998703Z     IdentityProvider HsmX509 common behaviour v1 Throws for JSON with no version: 
2022-06-21T23:45:04.7999300Z   ✔ IdentityProvider HsmX509 common behaviour v1 Throws for JSON with no version: 0ms
2022-06-21T23:45:04.7999776Z     IdentityProvider HsmX509 common behaviour v1 Throws for JSON with unsupported version: 
2022-06-21T23:45:04.8000404Z   ✔ IdentityProvider HsmX509 common behaviour v1 Throws for JSON with unsupported version: 0ms
2022-06-21T23:45:04.8000901Z     IdentityProvider HsmX509 common behaviour v1 Throws for JSON with incorrect type: 
2022-06-21T23:45:04.8001501Z   ✔ IdentityProvider HsmX509 common behaviour v1 Throws for JSON with incorrect type: 1ms
2022-06-21T23:45:04.8002039Z     IdentityProvider HsmX509 common behaviour v1 Identity serializes to JSON that can be used to recreate the identity: 
2022-06-21T23:45:04.8002947Z   ✔ IdentityProvider HsmX509 common behaviour v1 Identity serializes to JSON that can be used to recreate the identity: 0ms
2022-06-21T23:45:04.8003536Z     IdentityProvider HsmX509 common behaviour v1 getUserContext fails with message containing missing identity: 
2022-06-21T23:45:04.8004253Z   ✔ IdentityProvider HsmX509 common behaviour v1 getUserContext fails with message containing missing identity: 0ms
2022-06-21T23:45:04.8004841Z     IdentityProvider HsmX509 common behaviour v1 getUserContext fails with message containing missing identity credentials: 
2022-06-21T23:45:04.8005597Z   ✔ IdentityProvider HsmX509 common behaviour v1 getUserContext fails with message containing missing identity credentials: 1ms
2022-06-21T23:45:04.8006113Z     IdentityProvider X509 common behaviour v1 Identity created from JSON: 
2022-06-21T23:45:04.8006666Z   ✔ IdentityProvider X509 common behaviour v1 Identity created from JSON: 0ms
2022-06-21T23:45:04.8007109Z     IdentityProvider X509 common behaviour v1 Throws for JSON with no version: 
2022-06-21T23:45:04.8009242Z   ✔ IdentityProvider X509 common behaviour v1 Throws for JSON with no version: 0ms
2022-06-21T23:45:04.8009772Z     IdentityProvider X509 common behaviour v1 Throws for JSON with unsupported version: 
2022-06-21T23:45:04.8010756Z   ✔ IdentityProvider X509 common behaviour v1 Throws for JSON with unsupported version: 0ms
2022-06-21T23:45:04.8011292Z     IdentityProvider X509 common behaviour v1 Throws for JSON with incorrect type: 
2022-06-21T23:45:04.8011933Z   ✔ IdentityProvider X509 common behaviour v1 Throws for JSON with incorrect type: 0ms
2022-06-21T23:45:04.8012515Z     IdentityProvider X509 common behaviour v1 Identity serializes to JSON that can be used to recreate the identity: 
2022-06-21T23:45:04.8013270Z   ✔ IdentityProvider X509 common behaviour v1 Identity serializes to JSON that can be used to recreate the identity: 1ms
2022-06-21T23:45:04.8013883Z     IdentityProvider X509 common behaviour v1 getUserContext fails with message containing missing identity: 
2022-06-21T23:45:04.8014828Z   ✔ IdentityProvider X509 common behaviour v1 getUserContext fails with message containing missing identity: 0ms
2022-06-21T23:45:04.8015497Z     IdentityProvider X509 common behaviour v1 getUserContext fails with message containing missing identity credentials: 
2022-06-21T23:45:04.8016297Z   ✔ IdentityProvider X509 common behaviour v1 getUserContext fails with message containing missing identity credentials: 1ms
2022-06-21T23:45:04.8016821Z     IdentityProviderRegistry Can add a custom provider: 
2022-06-21T23:45:04.8017358Z   ✔ IdentityProviderRegistry Can add a custom provider: 0ms
2022-06-21T23:45:04.8017807Z     IdentityProviderRegistry Throws for unknown provider: 
2022-06-21T23:45:04.8018327Z   ✔ IdentityProviderRegistry Throws for unknown provider: 0ms
2022-06-21T23:45:04.8018789Z     IdentityProviderRegistry Default registry has X.509 provider: 
2022-06-21T23:45:04.8019369Z   ✔ IdentityProviderRegistry Default registry has X.509 provider: 0ms
2022-06-21T23:45:04.8028041Z     Wallet interop Wallet is not empty: 
2022-06-21T23:45:04.8028590Z   ✔ Wallet interop Wallet is not empty: 0ms
2022-06-21T23:45:04.8089551Z     Wallet interop Read identities: 
2022-06-21T23:45:04.8090221Z   ✔ Wallet interop Read identities: 1ms
2022-06-21T23:45:04.8093500Z     Wallet List returns empty array for an empty wallet: 
2022-06-21T23:45:04.8094104Z   ✔ Wallet List returns empty array for an empty wallet: 0ms
2022-06-21T23:45:04.8094472Z     Wallet List returns added identity: 
2022-06-21T23:45:04.8094892Z   ✔ Wallet List returns added identity: 0ms
2022-06-21T23:45:04.8095396Z     Wallet List does not return removed identities: 
2022-06-21T23:45:04.8095848Z   ✔ Wallet List does not return removed identities: 1ms
2022-06-21T23:45:04.8096415Z     Wallet Returns undefined when getting an identity that does not exist: 
2022-06-21T23:45:04.8096929Z   ✔ Wallet Returns undefined when getting an identity that does not exist: 0ms
2022-06-21T23:45:04.8097346Z     Wallet Returns undefined when getting a removed identity: 
2022-06-21T23:45:04.8098122Z   ✔ Wallet Returns undefined when getting a removed identity: 0ms
2022-06-21T23:45:04.8098482Z     Wallet Get previously added identity: 
2022-06-21T23:45:04.8098871Z   ✔ Wallet Get previously added identity: 1ms
2022-06-21T23:45:04.8099235Z     Wallet Throws when adding an identity of unknown type: 
2022-06-21T23:45:04.8099857Z   ✔ Wallet Throws when adding an identity of unknown type: 0ms
2022-06-21T23:45:04.8148435Z     WalletStore Common FileSystemWalletStore Empty wallet contains no labels: 
2022-06-21T23:45:04.8149472Z   ✔ WalletStore Common FileSystemWalletStore Empty wallet contains no labels: 1ms
2022-06-21T23:45:04.8150283Z     WalletStore Common FileSystemWalletStore Labels include added identities: 
2022-06-21T23:45:04.8151289Z   ✔ WalletStore Common FileSystemWalletStore Labels include added identities: 1ms
2022-06-21T23:45:04.8159215Z     WalletStore Common FileSystemWalletStore Labels do not include removed identities: 
2022-06-21T23:45:04.8162186Z   ✔ WalletStore Common FileSystemWalletStore Labels do not include removed identities: 1ms
2022-06-21T23:45:04.8171244Z     WalletStore Common FileSystemWalletStore Get returns undefined for identity that does not exist: 
2022-06-21T23:45:04.8174630Z   ✔ WalletStore Common FileSystemWalletStore Get returns undefined for identity that does not exist: 0ms
2022-06-21T23:45:04.8191718Z     WalletStore Common FileSystemWalletStore Get returns undefined for removed identity: 
2022-06-21T23:45:04.8192541Z   ✔ WalletStore Common FileSystemWalletStore Get returns undefined for removed identity: 1ms
2022-06-21T23:45:04.8204901Z     WalletStore Common FileSystemWalletStore Get an imported identity: 
2022-06-21T23:45:04.8206702Z   ✔ WalletStore Common FileSystemWalletStore Get an imported identity: 0ms
2022-06-21T23:45:04.8242889Z     WalletStore Common InMemoryWalletStore Empty wallet contains no labels: 
2022-06-21T23:45:04.8249614Z   ✔ WalletStore Common InMemoryWalletStore Empty wallet contains no labels: 0ms
2022-06-21T23:45:04.8251843Z     WalletStore Common InMemoryWalletStore Labels include added identities: 
2022-06-21T23:45:04.8254798Z   ✔ WalletStore Common InMemoryWalletStore Labels include added identities: 0ms
2022-06-21T23:45:04.8256163Z     WalletStore Common InMemoryWalletStore Labels do not include removed identities: 
2022-06-21T23:45:04.8257483Z   ✔ WalletStore Common InMemoryWalletStore Labels do not include removed identities: 1ms
2022-06-21T23:45:04.8258602Z     WalletStore Common InMemoryWalletStore Get returns undefined for identity that does not exist: 
2022-06-21T23:45:04.8259314Z   ✔ WalletStore Common InMemoryWalletStore Get returns undefined for identity that does not exist: 0ms
2022-06-21T23:45:04.8266886Z     WalletStore Common InMemoryWalletStore Get returns undefined for removed identity: 
2022-06-21T23:45:04.8267677Z   ✔ WalletStore Common InMemoryWalletStore Get returns undefined for removed identity: 0ms
2022-06-21T23:45:04.8268166Z     WalletStore Common InMemoryWalletStore Get an imported identity: 
2022-06-21T23:45:04.8268726Z   ✔ WalletStore Common InMemoryWalletStore Get an imported identity: 0ms
2022-06-21T23:45:04.8269282Z     WalletStore FileSystemWalletStore Does not list non-identity files: 
2022-06-21T23:45:04.8269841Z   ✔ WalletStore FileSystemWalletStore Does not list non-identity files: 1ms
2022-06-21T23:45:04.8270362Z     WalletStore FileSystemWalletStore Recursively creates store directory if does not exist: 
2022-06-21T23:45:04.8271010Z   ✔ WalletStore FileSystemWalletStore Recursively creates store directory if does not exist: 1ms
2022-06-21T23:45:04.8539216Z     Network #_initializeInternalChannel should initialize with no discovery: 
2022-06-21T23:45:04.8540343Z   ✔ Network #_initializeInternalChannel should initialize with no discovery: 0ms
2022-06-21T23:45:04.8771226Z     Network #_initializeInternalChannel should initialize the network using the discovery with user specified targets: 
2022-06-21T23:45:04.8772793Z   ✔ Network #_initializeInternalChannel should initialize the network using the discovery with user specified targets: 1ms
2022-06-21T23:45:04.9001536Z     Network #_initializeInternalChannel should initialize the network using the discovery with targets from channel mspid: 
2022-06-21T23:45:04.9003052Z   ✔ Network #_initializeInternalChannel should initialize the network using the discovery with targets from channel mspid: 1ms
2022-06-21T23:45:04.9283632Z     Network #_initializeInternalChannel should initialize the network using the discovery with targets from client mspid: 
2022-06-21T23:45:04.9285061Z   ✔ Network #_initializeInternalChannel should initialize the network using the discovery with targets from client mspid: 1ms
2022-06-21T23:45:04.9536688Z     Network #_initializeInternalChannel should fail if no peers found: 
2022-06-21T23:45:04.9537852Z   ✔ Network #_initializeInternalChannel should fail if no peers found: 1ms
2022-06-21T23:45:04.9823570Z     Network #initialize should return with no action if already initialized: 
2022-06-21T23:45:04.9825969Z   ✔ Network #initialize should return with no action if already initialized: 0ms
2022-06-21T23:45:05.0059005Z     Network #initialize should initialize the internal channels: 
2022-06-21T23:45:05.0060351Z   ✔ Network #initialize should initialize the internal channels: 1ms
2022-06-21T23:45:05.0289281Z     Network #getContract should throw an error if not initialized: 
2022-06-21T23:45:05.0290747Z   ✔ Network #getContract should throw an error if not initialized: 1ms
2022-06-21T23:45:05.0606413Z     Network #getContract should return a cached contract object: 
2022-06-21T23:45:05.0607562Z   ✔ Network #getContract should return a cached contract object: 2ms
2022-06-21T23:45:05.0842084Z     Network #getContract should create a non-existent contract object: 
2022-06-21T23:45:05.0843212Z   ✔ Network #getContract should create a non-existent contract object: 1ms
2022-06-21T23:45:05.1156808Z     Network #getContract should return a newly created contract, with namespace: 
2022-06-21T23:45:05.1158305Z   ✔ Network #getContract should return a newly created contract, with namespace: 2ms
2022-06-21T23:45:05.1386152Z     Network #getContract should create a non-existent contract object with namespace: 
2022-06-21T23:45:05.1386830Z   ✔ Network #getContract should create a non-existent contract object with namespace: 0ms
2022-06-21T23:45:05.1630299Z     Network #_dispose should cleanup the network object: 
2022-06-21T23:45:05.1631057Z   ✔ Network #_dispose should cleanup the network object: 3ms
2022-06-21T23:45:05.1916264Z     Network #_dispose calls close() on its channel: 
2022-06-21T23:45:05.1917274Z   ✔ Network #_dispose calls close() on its channel: 0ms
2022-06-21T23:45:05.2142257Z     Network #_dispose calls close() on the event service factory: 
2022-06-21T23:45:05.2146473Z   ✔ Network #_dispose calls close() on the event service factory: 0ms
2022-06-21T23:45:05.3713610Z     Transaction #constructor should run: 
2022-06-21T23:45:05.3714855Z   ✔ Transaction #constructor should run: 1ms
2022-06-21T23:45:05.5215586Z     Transaction #getName return the name: 
2022-06-21T23:45:05.5216735Z   ✔ Transaction #getName return the name: 0ms
2022-06-21T23:45:05.6581630Z     Transaction #setTransient returns this: 
2022-06-21T23:45:05.6582415Z   ✔ Transaction #setTransient returns this: 1ms
2022-06-21T23:45:05.7911225Z     Transaction #setEndorsingPeers returns this: 
2022-06-21T23:45:05.7912044Z   ✔ Transaction #setEndorsingPeers returns this: 0ms
2022-06-21T23:45:05.9217718Z     Transaction #setEndorsingOrganizations returns this: 
2022-06-21T23:45:05.9218989Z   ✔ Transaction #setEndorsingOrganizations returns this: 0ms
2022-06-21T23:45:06.0604858Z     Transaction #submit sends proposal with no arguments: 
2022-06-21T23:45:06.0605709Z   ✔ Transaction #submit sends proposal with no arguments: 4ms
2022-06-21T23:45:06.1932010Z     Transaction #submit builds and sends proposal with arguments: 
2022-06-21T23:45:06.1932997Z   ✔ Transaction #submit builds and sends proposal with arguments: 1ms
2022-06-21T23:45:06.3306127Z     Transaction #submit returns empty buffer for no proposal response payload: 
2022-06-21T23:45:06.3309779Z   ✔ Transaction #submit returns empty buffer for no proposal response payload: 2ms
2022-06-21T23:45:06.4603950Z     Transaction #submit returns proposal response payload: 
2022-06-21T23:45:06.4605186Z   ✔ Transaction #submit returns proposal response payload: 2ms
2022-06-21T23:45:06.6092884Z     Transaction #submit throws if no peer responses are returned: 
2022-06-21T23:45:06.6094151Z   ✔ Transaction #submit throws if no peer responses are returned: 4ms
2022-06-21T23:45:06.7525585Z     Transaction #submit throws if proposal responses are all errors: 
2022-06-21T23:45:06.7526911Z   ✔ Transaction #submit throws if proposal responses are all errors: 1ms
2022-06-21T23:45:06.8881059Z     Transaction #submit throws if proposal responses are all invalid: 
2022-06-21T23:45:06.8882256Z   ✔ Transaction #submit throws if proposal responses are all invalid: 2ms
2022-06-21T23:45:07.0264554Z     Transaction #submit handles invalid proposal responses without connection property: 
2022-06-21T23:45:07.0266264Z   ✔ Transaction #submit handles invalid proposal responses without connection property: 2ms
2022-06-21T23:45:07.1670595Z     Transaction #submit handles error responses without connection property: 
2022-06-21T23:45:07.1671959Z   ✔ Transaction #submit handles error responses without connection property: 2ms
2022-06-21T23:45:07.3144063Z     Transaction #submit throws with peer responses if the orderer returns an unsuccessful response: 
2022-06-21T23:45:07.3145455Z   ✔ Transaction #submit throws with peer responses if the orderer returns an unsuccessful response: 2ms
2022-06-21T23:45:07.4597585Z     Transaction #submit does not submit to orderer if proposal responses are all invalid: 
2022-06-21T23:45:07.4599037Z   ✔ Transaction #submit does not submit to orderer if proposal responses are all invalid: 1ms
2022-06-21T23:45:07.5979064Z     Transaction #submit succeeds if some proposal responses are valid: 
2022-06-21T23:45:07.5980681Z   ✔ Transaction #submit succeeds if some proposal responses are valid: 2ms
2022-06-21T23:45:07.7371969Z     Transaction #submit throws if the orderer returns an unsuccessful response: 
2022-06-21T23:45:07.7374031Z   ✔ Transaction #submit throws if the orderer returns an unsuccessful response: 2ms
2022-06-21T23:45:07.8659365Z     Transaction #submit uses event handler strategy from gateway options: 
2022-06-21T23:45:07.8660198Z   ✔ Transaction #submit uses event handler strategy from gateway options: 2ms
2022-06-21T23:45:07.9985124Z     Transaction #submit uses event handler set on the transaction: 
2022-06-21T23:45:07.9987414Z   ✔ Transaction #submit uses event handler set on the transaction: 3ms
2022-06-21T23:45:08.1585475Z     Transaction #submit sends a proposal with transient data: 
2022-06-21T23:45:08.1586839Z   ✔ Transaction #submit sends a proposal with transient data: 2ms
2022-06-21T23:45:08.2906574Z     Transaction #submit returns empty string proposal response payload: 
2022-06-21T23:45:08.2907684Z   ✔ Transaction #submit returns empty string proposal response payload: 3ms
2022-06-21T23:45:08.4231877Z     Transaction #submit sends proposal using endorsement timeout from gateway options: 
2022-06-21T23:45:08.4233200Z   ✔ Transaction #submit sends proposal using endorsement timeout from gateway options: 2ms
2022-06-21T23:45:08.5517030Z     Transaction #submit sends proposal to specified peers without discovery: 
2022-06-21T23:45:08.5518506Z   ✔ Transaction #submit sends proposal to specified peers without discovery: 1ms
2022-06-21T23:45:08.6816183Z     Transaction #submit sends proposal to specified organizations without discovery: 
2022-06-21T23:45:08.6817607Z   ✔ Transaction #submit sends proposal to specified organizations without discovery: 3ms
2022-06-21T23:45:08.8168447Z     Transaction #submit send proposal to specified peers with discovery does not use discovery handler: 
2022-06-21T23:45:08.8169992Z   ✔ Transaction #submit send proposal to specified peers with discovery does not use discovery handler: 2ms
2022-06-21T23:45:08.9489227Z     Transaction #submit sends proposal with discovery uses discovery handler: 
2022-06-21T23:45:08.9490966Z   ✔ Transaction #submit sends proposal with discovery uses discovery handler: 2ms
2022-06-21T23:45:09.0875009Z     Transaction #submit sends proposal to specified organizations with discovery uses discovery handler and sets requiredOrgs: 
2022-06-21T23:45:09.0876633Z   ✔ Transaction #submit sends proposal to specified organizations with discovery uses discovery handler and sets requiredOrgs: 2ms
2022-06-21T23:45:09.2236861Z     Transaction #submit commits using timeout from gateway options: 
2022-06-21T23:45:09.2238213Z   ✔ Transaction #submit commits using timeout from gateway options: 2ms
2022-06-21T23:45:09.3506093Z     Transaction #submit commit with discovery uses discovery handler: 
2022-06-21T23:45:09.3507594Z   ✔ Transaction #submit commit with discovery uses discovery handler: 2ms
2022-06-21T23:45:09.4861666Z     Transaction #submit commit without discovery targets channel commiters: 
2022-06-21T23:45:09.4863032Z   ✔ Transaction #submit commit without discovery targets channel commiters: 1ms
2022-06-21T23:45:09.6223397Z     Transaction #submit prevents proposal build from changing transaction ID on identity context: 
2022-06-21T23:45:09.6224759Z   ✔ Transaction #submit prevents proposal build from changing transaction ID on identity context: 3ms
2022-06-21T23:45:09.7591396Z     Transaction #evaluate returns the result from the query handler: 
2022-06-21T23:45:09.7593188Z   ✔ Transaction #evaluate returns the result from the query handler: 1ms
2022-06-21T23:45:09.8907441Z     Transaction #evaluate passes a query to the query handler: 
2022-06-21T23:45:09.8911286Z   ✔ Transaction #evaluate passes a query to the query handler: 0ms
2022-06-21T23:45:10.0220344Z     Transaction #evaluate builds correct request for no-args invocation: 
2022-06-21T23:45:10.0221411Z   ✔ Transaction #evaluate builds correct request for no-args invocation: 4ms
2022-06-21T23:45:10.1535450Z     Transaction #evaluate builds correct request for with-args invocation: 
2022-06-21T23:45:10.1536645Z   ✔ Transaction #evaluate builds correct request for with-args invocation: 1ms
2022-06-21T23:45:10.2841995Z     Transaction #evaluate builds request with transient data: 
2022-06-21T23:45:10.2843234Z   ✔ Transaction #evaluate builds request with transient data: 1ms
2022-06-21T23:45:10.4173996Z     Transaction #evaluate returns empty string response: 
2022-06-21T23:45:10.4177885Z   ✔ Transaction #evaluate returns empty string response: 1ms
2022-06-21T23:45:10.5467306Z     Transaction #evaluate prevents proposal build from changing transaction ID on identity context: 
2022-06-21T23:45:10.5469080Z   ✔ Transaction #evaluate prevents proposal build from changing transaction ID on identity context: 0ms
2022-06-21T23:45:10.6830212Z     Transaction #serialize allows identical transaction submit for basic transaction: 
2022-06-21T23:45:10.6831617Z   ✔ Transaction #serialize allows identical transaction submit for basic transaction: 4ms
2022-06-21T23:45:10.8335024Z     Transaction #serialize allows identical transaction submit for transient data: 
2022-06-21T23:45:10.8336688Z   ✔ Transaction #serialize allows identical transaction submit for transient data: 3ms
2022-06-21T23:45:10.9661092Z     Transaction #serialize allows identical transaction submit for endorsing organizations: 
2022-06-21T23:45:10.9667896Z   ✔ Transaction #serialize allows identical transaction submit for endorsing organizations: 3ms
2022-06-21T23:45:11.1151000Z     Transaction #serialize allows identical transaction submit for endorsing peers: 
2022-06-21T23:45:11.1152848Z   ✔ Transaction #serialize allows identical transaction submit for endorsing peers: 7ms
2022-06-21T23:45:11.1162481Z 
2022-06-21T23:45:11.1166864Z   424 passing (11s)
2022-06-21T23:45:11.1167288Z 
2022-06-21T23:45:12.0044675Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:45:12.0049899Z File                               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     
2022-06-21T23:45:12.0050878Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:45:12.0066612Z All files                          |   90.72 |     82.5 |   88.46 |   90.76 |                       
2022-06-21T23:45:12.0067300Z  fabric-ca-client/lib              |      98 |    97.59 |   93.22 |      98 |                       
2022-06-21T23:45:12.0071401Z   AffiliationService.js            |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0075543Z   CertificateService.js            |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0076857Z   FabricCAClient.js                |   93.79 |     94.8 |   84.61 |   93.79 | ...15,321-322,327-329 
2022-06-21T23:45:12.0090044Z   FabricCAServices.js              |     100 |    97.05 |     100 |     100 | 210,341               
2022-06-21T23:45:12.0095080Z   IdentityService.js               |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0095765Z   helper.js                        |     100 |    94.44 |     100 |     100 | 61                    
2022-06-21T23:45:12.0214629Z  fabric-common/lib                 |   95.88 |    90.64 |   95.66 |   95.92 |                       
2022-06-21T23:45:12.0215071Z   BaseClient.js                    |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0215656Z   BlockDecoder.js                  |   99.53 |    92.37 |     100 |   99.53 | 554-555,708           
2022-06-21T23:45:12.0216212Z   Channel.js                       |   98.02 |     96.2 |     100 |   98.02 | 491-492,512-513       
2022-06-21T23:45:12.0216617Z   Client.js                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0217185Z   Commit.js                        |   97.22 |      100 |     100 |   97.22 | 198-199               
2022-06-21T23:45:12.0217965Z   Committer.js                     |   98.18 |    96.15 |     100 |   98.18 | 143                   
2022-06-21T23:45:12.0218403Z   Config.js                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0218829Z   CryptoAlgorithms.js              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0219235Z   CryptoSuite.js                   |   85.71 |      100 |    92.3 |   85.71 | 93                    
2022-06-21T23:45:12.0219652Z   Discoverer.js                    |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0220246Z   DiscoveryHandler.js              |   98.72 |     97.1 |     100 |   98.71 | 100,209-211,670-671   
2022-06-21T23:45:12.0220821Z   DiscoveryService.js              |   98.33 |     97.1 |     100 |   98.33 | ...90,633-634,641-642 
2022-06-21T23:45:12.0221229Z   Endorsement.js                   |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0221649Z   Endorser.js                      |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0222052Z   Endpoint.js                      |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0222467Z   EventListener.js                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0223019Z   EventService.js                  |    95.3 |    90.27 |   96.96 |   95.28 | ...-956,975,1053,1145 
2022-06-21T23:45:12.0223433Z   Eventer.js                       |   98.36 |    96.55 |     100 |   98.36 | 69                    
2022-06-21T23:45:12.0223825Z   Hash.js                          |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0224217Z   HashPrimitives.js                |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0224631Z   Identity.js                      |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0225225Z   IdentityContext.js               |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0225634Z   Key.js                           |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0226022Z   KeyValueStore.js                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0226601Z   Proposal.js                      |   98.08 |    97.22 |     100 |   98.07 | 431-433               
2022-06-21T23:45:12.0227009Z   Query.js                         |   94.11 |       50 |     100 |   94.11 | 58                    
2022-06-21T23:45:12.0227418Z   ServiceAction.js                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0227826Z   ServiceEndpoint.js               |   98.29 |    94.91 |     100 |   98.29 | 155,163               
2022-06-21T23:45:12.0228250Z   ServiceHandler.js                |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0228672Z   Signer.js                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0229085Z   SigningIdentity.js               |   95.45 |    76.19 |   66.66 |   95.45 | 75                    
2022-06-21T23:45:12.0229627Z   User.js                          |   92.63 |    70.49 |      90 |   92.63 | ...48-249,263-270,336 
2022-06-21T23:45:12.0230158Z   Utils.js                         |    67.8 |    63.38 |   67.44 |   68.19 | ...46-553,564,601,647 
2022-06-21T23:45:12.0230696Z  fabric-common/lib/hash            |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0231109Z   hash_sha2_256.js                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0231489Z   hash_sha2_384.js                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0235738Z  fabric-common/lib/impl            |   50.59 |    46.58 |   40.62 |   50.59 |                       
2022-06-21T23:45:12.0237217Z   CryptoKeyStore.js                |   78.57 |     62.5 |    87.5 |   78.57 | 43,60-62,69,72-73     
2022-06-21T23:45:12.0237897Z   CryptoSuite_ECDSA_AES.js         |   78.15 |    71.01 |   70.58 |   78.15 | ...35-258,287,302-319 
2022-06-21T23:45:12.0238332Z   InMemoryKeyValueStore.js         |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0239070Z   bccsp_pkcs11.js                  |   37.89 |    38.68 |   11.11 |   37.89 | ...1,395-937,955-1110 
2022-06-21T23:45:12.0239601Z  fabric-common/lib/impl/aes        |   10.71 |        0 |       0 |   10.71 |                       
2022-06-21T23:45:12.0240295Z   pkcs11_key.js                    |   10.71 |        0 |       0 |   10.71 | 15-66                 
2022-06-21T23:45:12.0240851Z  fabric-common/lib/impl/ecdsa      |   48.06 |    29.11 |   45.45 |   48.06 |                       
2022-06-21T23:45:12.0241281Z   key.js                           |   98.18 |       92 |     100 |   98.18 | 103                   
2022-06-21T23:45:12.0241820Z   pkcs11_key.js                    |   10.81 |        0 |       0 |   10.81 | 29-187                
2022-06-21T23:45:12.0242348Z  fabric-network/src                |   97.86 |    95.23 |   95.83 |   98.03 |                       
2022-06-21T23:45:12.0242902Z   contract.ts                      |   92.92 |    95.45 |    90.9 |   92.78 | 306,326,389-394       
2022-06-21T23:45:12.0243333Z   defaultcheckpointers.ts          |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0243757Z   gateway.ts                       |   98.97 |    95.23 |     100 |   98.96 | 290                   
2022-06-21T23:45:12.0244134Z   logger.ts                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0244530Z   network.ts                       |   98.29 |    97.05 |   94.73 |   99.11 | 381                   
2022-06-21T23:45:12.0245144Z   transaction.ts                   |     100 |    92.85 |     100 |     100 | 276,320               
2022-06-21T23:45:12.0245712Z  fabric-network/src/errors         |   93.75 |       75 |     100 |   93.75 |                       
2022-06-21T23:45:12.0246119Z   fabricerror.ts                   |    87.5 |       75 |     100 |    87.5 | 30                    
2022-06-21T23:45:12.0246523Z   timeouterror.ts                  |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0247253Z   transactionerror.ts              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0247936Z  fabric-network/src/impl           |   93.33 |    78.57 |     100 |   93.22 |                       
2022-06-21T23:45:12.0248313Z   filecheckpointer.ts              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0248817Z   gatewayutils.ts                  |   87.09 |       70 |     100 |   86.66 | 17-18,84,92           
2022-06-21T23:45:12.0249331Z  fabric-network/src/impl/ccp       |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0249718Z   networkconfig.ts                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0250207Z  fabric-network/src/impl/event     |   95.63 |    81.08 |    92.2 |   96.06 |                       
2022-06-21T23:45:12.0251225Z   allfortxstrategy.ts              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0251617Z   anyfortxstrategy.ts              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0251982Z   asyncnotifier.ts                 |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0252365Z   blockeventsource.ts              |   98.86 |    88.88 |     100 |   98.85 | 176                   
2022-06-21T23:45:12.0252914Z   commiteventfactory.ts            |   52.38 |       50 |   16.66 |   57.89 | 16,22-27,35-39        
2022-06-21T23:45:12.0253461Z   commitlistenersession.ts         |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0253877Z   contractlistenersession.ts       |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0254315Z   defaulteventhandlerstrategies.ts |    97.5 |      100 |   66.66 |   96.96 | 110                   
2022-06-21T23:45:12.0254875Z   eventservicemanager.ts           |   84.44 |       40 |      80 |   85.71 | 63,113-117,131        
2022-06-21T23:45:12.0255295Z   filteredblockeventfactory.ts     |   95.65 |       50 |     100 |   95.23 | 16                    
2022-06-21T23:45:12.0255694Z   fullblockeventfactory.ts         |    90.9 |       50 |     100 |    90.9 | 17                    
2022-06-21T23:45:12.0256495Z   fullcontracteventfactory.ts      |     100 |       50 |     100 |     100 | 12                    
2022-06-21T23:45:12.0256953Z   fulltransactioneventfactory.ts   |   96.42 |    61.53 |     100 |   96.42 | 61                    
2022-06-21T23:45:12.0257431Z   isolatedblocklistenersession.ts  |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0258004Z   listeners.ts                     |     100 |    91.66 |     100 |     100 | 75                    
2022-06-21T23:45:12.0258391Z   listenersession.ts               |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0258795Z   orderedblockqueue.ts             |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0259390Z   privateblockeventfactory.ts      |      95 |       50 |     100 |      95 | 21                    
2022-06-21T23:45:12.0259837Z   sharedblocklistenersession.ts    |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0260292Z   transactioneventhandler.ts       |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0260742Z   transactioneventstrategy.ts      |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0261309Z   transactionstatus.ts             |   85.71 |       50 |     100 |   85.71 | 14                    
2022-06-21T23:45:12.0261860Z  fabric-network/src/impl/query     |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0262645Z   defaultqueryhandlerstrategies.ts |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0263255Z   query.ts                         |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0263645Z   roundrobinqueryhandler.ts        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0264076Z   singlequeryhandler.ts            |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0264631Z  fabric-network/src/impl/wallet    |   77.18 |    68.75 |   76.08 |   77.55 |                       
2022-06-21T23:45:12.0265378Z   couchdbwalletstore.ts            |   11.53 |        0 |       0 |      12 | 19-73                 
2022-06-21T23:45:12.0265788Z   filesystemwalletstore.ts         |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0266520Z   hsmx509identity.ts               |   74.07 |    81.81 |      80 |   74.07 | 65,114-121            
2022-06-21T23:45:12.0266949Z   identityproviderregistry.ts      |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0267565Z   inmemorywalletstore.ts           |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0267965Z   wallet.ts                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:45:12.0268497Z   wallets.ts                       |   81.81 |        0 |   66.66 |   81.81 | 46-47                 
2022-06-21T23:45:12.0268902Z   x509identity.ts                  |   91.66 |       90 |      80 |   91.66 | 36,78                 
2022-06-21T23:45:12.0269846Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:45:12.4365073Z 
2022-06-21T23:45:12.4366058Z > -@2.5.0-snapshot dockerReady /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:12.4367201Z > npm run dockerClean && (cd test/fixtures/docker-compose && docker-compose -f docker-compose-tls-level-db.yaml -p node up -d && sleep 15 && docker ps -a)
2022-06-21T23:45:12.4367541Z 
2022-06-21T23:45:12.7054604Z 
2022-06-21T23:45:12.7055983Z > -@2.5.0-snapshot dockerClean /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:12.7056710Z > ./scripts/npm_scripts/dockerClean.sh
2022-06-21T23:45:12.7057048Z 
2022-06-21T23:45:12.7127712Z 
2022-06-21T23:45:12.7131665Z dockerClean() {
2022-06-21T23:45:12.7135229Z     #stop and remove docker containers
2022-06-21T23:45:12.7142671Z     docker kill $(docker ps -aq)
2022-06-21T23:45:12.7146770Z     docker rm $(docker ps -aq) -f
2022-06-21T23:45:12.7150235Z     #remove chaincode images so that they get rebuilt during test
2022-06-21T23:45:12.7154039Z     docker rmi $(docker images | grep "^dev-" | awk '{print $3}')
2022-06-21T23:45:12.7158374Z }
2022-06-21T23:45:12.7158524Z 
2022-06-21T23:45:12.7159154Z dockerClean || true # kill, rm, and rmi may fail because the containers may have been cleaned up or do not exist
2022-06-21T23:45:12.7896102Z "docker kill" requires at least 1 argument.
2022-06-21T23:45:12.7897161Z See 'docker kill --help'.
2022-06-21T23:45:12.7897769Z 
2022-06-21T23:45:12.7898268Z Usage:  docker kill [OPTIONS] CONTAINER [CONTAINER...]
2022-06-21T23:45:12.7898650Z 
2022-06-21T23:45:12.7899150Z Kill one or more running containers
2022-06-21T23:45:12.8608660Z "docker rm" requires at least 1 argument.
2022-06-21T23:45:12.8609275Z See 'docker rm --help'.
2022-06-21T23:45:12.8609425Z 
2022-06-21T23:45:12.8609635Z Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]
2022-06-21T23:45:12.8609971Z 
2022-06-21T23:45:12.8610098Z Remove one or more containers
2022-06-21T23:45:12.9416009Z "docker rmi" requires at least 1 argument.
2022-06-21T23:45:12.9417428Z See 'docker rmi --help'.
2022-06-21T23:45:12.9418039Z 
2022-06-21T23:45:12.9419061Z Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]
2022-06-21T23:45:12.9419758Z 
2022-06-21T23:45:12.9420078Z Remove one or more images
2022-06-21T23:45:14.1584967Z Creating network "node_default" with the default driver
2022-06-21T23:45:14.4775178Z Creating ca0.example.com ... 
2022-06-21T23:45:14.4791026Z Creating orderer.example.com ... 
2022-06-21T23:45:14.5012313Z Creating couchdb             ... 
2022-06-21T23:45:14.5339087Z Creating ca1.example.com     ... 
2022-06-21T23:45:16.1493268Z Creating couchdb             ... done
2022-06-21T23:45:16.2401522Z Creating orderer.example.com ... done
2022-06-21T23:45:16.2756777Z Creating peer0.org1.example.com ... 
2022-06-21T23:45:16.2944709Z Creating peer0.org2.example.com ... 
2022-06-21T23:45:16.3450659Z Creating ca0.example.com        ... done
2022-06-21T23:45:16.4674145Z Creating ca1.example.com        ... done
2022-06-21T23:45:17.4945955Z Creating peer0.org2.example.com ... done
2022-06-21T23:45:17.5606528Z Creating peer0.org1.example.com ... done
2022-06-21T23:45:32.7088411Z CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS          PORTS                                                           NAMES
2022-06-21T23:45:32.7093444Z df440067ad51   hyperledger/fabric-peer      "peer node start"        16 seconds ago   Up 15 seconds   7051/tcp, 0.0.0.0:8051->8051/tcp, :::8051->8051/tcp             peer0.org2.example.com
2022-06-21T23:45:32.7095537Z 63c279755894   hyperledger/fabric-peer      "peer node start"        16 seconds ago   Up 15 seconds   0.0.0.0:7051->7051/tcp, :::7051->7051/tcp                       peer0.org1.example.com
2022-06-21T23:45:32.7096793Z 65b3e708dfbf   hyperledger/fabric-ca        "sh -c 'fabric-ca-se…"   18 seconds ago   Up 16 seconds   0.0.0.0:8054->7054/tcp, :::8054->7054/tcp                       ca1.example.com
2022-06-21T23:45:32.7098359Z ed24a6f96ac6   couchdb:3.1                  "tini -- /docker-ent…"   18 seconds ago   Up 16 seconds   4369/tcp, 9100/tcp, 0.0.0.0:5984->5984/tcp, :::5984->5984/tcp   couchdb
2022-06-21T23:45:32.7099581Z 6c0cb8fb94a9   hyperledger/fabric-ca        "sh -c 'fabric-ca-se…"   18 seconds ago   Up 16 seconds   0.0.0.0:7054->7054/tcp, :::7054->7054/tcp                       ca0.example.com
2022-06-21T23:45:32.7100742Z b9229577834a   hyperledger/fabric-orderer   "orderer"                18 seconds ago   Up 16 seconds   0.0.0.0:7050->7050/tcp, :::7050->7050/tcp                       orderer.example.com
2022-06-21T23:45:32.9906864Z 
2022-06-21T23:45:32.9908204Z > -@2.5.0-snapshot tapeIntegration /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:32.9909017Z > ./scripts/npm_scripts/runTape.sh
2022-06-21T23:45:32.9909498Z 
2022-06-21T23:45:33.0001842Z 
2022-06-21T23:45:33.0002028Z ####
2022-06-21T23:45:33.0003069Z # Note: the tape integration suite is being deprecated in favour of cucumber. Please do not add files to this function
2022-06-21T23:45:33.0003589Z ####
2022-06-21T23:45:33.0003835Z 
2022-06-21T23:45:33.0004353Z runTape() {
2022-06-21T23:45:33.0004967Z     export HFC_LOGGING='{"debug":"test/temp/debug.log"}'
2022-06-21T23:45:33.0005147Z 
2022-06-21T23:45:33.0005334Z     # Tests have to be executed in the following order
2022-06-21T23:45:33.0005516Z 
2022-06-21T23:45:33.0005902Z     # First run the ca-tests that run good/bad path member registration/enrollment scenarios
2022-06-21T23:45:33.0006613Z     # The remaining tests re-use the same key value store with the saved user certificates, in order to interact with the network
2022-06-21T23:45:33.0007231Z     npx tape test/integration/fabric-ca-affiliation-service-tests.js \
2022-06-21T23:45:33.0007765Z         test/integration/fabric-ca-identity-service-tests.js \
2022-06-21T23:45:33.0008301Z         test/integration/fabric-ca-certificate-service-tests.js \
2022-06-21T23:45:33.0008794Z         test/integration/fabric-ca-services-tests.js
2022-06-21T23:45:33.0008988Z 
2022-06-21T23:45:33.0009458Z }
2022-06-21T23:45:33.0009565Z 
2022-06-21T23:45:33.0009662Z runTape $@
2022-06-21T23:45:33.6387409Z TAP version 13
2022-06-21T23:45:33.6397452Z #  ** HFCAIdentityService Test ** 
2022-06-21T23:45:34.2897294Z ok 1 Successfully enrolled 'admin'.
2022-06-21T23:45:34.2945616Z ok 2 Successfully set enrollment for user admin
2022-06-21T23:45:34.3162090Z ok 3 should be strictly equal
2022-06-21T23:45:34.3163719Z ok 4 should be strictly equal
2022-06-21T23:45:34.3165442Z ok 5 affiliation org1 exists
2022-06-21T23:45:34.3167196Z ok 6 affiliation org2 exists
2022-06-21T23:45:34.3168838Z ok 7 should be strictly equal
2022-06-21T23:45:34.3169891Z ok 8 Successfully get All afflitions from fabric-ca
2022-06-21T23:45:34.3292076Z ok 9 Response should have property 'success' equals true
2022-06-21T23:45:34.3293147Z ok 10 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.3294207Z ok 11 Response should have property 'name' equals "org2.office1"
2022-06-21T23:45:34.3294814Z ok 12 Successfully created new affiliation org2.office1
2022-06-21T23:45:34.3426215Z ok 13 Response should have property 'success' equals true
2022-06-21T23:45:34.3427575Z ok 14 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.3429547Z ok 15 Response should have property 'name' equals "org3.department1"
2022-06-21T23:45:34.3430373Z ok 16 Successfully force created new affiliation org3.department1
2022-06-21T23:45:34.3512731Z ok 17 Response should have property 'success' equals true
2022-06-21T23:45:34.3513648Z ok 18 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.3517020Z ok 19 Response should have property 'name' equals "org2.office1"
2022-06-21T23:45:34.3517731Z ok 20 Successfully get affiliation org2.office1
2022-06-21T23:45:34.3625786Z ok 21 Response should have property 'success' equals true
2022-06-21T23:45:34.3626661Z ok 22 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.3627558Z ok 23 Response should have property 'name' equals "org2.office2"
2022-06-21T23:45:34.3628891Z ok 24 Successfully updated affiliation org2.office1 to org2.office2
2022-06-21T23:45:34.3711260Z ok 25 resp should have property 'success' equals true
2022-06-21T23:45:34.3713635Z ok 26 affiliation org2.office2 exists
2022-06-21T23:45:34.3717615Z ok 27 affiliation org2.office1 does not exists
2022-06-21T23:45:34.3718213Z ok 28 After update, org2.office1 does not exist, and org2.office2 exists
2022-06-21T23:45:34.3825972Z ok 29 Response should have property 'success' equals true
2022-06-21T23:45:34.3826871Z ok 30 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.3827598Z ok 31 Response should have property 'name' equals "org4"
2022-06-21T23:45:34.3828485Z ok 32 Successfully force updated affiliation 'org3' to 'org4', now check all its children have been updated too
2022-06-21T23:45:34.3902850Z ok 33 affiliation org4 exists
2022-06-21T23:45:34.3903826Z ok 34 affiliation org4.department1 exists
2022-06-21T23:45:34.3907358Z ok 35 affiliation org3 does not exists
2022-06-21T23:45:34.3908533Z ok 36 After force update, 'org3' has been renamed to 'org4', 'org3.department1' has been renamed to 'org4.department1'
2022-06-21T23:45:34.4045910Z ok 37 Response should have property 'success' equals true
2022-06-21T23:45:34.4046701Z ok 38 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.4047397Z ok 39 Response should have property 'name' equals "org2.office2"
2022-06-21T23:45:34.4047947Z ok 40 Successfully deleted affiliation org2.office2
2022-06-21T23:45:34.4167802Z ok 41 Response should have property 'success' equals true
2022-06-21T23:45:34.4168602Z ok 42 Response should have property 'caname' equals ca-org1
2022-06-21T23:45:34.4169319Z ok 43 Response should have property 'name' equals "org4"
2022-06-21T23:45:34.4171208Z ok 44 Successfully deleted affiliation org4
2022-06-21T23:45:34.4247724Z ok 45 should be strictly equal
2022-06-21T23:45:34.4248815Z ok 46 affiliation org4 does not exists
2022-06-21T23:45:34.4249615Z ok 47 After force delete, 'org4' and all its child affiliations are deleted
2022-06-21T23:45:34.4259412Z #  ** FabricCAServices - IdentityService Test ** 
2022-06-21T23:45:34.6543596Z ok 48 Successfully enrolled admin at ca_Org1
2022-06-21T23:45:34.8693410Z ok 49 Successfully enrolled admin at ca_Org2
2022-06-21T23:45:34.8710441Z ok 50 Successfully set enrollment for user admin1
2022-06-21T23:45:34.8723429Z ok 51 Successfully set enrollment for user admin2
2022-06-21T23:45:34.9806606Z ok 52 Response matched enrollment secret
2022-06-21T23:45:34.9807716Z ok 53 Successfully created new Identity %s by admin1
2022-06-21T23:45:35.1833332Z ok 54 Successfully enrolled user_130 at ca_Org1
2022-06-21T23:45:35.2874001Z ok 55 throws expected error if we enroll this new identity at ca_Org2
2022-06-21T23:45:35.2973905Z ok 56 Successfully get indentity user_130
2022-06-21T23:45:35.2974685Z ok 57 Successful response for user call to getOne
2022-06-21T23:45:35.2975919Z ok 58 should be strictly equal
2022-06-21T23:45:35.2976910Z ok 59 should be strictly equal
2022-06-21T23:45:35.3046956Z ok 60 Successful response for admin1 call to getOne
2022-06-21T23:45:35.3119115Z ok 61 Successful response for user call to getAll
2022-06-21T23:45:35.3121044Z ok 62 user can get the user identity
2022-06-21T23:45:35.3124905Z ok 63 user can not get the admin identity
2022-06-21T23:45:35.3195038Z ok 64 Successful response for admin1 call to getAll
2022-06-21T23:45:35.3196703Z ok 65 admin1 can get the user identity
2022-06-21T23:45:35.3197380Z ok 66 admin1 can get the admin identity
2022-06-21T23:45:35.3265588Z ok 67 Successful response for admin2 call to getAll
2022-06-21T23:45:35.3267038Z ok 68 admin2 can not get the user identity
2022-06-21T23:45:35.3268245Z ok 69 admin2 can get the admin identity
2022-06-21T23:45:35.4308815Z ok 70 Response secret matches enrollment secret
2022-06-21T23:45:35.4309781Z ok 71 Successfully updated indentity user_130
2022-06-21T23:45:35.4509756Z ok 72 Successful response for user call to delete itself
2022-06-21T23:45:35.4510681Z ok 73 should be strictly equal
2022-06-21T23:45:35.4511748Z ok 74 Successfully deleted identity user_130
2022-06-21T23:45:35.4514005Z #  ** FabricCAServices - CertificateService Test ** 
2022-06-21T23:45:35.6559898Z ok 75 Successfully enrolled admin at ca_Org1
2022-06-21T23:45:35.8649446Z ok 76 Successfully enrolled admin at ca_Org2
2022-06-21T23:45:35.8662196Z ok 77 Successfully set enrollment for user admin1
2022-06-21T23:45:35.8680459Z ok 78 Successfully set enrollment for user admin2
2022-06-21T23:45:35.8760567Z ok 79 certificate service should response success
2022-06-21T23:45:35.8761832Z ok 80 there should be certificates for the admin user
2022-06-21T23:45:35.8834335Z ok 81 certificate service should response success
2022-06-21T23:45:35.8835087Z ok 82 there should be certificates for the admin user
2022-06-21T23:45:36.1922689Z ok 83 certificate service should response success
2022-06-21T23:45:36.1924037Z ok 84 there should be a new certificate after a new identity was created
2022-06-21T23:45:36.1994470Z ok 85 certificate service should response success
2022-06-21T23:45:36.1995900Z ok 86 the new created user can also view certificates
2022-06-21T23:45:36.2179907Z ok 87 certificate service should response success
2022-06-21T23:45:36.2183005Z #  ** FabricCAServices: Test enroll() With Dynamic CSR ** 
2022-06-21T23:45:36.4281993Z ok 88 Successfully enrolled 'admin'.
2022-06-21T23:45:36.4293009Z ok 89 Subject should be /CN=admin
2022-06-21T23:45:36.4305656Z ok 90 Successfully imported public key from the resulting enrollment certificate
2022-06-21T23:45:36.4308031Z ok 91 connection-timeout should have default value 3000
2022-06-21T23:45:36.4310673Z ok 92 socket-operation-timeout should have default value undefined
2022-06-21T23:45:39.4391128Z ok 93 should have duration roughly equals 3000
2022-06-21T23:45:44.4497502Z ok 94 should have duration roughly equals 5000
2022-06-21T23:45:44.4498150Z ok 95 Successfully throw error after SO_TIMEOUT
2022-06-21T23:45:44.5502593Z # secret: "AcotEAuFXVjg"
2022-06-21T23:45:44.5503971Z ok 96 testUser 'testUser'
2022-06-21T23:45:44.5515664Z ok 97 Successfully saved user to state store
2022-06-21T23:45:44.5642913Z ok 98 Successfully rejected registration request "testUserX" in affiliation "bank_X"
2022-06-21T23:45:44.6651607Z ok 99 Successfully registered "testUserX" in affiliation "org1" with enrollment secret returned: RfsmLSYmGOYF
2022-06-21T23:45:44.6759496Z ok 100 Successfully revoked "testUserX"
2022-06-21T23:45:44.7738466Z ok 101 Successfully registered another user "testUserY" with preset enrollment secret
2022-06-21T23:45:44.9877293Z # Ready to revoke certificate serial # "156099829F5A2EA28510939AC3CC2FCE85B8179A" with aki "69FC9BEAFA2CD31F1FDD95A8B96A48DC0D1398F25103C6E48C9C8853E0FC32D6"
2022-06-21T23:45:44.9977401Z ok 102 Successfully revoked "testUserY" using serial number and AKI
2022-06-21T23:45:45.0125741Z ok 103 Successfully generated CRL
2022-06-21T23:45:45.1136209Z ok 104 Successfully registered "test1" 
2022-06-21T23:45:45.3064993Z ok 105 Successfully enrolled "test1"
2022-06-21T23:45:45.3069218Z ok 106 Successfully enrolled with certificate without the added attribute ::test1attr
2022-06-21T23:45:45.3071913Z ok 107 Successfully enrolled with certificate without the added attribute ::ecert
2022-06-21T23:45:45.4076055Z ok 108 Successfully registered "test2" 
2022-06-21T23:45:45.6054726Z ok 109 Successfully enrolled "test2"
2022-06-21T23:45:45.6060133Z ok 110 Successfully enrolled with certificate without the added attribute ::test2attr
2022-06-21T23:45:45.6065452Z ok 111 Successfully received the enrolled certificate with the added attribute ::ecert
2022-06-21T23:45:45.7065084Z ok 112 Successfully registered "test3" 
2022-06-21T23:45:45.9104179Z ok 113 Successfully enrolled "test3"
2022-06-21T23:45:45.9108743Z ok 114 Successfully received the enrolled certificate with the added attribute ::test3attr
2022-06-21T23:45:45.9111585Z ok 115 Successfully received the enrolled certificate with the added attribute ::ecert
2022-06-21T23:45:46.0187402Z ok 116 Successfully registered "webAdmin" who can register other users with no role
2022-06-21T23:45:46.2150935Z ok 117 Successfully enrolled "webAdmin"
2022-06-21T23:45:46.2155633Z ok 118 Successfully received the enrolled certificate with the added attribute ::myattrib
2022-06-21T23:45:46.2158516Z ok 119 Successfully enrolled with certificate without the added attribute ::dfattrib
2022-06-21T23:45:46.2170642Z ok 120 Successfully constructed User object for "webAdmin"
2022-06-21T23:45:46.2249640Z ok 121 Successfully rejected attempt to register a user of invalid role. Error: fabric-ca request register failed with errors [[ { code: 71, message: 'Authorization failure' } ]]
2022-06-21T23:45:46.2323236Z ok 122 Successfully captured the error when registering "auditor" of role "client" from "webAdmin" but using invalid affiliation
2022-06-21T23:45:46.3296584Z ok 123 Successfully registered "auditor" of role "client" from "webAdmin"
2022-06-21T23:45:46.4572334Z ok 124 Successfully re-enrolled "webAdmin" user
2022-06-21T23:45:46.4636520Z ok 125 Successfully enrolled with certificate without the added attribute ::myattrib
2022-06-21T23:45:46.4637607Z ok 126 Successfully received the enrolled certificate with the added attribute ::dfattrib
2022-06-21T23:45:46.4639610Z ok 127 Checking re-enroll response has the private key
2022-06-21T23:45:46.4640405Z ok 128 Checking re-enroll response has the certificate
2022-06-21T23:45:46.5635795Z ok 129 Successfully re-enrolled "webAdmin" user with the request for attributes
2022-06-21T23:45:46.5640201Z ok 130 Successfully received the enrolled certificate with the added attribute ::myattrib
2022-06-21T23:45:46.5652013Z ok 131 Successfully enrolled with certificate without the added attribute ::dfattrib
2022-06-21T23:45:46.6755785Z ok 132 Successfully re-enrolled "webAdmin" user with the request for attributes
2022-06-21T23:45:46.6758907Z ok 133 Successfully received the enrolled certificate with the added attribute ::myattrib
2022-06-21T23:45:46.6762706Z ok 134 Successfully received the enrolled certificate with the added attribute ::dfattrib
2022-06-21T23:45:46.7859523Z ok 135 Successfully re-enrolled "webAdmin" user with the request for attributes
2022-06-21T23:45:46.7861134Z ok 136 Successfully enrolled with certificate without the added attribute ::myattrib
2022-06-21T23:45:46.7864336Z ok 137 Successfully enrolled with certificate without the added attribute ::dfattrib
2022-06-21T23:45:46.7865225Z #  ** FabricCAClient: Test enroll With Static CSR ** 
2022-06-21T23:45:46.8863266Z ok 138 Successfully invoked enroll API with enrollmentID 'testUser'
2022-06-21T23:45:46.8871229Z ok 139 Subject should be /CN=testUser
2022-06-21T23:45:46.8871635Z #  ** FabricCAClient: Test enroll With a CSR ** 
2022-06-21T23:45:47.0938300Z ok 140 Successfully enrolled admin
2022-06-21T23:45:47.2938537Z ok 141 Successfully get enrollment by csr
2022-06-21T23:45:47.2945236Z ok 142 Subject should be /CN=aTestUser
2022-06-21T23:45:47.2945769Z ok 143 Successfully tested enroll with csr
2022-06-21T23:45:47.2953694Z #  ** FabricCAClient: Test get CA Info ** 
2022-06-21T23:45:47.4998150Z ok 144 Successfully enrolled admin
2022-06-21T23:45:47.5087474Z ok 145 Successfully get ca info
2022-06-21T23:45:47.5089341Z ok 146 CA Name should be ca-org1
2022-06-21T23:45:47.5092882Z ok 147 Successfully tested get CA Info
2022-06-21T23:45:49.4492977Z 
2022-06-21T23:45:49.4493523Z 1..147
2022-06-21T23:45:49.4542790Z # tests 147
2022-06-21T23:45:49.4543750Z # pass  147
2022-06-21T23:45:49.4549233Z 
2022-06-21T23:45:49.4549342Z # ok
2022-06-21T23:45:49.4549476Z 
2022-06-21T23:45:49.7730088Z 
2022-06-21T23:45:49.7731569Z > -@2.5.0-snapshot cucumberScenario /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:49.7732692Z > npm run setupCucumbers && export HFC_LOGGING='{"debug":"test/temp/debugc.log"}' && npm run test:cucumber && npm run dockerClean && nyc --check-coverage --statements 54 --branches 32 --functions 46 --lines 54 npm run test:ts-cucumber
2022-06-21T23:45:49.7733200Z 
2022-06-21T23:45:50.0570121Z 
2022-06-21T23:45:50.0571611Z > -@2.5.0-snapshot setupCucumbers /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:50.0573789Z > node -e 'require("./scripts/npm_scripts/testFunctions.js").createCucumberLogFile()'
2022-06-21T23:45:50.0574260Z 
2022-06-21T23:45:50.4325146Z 
2022-06-21T23:45:50.4326357Z > -@2.5.0-snapshot test:cucumber /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:50.4327491Z > cucumber-js -f @cucumber/pretty-formatter ./test/scenario/features/*.feature
2022-06-21T23:45:50.4328004Z 
2022-06-21T23:45:50.9618050Z 0 scenarios
2022-06-21T23:45:50.9618366Z 0 steps
2022-06-21T23:45:50.9618913Z 0m00.000s (executing steps: 0m00.000s)
2022-06-21T23:45:50.9629136Z ┌──────────────────────────────────────────────────────────────────────────────┐
2022-06-21T23:45:50.9630091Z │ Share your Cucumber Report with your team at https://reports.cucumber.io     │
2022-06-21T23:45:50.9631373Z │                                                                              │
2022-06-21T23:45:50.9633442Z │ Command line option:    --publish                                            │
2022-06-21T23:45:50.9634510Z │ Environment variable:   CUCUMBER_PUBLISH_ENABLED=true                        │
2022-06-21T23:45:50.9737955Z │                                                                              │
2022-06-21T23:45:50.9738651Z │ More information at https://cucumber.io/docs/cucumber/environment-variables/ │
2022-06-21T23:45:50.9739271Z │                                                                              │
2022-06-21T23:45:50.9739832Z │ To disable this message, add this to your ./cucumber.js:                     │
2022-06-21T23:45:50.9740468Z │ module.exports = { default: '--publish-quiet' }                              │
2022-06-21T23:45:50.9741145Z └──────────────────────────────────────────────────────────────────────────────┘
2022-06-21T23:45:51.2359517Z 
2022-06-21T23:45:51.2361035Z > -@2.5.0-snapshot dockerClean /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:51.2362079Z > ./scripts/npm_scripts/dockerClean.sh
2022-06-21T23:45:51.2363167Z 
2022-06-21T23:45:51.2429611Z 
2022-06-21T23:45:51.2434122Z dockerClean() {
2022-06-21T23:45:51.2434776Z     #stop and remove docker containers
2022-06-21T23:45:51.2435657Z     docker kill $(docker ps -aq)
2022-06-21T23:45:51.2436804Z     docker rm $(docker ps -aq) -f
2022-06-21T23:45:51.2437260Z     #remove chaincode images so that they get rebuilt during test
2022-06-21T23:45:51.2437800Z     docker rmi $(docker images | grep "^dev-" | awk '{print $3}')
2022-06-21T23:45:51.2438109Z }
2022-06-21T23:45:51.2438240Z 
2022-06-21T23:45:51.2438651Z dockerClean || true # kill, rm, and rmi may fail because the containers may have been cleaned up or do not exist
2022-06-21T23:45:51.7896433Z df440067ad51
2022-06-21T23:45:51.8310317Z 63c279755894
2022-06-21T23:45:51.8310834Z 65b3e708dfbf
2022-06-21T23:45:51.8986759Z ed24a6f96ac6
2022-06-21T23:45:51.8987292Z 6c0cb8fb94a9
2022-06-21T23:45:51.8987620Z b9229577834a
2022-06-21T23:45:52.0168250Z df440067ad51
2022-06-21T23:45:52.0173424Z 63c279755894
2022-06-21T23:45:52.0174135Z 65b3e708dfbf
2022-06-21T23:45:52.0174499Z ed24a6f96ac6
2022-06-21T23:45:52.0175445Z 6c0cb8fb94a9
2022-06-21T23:45:52.0175777Z b9229577834a
2022-06-21T23:45:52.1127051Z "docker rmi" requires at least 1 argument.
2022-06-21T23:45:52.1127731Z See 'docker rmi --help'.
2022-06-21T23:45:52.1128055Z 
2022-06-21T23:45:52.1128281Z Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]
2022-06-21T23:45:52.1128474Z 
2022-06-21T23:45:52.1128610Z Remove one or more images
2022-06-21T23:45:52.7391896Z 
2022-06-21T23:45:52.7393170Z > -@2.5.0-snapshot test:ts-cucumber /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:45:52.7394567Z > cucumber-js -f @cucumber/pretty-formatter ./test/ts-scenario/features/*.feature --require './test/ts-scenario/steps/**/*.ts' --require './test/ts-scenario/support/**/*.ts' --require-module ts-node/register
2022-06-21T23:45:52.7395101Z 
2022-06-21T23:46:01.5292695Z @base_api_1
2022-06-21T23:46:01.5305985Z Feature: Use base API to perform core operations # test/ts-scenario/features/base_api_v1.feature:6
2022-06-21T23:46:01.5321612Z 
2022-06-21T23:46:01.5327397Z   @base_api_1
2022-06-21T23:46:01.5348216Z   Scenario: Using only fabric-common V1 channel # test/ts-scenario/features/base_api_v1.feature:17
2022-06-21T23:46:01.5358197Z     Given I place a scenario start message BASE API FEATURE V1 Channel and V1 Chaincode deployment
2022-06-21T23:46:01.5380961Z 
2022-06-21T23:46:01.5381512Z 
2022-06-21T23:46:01.5381522Z 
2022-06-21T23:46:01.5382401Z **********************************************************************************
2022-06-21T23:46:01.5382830Z **********************************************************************************
2022-06-21T23:46:01.5385552Z ****** BASE API FEATURE V1 Channel and V1 Chaincode deployment Scenario 0 ******
2022-06-21T23:46:01.5386013Z **********************************************************************************
2022-06-21T23:46:01.5386404Z **********************************************************************************
2022-06-21T23:46:01.5387699Z 
2022-06-21T23:46:01.5388245Z 
2022-06-21T23:46:01.5388411Z 
2022-06-21T23:46:01.5404628Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:46:01.5409646Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:46:01.5410675Z  **** no deployed fabric network found
2022-06-21T23:46:01.5411425Z  **** deploying a new fabric network of type tls version 2.1
2022-06-21T23:46:01.5415408Z  -- runShellCommand ==>docker-compose -f /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/docker-compose/docker-compose-tls.yaml -p node up -d<==
2022-06-21T23:46:01.5432472Z SCENARIO CMD: docker-compose -f /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/docker-compose/docker-compose-tls.yaml -p node up -d
2022-06-21T23:46:07.2013515Z SCENARIO CMD - STDOUT:
2022-06-21T23:46:07.2014223Z  
2022-06-21T23:46:07.2014639Z SCENARIO CMD - STDERR:
2022-06-21T23:46:07.2015085Z  Creating orderer.example.com ... 
2022-06-21T23:46:07.2016071Z Creating ca2.example.com     ... 
2022-06-21T23:46:07.2016494Z Creating ca1.example.com     ... 
2022-06-21T23:46:07.2016946Z Creating couchdb.org2.example.com ... 
2022-06-21T23:46:07.2017396Z Creating ca0.example.com          ... 
2022-06-21T23:46:07.2017841Z Creating couchdb.org1.example.com ... 
2022-06-21T23:46:07.2018295Z Creating ca2.example.com          ... done
2022-06-21T23:46:07.2019045Z Creating couchdb.org2.example.com ... done
2022-06-21T23:46:07.2019501Z Creating ca1.example.com          ... done
2022-06-21T23:46:07.2019945Z Creating couchdb.org1.example.com ... done
2022-06-21T23:46:07.2020389Z Creating ca0.example.com          ... done
2022-06-21T23:46:07.2020828Z Creating orderer.example.com      ... done
2022-06-21T23:46:07.2021255Z Creating peer0.org1.example.com   ... 
2022-06-21T23:46:07.2021692Z Creating peer0.org2.example.com   ... 
2022-06-21T23:46:07.2022132Z Creating peer0.org1.example.com   ... done
2022-06-21T23:46:07.2022549Z Creating org1_cli                 ... 
2022-06-21T23:46:07.2022988Z Creating peer0.org2.example.com   ... done
2022-06-21T23:46:07.2023401Z Creating org2_cli                 ... 
2022-06-21T23:46:07.2023810Z Creating org1_cli                 ... done
2022-06-21T23:46:07.2024386Z Creating org2_cli                 ... done
2022-06-21T23:46:07.2024637Z 
2022-06-21T23:46:12.1978356Z  **** deployed a fabric network of type tls version 2.1
2022-06-21T23:46:12.1982403Z     And I use the cli to create and join the channel named baseapichannel on the deployed network
2022-06-21T23:46:12.1993014Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:46:12.1994551Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:12.1999443Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:12.3654174Z Channel names ==>Channels peers has joined: 
2022-06-21T23:46:12.3654684Z <== have been joined by organization org1
2022-06-21T23:46:12.3655129Z Attempting to create channel baseapichannel of type tls
2022-06-21T23:46:12.3657001Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c baseapichannel -f /etc/hyperledger/configtx/channel-config/baseapichannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:12.3659326Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c baseapichannel -f /etc/hyperledger/configtx/channel-config/baseapichannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:17.5579461Z Channel baseapichannel has been created
2022-06-21T23:46:17.5580675Z Attempting to join organization org1 to channel baseapichannel of type tls
2022-06-21T23:46:17.5582138Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:17.5586118Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:22.9372140Z Channel baseapichannel has been joined by organization org1
2022-06-21T23:46:22.9373419Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:46:22.9514249Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:22.9525117Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:23.1257193Z Channel names ==>Channels peers has joined: 
2022-06-21T23:46:23.1280044Z <== have been joined by organization org2
2022-06-21T23:46:23.1280957Z Attempting to join organization org2 to channel baseapichannel of type tls
2022-06-21T23:46:23.1284446Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:23.1289204Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/baseapichannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:28.4812566Z Channel baseapichannel has been joined by organization org2
2022-06-21T23:46:28.4814691Z     And I use the cli to update the channel with name baseapichannel with config file baseapichannel-anchor.tx on the deployed network
2022-06-21T23:46:28.4815832Z Using default CLI container org1 to update channel baseapichannel of type tls with updateTx baseapichannel-anchor.tx
2022-06-21T23:46:28.4817564Z  -- runShellCommand ==>docker exec org1_cli peer channel update -o orderer.example.com:7050 -c baseapichannel -f /etc/hyperledger/configtx/channel-config/baseapichannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:46:28.4820783Z SCENARIO CMD: docker exec org1_cli peer channel update -o orderer.example.com:7050 -c baseapichannel -f /etc/hyperledger/configtx/channel-config/baseapichannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:46:33.6574850Z Channel baseapichannel has been updated
2022-06-21T23:46:33.6584523Z     And I use the cli to deploy a node smart contract named fabcar at version 1.0.0 for all organizations on channel baseapichannel with endorsement policy 1of and arguments ["initLedger"]
2022-06-21T23:46:33.6590929Z Attempting to check for install smart contract fabcar@1.0.0 for organization org1 using the CLI
2022-06-21T23:46:33.6592516Z  -- runShellCommand ==>docker exec org1_cli peer chaincode list --installed --connTimeout 240s<==
2022-06-21T23:46:33.6593507Z SCENARIO CMD: docker exec org1_cli peer chaincode list --installed --connTimeout 240s
2022-06-21T23:46:33.8414080Z 
2022-06-21T23:46:33.8415028Z  CLI found ==>Get installed chaincodes on peer:
2022-06-21T23:46:33.8415426Z <==
2022-06-21T23:46:33.8416060Z Smart contract fabcar@1.0.0 has not been installed for organization org1 using the CLI
2022-06-21T23:46:33.8416858Z Attempting to install smart contract fabcar@1.0.0 for organization org1 using the CLI
2022-06-21T23:46:33.8418030Z  -- runShellCommand ==>docker exec org1_cli peer chaincode install -l node -n fabcar -v 1.0.0 -p /opt/gopath/src/github.com/chaincode/node/fabcar --connTimeout 240s<==
2022-06-21T23:46:33.8419160Z SCENARIO CMD: docker exec org1_cli peer chaincode install -l node -n fabcar -v 1.0.0 -p /opt/gopath/src/github.com/chaincode/node/fabcar --connTimeout 240s
2022-06-21T23:46:56.1292278Z Smart contract fabcar@1.0.0 has been installed for organization org1 using the CLI
2022-06-21T23:46:56.1293964Z Attempting to check for instantiated smart contract fabcar@1.0.0 for organization org1 using the CLI
2022-06-21T23:46:56.1295080Z  -- runShellCommand ==>docker exec org1_cli peer chaincode list --channelID baseapichannel --instantiated --connTimeout 240s<==
2022-06-21T23:46:56.1296032Z SCENARIO CMD: docker exec org1_cli peer chaincode list --channelID baseapichannel --instantiated --connTimeout 240s
2022-06-21T23:46:56.3172724Z 
2022-06-21T23:46:56.3211809Z  CLI found ==>Get instantiated chaincodes on channel baseapichannel:
2022-06-21T23:46:56.3212571Z <==
2022-06-21T23:46:56.3258068Z Smart contract fabcar@1.0.0 has not been instantiated for organization org1 using the CLI
2022-06-21T23:46:56.3258665Z Attempting to check for install smart contract fabcar@1.0.0 for organization org2 using the CLI
2022-06-21T23:46:56.3259521Z  -- runShellCommand ==>docker exec org2_cli peer chaincode list --installed --connTimeout 240s<==
2022-06-21T23:46:56.3263022Z SCENARIO CMD: docker exec org2_cli peer chaincode list --installed --connTimeout 240s
2022-06-21T23:46:56.4837734Z 
2022-06-21T23:46:56.4838802Z  CLI found ==>Get installed chaincodes on peer:
2022-06-21T23:46:56.4839549Z <==
2022-06-21T23:46:56.4841739Z Smart contract fabcar@1.0.0 has not been installed for organization org2 using the CLI
2022-06-21T23:46:56.4842986Z Attempting to install smart contract fabcar@1.0.0 for organization org2 using the CLI
2022-06-21T23:46:56.4844839Z  -- runShellCommand ==>docker exec org2_cli peer chaincode install -l node -n fabcar -v 1.0.0 -p /opt/gopath/src/github.com/chaincode/node/fabcar --connTimeout 240s<==
2022-06-21T23:46:56.4845917Z SCENARIO CMD: docker exec org2_cli peer chaincode install -l node -n fabcar -v 1.0.0 -p /opt/gopath/src/github.com/chaincode/node/fabcar --connTimeout 240s
2022-06-21T23:47:18.1134822Z Smart contract fabcar@1.0.0 has been installed for organization org2 using the CLI
2022-06-21T23:47:18.1135820Z Attempting to check for instantiated smart contract fabcar@1.0.0 for organization org2 using the CLI
2022-06-21T23:47:18.1137499Z  -- runShellCommand ==>docker exec org2_cli peer chaincode list --channelID baseapichannel --instantiated --connTimeout 240s<==
2022-06-21T23:47:18.1138662Z SCENARIO CMD: docker exec org2_cli peer chaincode list --channelID baseapichannel --instantiated --connTimeout 240s
2022-06-21T23:47:18.3011983Z 
2022-06-21T23:47:18.3052514Z  CLI found ==>Get instantiated chaincodes on channel baseapichannel:
2022-06-21T23:47:18.3053458Z <==
2022-06-21T23:47:18.3054361Z Smart contract fabcar@1.0.0 has not been instantiated for organization org2 using the CLI
2022-06-21T23:47:18.3055064Z Attempting to instantiate smart contract fabcar@1.0.0 on channel baseapichannel with args ["initLedger"] using default container org1
2022-06-21T23:47:18.3056579Z  -- runShellCommand ==>docker exec org1_cli peer chaincode instantiate -o orderer.example.com:7050 -l node -C baseapichannel -n fabcar -v 1.0.0 -c "{\"Args\": "[\"initLedger\"]"}" --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:18.3134888Z SCENARIO CMD: docker exec org1_cli peer chaincode instantiate -o orderer.example.com:7050 -l node -C baseapichannel -n fabcar -v 1.0.0 -c "{\"Args\": "[\"initLedger\"]"}" --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:19.7641940Z  -- runShellCommand ==>docker exec org1_cli peer chaincode list -o orderer.example.com:7050 --instantiated -C baseapichannel<==
2022-06-21T23:47:19.7643614Z SCENARIO CMD: docker exec org1_cli peer chaincode list -o orderer.example.com:7050 --instantiated -C baseapichannel
2022-06-21T23:47:19.9629880Z Awaiting smart contract instantiation ...
2022-06-21T23:47:24.9666955Z  -- runShellCommand ==>docker exec org1_cli peer chaincode list -o orderer.example.com:7050 --instantiated -C baseapichannel<==
2022-06-21T23:47:24.9668447Z SCENARIO CMD: docker exec org1_cli peer chaincode list -o orderer.example.com:7050 --instantiated -C baseapichannel
2022-06-21T23:47:25.1339790Z Smart contract fabcar has been instantiated on channel baseapichannel using the CLI
2022-06-21T23:47:25.1343638Z     And I have created a client named leon based on information in profile ccp-tls under organization Org1
2022-06-21T23:47:25.1347355Z loading profile /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-scenario/config/ccp-tls
2022-06-21T23:47:25.1386899Z      {"name":"cucumber-network","description":"The network to be in if you like scenario tests, not vegetables","version":"1.0","client":{"organization":"Org1","credentialStore":{"path":"/tmp/hfc-kvs","cryptoStore":{"path":"/tmp/hfc-cvs"},"wallet":"wallet-name"}},"channels":{"basev2channel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"baseapichannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"channelopschannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"channelopschannelvtwo":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"eventschannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"deprecatedchannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"discoverychannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"gatewaychannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"lifecyclechannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]}},"organizations":{"Org1":{"mspid":"Org1MSP","peers":["peer0.org1.example.com"],"certificateAuthorities":["ca-org1"],"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"}},"Org2":{"mspid":"Org2MSP","peers":["peer0.org2.example.com"],"certificateAuthorities":["ca-org2"],"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem"}}},"orderers":{"orderer.example.com":{"url":"grpcs://localhost:7050","mspid":"OrdererMSP","grpcOptions":{"ssl-target-name-override":"orderer.example.com"},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt"},"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts/Admin@example.com-cert.pem"}}},"peers":{"peer0.org1.example.com":{"url":"grpcs://localhost:7051","grpcOptions":{"ssl-target-name-override":"peer0.org1.example.com","request-timeout":120001},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"}},"peer0.org2.example.com":{"url":"grpcs://localhost:8051","grpcOptions":{"ssl-target-name-override":"peer0.org2.example.com","request-timeout":120001},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"}}},"certificateAuthorities":{"ca-org1":{"url":"https://localhost:7054","grpcOptions":{"verify":true},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem"},"registrar":[{"enrollId":"admin","enrollSecret":"adminpw"}]},"ca-org2":{"url":"https://localhost:8054","grpcOptions":{"verify":true},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem"},"registrar":[{"enrollId":"admin","enrollSecret":"adminpw"}]}}}
2022-06-21T23:47:25.1395789Z Creating client named leon for organization Org1
2022-06-21T23:47:25.4901068Z Created client named leon and persisted in state store
2022-06-21T23:47:25.4902978Z     And I have used the client named leon to create a channel object for the channel named baseapichannel
2022-06-21T23:47:25.4916831Z Channel baseapichannel has been persisted with client leon
2022-06-21T23:47:25.4927019Z     When I build a new endorsement request named myFirstRequest for smart contract named fabcar with arguments [createCar, 2000, GMC, Savana, grey, Jones] as client leon on channel baseapichannel
2022-06-21T23:47:25.5551973Z Peer checkConnection test successfully
2022-06-21T23:47:25.5700931Z Peer checkConnection test successfully
2022-06-21T23:47:25.6735895Z     And I commit the endorsement request named myFirstRequest as client leon on channel baseapichannel
2022-06-21T23:47:26.9670215Z Eventer checkConnection test successfully
2022-06-21T23:47:27.0071118Z Orderer checkConnection test successfully {}
2022-06-21T23:47:27.5842914Z Successfully received the transaction event for cdeb328f7cdadd9c4356fa0ed0df22c0cdded0bced6794f5f592df328d678f1c with status of VALID in block number 3 {}
2022-06-21T23:47:27.5865180Z  - commitChannelRequest complete
2022-06-21T23:47:27.5866138Z  - commitChannelRequest finally
2022-06-21T23:47:27.5909684Z - disconnected all endpoints for client object leon and request myFirstRequest
2022-06-21T23:47:27.5922270Z     Then the request named myFirstRequest for client leon has a general result matching {"result":"SUCCESS"}
2022-06-21T23:47:27.5931336Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:47:27.5931949Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:47:27.5932365Z Results match for myFirstRequest of type general
2022-06-21T23:47:27.5937559Z     And the request named myFirstRequest for client leon has a event result matching {"result":"Commit success"}
2022-06-21T23:47:27.5941903Z clientUtils - fieldName: event - raw results of query = '{"result":"Commit success"}'
2022-06-21T23:47:27.5942545Z clientUtils - results of query was a string = {"result":"Commit success"}
2022-06-21T23:47:27.5943507Z Results match for myFirstRequest of type event
2022-06-21T23:47:27.5947779Z     And the request named myFirstRequest for client leon has a commit result matching {"status":"SUCCESS"}
2022-06-21T23:47:27.5952221Z clientUtils - fieldName: commit - raw results of query = '{"status":"SUCCESS"}'
2022-06-21T23:47:27.5952795Z clientUtils - results of query was a string = {"status":"SUCCESS"}
2022-06-21T23:47:27.5953215Z Results match for myFirstRequest of type commit
2022-06-21T23:47:27.5957461Z     When I submit a query named myFirstQuery with args [queryCar,CAR0] for contract fabcar as client leon on channel baseapichannel
2022-06-21T23:47:27.5963549Z  -- starting clientUtils.queryChannelRequest
2022-06-21T23:47:27.6209475Z Peer checkConnection test successfully
2022-06-21T23:47:27.6319914Z Peer checkConnection test successfully
2022-06-21T23:47:27.6611196Z 
2022-06-21T23:47:27.6611659Z Query success detected
2022-06-21T23:47:27.6612436Z query submission checking results
2022-06-21T23:47:27.6615209Z 
2022-06-21T23:47:27.6615395Z Query results {
2022-06-21T23:47:27.6616736Z   color: 'blue',
2022-06-21T23:47:27.6618345Z   docType: 'car',
2022-06-21T23:47:27.6620166Z   make: 'Toyota',
2022-06-21T23:47:27.6621026Z   model: 'Prius',
2022-06-21T23:47:27.6621584Z   owner: 'Tomoko'
2022-06-21T23:47:27.6622291Z }
2022-06-21T23:47:27.6622727Z Query results {
2022-06-21T23:47:27.6623478Z   color: 'blue',
2022-06-21T23:47:27.6624010Z   docType: 'car',
2022-06-21T23:47:27.6624753Z   make: 'Toyota',
2022-06-21T23:47:27.6627276Z   model: 'Prius',
2022-06-21T23:47:27.6627787Z   owner: 'Tomoko'
2022-06-21T23:47:27.6628412Z }
2022-06-21T23:47:27.6630707Z     Then the query named myFirstQuery for client leon has a general result matching {"result":"SUCCESS"}
2022-06-21T23:47:27.6632882Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:47:27.6634648Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:47:27.6635302Z Results match for myFirstQuery of type general
2022-06-21T23:47:27.6637867Z     And the query named myFirstQuery for client leon has a peer0 result matching {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:47:27.6639320Z clientUtils - fieldName: peer0 - raw results of query = {
2022-06-21T23:47:27.6640348Z   color: 'blue',
2022-06-21T23:47:27.6640842Z   docType: 'car',
2022-06-21T23:47:27.6641535Z   make: 'Toyota',
2022-06-21T23:47:27.6641996Z   model: 'Prius',
2022-06-21T23:47:27.6642666Z   owner: 'Tomoko'
2022-06-21T23:47:27.6643082Z }
2022-06-21T23:47:27.6644151Z clientUtils - results of query was an object = {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:47:27.6644856Z Results match for myFirstQuery of type peer0
2022-06-21T23:47:27.6645918Z     When I build a new endorsement request named myDiscoveryRequest for smart contract named fabcar with arguments [createCar, 2008, Crysler, PTCurser, grey, Smith] as client leon on discovery channel baseapichannel
2022-06-21T23:47:27.6830501Z Peer checkConnection test successfully
2022-06-21T23:47:27.6935585Z Peer checkConnection test successfully
2022-06-21T23:47:27.7314711Z Peer peer0.org1.example.com:7051 has chaincode fabcar
2022-06-21T23:47:27.7324092Z Peer peer0.org2.example.com:8051 has chaincode fabcar
2022-06-21T23:47:27.7324952Z     And I commit the endorsement request named myDiscoveryRequest as client leon on channel baseapichannel
2022-06-21T23:47:27.7816371Z Eventer checkConnection test successfully
2022-06-21T23:47:27.8055089Z Orderer checkConnection test successfully {}
2022-06-21T23:47:28.3661892Z Successfully received the transaction event for 16e89f18d11820e5facc530c3014ddce0e7c6911f01527cdb7b7dcb6e70d9b42 with status of VALID in block number 4 {}
2022-06-21T23:47:28.3675044Z  - commitChannelRequest complete
2022-06-21T23:47:28.3675789Z  - commitChannelRequest finally
2022-06-21T23:47:28.3689746Z - disconnected all endpoints for client object leon and request myDiscoveryRequest
2022-06-21T23:47:28.3695034Z     Then the request named myDiscoveryRequest for client leon has discovery results
2022-06-21T23:47:28.3764887Z clientUtils - raw discovery results = {"msps":{"Org3MSP":{"id":"Org3MSP","name":"Org3MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUTCCAfegAwIBAgIQN8yeShYcbzxgMJyYv/CTPjAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmczLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmczLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\n7BQXJ49vHgIORzmI9NKFgUdk/MtV4xKCQUYkO9DCParFHC3OwZjGXVZeJVjutI9z\n6ch0HjbLSRM8v56ctzpXfKNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAG\nFh9EidcR7yMjcEIlytw2sitKOMCIukxkrhn4BB/rFjAKBggqhkjOPQQDAgNIADBF\nAiEAzG2xQ/ngjLVqK7g/AaiNSCO2qlTlFxhFI8DeFJifqzkCIGaGqIQAAO28GprD\n4Lc5xpEm9grIMASfOLEh5RWN6iix\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGTCCAb+gAwIBAgIQI/+b3Ujk/FdOqwAoTMwuNTAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmczLmV4YW1wbGUuY29tMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUgJmNp8QGjMfwpAaGHNzk74jE1Yd4jMO\nUNafAKcbHLoHBtiGbmQCAYIuOcVCvff0gogEDNkhoZ1YMNlC+zEoNqNNMEswDgYD\nVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgBhYfRInXEe8j\nI3BCJcrcNrIrSjjAiLpMZK4Z+AQf6xYwCgYIKoZIzj0EAwIDSAAwRQIhAMkM46tj\nLVkiH6GUmUF2j9HfeTM+PnnlvgF7YUz/smCLAiBt5Auyg2M2j4P68hqibD//t7sD\njA5cnI5ZwyIpJcRJVA==\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRANW6YB2NxOwShAX1Z7U1xrgwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzMuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzMuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz\nODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMy5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABCwNf5IobWmGRO6XZt+181P70cVgl+517pyqky580s/E/ZrzB4U8A8su\nX304ZzhQiXlspP89pEy0g51CnN586QqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgAS2uFcTSgd1Yiv3/tgFEPmuyUJJ+IGJrg3h7HWVIlEAwCgYIKoZIzj0E\nAwIDRwAwRAIgNtTIkT+70EDg5P3WnycSszsy3MUMKV+QDqxQ0jH1R04CICztdym1\n6JVjKt36rtb5UZqg5ZxSffFRoAZeHVoNq4Bd\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"Org1MSP":{"id":"Org1MSP","name":"Org1MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUDCCAfegAwIBAgIQQTheGb/dKDBSBcintljmbjAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nT0h+SX/O4wLY8UiFWP/rA3wjYlA9CHbN3Zofw+1o5HT0P20F2oTVb3MkOiazoTyT\nEMky4j7T+VlgtAKsLbj0LqNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDl\nDSamehV86lRLjQ5g3zxBzm9k9t5C/d1eXh8r/FbTjjAKBggqhkjOPQQDAgNHADBE\nAiAMLWEqq0KX8xCN23DCerE40F/hWWCgojddPuA/xfhaDgIgXP0V+e1ib/+MG1ku\nd8m/R+dqE5wkm35j7DF3MndWCTo=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGjCCAcCgAwIBAgIRALSkm8uBeZrqQiu9skWyZbAwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMzODAw\nWjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZ\nMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNU+4DilvvFSs27uwkdizlUCRQz1Wcyz\nDbk80dDh8N75Eir30l7Kt8iVbT3+jwLrlzf+RCBny6LTGECSLQk5rKSjTTBLMA4G\nA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIOUNJqZ6FXzq\nVEuNDmDfPEHOb2T23kL93V5eHyv8VtOOMAoGCCqGSM49BAMCA0gAMEUCIQCUWOls\nZHcLyGdbSlYVS1nyTj8xWt7rNFcYEdGb34H8LAIgfcnLxA6EX/VvrI/FkYvukqYg\n9q5+kvOWMZpQj8SqWUY=\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICVjCCAf2gAwIBAgIQWLH0lxZAxHqMSWAT/MJS8DAKBggqhkjOPQQDAjB2MQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz\nY2Eub3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4\nMDBaMHYxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMR8wHQYD\nVQQDExZ0bHNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0D\nAQcDQgAEVbtIiQgFXCBOGMm5fO7iziUMmi+TrAmFEbvSKNMABDKg3p+ygJ5xpQlZ\n8ecv8RVbhW3cMJTih6LgDa8Hr3lWZ6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1Ud\nDgQiBCAYGjv7wRKTypBrA5D8QNGWxX3eVs2fpvAoIweOFS0rljAKBggqhkjOPQQD\nAgNHADBEAiAcZuRJjH3v3G6j06vJdi9M1AguZJNvl6YYELWkt2eetgIgSNHKml+H\nKkvzXlGvH3NbBUO2yM4Ry5mmwHmLdaCRZjU=\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"OrdererMSP":{"id":"OrdererMSP","name":"OrdererMSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICPjCCAeSgAwIBAgIRAOSd4/QATWrsRJQL5eB3DF4wCgYIKoZIzj0EAwIwaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\ncGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMGkxCzAJBgNV\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRQwEgYDVQQKEwtleGFtcGxlLmNvbTEXMBUGA1UEAxMOY2EuZXhhbXBsZS5j\nb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQOp+6hOX/lzmoGFPq0RaMooDT2\nBcK039we8KRHBkEKIOvIQ0neCzdnYXH8pCht9peqoi8Lvs+JCtCocM6nkYeuo20w\nazAOBgNVHQ8BAf8EBAMCAaYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMB\nMA8GA1UdEwEB/wQFMAMBAf8wKQYDVR0OBCIEIDnU7lNhsoonlqmym7plLzehWbGx\nwZal10jeT5OMa5v2MAoGCCqGSM49BAMCA0gAMEUCIQCITNF+FNhWAQ3Mc/XhTqKq\nSVQLmOKHAncd7IhPVvxHFAIgIMRIPeTQwaZ9rZFQSGrmju4cAk8A6IyIs3yEnIBf\ndFY=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICCjCCAbGgAwIBAgIRALJmgbDJMVwiWhs0wVoi94YwCgYIKoZIzj0EAwIwaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\ncGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMFYxCzAJBgNV\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRowGAYDVQQDDBFBZG1pbkBleGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqG\nSM49AwEHA0IABBwB7rlmUQ7H7PbYRoQISP+UdRXaib2pq4guPk0yRu8n3e6quVHM\nl+OAA/nkEriVqrSKA/Q61DjIh37hgX9FMxGjTTBLMA4GA1UdDwEB/wQEAwIHgDAM\nBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDnU7lNhsoonlqmym7plLzehWbGxwZal\n10jeT5OMa5v2MAoGCCqGSM49BAMCA0cAMEQCIEqra/hCzW9OXM/ScKEDVbYfVjdd\nAMbIJkOefs7KKdd7AiAvpXf17Vt9KCGSeRBrAJAK+h1Ib2ehufbVxa7bEDnQWg==\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICQjCCAemgAwIBAgIQTlWCDEqsWfKoWadF0SQ02zAKBggqhkjOPQQDAjBsMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xGjAYBgNVBAMTEXRsc2NhLmV4\nYW1wbGUuY29tMB4XDTIyMDYyMTIzMzgwMFoXDTMyMDYxODIzMzgwMFowbDELMAkG\nA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFu\nY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5leGFt\ncGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEYe5azZczfk6Vhn62yC\na44GWgGudqOgzKYN3z72GLZs5jywWLLOvPx3BC2/wEIg9/oRHpUp7rV7hi0PSc0+\nTmqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB\nBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg8Ac0VQN6BkdoNYWWRCyH\n5P/BqkltcehwLaPtv8y2sAUwCgYIKoZIzj0EAwIDRwAwRAIgOGo7n++JZDH8rJbw\nBFE6L/+m6M5J1HjeNBWzq20mEDECIEmXdcuD0J2sqCG3tS9WICM8tAqzGmvrWLmQ\nLcGgWELT\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"Org2MSP":{"id":"Org2MSP","name":"Org2MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUDCCAfegAwIBAgIQchXtRHnWbfJowa9c42k2VDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nPtU9xQ7jzN6f93byjZpADDoonrBJ3ONsaktFX+tFM/JLpUOXA14O5jNh64Out9IA\nH6wxSAlvapFY+r4KhchkuaNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCCZ\nauE29ztWJNL8MoA+F6OxKyOmjt41WRLoJYGjP+IRnTAKBggqhkjOPQQDAgNHADBE\nAiAb9e919FszX1eAhcSJuDGgbvzFyfZJ1lLrfDbpkYdXNAIgXFOd7UbmFmnSWf8w\nVSicm+Y0MGJTaM8ZreE4lkHN/eA=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGDCCAb+gAwIBAgIQI9h3kS9rMTOqmxwIznL6DDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmcyLmV4YW1wbGUuY29tMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6dmZIlOPdyMW7tq+nZw2d9IiYDRb3ewn\nkRdv6FYn+bU4HJYFjbfzfSK4ipMBouMW5Vkil4HeruOg2JEwz3eDQKNNMEswDgYD\nVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgmWrhNvc7ViTS\n/DKAPhejsSsjpo7eNVkS6CWBoz/iEZ0wCgYIKoZIzj0EAwIDRwAwRAIgSkl0mIis\nYOSRFvzgjWI9r5onkzDtv0EJ8sZXqxNNLIkCIE5BCn9iT+2EdipPP5PgpUSpfiF2\nTJPk4WdpkxoA/xN3\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICWDCCAf6gAwIBAgIRAJ5dKUYNv0niV/q43CRVllgwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzIuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz\nODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABKiHuXuqyt0XbQO3ah/qZDnP3jARaFTtWZFmNYFhDUnejMg8rcz9C8Rq\nJ2C0tSa5oq4hIuEUxt4kZCV4lAhF8nejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQg17cNuw7tQeLzWvVrW9dZ+fsJLo4b5pea6Cy3Q8jVfDkwCgYIKoZIzj0E\nAwIDSAAwRQIhANrkKiViVHtAeiQau82yAUe7cRmZDql8u+U52wzsQ6GgAiAVFQDT\nakpQOO6diOD6Z4kEdRyPeoDFSTu5D8G3gwj/rg==\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""}},"orderers":{"OrdererMSP":{"endpoints":[{"host":"orderer.example.com","port":7050,"name":"orderer.example.com:7050"}]}},"peers_by_org":{"Org1MSP":{"peers":[{"mspid":"Org1MSP","endpoint":"peer0.org1.example.com:7051","name":"peer0.org1.example.com:7051","ledgerHeight":{"low":3,"high":0,"unsigned":true},"chaincodes":[{"name":"_lifecycle","version":"1"},{"name":"fabcar","version":"1.0.0"}]}]},"Org2MSP":{"peers":[{"mspid":"Org2MSP","endpoint":"peer0.org2.example.com:8051","name":"peer0.org2.example.com:8051","ledgerHeight":{"low":3,"high":0,"unsigned":true},"chaincodes":[{"name":"_lifecycle","version":"1"},{"name":"fabcar","version":"1.0.0"}]}]}},"endorsement_plan":{"chaincode":"fabcar","groups":{"G0":{"peers":[{"mspid":"Org1MSP","endpoint":"peer0.org1.example.com:7051","name":"peer0.org1.example.com:7051","ledgerHeight":{"low":3,"high":0,"unsigned":true},"chaincodes":[{"name":"_lifecycle","version":"1"},{"name":"fabcar","version":"1.0.0"}]}]},"G1":{"peers":[{"mspid":"Org2MSP","endpoint":"peer0.org2.example.com:8051","name":"peer0.org2.example.com:8051","ledgerHeight":{"low":3,"high":0,"unsigned":true},"chaincodes":[{"name":"_lifecycle","version":"1"},{"name":"fabcar","version":"1.0.0"}]}]}},"layouts":[{"G0":1},{"G1":1}]},"timestamp":1655855247730}
2022-06-21T23:47:28.3791397Z Response for myDiscoveryRequest has an endorsement_plan
2022-06-21T23:47:28.3931429Z     Then the request named myDiscoveryRequest for client leon has a general result matching {"result":"SUCCESS"}
2022-06-21T23:47:28.3932181Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:47:28.3932689Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:47:28.3933071Z Results match for myDiscoveryRequest of type general
2022-06-21T23:47:28.3933519Z     And the request named myDiscoveryRequest for client leon has a event result matching {"result":"Commit success"}
2022-06-21T23:47:28.3934099Z clientUtils - fieldName: event - raw results of query = '{"result":"Commit success"}'
2022-06-21T23:47:28.3934623Z clientUtils - results of query was a string = {"result":"Commit success"}
2022-06-21T23:47:28.3935007Z Results match for myDiscoveryRequest of type event
2022-06-21T23:47:28.3937783Z     And the request named myDiscoveryRequest for client leon has a commit result matching {"status":"SUCCESS"}
2022-06-21T23:47:28.3938843Z clientUtils - fieldName: commit - raw results of query = '{"status":"SUCCESS"}'
2022-06-21T23:47:28.3939346Z clientUtils - results of query was a string = {"status":"SUCCESS"}
2022-06-21T23:47:28.3939724Z Results match for myDiscoveryRequest of type commit
2022-06-21T23:47:28.3940148Z     When I create an event service myFilteredEventService as client leon on channel baseapichannel
2022-06-21T23:47:28.3940690Z     And I regisister a block listener named myFilteredBlockListener with myFilteredEventService for startBlock 1 and endBlock 3 as client leon
2022-06-21T23:47:28.3941157Z Register event listener myFilteredBlockListener
2022-06-21T23:47:28.3941527Z Registering a block event with startBlock 1 endBlock 3
2022-06-21T23:47:28.3942068Z     And I regisister a chaincode listener named myFilteredChaincodeListener with myFilteredEventService for createCar event on contract fabcar as client leon
2022-06-21T23:47:28.3942573Z Register event listener myFilteredChaincodeListener
2022-06-21T23:47:28.3943026Z Registering a chaincode event with chaincodeName fabcar chaincodeEventName createCar
2022-06-21T23:47:28.3943589Z     And I regisister a transaction listener named myFilteredTransactionListener with myFilteredEventService for all transactions as client leon
2022-06-21T23:47:28.3944090Z Register event listener myFilteredTransactionListener
2022-06-21T23:47:28.3944467Z Registering a transaction event for all transactions
2022-06-21T23:47:28.3944859Z     When I create an event service myFullEventService as client leon on channel baseapichannel
2022-06-21T23:47:28.3945384Z     And I regisister a block listener named myFullBlockListener with myFullEventService for startBlock 1 and endBlock 4 as client leon
2022-06-21T23:47:28.3945818Z Register event listener myFullBlockListener
2022-06-21T23:47:28.3946173Z Registering a block event with startBlock 1 endBlock 4
2022-06-21T23:47:28.3946840Z     And I regisister a chaincode listener named myFullChaincodeListener with myFullEventService with a maximum event count of 3 as client leon for createCar event on contract fabcar
2022-06-21T23:47:28.3947366Z Register event listener myFullChaincodeListener
2022-06-21T23:47:28.3947817Z Registering a chaincode event with chaincodeName fabcar chaincodeEventName createCar
2022-06-21T23:47:28.3948361Z     And I regisister a transaction listener named myFullTransactionListener with myFullEventService for all transactions as client leon
2022-06-21T23:47:28.3948807Z Register event listener myFullTransactionListener
2022-06-21T23:47:28.3949177Z Registering a transaction event for all transactions
2022-06-21T23:47:28.3949640Z     And I start the event service myFilteredEventService as filtered blocks to start at block 0 and end at block 4 as client leon
2022-06-21T23:47:28.4148290Z Peer checkConnection test successfully
2022-06-21T23:47:28.4235541Z Peer checkConnection test successfully
2022-06-21T23:47:28.4352918Z     And I start the event service myFullEventService as full blocks to start at block 0 and end at block END as client leon
2022-06-21T23:47:28.4478571Z Store block event listener myFilteredBlockListener results of {"block":"1"}
2022-06-21T23:47:28.4495207Z Store block event listener myFilteredBlockListener results of {"block":"2"}
2022-06-21T23:47:28.4503146Z Store event listener myFilteredTransactionListener results of {"transaction":"1"}
2022-06-21T23:47:28.4520178Z Store block event listener myFilteredBlockListener results of {"block":"3"}
2022-06-21T23:47:28.4522575Z Store event listener myFilteredTransactionListener results of {"transaction":"2"}
2022-06-21T23:47:28.4549898Z Chaincode listener event received for myFilteredChaincodeListener :: EventInfo {
2022-06-21T23:47:28.4550519Z   eventService: EventService {
2022-06-21T23:47:28.4551297Z     type: 'EventService',
2022-06-21T23:47:28.4551834Z     name: 'myFilteredEventService',
2022-06-21T23:47:28.4552222Z     channel: Channel {
2022-06-21T23:47:28.4553051Z       type: 'Channel',
2022-06-21T23:47:28.4553554Z       name: 'baseapichannel',
2022-06-21T23:47:28.4554323Z       client: [Client],
2022-06-21T23:47:28.4555049Z       endorsers: [Map],
2022-06-21T23:47:28.4555667Z       committers: [Map],
2022-06-21T23:47:28.4556271Z       msps: [Map]
2022-06-21T23:47:28.4557183Z     },
2022-06-21T23:47:28.4558319Z     lastBlockNumber: Long { low: 3, high: 0, unsigned: true },
2022-06-21T23:47:28.4558845Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:47:28.4559928Z     endBlock: Long { low: 4, high: 0, unsigned: false },
2022-06-21T23:47:28.4560338Z     _endBlockSeen: false,
2022-06-21T23:47:28.4561202Z     _eventListenerRegistrations: Map(3) {
2022-06-21T23:47:28.4563245Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.4563702Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.4564327Z       [EventListener] => [EventListener]
2022-06-21T23:47:28.4564665Z     },
2022-06-21T23:47:28.4565442Z     _haveBlockListeners: true,
2022-06-21T23:47:28.4565797Z     _haveTxListeners: true,
2022-06-21T23:47:28.4566544Z     _haveChaincodeListeners: true,
2022-06-21T23:47:28.4566976Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:47:28.4567603Z     _currentEventer: Eventer {
2022-06-21T23:47:28.4568150Z       name: 'peer0.org1.example.com',
2022-06-21T23:47:28.4568535Z       mspid: undefined,
2022-06-21T23:47:28.4569167Z       client: [Client],
2022-06-21T23:47:28.4569716Z       connected: true,
2022-06-21T23:47:28.4570306Z       connectAttempted: true,
2022-06-21T23:47:28.4571347Z       endpoint: [Endpoint],
2022-06-21T23:47:28.4572321Z       service: [ServiceClientImpl],
2022-06-21T23:47:28.4572744Z       serviceClass: [Function],
2022-06-21T23:47:28.4573521Z       type: 'Eventer',
2022-06-21T23:47:28.4573899Z       options: [Object],
2022-06-21T23:47:28.4574625Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:47:28.4574991Z       myCount: 3
2022-06-21T23:47:28.4575667Z     },
2022-06-21T23:47:28.4576294Z     _closeRunning: false,
2022-06-21T23:47:28.4576931Z     blockType: 'filtered',
2022-06-21T23:47:28.4577289Z     replay: true,
2022-06-21T23:47:28.4578206Z     startSpecified: true,
2022-06-21T23:47:28.4578920Z     myNumber: 3,
2022-06-21T23:47:28.4579274Z     inUse: true,
2022-06-21T23:47:28.4580248Z     _payload: <Buffer 0a d1 07 0a 8c 01 08 05 10 01 1a 0c 08 90 b1 c9 95 06 10 80 f6 e9 bc 01 22 0e 62 61 73 65 61 70 69 63 68 61 6e 6e 65 6c 2a 40 32 30 34 32 32 36 63 64 ... 946 more bytes>,
2022-06-21T23:47:28.4580925Z     _signature: <Buffer 30 44 02 20 01 91 d8 5b 5b 8f ac c4 cc 89 7c a9 f6 d5 8a 6b 96 ac dc e7 77 13 83 66 d2 7e 9c 99 d1 30 0c 00 02 20 3c 52 80 82 7a 2a 7a 87 2a 8f fd 41 ... 20 more bytes>,
2022-06-21T23:47:28.4581374Z     currentStreamNumber: 3
2022-06-21T23:47:28.4581962Z   },
2022-06-21T23:47:28.4582564Z   endBlockReceived: false,
2022-06-21T23:47:28.4582977Z   chaincodeEvents: [
2022-06-21T23:47:28.4583704Z     ChaincodeEvent {
2022-06-21T23:47:28.4584222Z       chaincodeId: 'fabcar',
2022-06-21T23:47:28.4585181Z       transactionId: 'cdeb328f7cdadd9c4356fa0ed0df22c0cdded0bced6794f5f592df328d678f1c',
2022-06-21T23:47:28.4585741Z       status: 'VALID',
2022-06-21T23:47:28.4586425Z       eventName: 'createCar',
2022-06-21T23:47:28.4586797Z       payload: undefined
2022-06-21T23:47:28.4587406Z     }
2022-06-21T23:47:28.4588101Z   ],
2022-06-21T23:47:28.4588867Z   blockNumber: Long { low: 3, high: 0, unsigned: true }
2022-06-21T23:47:28.4589226Z }
2022-06-21T23:47:28.4590217Z Store chaincode event listener myFilteredChaincodeListener results of {"createCar":""}
2022-06-21T23:47:28.4593468Z Endblock indication received for myFilteredBlockListener
2022-06-21T23:47:28.4610918Z Store event listener myFilteredTransactionListener results of {"transaction":"3"}
2022-06-21T23:47:28.4622819Z Chaincode listener event received for myFilteredChaincodeListener :: EventInfo {
2022-06-21T23:47:28.4623554Z   eventService: EventService {
2022-06-21T23:47:28.4624447Z     type: 'EventService',
2022-06-21T23:47:28.4624999Z     name: 'myFilteredEventService',
2022-06-21T23:47:28.4625318Z     channel: Channel {
2022-06-21T23:47:28.4626009Z       type: 'Channel',
2022-06-21T23:47:28.4626834Z       name: 'baseapichannel',
2022-06-21T23:47:28.4627234Z       client: [Client],
2022-06-21T23:47:28.4628086Z       endorsers: [Map],
2022-06-21T23:47:28.4628790Z       committers: [Map],
2022-06-21T23:47:28.4629551Z       msps: [Map]
2022-06-21T23:47:28.4630278Z     },
2022-06-21T23:47:28.4631141Z     lastBlockNumber: Long { low: 4, high: 0, unsigned: true },
2022-06-21T23:47:28.4631680Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:47:28.4632616Z     endBlock: Long { low: 4, high: 0, unsigned: false },
2022-06-21T23:47:28.4634703Z     _endBlockSeen: false,
2022-06-21T23:47:28.4635489Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:47:28.4635984Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.4636768Z       [EventListener] => [EventListener]
2022-06-21T23:47:28.4637372Z     },
2022-06-21T23:47:28.4638190Z     _haveBlockListeners: false,
2022-06-21T23:47:28.4638838Z     _haveTxListeners: true,
2022-06-21T23:47:28.4639644Z     _haveChaincodeListeners: true,
2022-06-21T23:47:28.4640346Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:47:28.4641016Z     _currentEventer: Eventer {
2022-06-21T23:47:28.4641857Z       name: 'peer0.org1.example.com',
2022-06-21T23:47:28.4642285Z       mspid: undefined,
2022-06-21T23:47:28.4643088Z       client: [Client],
2022-06-21T23:47:28.4643703Z       connected: true,
2022-06-21T23:47:28.4644466Z       connectAttempted: true,
2022-06-21T23:47:28.4645241Z       endpoint: [Endpoint],
2022-06-21T23:47:28.4645946Z       service: [ServiceClientImpl],
2022-06-21T23:47:28.4646623Z       serviceClass: [Function],
2022-06-21T23:47:28.4647352Z       type: 'Eventer',
2022-06-21T23:47:28.4647982Z       options: [Object],
2022-06-21T23:47:28.4648747Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:47:28.4649977Z       myCount: 3
2022-06-21T23:47:28.4655434Z     },
2022-06-21T23:47:28.4655797Z     _closeRunning: false,
2022-06-21T23:47:28.4656981Z     blockType: 'filtered',
2022-06-21T23:47:28.4657617Z     replay: true,
2022-06-21T23:47:28.4658459Z     startSpecified: true,
2022-06-21T23:47:28.4658835Z     myNumber: 3,
2022-06-21T23:47:28.4659519Z     inUse: true,
2022-06-21T23:47:28.4661835Z     _payload: <Buffer 0a d1 07 0a 8c 01 08 05 10 01 1a 0c 08 90 b1 c9 95 06 10 80 f6 e9 bc 01 22 0e 62 61 73 65 61 70 69 63 68 61 6e 6e 65 6c 2a 40 32 30 34 32 32 36 63 64 ... 946 more bytes>,
2022-06-21T23:47:28.4662600Z     _signature: <Buffer 30 44 02 20 01 91 d8 5b 5b 8f ac c4 cc 89 7c a9 f6 d5 8a 6b 96 ac dc e7 77 13 83 66 d2 7e 9c 99 d1 30 0c 00 02 20 3c 52 80 82 7a 2a 7a 87 2a 8f fd 41 ... 20 more bytes>,
2022-06-21T23:47:28.4663099Z     currentStreamNumber: 3
2022-06-21T23:47:28.4663833Z   },
2022-06-21T23:47:28.4664599Z   endBlockReceived: false,
2022-06-21T23:47:28.4665940Z   chaincodeEvents: [
2022-06-21T23:47:28.4666915Z     ChaincodeEvent {
2022-06-21T23:47:28.4667704Z       chaincodeId: 'fabcar',
2022-06-21T23:47:28.4668777Z       transactionId: '16e89f18d11820e5facc530c3014ddce0e7c6911f01527cdb7b7dcb6e70d9b42',
2022-06-21T23:47:28.4669342Z       status: 'VALID',
2022-06-21T23:47:28.4670111Z       eventName: 'createCar',
2022-06-21T23:47:28.4670531Z       payload: undefined
2022-06-21T23:47:28.4671233Z     }
2022-06-21T23:47:28.4672384Z   ],
2022-06-21T23:47:28.4686192Z   blockNumber: Long { low: 4, high: 0, unsigned: true }
2022-06-21T23:47:28.4688984Z }
2022-06-21T23:47:28.4689929Z Store chaincode event listener myFilteredChaincodeListener results of {"createCar":""}
2022-06-21T23:47:28.4690910Z Chaincode listener ERROR received for myFilteredChaincodeListener :: Error: Shutdown due to end block number has been seen: 4
2022-06-21T23:47:28.4691872Z Shutdown indication received for myFilteredChaincodeListener successfully successfully from event service myFilteredEventService
2022-06-21T23:47:28.4693745Z Shutdown indication received for myFilteredTransactionListener successfully successfully from event service myFilteredEventService
2022-06-21T23:47:28.4813778Z Peer checkConnection test successfully
2022-06-21T23:47:28.4901752Z Peer checkConnection test successfully
2022-06-21T23:47:28.5178391Z     And I build a new endorsement request named replay1 for smart contract named fabcar with arguments [createCar,2006,Ford,Focus,blue,Henry] as client leon on channel baseapichannel
2022-06-21T23:47:28.5364111Z Store block event listener myFullBlockListener results of {"block":"1"}
2022-06-21T23:47:28.5448687Z Store block event listener myFullBlockListener results of {"block":"2"}
2022-06-21T23:47:28.5450319Z Store event listener myFullTransactionListener results of {"transaction":"1"}
2022-06-21T23:47:28.5528328Z Store block event listener myFullBlockListener results of {"block":"3"}
2022-06-21T23:47:28.5529888Z Store event listener myFullTransactionListener results of {"transaction":"2"}
2022-06-21T23:47:28.5544030Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:47:28.5545145Z   eventService: EventService {
2022-06-21T23:47:28.5545966Z     type: 'EventService',
2022-06-21T23:47:28.5546873Z     name: 'myFullEventService',
2022-06-21T23:47:28.5550708Z     channel: Channel {
2022-06-21T23:47:28.5551294Z       type: 'Channel',
2022-06-21T23:47:28.5552092Z       name: 'baseapichannel',
2022-06-21T23:47:28.5552574Z       client: [Client],
2022-06-21T23:47:28.5553237Z       endorsers: [Map],
2022-06-21T23:47:28.5554759Z       committers: [Map],
2022-06-21T23:47:28.5555487Z       msps: [Map]
2022-06-21T23:47:28.5556138Z     },
2022-06-21T23:47:28.5557177Z     lastBlockNumber: Long { low: 3, high: 0, unsigned: true },
2022-06-21T23:47:28.5558082Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:47:28.5558592Z     endBlock: null,
2022-06-21T23:47:28.5559266Z     _endBlockSeen: false,
2022-06-21T23:47:28.5559791Z     _eventListenerRegistrations: Map(3) {
2022-06-21T23:47:28.5560571Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.5561117Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.5561866Z       [EventListener] => [EventListener]
2022-06-21T23:47:28.5562320Z     },
2022-06-21T23:47:28.5564446Z     _haveBlockListeners: true,
2022-06-21T23:47:28.5565619Z     _haveTxListeners: true,
2022-06-21T23:47:28.5566412Z     _haveChaincodeListeners: true,
2022-06-21T23:47:28.5566953Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:47:28.5567667Z     _currentEventer: Eventer {
2022-06-21T23:47:28.5570183Z       name: 'peer0.org1.example.com',
2022-06-21T23:47:28.5571443Z       mspid: undefined,
2022-06-21T23:47:28.5571949Z       client: [Client],
2022-06-21T23:47:28.5572638Z       connected: true,
2022-06-21T23:47:28.5573133Z       connectAttempted: true,
2022-06-21T23:47:28.5573833Z       endpoint: [Endpoint],
2022-06-21T23:47:28.5574747Z       service: [ServiceClientImpl],
2022-06-21T23:47:28.5575456Z       serviceClass: [Function],
2022-06-21T23:47:28.5576018Z       type: 'Eventer',
2022-06-21T23:47:28.5577785Z       options: [Object],
2022-06-21T23:47:28.5578335Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:47:28.5579538Z       myCount: 5
2022-06-21T23:47:28.5579963Z     },
2022-06-21T23:47:28.5580604Z     _closeRunning: false,
2022-06-21T23:47:28.5581352Z     blockType: 'full',
2022-06-21T23:47:28.5582046Z     replay: true,
2022-06-21T23:47:28.5582494Z     startSpecified: true,
2022-06-21T23:47:28.5583162Z     myNumber: 4,
2022-06-21T23:47:28.5583591Z     inUse: true,
2022-06-21T23:47:28.5584664Z     _payload: <Buffer 0a d1 07 0a 8c 01 08 05 10 01 1a 0c 08 90 b1 c9 95 06 10 80 aa f3 cf 01 22 0e 62 61 73 65 61 70 69 63 68 61 6e 6e 65 6c 2a 40 33 36 66 31 38 66 63 31 ... 954 more bytes>,
2022-06-21T23:47:28.5590019Z     _signature: <Buffer 30 45 02 21 00 91 23 2c 2d c5 4e bd 9d f3 f9 73 6c 3c c0 1a 96 d9 cc 99 a8 08 ac 98 20 7f a0 19 ac 80 66 c7 19 02 20 03 17 ea 4b e4 c8 27 e5 e0 a2 a4 ... 21 more bytes>,
2022-06-21T23:47:28.5590890Z     currentStreamNumber: 4
2022-06-21T23:47:28.5591345Z   },
2022-06-21T23:47:28.5592000Z   endBlockReceived: false,
2022-06-21T23:47:28.5592456Z   chaincodeEvents: [
2022-06-21T23:47:28.5601085Z     ChaincodeEvent {
2022-06-21T23:47:28.5602362Z       chaincodeId: 'fabcar',
2022-06-21T23:47:28.5603717Z       transactionId: 'cdeb328f7cdadd9c4356fa0ed0df22c0cdded0bced6794f5f592df328d678f1c',
2022-06-21T23:47:28.5604597Z       status: 'VALID',
2022-06-21T23:47:28.5646823Z       eventName: 'createCar',
2022-06-21T23:47:28.5647174Z       payload: <Buffer 20 53 61 76 61 6e 61>
2022-06-21T23:47:28.5647433Z     }
2022-06-21T23:47:28.5647638Z   ],
2022-06-21T23:47:28.5647944Z   blockNumber: Long { low: 3, high: 0, unsigned: true }
2022-06-21T23:47:28.5648231Z }
2022-06-21T23:47:28.5648725Z Store chaincode event listener myFullChaincodeListener results of {"createCar":" Savana"}
2022-06-21T23:47:28.5649442Z Store block event listener myFullBlockListener results of {"block":"4"}
2022-06-21T23:47:28.5650144Z Store event listener myFullTransactionListener results of {"transaction":"3"}
2022-06-21T23:47:28.5651133Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:47:28.5651534Z   eventService: EventService {
2022-06-21T23:47:28.5651890Z     type: 'EventService',
2022-06-21T23:47:28.5652228Z     name: 'myFullEventService',
2022-06-21T23:47:28.5652492Z     channel: Channel {
2022-06-21T23:47:28.5653118Z       type: 'Channel',
2022-06-21T23:47:28.5653729Z       name: 'baseapichannel',
2022-06-21T23:47:28.5653958Z       client: [Client],
2022-06-21T23:47:28.5654176Z       endorsers: [Map],
2022-06-21T23:47:28.5654817Z       committers: [Map],
2022-06-21T23:47:28.5655339Z       msps: [Map]
2022-06-21T23:47:28.5655536Z     },
2022-06-21T23:47:28.5656685Z     lastBlockNumber: Long { low: 4, high: 0, unsigned: true },
2022-06-21T23:47:28.5657106Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:47:28.5657386Z     endBlock: null,
2022-06-21T23:47:28.5657769Z     _endBlockSeen: false,
2022-06-21T23:47:28.5658055Z     _eventListenerRegistrations: Map(3) {
2022-06-21T23:47:28.5658524Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.5659357Z       [EventListener] => [EventListener],
2022-06-21T23:47:28.5659953Z       [EventListener] => [EventListener]
2022-06-21T23:47:28.5660183Z     },
2022-06-21T23:47:28.5660409Z     _haveBlockListeners: true,
2022-06-21T23:47:28.5660626Z     _haveTxListeners: true,
2022-06-21T23:47:28.5660873Z     _haveChaincodeListeners: true,
2022-06-21T23:47:28.5661128Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:47:28.5661368Z     _currentEventer: Eventer {
2022-06-21T23:47:28.5670652Z       name: 'peer0.org1.example.com',
2022-06-21T23:47:28.5670953Z       mspid: undefined,
2022-06-21T23:47:28.5671247Z       client: [Client],
2022-06-21T23:47:28.5671470Z       connected: true,
2022-06-21T23:47:28.5671716Z       connectAttempted: true,
2022-06-21T23:47:28.5671970Z       endpoint: [Endpoint],
2022-06-21T23:47:28.5672257Z       service: [ServiceClientImpl],
2022-06-21T23:47:28.5672554Z       serviceClass: [Function],
2022-06-21T23:47:28.5672878Z       type: 'Eventer',
2022-06-21T23:47:28.5673114Z       options: [Object],
2022-06-21T23:47:28.5673449Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:47:28.5673726Z       myCount: 5
2022-06-21T23:47:28.5673929Z     },
2022-06-21T23:47:28.5674155Z     _closeRunning: false,
2022-06-21T23:47:28.5674453Z     blockType: 'full',
2022-06-21T23:47:28.5674680Z     replay: true,
2022-06-21T23:47:28.5674937Z     startSpecified: true,
2022-06-21T23:47:28.5675187Z     myNumber: 4,
2022-06-21T23:47:28.5675418Z     inUse: true,
2022-06-21T23:47:28.5675894Z     _payload: <Buffer 0a d1 07 0a 8c 01 08 05 10 01 1a 0c 08 90 b1 c9 95 06 10 80 aa f3 cf 01 22 0e 62 61 73 65 61 70 69 63 68 61 6e 6e 65 6c 2a 40 33 36 66 31 38 66 63 31 ... 954 more bytes>,
2022-06-21T23:47:28.5676510Z     _signature: <Buffer 30 45 02 21 00 91 23 2c 2d c5 4e bd 9d f3 f9 73 6c 3c c0 1a 96 d9 cc 99 a8 08 ac 98 20 7f a0 19 ac 80 66 c7 19 02 20 03 17 ea 4b e4 c8 27 e5 e0 a2 a4 ... 21 more bytes>,
2022-06-21T23:47:28.5677215Z     currentStreamNumber: 4
2022-06-21T23:47:28.5677705Z   },
2022-06-21T23:47:28.5681821Z   endBlockReceived: false,
2022-06-21T23:47:28.5682291Z   chaincodeEvents: [
2022-06-21T23:47:28.5682579Z     ChaincodeEvent {
2022-06-21T23:47:28.5683137Z       chaincodeId: 'fabcar',
2022-06-21T23:47:28.5683962Z       transactionId: '16e89f18d11820e5facc530c3014ddce0e7c6911f01527cdb7b7dcb6e70d9b42',
2022-06-21T23:47:28.5686400Z       status: 'VALID',
2022-06-21T23:47:28.5690891Z       eventName: 'createCar',
2022-06-21T23:47:28.5691431Z       payload: <Buffer 20 50 54 43 75 72 73 65 72>
2022-06-21T23:47:28.5691685Z     }
2022-06-21T23:47:28.5691864Z   ],
2022-06-21T23:47:28.5694290Z   blockNumber: Long { low: 4, high: 0, unsigned: true }
2022-06-21T23:47:28.5694643Z }
2022-06-21T23:47:28.5695147Z Store chaincode event listener myFullChaincodeListener results of {"createCar":" PTCurser"}
2022-06-21T23:47:28.5695651Z Endblock indication received for myFullBlockListener
2022-06-21T23:47:28.5696694Z Peer checkConnection test successfully
2022-06-21T23:47:28.5786044Z Peer checkConnection test successfully
2022-06-21T23:47:28.6058331Z     And I commit the endorsement request named replay1 as client leon on channel baseapichannel
2022-06-21T23:47:28.6368729Z Eventer checkConnection test successfully
2022-06-21T23:47:28.7118125Z Orderer checkConnection test successfully {}
2022-06-21T23:47:29.2987606Z Store event listener myFullTransactionListener results of {"transaction":"4"}
2022-06-21T23:47:29.3035876Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:47:29.3036291Z   eventService: EventService {
2022-06-21T23:47:29.3036786Z     type: 'EventService',
2022-06-21T23:47:29.3037115Z     name: 'myFullEventService',
2022-06-21T23:47:29.3037351Z     channel: Channel {
2022-06-21T23:47:29.3037599Z       type: 'Channel',
2022-06-21T23:47:29.3038056Z       name: 'baseapichannel',
2022-06-21T23:47:29.3038291Z       client: [Client],
2022-06-21T23:47:29.3038496Z       endorsers: [Map],
2022-06-21T23:47:29.3038721Z       committers: [Map],
2022-06-21T23:47:29.3038941Z       msps: [Map]
2022-06-21T23:47:29.3039136Z     },
2022-06-21T23:47:29.3040738Z     lastBlockNumber: Long { low: 5, high: 0, unsigned: true },
2022-06-21T23:47:29.3041243Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:47:29.3041660Z     endBlock: null,
2022-06-21T23:47:29.3041899Z     _endBlockSeen: false,
2022-06-21T23:47:29.3042236Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:47:29.3042595Z       [EventListener] => [EventListener],
2022-06-21T23:47:29.3042916Z       [EventListener] => [EventListener]
2022-06-21T23:47:29.3043172Z     },
2022-06-21T23:47:29.3043439Z     _haveBlockListeners: false,
2022-06-21T23:47:29.3043707Z     _haveTxListeners: true,
2022-06-21T23:47:29.3044161Z     _haveChaincodeListeners: true,
2022-06-21T23:47:29.3044457Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:47:29.3044899Z     _currentEventer: Eventer {
2022-06-21T23:47:29.3045649Z       name: 'peer0.org1.example.com',
2022-06-21T23:47:29.3045893Z       mspid: undefined,
2022-06-21T23:47:29.3046113Z       client: [Client],
2022-06-21T23:47:29.3046310Z       connected: true,
2022-06-21T23:47:29.3046536Z       connectAttempted: true,
2022-06-21T23:47:29.3046769Z       endpoint: [Endpoint],
2022-06-21T23:47:29.3047018Z       service: [ServiceClientImpl],
2022-06-21T23:47:29.3047282Z       serviceClass: [Function],
2022-06-21T23:47:29.3047555Z       type: 'Eventer',
2022-06-21T23:47:29.3047753Z       options: [Object],
2022-06-21T23:47:29.3048021Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:47:29.3048256Z       myCount: 5
2022-06-21T23:47:29.3048428Z     },
2022-06-21T23:47:29.3048623Z     _closeRunning: false,
2022-06-21T23:47:29.3048889Z     blockType: 'full',
2022-06-21T23:47:29.3049083Z     replay: true,
2022-06-21T23:47:29.3049299Z     startSpecified: true,
2022-06-21T23:47:29.3049514Z     myNumber: 4,
2022-06-21T23:47:29.3049697Z     inUse: true,
2022-06-21T23:47:29.3050117Z     _payload: <Buffer 0a d1 07 0a 8c 01 08 05 10 01 1a 0c 08 90 b1 c9 95 06 10 80 aa f3 cf 01 22 0e 62 61 73 65 61 70 69 63 68 61 6e 6e 65 6c 2a 40 33 36 66 31 38 66 63 31 ... 954 more bytes>,
2022-06-21T23:47:29.3051201Z     _signature: <Buffer 30 45 02 21 00 91 23 2c 2d c5 4e bd 9d f3 f9 73 6c 3c c0 1a 96 d9 cc 99 a8 08 ac 98 20 7f a0 19 ac 80 66 c7 19 02 20 03 17 ea 4b e4 c8 27 e5 e0 a2 a4 ... 21 more bytes>,
2022-06-21T23:47:29.3051529Z     currentStreamNumber: 4
2022-06-21T23:47:29.3051723Z   },
2022-06-21T23:47:29.3051925Z   endBlockReceived: false,
2022-06-21T23:47:29.3052153Z   chaincodeEvents: [
2022-06-21T23:47:29.3052356Z     ChaincodeEvent {
2022-06-21T23:47:29.3052660Z       chaincodeId: 'fabcar',
2022-06-21T23:47:29.3053159Z       transactionId: '30be6b4e5e07e34b0b4699765dcbfc944088a5738f21e6719aca5f2c258c2ebf',
2022-06-21T23:47:29.3053506Z       status: 'VALID',
2022-06-21T23:47:29.3053757Z       eventName: 'createCar',
2022-06-21T23:47:29.3054020Z       payload: <Buffer 46 6f 63 75 73>
2022-06-21T23:47:29.3054231Z     }
2022-06-21T23:47:29.3054387Z   ],
2022-06-21T23:47:29.3054658Z   blockNumber: Long { low: 5, high: 0, unsigned: true }
2022-06-21T23:47:29.3054912Z }
2022-06-21T23:47:29.3055307Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"Focus"}
2022-06-21T23:47:29.3071460Z Successfully received the transaction event for 30be6b4e5e07e34b0b4699765dcbfc944088a5738f21e6719aca5f2c258c2ebf with status of VALID in block number 5 {}
2022-06-21T23:47:29.3077881Z  - commitChannelRequest complete
2022-06-21T23:47:29.3078243Z  - commitChannelRequest finally
2022-06-21T23:47:29.3101126Z - disconnected all endpoints for client object leon and request replay1
2022-06-21T23:47:29.3105273Z     Then the event listener myFilteredBlockListener of myFilteredEventService has results matching {"block":"3"} as client leon
2022-06-21T23:47:29.3109312Z Results compare for eventListener myFilteredBlockListener
2022-06-21T23:47:29.3114486Z     Then the event listener myFilteredChaincodeListener of myFilteredEventService has results matching {"createCar":""} as client leon
2022-06-21T23:47:29.3115626Z Results compare for eventListener myFilteredChaincodeListener
2022-06-21T23:47:29.3116395Z     Then the event listener myFilteredTransactionListener of myFilteredEventService has results matching {"transaction":"3"} as client leon
2022-06-21T23:47:29.3120560Z Results compare for eventListener myFilteredTransactionListener
2022-06-21T23:47:29.3122795Z     Then the event listener myFullBlockListener of myFullEventService has results matching {"block":"4"} as client leon
2022-06-21T23:47:29.3125276Z Results compare for eventListener myFullBlockListener
2022-06-21T23:47:29.3127900Z     Then I wait for events from chaincode listener named myFullChaincodeListener with myFullEventService as client leon
2022-06-21T23:47:29.3134284Z     Then the event listener myFullChaincodeListener of myFullEventService has results matching {"createCar":"Focus"} as client leon
2022-06-21T23:47:29.3137343Z Results compare for eventListener myFullChaincodeListener
2022-06-21T23:47:29.3139761Z     Then the event listener myFullTransactionListener of myFullEventService has results matching {"transaction":"4"} as client leon
2022-06-21T23:47:29.3146131Z Results compare for eventListener myFullTransactionListener
2022-06-21T23:47:29.3153079Z 
2022-06-21T23:47:29.3163624Z @base_api_2
2022-06-21T23:47:29.3167879Z Feature: Use base API to perform core operations # test/ts-scenario/features/base_api_v2.feature:6
2022-06-21T23:47:29.3168892Z 
2022-06-21T23:47:29.3172414Z   @base_api_2
2022-06-21T23:47:29.3176819Z   Scenario: Using only fabric-common on V2 channel # test/ts-scenario/features/base_api_v2.feature:17
2022-06-21T23:47:29.3180490Z     Given I place a scenario start message BASE API FEATURE V2 Channel and V2 Chaincode lifecycle
2022-06-21T23:47:29.3184855Z 
2022-06-21T23:47:29.3184864Z 
2022-06-21T23:47:29.3184891Z 
2022-06-21T23:47:29.3185155Z **********************************************************************************
2022-06-21T23:47:29.3185543Z **********************************************************************************
2022-06-21T23:47:29.3186206Z ****** BASE API FEATURE V2 Channel and V2 Chaincode lifecycle Scenario 0 ******
2022-06-21T23:47:29.3186630Z **********************************************************************************
2022-06-21T23:47:29.3186998Z **********************************************************************************
2022-06-21T23:47:29.3187138Z 
2022-06-21T23:47:29.3187161Z 
2022-06-21T23:47:29.3187168Z 
2022-06-21T23:47:29.3190268Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:47:29.3190636Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:47:29.3191016Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:47:29.3191383Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:47:29.3194473Z     And I use the cli to create and join the channel named basev2channel on the deployed network
2022-06-21T23:47:29.3197701Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:47:29.3198589Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:29.3199632Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:29.5103830Z Channel names ==>Channels peers has joined: 
2022-06-21T23:47:29.5104458Z baseapichannel
2022-06-21T23:47:29.5105094Z <== have been joined by organization org1
2022-06-21T23:47:29.5106657Z Attempting to create channel basev2channel of type tls
2022-06-21T23:47:29.5108403Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c basev2channel -f /etc/hyperledger/configtx/channel-config/basev2channel.tx --outputBlock /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:29.5111431Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c basev2channel -f /etc/hyperledger/configtx/channel-config/basev2channel.tx --outputBlock /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:34.6979967Z Channel basev2channel has been created
2022-06-21T23:47:34.6981122Z Attempting to join organization org1 to channel basev2channel of type tls
2022-06-21T23:47:34.6983342Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:34.6985289Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:40.0321283Z Channel basev2channel has been joined by organization org1
2022-06-21T23:47:40.0322352Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:47:40.0324013Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:40.0430054Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:40.2008206Z Channel names ==>Channels peers has joined: 
2022-06-21T23:47:40.2009058Z baseapichannel
2022-06-21T23:47:40.2009858Z <== have been joined by organization org2
2022-06-21T23:47:40.2010937Z Attempting to join organization org2 to channel basev2channel of type tls
2022-06-21T23:47:40.2013213Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:40.2014657Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/basev2channel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:45.4983626Z Channel basev2channel has been joined by organization org2
2022-06-21T23:47:45.4988977Z     And I use the cli to update the channel with name basev2channel with config file basev2channel-anchor.tx on the deployed network
2022-06-21T23:47:45.4992593Z Using default CLI container org1 to update channel basev2channel of type tls with updateTx basev2channel-anchor.tx
2022-06-21T23:47:45.4994299Z  -- runShellCommand ==>docker exec org1_cli peer channel update -o orderer.example.com:7050 -c basev2channel -f /etc/hyperledger/configtx/channel-config/basev2channel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:45.4996888Z SCENARIO CMD: docker exec org1_cli peer channel update -o orderer.example.com:7050 -c basev2channel -f /etc/hyperledger/configtx/channel-config/basev2channel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:50.6656105Z Channel basev2channel has been updated
2022-06-21T23:47:50.6661274Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel basev2channel with default endorsement policy and init-required true
2022-06-21T23:47:50.6665747Z 
2022-06-21T23:47:50.6666396Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:47:50.6667261Z 
2022-06-21T23:47:50.6668250Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:47:50.6674213Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:47:50.6675667Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID basev2channel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:47:50.6677309Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID basev2channel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:47:50.8534437Z Smart contract with name fabcar is not committed for organization org1 using the CLI
2022-06-21T23:47:50.8535225Z Smart contract fabcar at version 1.0.0 is not committed on channel basev2channel as fabcar 
2022-06-21T23:47:50.8535496Z 
2022-06-21T23:47:50.8536036Z  -- Lifecycle deploy step two - package Smart contract fabcar
2022-06-21T23:47:50.8536782Z Attempting lifecyle package of smart contract fabcar with label fabcar-basev2channel for organization org1 using the CLI
2022-06-21T23:47:50.8537726Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-basev2channel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:47:50.8539312Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-basev2channel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:47:56.0102669Z Smart contract fabcar with label fabcar-basev2channel has been packaged for organization org1 using the CLI
2022-06-21T23:47:56.0103927Z Attempting lifecyle package of smart contract fabcar with label fabcar-basev2channel for organization org2 using the CLI
2022-06-21T23:47:56.0105836Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-basev2channel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:47:56.0106904Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-basev2channel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:48:01.1896702Z Smart contract fabcar with label fabcar-basev2channel has been packaged for organization org2 using the CLI
2022-06-21T23:48:01.1897240Z 
2022-06-21T23:48:01.1898610Z  -- Lifecycle deploy step three - install Smart contract fabcar
2022-06-21T23:48:01.1899562Z Attempting lifecycle install of smart contract package fabcar for organization org1 using the CLI
2022-06-21T23:48:01.1900428Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:48:01.1904908Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:48:23.0605668Z Smart contract package fabcar has been installed for organization org1 using the CLI
2022-06-21T23:48:23.0607088Z Smart contract fabcar at version 1.0.0 has been installed on organization Org1 
2022-06-21T23:48:23.0608016Z Attempting lifecycle install of smart contract package fabcar for organization org2 using the CLI
2022-06-21T23:48:23.0697825Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:48:23.0699547Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:48:45.0742985Z Smart contract package fabcar has been installed for organization org2 using the CLI
2022-06-21T23:48:45.0743592Z Smart contract fabcar at version 1.0.0 has been installed on organization Org2 
2022-06-21T23:48:45.0743845Z 
2022-06-21T23:48:45.0744509Z  -- Lifecycle deploy step four - approve Smart contract fabcar
2022-06-21T23:48:45.0750049Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:48:45.0750805Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:48:45.2494182Z Attempting lifecycle approve of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:48:45.2496653Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID basev2channel --name fabcar --version 1.0.0 --package-id fabcar-basev2channel:c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:48:45.2499548Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID basev2channel --name fabcar --version 1.0.0 --package-id fabcar-basev2channel:c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:48:51.1777127Z Smart contract with reference fabcar has been approved for organization org1 using the CLI
2022-06-21T23:48:51.1777747Z Smart contract fabcar at version 1.0.0 has been approved on organization Org1 
2022-06-21T23:48:51.1778644Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:48:51.1779250Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:48:51.3532017Z Attempting lifecycle approve of smart contract with reference fabcar for organization org2 using the CLI
2022-06-21T23:48:51.3535157Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID basev2channel --name fabcar --version 1.0.0 --package-id fabcar-basev2channel:c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:48:51.3538563Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID basev2channel --name fabcar --version 1.0.0 --package-id fabcar-basev2channel:c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:48:57.2590437Z Smart contract with reference fabcar has been approved for organization org2 using the CLI
2022-06-21T23:48:57.2591078Z Smart contract fabcar at version 1.0.0 has been approved on organization Org2 
2022-06-21T23:49:02.2635911Z 
2022-06-21T23:49:02.2637454Z  -- Lifecycle deploy step five (final) - commit Smart contract fabcar
2022-06-21T23:49:02.2643551Z Attempting lifecycle commit of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:49:02.2647118Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID basev2channel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:02.2686535Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID basev2channel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --init-required --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:08.2350329Z Smart contract with reference fabcar has been committed for organization org1 using the CLI
2022-06-21T23:49:08.2355484Z     Given I have created a client named fred based on information in profile ccp-tls under organization Org1
2022-06-21T23:49:08.2360797Z loading profile /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-scenario/config/ccp-tls
2022-06-21T23:49:08.2375472Z      {"name":"cucumber-network","description":"The network to be in if you like scenario tests, not vegetables","version":"1.0","client":{"organization":"Org1","credentialStore":{"path":"/tmp/hfc-kvs","cryptoStore":{"path":"/tmp/hfc-cvs"},"wallet":"wallet-name"}},"channels":{"basev2channel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"baseapichannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"channelopschannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"channelopschannelvtwo":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"eventschannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"deprecatedchannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"discoverychannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"gatewaychannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]},"lifecyclechannel":{"orderers":["orderer.example.com"],"peers":["peer0.org1.example.com","peer0.org2.example.com"],"chaincodes":[]}},"organizations":{"Org1":{"mspid":"Org1MSP","peers":["peer0.org1.example.com"],"certificateAuthorities":["ca-org1"],"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"}},"Org2":{"mspid":"Org2MSP","peers":["peer0.org2.example.com"],"certificateAuthorities":["ca-org2"],"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem"}}},"orderers":{"orderer.example.com":{"url":"grpcs://localhost:7050","mspid":"OrdererMSP","grpcOptions":{"ssl-target-name-override":"orderer.example.com"},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt"},"adminPrivateKeyPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/key.pem"},"signedCertPEM":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts/Admin@example.com-cert.pem"}}},"peers":{"peer0.org1.example.com":{"url":"grpcs://localhost:7051","grpcOptions":{"ssl-target-name-override":"peer0.org1.example.com","request-timeout":120001},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"}},"peer0.org2.example.com":{"url":"grpcs://localhost:8051","grpcOptions":{"ssl-target-name-override":"peer0.org2.example.com","request-timeout":120001},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"}}},"certificateAuthorities":{"ca-org1":{"url":"https://localhost:7054","grpcOptions":{"verify":true},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem"},"registrar":[{"enrollId":"admin","enrollSecret":"adminpw"}]},"ca-org2":{"url":"https://localhost:8054","grpcOptions":{"verify":true},"tlsCACerts":{"path":"/home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/crypto-material/crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem"},"registrar":[{"enrollId":"admin","enrollSecret":"adminpw"}]}}}
2022-06-21T23:49:08.2383245Z Creating client named fred for organization Org1
2022-06-21T23:49:08.4858315Z Created client named fred and persisted in state store
2022-06-21T23:49:08.4862660Z     And I have used the client named fred to create a channel object for the channel named basev2channel
2022-06-21T23:49:08.4894356Z Channel basev2channel has been persisted with client fred
2022-06-21T23:49:08.4901320Z     When I build a new endorsement request named initRequest for smart contract named fabcar with arguments [initLedger] as client fred on channel basev2channel
2022-06-21T23:49:08.5063331Z Peer checkConnection test successfully
2022-06-21T23:49:08.5167922Z Peer checkConnection test successfully
2022-06-21T23:49:08.5658296Z     And I commit the endorsement request named initRequest as client fred on channel basev2channel
2022-06-21T23:49:08.7208951Z Eventer checkConnection test successfully
2022-06-21T23:49:08.7468718Z Orderer checkConnection test successfully {}
2022-06-21T23:49:09.3648448Z Successfully received the transaction event for fb6e9ba478a60330905123f4e1dbb46182b9776337f02d686bf1e991487f54dd with status of VALID in block number 5 {}
2022-06-21T23:49:09.3653733Z  - commitChannelRequest complete
2022-06-21T23:49:09.3654141Z  - commitChannelRequest finally
2022-06-21T23:49:09.3672399Z - disconnected all endpoints for client object fred and request initRequest
2022-06-21T23:49:09.3674658Z     Then the request named initRequest for client fred has a general result matching {"result":"SUCCESS"}
2022-06-21T23:49:09.3677246Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:49:09.3678231Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:49:09.3678915Z Results match for initRequest of type general
2022-06-21T23:49:09.3682934Z     And the request named initRequest for client fred has a event result matching {"result":"Commit success"}
2022-06-21T23:49:09.3684998Z clientUtils - fieldName: event - raw results of query = '{"result":"Commit success"}'
2022-06-21T23:49:09.3686262Z clientUtils - results of query was a string = {"result":"Commit success"}
2022-06-21T23:49:09.3686883Z Results match for initRequest of type event
2022-06-21T23:49:09.3690207Z     And the request named initRequest for client fred has a commit result matching {"status":"SUCCESS"}
2022-06-21T23:49:09.3691352Z clientUtils - fieldName: commit - raw results of query = '{"status":"SUCCESS"}'
2022-06-21T23:49:09.3792029Z clientUtils - results of query was a string = {"status":"SUCCESS"}
2022-06-21T23:49:09.3792485Z Results match for initRequest of type commit
2022-06-21T23:49:09.3793102Z     When I build a new endorsement request named myFirstRequest for smart contract named fabcar with arguments [createCar,2000,GMC,Savana,grey,Jones] as client fred on channel basev2channel
2022-06-21T23:49:09.4017346Z Peer checkConnection test successfully
2022-06-21T23:49:09.4098641Z Peer checkConnection test successfully
2022-06-21T23:49:09.4296149Z     And I commit the endorsement request named myFirstRequest as client fred on channel basev2channel
2022-06-21T23:49:09.5038727Z Eventer checkConnection test successfully
2022-06-21T23:49:09.5233008Z Orderer checkConnection test successfully {}
2022-06-21T23:49:10.0789045Z Successfully received the transaction event for 270ee3cd750dee046585b8ed6ea3177acaac495adf8bf01d2b3612d08dae73a9 with status of VALID in block number 6 {}
2022-06-21T23:49:10.0798513Z  - commitChannelRequest complete
2022-06-21T23:49:10.0803770Z  - commitChannelRequest finally
2022-06-21T23:49:10.0829161Z - disconnected all endpoints for client object fred and request myFirstRequest
2022-06-21T23:49:10.0840267Z     Then the request named myFirstRequest for client fred has a general result matching {"result":"SUCCESS"}
2022-06-21T23:49:10.0846888Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:49:10.0847746Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:49:10.0848842Z Results match for myFirstRequest of type general
2022-06-21T23:49:10.0855646Z     And the request named myFirstRequest for client fred has a event result matching {"result":"Commit success"}
2022-06-21T23:49:10.0861633Z clientUtils - fieldName: event - raw results of query = '{"result":"Commit success"}'
2022-06-21T23:49:10.0862316Z clientUtils - results of query was a string = {"result":"Commit success"}
2022-06-21T23:49:10.0862766Z Results match for myFirstRequest of type event
2022-06-21T23:49:10.0866513Z     And the request named myFirstRequest for client fred has a commit result matching {"status":"SUCCESS"}
2022-06-21T23:49:10.0873333Z clientUtils - fieldName: commit - raw results of query = '{"status":"SUCCESS"}'
2022-06-21T23:49:10.0876472Z clientUtils - results of query was a string = {"status":"SUCCESS"}
2022-06-21T23:49:10.0877550Z Results match for myFirstRequest of type commit
2022-06-21T23:49:10.0883275Z     When I submit a query named myFirstQuery with args [queryCar,CAR0] for contract fabcar as client fred on channel basev2channel
2022-06-21T23:49:10.0886840Z  -- starting clientUtils.queryChannelRequest
2022-06-21T23:49:10.1054810Z Peer checkConnection test successfully
2022-06-21T23:49:10.1147887Z Peer checkConnection test successfully
2022-06-21T23:49:10.1462272Z 
2022-06-21T23:49:10.1462744Z Query success detected
2022-06-21T23:49:10.1463365Z query submission checking results
2022-06-21T23:49:10.1463673Z 
2022-06-21T23:49:10.1467486Z Query results {
2022-06-21T23:49:10.1469250Z   color: 'blue',
2022-06-21T23:49:10.1470993Z   docType: 'car',
2022-06-21T23:49:10.1475738Z   make: 'Toyota',
2022-06-21T23:49:10.1476390Z   model: 'Prius',
2022-06-21T23:49:10.1550199Z   owner: 'Tomoko'
2022-06-21T23:49:10.1550471Z }
2022-06-21T23:49:10.1550880Z Query results {
2022-06-21T23:49:10.1551168Z   color: 'blue',
2022-06-21T23:49:10.1551466Z   docType: 'car',
2022-06-21T23:49:10.1551757Z   make: 'Toyota',
2022-06-21T23:49:10.1552024Z   model: 'Prius',
2022-06-21T23:49:10.1552306Z   owner: 'Tomoko'
2022-06-21T23:49:10.1552554Z }
2022-06-21T23:49:10.1559859Z     Then the query named myFirstQuery for client fred has a general result matching {"result":"SUCCESS"}
2022-06-21T23:49:10.1561283Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:49:10.1562178Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:49:10.1563957Z Results match for myFirstQuery of type general
2022-06-21T23:49:10.1564767Z     And the query named myFirstQuery for client fred has a peer0 result matching {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:49:10.1565465Z clientUtils - fieldName: peer0 - raw results of query = {
2022-06-21T23:49:10.1565807Z   color: 'blue',
2022-06-21T23:49:10.1566080Z   docType: 'car',
2022-06-21T23:49:10.1566334Z   make: 'Toyota',
2022-06-21T23:49:10.1566603Z   model: 'Prius',
2022-06-21T23:49:10.1566868Z   owner: 'Tomoko'
2022-06-21T23:49:10.1567062Z }
2022-06-21T23:49:10.1567736Z clientUtils - results of query was an object = {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:49:10.1568215Z Results match for myFirstQuery of type peer0
2022-06-21T23:49:10.1568774Z     When I submit a chaincode query named checkChaincodeName with args [queryCar,CAR0] for contract fabcar as client fred on channel basev2channel
2022-06-21T23:49:10.1569324Z  -- starting clientUtils.queryChannelRequest
2022-06-21T23:49:10.1625755Z Peer checkConnection test successfully
2022-06-21T23:49:10.1712461Z Peer checkConnection test successfully
2022-06-21T23:49:10.1745049Z 
2022-06-21T23:49:10.1746138Z - force peer[0] to fail the hasChaincode test peer0.org1.example.com
2022-06-21T23:49:10.1746674Z 
2022-06-21T23:49:10.1871835Z 
2022-06-21T23:49:10.1872462Z Query failure detected
2022-06-21T23:49:10.1872852Z Query during chaincodecheck failure detected
2022-06-21T23:49:10.1873216Z query submission checking results
2022-06-21T23:49:10.1873386Z 
2022-06-21T23:49:10.1877849Z Query failure 'Error: Peer peer0.org1.example.com is not running chaincode fabcar'
2022-06-21T23:49:10.1878487Z Query success detected
2022-06-21T23:49:10.1883045Z Query results {
2022-06-21T23:49:10.1883430Z   color: 'blue',
2022-06-21T23:49:10.1883714Z   docType: 'car',
2022-06-21T23:49:10.1883970Z   make: 'Toyota',
2022-06-21T23:49:10.1884240Z   model: 'Prius',
2022-06-21T23:49:10.1884659Z   owner: 'Tomoko'
2022-06-21T23:49:10.1884845Z }
2022-06-21T23:49:10.1896690Z     Then the query named checkChaincodeName for client fred has a general result matching {"result":"SUCCESS"}
2022-06-21T23:49:10.1898831Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:49:10.1899374Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:49:10.1899755Z Results match for checkChaincodeName of type general
2022-06-21T23:49:10.1908122Z     Then the query named checkChaincodeName for client fred has a chaincodecheck result matching {"result":"FAILURE"}
2022-06-21T23:49:10.1909308Z clientUtils - fieldName: chaincodecheck - raw results of query = '{"result":"FAILURE"}'
2022-06-21T23:49:10.1913206Z clientUtils - results of query was a string = {"result":"FAILURE"}
2022-06-21T23:49:10.1913704Z Results match for checkChaincodeName of type chaincodecheck
2022-06-21T23:49:10.1916826Z     And the query named checkChaincodeName for client fred has a peer1 result matching {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:49:10.1917778Z clientUtils - fieldName: peer1 - raw results of query = {
2022-06-21T23:49:10.1918145Z   color: 'blue',
2022-06-21T23:49:10.1918595Z   docType: 'car',
2022-06-21T23:49:10.1919024Z   make: 'Toyota',
2022-06-21T23:49:10.1919320Z   model: 'Prius',
2022-06-21T23:49:10.1919730Z   owner: 'Tomoko'
2022-06-21T23:49:10.1920240Z }
2022-06-21T23:49:10.1921200Z clientUtils - results of query was an object = {"color":"blue","docType":"car","make":"Toyota","model":"Prius","owner":"Tomoko"}
2022-06-21T23:49:10.1921687Z Results match for checkChaincodeName of type peer1
2022-06-21T23:49:10.1922498Z     And the query named checkChaincodeName for client fred has a peer0 result matching Error: Peer peer0.org1.example.com is not running chaincode fabcar
2022-06-21T23:49:10.1927536Z clientUtils - fieldName: peer0 - raw results of query = 'Error: Peer peer0.org1.example.com is not running chaincode fabcar'
2022-06-21T23:49:10.1928308Z clientUtils - results of query was a string = Error: Peer peer0.org1.example.com is not running chaincode fabcar
2022-06-21T23:49:10.1928773Z Results match for checkChaincodeName of type peer0
2022-06-21T23:49:10.1931593Z     When I build a new endorsement request named myDiscoveryRequest for smart contract named fabcar with arguments [createCar,2008,Chrysler,PTCurser,white,Jones] as client fred on discovery channel basev2channel
2022-06-21T23:49:10.2100097Z Peer checkConnection test successfully
2022-06-21T23:49:10.2199923Z Peer checkConnection test successfully
2022-06-21T23:49:10.2424972Z Peer peer0.org1.example.com:7051 has chaincode fabcar
2022-06-21T23:49:10.2425868Z Peer peer0.org2.example.com:8051 has chaincode fabcar
2022-06-21T23:49:10.2445664Z     And I commit the endorsement request named myDiscoveryRequest as client fred on channel basev2channel
2022-06-21T23:49:10.2687857Z Eventer checkConnection test successfully
2022-06-21T23:49:10.2899333Z Orderer checkConnection test successfully {}
2022-06-21T23:49:10.8442595Z Successfully received the transaction event for ddda9cb7f764420c7d11b775811d1b0a1672b3095dbab637a04eab5fd0dfa4db with status of VALID in block number 7 {}
2022-06-21T23:49:10.8446104Z  - commitChannelRequest complete
2022-06-21T23:49:10.8448812Z  - commitChannelRequest finally
2022-06-21T23:49:10.8458158Z - disconnected all endpoints for client object fred and request myDiscoveryRequest
2022-06-21T23:49:10.8460800Z     Then the request named myDiscoveryRequest for client fred has discovery results
2022-06-21T23:49:10.8591328Z clientUtils - raw discovery results = {"msps":{"OrdererMSP":{"id":"OrdererMSP","name":"OrdererMSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICPjCCAeSgAwIBAgIRAOSd4/QATWrsRJQL5eB3DF4wCgYIKoZIzj0EAwIwaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\ncGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMGkxCzAJBgNV\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRQwEgYDVQQKEwtleGFtcGxlLmNvbTEXMBUGA1UEAxMOY2EuZXhhbXBsZS5j\nb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQOp+6hOX/lzmoGFPq0RaMooDT2\nBcK039we8KRHBkEKIOvIQ0neCzdnYXH8pCht9peqoi8Lvs+JCtCocM6nkYeuo20w\nazAOBgNVHQ8BAf8EBAMCAaYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMB\nMA8GA1UdEwEB/wQFMAMBAf8wKQYDVR0OBCIEIDnU7lNhsoonlqmym7plLzehWbGx\nwZal10jeT5OMa5v2MAoGCCqGSM49BAMCA0gAMEUCIQCITNF+FNhWAQ3Mc/XhTqKq\nSVQLmOKHAncd7IhPVvxHFAIgIMRIPeTQwaZ9rZFQSGrmju4cAk8A6IyIs3yEnIBf\ndFY=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICCjCCAbGgAwIBAgIRALJmgbDJMVwiWhs0wVoi94YwCgYIKoZIzj0EAwIwaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt\ncGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMFYxCzAJBgNV\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp\nc2NvMRowGAYDVQQDDBFBZG1pbkBleGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqG\nSM49AwEHA0IABBwB7rlmUQ7H7PbYRoQISP+UdRXaib2pq4guPk0yRu8n3e6quVHM\nl+OAA/nkEriVqrSKA/Q61DjIh37hgX9FMxGjTTBLMA4GA1UdDwEB/wQEAwIHgDAM\nBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDnU7lNhsoonlqmym7plLzehWbGxwZal\n10jeT5OMa5v2MAoGCCqGSM49BAMCA0cAMEQCIEqra/hCzW9OXM/ScKEDVbYfVjdd\nAMbIJkOefs7KKdd7AiAvpXf17Vt9KCGSeRBrAJAK+h1Ib2ehufbVxa7bEDnQWg==\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICQjCCAemgAwIBAgIQTlWCDEqsWfKoWadF0SQ02zAKBggqhkjOPQQDAjBsMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xGjAYBgNVBAMTEXRsc2NhLmV4\nYW1wbGUuY29tMB4XDTIyMDYyMTIzMzgwMFoXDTMyMDYxODIzMzgwMFowbDELMAkG\nA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFu\nY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5leGFt\ncGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEYe5azZczfk6Vhn62yC\na44GWgGudqOgzKYN3z72GLZs5jywWLLOvPx3BC2/wEIg9/oRHpUp7rV7hi0PSc0+\nTmqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB\nBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg8Ac0VQN6BkdoNYWWRCyH\n5P/BqkltcehwLaPtv8y2sAUwCgYIKoZIzj0EAwIDRwAwRAIgOGo7n++JZDH8rJbw\nBFE6L/+m6M5J1HjeNBWzq20mEDECIEmXdcuD0J2sqCG3tS9WICM8tAqzGmvrWLmQ\nLcGgWELT\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"Org3MSP":{"id":"Org3MSP","name":"Org3MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUTCCAfegAwIBAgIQN8yeShYcbzxgMJyYv/CTPjAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmczLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmczLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\n7BQXJ49vHgIORzmI9NKFgUdk/MtV4xKCQUYkO9DCParFHC3OwZjGXVZeJVjutI9z\n6ch0HjbLSRM8v56ctzpXfKNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAG\nFh9EidcR7yMjcEIlytw2sitKOMCIukxkrhn4BB/rFjAKBggqhkjOPQQDAgNIADBF\nAiEAzG2xQ/ngjLVqK7g/AaiNSCO2qlTlFxhFI8DeFJifqzkCIGaGqIQAAO28GprD\n4Lc5xpEm9grIMASfOLEh5RWN6iix\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGTCCAb+gAwIBAgIQI/+b3Ujk/FdOqwAoTMwuNTAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmczLmV4YW1wbGUuY29tMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUgJmNp8QGjMfwpAaGHNzk74jE1Yd4jMO\nUNafAKcbHLoHBtiGbmQCAYIuOcVCvff0gogEDNkhoZ1YMNlC+zEoNqNNMEswDgYD\nVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgBhYfRInXEe8j\nI3BCJcrcNrIrSjjAiLpMZK4Z+AQf6xYwCgYIKoZIzj0EAwIDSAAwRQIhAMkM46tj\nLVkiH6GUmUF2j9HfeTM+PnnlvgF7YUz/smCLAiBt5Auyg2M2j4P68hqibD//t7sD\njA5cnI5ZwyIpJcRJVA==\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICVzCCAf6gAwIBAgIRANW6YB2NxOwShAX1Z7U1xrgwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzMuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzMuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz\nODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMy5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABCwNf5IobWmGRO6XZt+181P70cVgl+517pyqky580s/E/ZrzB4U8A8su\nX304ZzhQiXlspP89pEy0g51CnN586QqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQgAS2uFcTSgd1Yiv3/tgFEPmuyUJJ+IGJrg3h7HWVIlEAwCgYIKoZIzj0E\nAwIDRwAwRAIgNtTIkT+70EDg5P3WnycSszsy3MUMKV+QDqxQ0jH1R04CICztdym1\n6JVjKt36rtb5UZqg5ZxSffFRoAZeHVoNq4Bd\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"Org1MSP":{"id":"Org1MSP","name":"Org1MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUDCCAfegAwIBAgIQQTheGb/dKDBSBcintljmbjAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nT0h+SX/O4wLY8UiFWP/rA3wjYlA9CHbN3Zofw+1o5HT0P20F2oTVb3MkOiazoTyT\nEMky4j7T+VlgtAKsLbj0LqNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDl\nDSamehV86lRLjQ5g3zxBzm9k9t5C/d1eXh8r/FbTjjAKBggqhkjOPQQDAgNHADBE\nAiAMLWEqq0KX8xCN23DCerE40F/hWWCgojddPuA/xfhaDgIgXP0V+e1ib/+MG1ku\nd8m/R+dqE5wkm35j7DF3MndWCTo=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGjCCAcCgAwIBAgIRALSkm8uBeZrqQiu9skWyZbAwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMzODAw\nWjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZ\nMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNU+4DilvvFSs27uwkdizlUCRQz1Wcyz\nDbk80dDh8N75Eir30l7Kt8iVbT3+jwLrlzf+RCBny6LTGECSLQk5rKSjTTBLMA4G\nA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIOUNJqZ6FXzq\nVEuNDmDfPEHOb2T23kL93V5eHyv8VtOOMAoGCCqGSM49BAMCA0gAMEUCIQCUWOls\nZHcLyGdbSlYVS1nyTj8xWt7rNFcYEdGb34H8LAIgfcnLxA6EX/VvrI/FkYvukqYg\n9q5+kvOWMZpQj8SqWUY=\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICVjCCAf2gAwIBAgIQWLH0lxZAxHqMSWAT/MJS8DAKBggqhkjOPQQDAjB2MQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz\nY2Eub3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4\nMDBaMHYxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMR8wHQYD\nVQQDExZ0bHNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0D\nAQcDQgAEVbtIiQgFXCBOGMm5fO7iziUMmi+TrAmFEbvSKNMABDKg3p+ygJ5xpQlZ\n8ecv8RVbhW3cMJTih6LgDa8Hr3lWZ6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1Ud\nJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1Ud\nDgQiBCAYGjv7wRKTypBrA5D8QNGWxX3eVs2fpvAoIweOFS0rljAKBggqhkjOPQQD\nAgNHADBEAiAcZuRJjH3v3G6j06vJdi9M1AguZJNvl6YYELWkt2eetgIgSNHKml+H\nKkvzXlGvH3NbBUO2yM4Ry5mmwHmLdaCRZjU=\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""},"Org2MSP":{"id":"Org2MSP","name":"Org2MSP","organizationalUnitIdentifiers":[],"rootCerts":"-----BEGIN CERTIFICATE-----\nMIICUDCCAfegAwIBAgIQchXtRHnWbfJowa9c42k2VDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD\nExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nPtU9xQ7jzN6f93byjZpADDoonrBJ3ONsaktFX+tFM/JLpUOXA14O5jNh64Out9IA\nH6wxSAlvapFY+r4KhchkuaNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG\nCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCCZ\nauE29ztWJNL8MoA+F6OxKyOmjt41WRLoJYGjP+IRnTAKBggqhkjOPQQDAgNHADBE\nAiAb9e919FszX1eAhcSJuDGgbvzFyfZJ1lLrfDbpkYdXNAIgXFOd7UbmFmnSWf8w\nVSicm+Y0MGJTaM8ZreE4lkHN/eA=\n-----END CERTIFICATE-----\n","intermediateCerts":"","admins":"-----BEGIN CERTIFICATE-----\nMIICGDCCAb+gAwIBAgIQI9h3kS9rMTOqmxwIznL6DDAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa\nMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmcyLmV4YW1wbGUuY29tMFkw\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6dmZIlOPdyMW7tq+nZw2d9IiYDRb3ewn\nkRdv6FYn+bU4HJYFjbfzfSK4ipMBouMW5Vkil4HeruOg2JEwz3eDQKNNMEswDgYD\nVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgmWrhNvc7ViTS\n/DKAPhejsSsjpo7eNVkS6CWBoz/iEZ0wCgYIKoZIzj0EAwIDRwAwRAIgSkl0mIis\nYOSRFvzgjWI9r5onkzDtv0EJ8sZXqxNNLIkCIE5BCn9iT+2EdipPP5PgpUSpfiF2\nTJPk4WdpkxoA/xN3\n-----END CERTIFICATE-----\n","tlsRootCerts":"-----BEGIN CERTIFICATE-----\nMIICWDCCAf6gAwIBAgIRAJ5dKUYNv0niV/q43CRVllgwCgYIKoZIzj0EAwIwdjEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs\nc2NhLm9yZzIuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz\nODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE\nBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEfMB0G\nA1UEAxMWdGxzY2Eub3JnMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49\nAwEHA0IABKiHuXuqyt0XbQO3ah/qZDnP3jARaFTtWZFmNYFhDUnejMg8rcz9C8Rq\nJ2C0tSa5oq4hIuEUxt4kZCV4lAhF8nejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV\nHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV\nHQ4EIgQg17cNuw7tQeLzWvVrW9dZ+fsJLo4b5pea6Cy3Q8jVfDkwCgYIKoZIzj0E\nAwIDSAAwRQIhANrkKiViVHtAeiQau82yAUe7cRmZDql8u+U52wzsQ6GgAiAVFQDT\nakpQOO6diOD6Z4kEdRyPeoDFSTu5D8G3gwj/rg==\n-----END CERTIFICATE-----\n","tlsIntermediateCerts":""}},"orderers":{"OrdererMSP":{"endpoints":[{"host":"orderer.example.com","port":7050,"name":"orderer.example.com:7050"}]}},"peers_by_org":{"Org2MSP":{"peers":[{"mspid":"Org2MSP","endpoint":"peer0.org2.example.com:8051","name":"peer0.org2.example.com:8051","ledgerHeight":{"low":5,"high":0,"unsigned":true},"chaincodes":[{"name":"fabcar","version":"1"},{"name":"_lifecycle","version":"1"}]}]},"Org1MSP":{"peers":[{"mspid":"Org1MSP","endpoint":"peer0.org1.example.com:7051","name":"peer0.org1.example.com:7051","ledgerHeight":{"low":5,"high":0,"unsigned":true},"chaincodes":[{"name":"fabcar","version":"1"},{"name":"_lifecycle","version":"1"}]}]}},"endorsement_plan":{"chaincode":"fabcar","groups":{"G0":{"peers":[{"mspid":"Org1MSP","endpoint":"peer0.org1.example.com:7051","name":"peer0.org1.example.com:7051","ledgerHeight":{"low":5,"high":0,"unsigned":true},"chaincodes":[{"name":"fabcar","version":"1"},{"name":"_lifecycle","version":"1"}]}]},"G1":{"peers":[{"mspid":"Org2MSP","endpoint":"peer0.org2.example.com:8051","name":"peer0.org2.example.com:8051","ledgerHeight":{"low":5,"high":0,"unsigned":true},"chaincodes":[{"name":"fabcar","version":"1"},{"name":"_lifecycle","version":"1"}]}]}},"layouts":[{"G1":1},{"G0":1}]},"timestamp":1655855350241}
2022-06-21T23:49:10.8716452Z Response for myDiscoveryRequest has an endorsement_plan
2022-06-21T23:49:10.8717224Z     Then the request named myDiscoveryRequest for client fred has a general result matching {"result":"SUCCESS"}
2022-06-21T23:49:10.8718436Z clientUtils - fieldName: general - raw results of query = '{"result":"SUCCESS"}'
2022-06-21T23:49:10.8719021Z clientUtils - results of query was a string = {"result":"SUCCESS"}
2022-06-21T23:49:10.8719439Z Results match for myDiscoveryRequest of type general
2022-06-21T23:49:10.8719944Z     And the request named myDiscoveryRequest for client fred has a event result matching {"result":"Commit success"}
2022-06-21T23:49:10.8720620Z clientUtils - fieldName: event - raw results of query = '{"result":"Commit success"}'
2022-06-21T23:49:10.8721229Z clientUtils - results of query was a string = {"result":"Commit success"}
2022-06-21T23:49:10.8721647Z Results match for myDiscoveryRequest of type event
2022-06-21T23:49:10.8722138Z     And the request named myDiscoveryRequest for client fred has a commit result matching {"status":"SUCCESS"}
2022-06-21T23:49:10.8722786Z clientUtils - fieldName: commit - raw results of query = '{"status":"SUCCESS"}'
2022-06-21T23:49:10.8723357Z clientUtils - results of query was a string = {"status":"SUCCESS"}
2022-06-21T23:49:10.8737925Z Results match for myDiscoveryRequest of type commit
2022-06-21T23:49:10.8738631Z     When I create an event service myFilteredEventService as client fred on channel basev2channel
2022-06-21T23:49:10.8753781Z     And I regisister a block listener named myFilteredBlockListener with myFilteredEventService for startBlock 1 and endBlock 3 as client fred
2022-06-21T23:49:10.8754468Z Register event listener myFilteredBlockListener
2022-06-21T23:49:10.8754914Z Registering a block event with startBlock 1 endBlock 3
2022-06-21T23:49:10.8755701Z     And I regisister a chaincode listener named myFilteredChaincodeListener with myFilteredEventService for createCar event on contract fabcar as client fred
2022-06-21T23:49:10.8756275Z Register event listener myFilteredChaincodeListener
2022-06-21T23:49:10.8756931Z Registering a chaincode event with chaincodeName fabcar chaincodeEventName createCar
2022-06-21T23:49:10.8761136Z     And I regisister a transaction listener named myFilteredTransactionListener with myFilteredEventService for all transactions as client fred
2022-06-21T23:49:10.8762019Z Register event listener myFilteredTransactionListener
2022-06-21T23:49:10.8762484Z Registering a transaction event for all transactions
2022-06-21T23:49:10.8762979Z     When I create an event service myFullEventService as client fred on channel basev2channel
2022-06-21T23:49:10.8763619Z     And I regisister a block listener named myFullBlockListener with myFullEventService for startBlock 1 and endBlock 4 as client fred
2022-06-21T23:49:10.8764137Z Register event listener myFullBlockListener
2022-06-21T23:49:10.8764790Z Registering a block event with startBlock 1 endBlock 4
2022-06-21T23:49:10.8765457Z     And I regisister a chaincode listener named myFullChaincodeListener with myFullEventService with a maximum event count of 3 as client fred for createCar event on contract fabcar
2022-06-21T23:49:10.8766236Z Register event listener myFullChaincodeListener
2022-06-21T23:49:10.8766767Z Registering a chaincode event with chaincodeName fabcar chaincodeEventName createCar
2022-06-21T23:49:10.8768542Z     And I regisister a transaction listener named myFullTransactionListener with myFullEventService for all transactions as client fred
2022-06-21T23:49:10.8769171Z Register event listener myFullTransactionListener
2022-06-21T23:49:10.8769619Z Registering a transaction event for all transactions
2022-06-21T23:49:10.8780990Z     And I start the event service myFilteredEventService as filtered blocks to start at block 0 and end at block 6 as client fred
2022-06-21T23:49:10.8781551Z Peer checkConnection test successfully
2022-06-21T23:49:10.8884956Z Peer checkConnection test successfully
2022-06-21T23:49:10.8954390Z     And I start the event service myFullEventService as full blocks to start at block 0 and end at block END as client fred
2022-06-21T23:49:10.9038720Z Store block event listener myFilteredBlockListener results of {"block":"1"}
2022-06-21T23:49:10.9047541Z Store block event listener myFilteredBlockListener results of {"block":"2"}
2022-06-21T23:49:10.9048173Z Store event listener myFilteredTransactionListener results of {"transaction":"1"}
2022-06-21T23:49:10.9059293Z Store block event listener myFilteredBlockListener results of {"block":"3"}
2022-06-21T23:49:10.9059936Z Store event listener myFilteredTransactionListener results of {"transaction":"2"}
2022-06-21T23:49:10.9060480Z Endblock indication received for myFilteredBlockListener
2022-06-21T23:49:10.9085341Z Store event listener myFilteredTransactionListener results of {"transaction":"3"}
2022-06-21T23:49:10.9093023Z Store event listener myFilteredTransactionListener results of {"transaction":"4"}
2022-06-21T23:49:10.9101271Z Store event listener myFilteredTransactionListener results of {"transaction":"5"}
2022-06-21T23:49:10.9112187Z Chaincode listener event received for myFilteredChaincodeListener :: EventInfo {
2022-06-21T23:49:10.9112673Z   eventService: EventService {
2022-06-21T23:49:10.9113215Z     type: 'EventService',
2022-06-21T23:49:10.9113609Z     name: 'myFilteredEventService',
2022-06-21T23:49:10.9113886Z     channel: Channel {
2022-06-21T23:49:10.9114181Z       type: 'Channel',
2022-06-21T23:49:10.9117629Z       name: 'basev2channel',
2022-06-21T23:49:10.9117965Z       client: [Client],
2022-06-21T23:49:10.9118452Z       endorsers: [Map],
2022-06-21T23:49:10.9118692Z       committers: [Map],
2022-06-21T23:49:10.9118933Z       msps: [Map]
2022-06-21T23:49:10.9119149Z     },
2022-06-21T23:49:10.9119465Z     lastBlockNumber: Long { low: 6, high: 0, unsigned: true },
2022-06-21T23:49:10.9119850Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:10.9120219Z     endBlock: Long { low: 6, high: 0, unsigned: false },
2022-06-21T23:49:10.9120491Z     _endBlockSeen: false,
2022-06-21T23:49:10.9120815Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:10.9121162Z       [EventListener] => [EventListener],
2022-06-21T23:49:10.9121982Z       [EventListener] => [EventListener]
2022-06-21T23:49:10.9122254Z     },
2022-06-21T23:49:10.9122524Z     _haveBlockListeners: false,
2022-06-21T23:49:10.9122811Z     _haveTxListeners: true,
2022-06-21T23:49:10.9123117Z     _haveChaincodeListeners: true,
2022-06-21T23:49:10.9123767Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:10.9124085Z     _currentEventer: Eventer {
2022-06-21T23:49:10.9124750Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:10.9125251Z       mspid: undefined,
2022-06-21T23:49:10.9125514Z       client: [Client],
2022-06-21T23:49:10.9125743Z       connected: true,
2022-06-21T23:49:10.9126191Z       connectAttempted: true,
2022-06-21T23:49:10.9127049Z       endpoint: [Endpoint],
2022-06-21T23:49:10.9127667Z       service: [ServiceClientImpl],
2022-06-21T23:49:10.9127977Z       serviceClass: [Function],
2022-06-21T23:49:10.9128319Z       type: 'Eventer',
2022-06-21T23:49:10.9128563Z       options: [Object],
2022-06-21T23:49:10.9128863Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:10.9129140Z       myCount: 11
2022-06-21T23:49:10.9129356Z     },
2022-06-21T23:49:10.9129561Z     _closeRunning: false,
2022-06-21T23:49:10.9129879Z     blockType: 'filtered',
2022-06-21T23:49:10.9130124Z     replay: true,
2022-06-21T23:49:10.9130628Z     startSpecified: true,
2022-06-21T23:49:10.9131110Z     myNumber: 9,
2022-06-21T23:49:10.9131345Z     inUse: true,
2022-06-21T23:49:10.9131825Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 87 d9 97 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 63 61 62 37 37 37 32 32 30 ... 945 more bytes>,
2022-06-21T23:49:10.9132439Z     _signature: <Buffer 30 45 02 21 00 8e 0a 5d 59 91 19 f6 61 b9 f1 8f ef 5d de b3 32 5c f3 0f 64 47 b3 44 20 a8 d0 4c 49 fe bd 63 b3 02 20 07 75 51 c5 2e d1 40 f1 cd b6 85 ... 21 more bytes>,
2022-06-21T23:49:10.9132822Z     currentStreamNumber: 9
2022-06-21T23:49:10.9133066Z   },
2022-06-21T23:49:10.9133285Z   endBlockReceived: false,
2022-06-21T23:49:10.9136698Z   chaincodeEvents: [
2022-06-21T23:49:10.9136966Z     ChaincodeEvent {
2022-06-21T23:49:10.9137339Z       chaincodeId: 'fabcar',
2022-06-21T23:49:10.9139371Z       transactionId: '270ee3cd750dee046585b8ed6ea3177acaac495adf8bf01d2b3612d08dae73a9',
2022-06-21T23:49:10.9139866Z       status: 'VALID',
2022-06-21T23:49:10.9140171Z       eventName: 'createCar',
2022-06-21T23:49:10.9140442Z       payload: undefined
2022-06-21T23:49:10.9140678Z     }
2022-06-21T23:49:10.9140877Z   ],
2022-06-21T23:49:10.9141183Z   blockNumber: Long { low: 6, high: 0, unsigned: true }
2022-06-21T23:49:10.9141474Z }
2022-06-21T23:49:10.9141963Z Store chaincode event listener myFilteredChaincodeListener results of {"createCar":""}
2022-06-21T23:49:10.9142716Z Chaincode listener ERROR received for myFilteredChaincodeListener :: Error: Shutdown due to end block number has been seen: 6
2022-06-21T23:49:10.9143520Z Shutdown indication received for myFilteredChaincodeListener successfully successfully from event service myFilteredEventService
2022-06-21T23:49:10.9144360Z Shutdown indication received for myFilteredTransactionListener successfully successfully from event service myFilteredEventService
2022-06-21T23:49:10.9223267Z Peer checkConnection test successfully
2022-06-21T23:49:10.9390491Z Peer checkConnection test successfully
2022-06-21T23:49:10.9503028Z     And I build a new endorsement request named replay1 for smart contract named fabcar with arguments [createCar,2006,Ford,Focus,blue,Henry] as client fred on channel basev2channel
2022-06-21T23:49:10.9612063Z Store block event listener myFullBlockListener results of {"block":"1"}
2022-06-21T23:49:10.9650927Z Store block event listener myFullBlockListener results of {"block":"2"}
2022-06-21T23:49:10.9651453Z Store event listener myFullTransactionListener results of {"transaction":"1"}
2022-06-21T23:49:10.9683184Z Store block event listener myFullBlockListener results of {"block":"3"}
2022-06-21T23:49:10.9683903Z Store event listener myFullTransactionListener results of {"transaction":"2"}
2022-06-21T23:49:10.9711122Z Store block event listener myFullBlockListener results of {"block":"4"}
2022-06-21T23:49:10.9711683Z Store event listener myFullTransactionListener results of {"transaction":"3"}
2022-06-21T23:49:10.9715288Z Endblock indication received for myFullBlockListener
2022-06-21T23:49:10.9732373Z Store event listener myFullTransactionListener results of {"transaction":"4"}
2022-06-21T23:49:10.9752548Z Store event listener myFullTransactionListener results of {"transaction":"5"}
2022-06-21T23:49:10.9766781Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:49:10.9767181Z   eventService: EventService {
2022-06-21T23:49:10.9767742Z     type: 'EventService',
2022-06-21T23:49:10.9768102Z     name: 'myFullEventService',
2022-06-21T23:49:10.9768350Z     channel: Channel {
2022-06-21T23:49:10.9768644Z       type: 'Channel',
2022-06-21T23:49:10.9768958Z       name: 'basev2channel',
2022-06-21T23:49:10.9769191Z       client: [Client],
2022-06-21T23:49:10.9769444Z       endorsers: [Map],
2022-06-21T23:49:10.9769858Z       committers: [Map],
2022-06-21T23:49:10.9770232Z       msps: [Map]
2022-06-21T23:49:10.9770976Z     },
2022-06-21T23:49:10.9771311Z     lastBlockNumber: Long { low: 6, high: 0, unsigned: true },
2022-06-21T23:49:10.9771869Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:10.9772144Z     endBlock: null,
2022-06-21T23:49:10.9772399Z     _endBlockSeen: false,
2022-06-21T23:49:10.9772735Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:10.9773075Z       [EventListener] => [EventListener],
2022-06-21T23:49:10.9773405Z       [EventListener] => [EventListener]
2022-06-21T23:49:10.9773660Z     },
2022-06-21T23:49:10.9773913Z     _haveBlockListeners: false,
2022-06-21T23:49:10.9774196Z     _haveTxListeners: true,
2022-06-21T23:49:10.9774518Z     _haveChaincodeListeners: true,
2022-06-21T23:49:10.9775252Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:10.9779430Z     _currentEventer: Eventer {
2022-06-21T23:49:10.9780240Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:10.9780673Z       mspid: undefined,
2022-06-21T23:49:10.9781067Z       client: [Client],
2022-06-21T23:49:10.9781290Z       connected: true,
2022-06-21T23:49:10.9781532Z       connectAttempted: true,
2022-06-21T23:49:10.9781767Z       endpoint: [Endpoint],
2022-06-21T23:49:10.9782052Z       service: [ServiceClientImpl],
2022-06-21T23:49:10.9782334Z       serviceClass: [Function],
2022-06-21T23:49:10.9782613Z       type: 'Eventer',
2022-06-21T23:49:10.9782838Z       options: [Object],
2022-06-21T23:49:10.9783124Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:10.9783361Z       myCount: 13
2022-06-21T23:49:10.9783559Z     },
2022-06-21T23:49:10.9783769Z     _closeRunning: false,
2022-06-21T23:49:10.9784036Z     blockType: 'full',
2022-06-21T23:49:10.9784259Z     replay: true,
2022-06-21T23:49:10.9784490Z     startSpecified: true,
2022-06-21T23:49:10.9784702Z     myNumber: 10,
2022-06-21T23:49:10.9784918Z     inUse: true,
2022-06-21T23:49:10.9785372Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 c4 dc ab 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 39 32 36 30 64 39 35 38 61 ... 953 more bytes>,
2022-06-21T23:49:10.9786303Z     _signature: <Buffer 30 45 02 21 00 99 f5 16 8a 7d 2d 64 f9 54 30 2e 9b 60 af 15 aa 6a 31 c4 a9 31 75 76 62 3a 79 12 b6 1a f0 30 5b 02 20 69 99 6f b7 e6 5c 84 99 05 af 16 ... 21 more bytes>,
2022-06-21T23:49:10.9793508Z     currentStreamNumber: 10
2022-06-21T23:49:10.9793774Z   },
2022-06-21T23:49:10.9794014Z   endBlockReceived: false,
2022-06-21T23:49:10.9794269Z   chaincodeEvents: [
2022-06-21T23:49:10.9794526Z     ChaincodeEvent {
2022-06-21T23:49:10.9794916Z       chaincodeId: 'fabcar',
2022-06-21T23:49:10.9800375Z       transactionId: '270ee3cd750dee046585b8ed6ea3177acaac495adf8bf01d2b3612d08dae73a9',
2022-06-21T23:49:10.9800816Z       status: 'VALID',
2022-06-21T23:49:10.9801135Z       eventName: 'createCar',
2022-06-21T23:49:10.9801466Z       payload: <Buffer 53 61 76 61 6e 61>
2022-06-21T23:49:10.9801845Z     }
2022-06-21T23:49:10.9802065Z   ],
2022-06-21T23:49:10.9802706Z   blockNumber: Long { low: 6, high: 0, unsigned: true }
2022-06-21T23:49:10.9803119Z }
2022-06-21T23:49:10.9803555Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"Savana"}
2022-06-21T23:49:10.9804128Z Store event listener myFullTransactionListener results of {"transaction":"6"}
2022-06-21T23:49:10.9804664Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:49:10.9805027Z   eventService: EventService {
2022-06-21T23:49:10.9805339Z     type: 'EventService',
2022-06-21T23:49:10.9805667Z     name: 'myFullEventService',
2022-06-21T23:49:10.9805918Z     channel: Channel {
2022-06-21T23:49:10.9806174Z       type: 'Channel',
2022-06-21T23:49:10.9806461Z       name: 'basev2channel',
2022-06-21T23:49:10.9806694Z       client: [Client],
2022-06-21T23:49:10.9806901Z       endorsers: [Map],
2022-06-21T23:49:10.9807140Z       committers: [Map],
2022-06-21T23:49:10.9807368Z       msps: [Map]
2022-06-21T23:49:10.9807552Z     },
2022-06-21T23:49:10.9807854Z     lastBlockNumber: Long { low: 7, high: 0, unsigned: true },
2022-06-21T23:49:10.9808216Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:10.9808477Z     endBlock: null,
2022-06-21T23:49:10.9808689Z     _endBlockSeen: false,
2022-06-21T23:49:10.9808995Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:10.9809314Z       [EventListener] => [EventListener],
2022-06-21T23:49:10.9809601Z       [EventListener] => [EventListener]
2022-06-21T23:49:10.9809835Z     },
2022-06-21T23:49:10.9810076Z     _haveBlockListeners: false,
2022-06-21T23:49:10.9810315Z     _haveTxListeners: true,
2022-06-21T23:49:10.9810856Z     _haveChaincodeListeners: true,
2022-06-21T23:49:10.9811511Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:10.9811983Z     _currentEventer: Eventer {
2022-06-21T23:49:10.9812405Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:10.9812868Z       mspid: undefined,
2022-06-21T23:49:10.9813106Z       client: [Client],
2022-06-21T23:49:10.9813352Z       connected: true,
2022-06-21T23:49:10.9813617Z       connectAttempted: true,
2022-06-21T23:49:10.9813889Z       endpoint: [Endpoint],
2022-06-21T23:49:10.9826258Z       service: [ServiceClientImpl],
2022-06-21T23:49:10.9826617Z       serviceClass: [Function],
2022-06-21T23:49:10.9826977Z       type: 'Eventer',
2022-06-21T23:49:10.9829091Z       options: [Object],
2022-06-21T23:49:10.9830048Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:10.9830514Z       myCount: 13
2022-06-21T23:49:10.9831481Z     },
2022-06-21T23:49:10.9831720Z     _closeRunning: false,
2022-06-21T23:49:10.9832083Z     blockType: 'full',
2022-06-21T23:49:10.9832316Z     replay: true,
2022-06-21T23:49:10.9832570Z     startSpecified: true,
2022-06-21T23:49:10.9832827Z     myNumber: 10,
2022-06-21T23:49:10.9833043Z     inUse: true,
2022-06-21T23:49:10.9833551Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 c4 dc ab 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 39 32 36 30 64 39 35 38 61 ... 953 more bytes>,
2022-06-21T23:49:10.9834168Z     _signature: <Buffer 30 45 02 21 00 99 f5 16 8a 7d 2d 64 f9 54 30 2e 9b 60 af 15 aa 6a 31 c4 a9 31 75 76 62 3a 79 12 b6 1a f0 30 5b 02 20 69 99 6f b7 e6 5c 84 99 05 af 16 ... 21 more bytes>,
2022-06-21T23:49:10.9847231Z     currentStreamNumber: 10
2022-06-21T23:49:10.9847485Z   },
2022-06-21T23:49:10.9847732Z   endBlockReceived: false,
2022-06-21T23:49:10.9848003Z   chaincodeEvents: [
2022-06-21T23:49:10.9848245Z     ChaincodeEvent {
2022-06-21T23:49:10.9848695Z       chaincodeId: 'fabcar',
2022-06-21T23:49:10.9849416Z       transactionId: 'ddda9cb7f764420c7d11b775811d1b0a1672b3095dbab637a04eab5fd0dfa4db',
2022-06-21T23:49:10.9849837Z       status: 'VALID',
2022-06-21T23:49:10.9850138Z       eventName: 'createCar',
2022-06-21T23:49:10.9850689Z       payload: <Buffer 50 54 43 75 72 73 65 72>
2022-06-21T23:49:10.9850958Z     }
2022-06-21T23:49:10.9851143Z   ],
2022-06-21T23:49:10.9851684Z   blockNumber: Long { low: 7, high: 0, unsigned: true }
2022-06-21T23:49:10.9852218Z }
2022-06-21T23:49:10.9852682Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"PTCurser"}
2022-06-21T23:49:10.9870494Z Peer checkConnection test successfully
2022-06-21T23:49:10.9956553Z Peer checkConnection test successfully
2022-06-21T23:49:11.0122163Z     And I commit the endorsement request named replay1 as client fred on channel basev2channel
2022-06-21T23:49:11.0397445Z Eventer checkConnection test successfully
2022-06-21T23:49:11.0602865Z Orderer checkConnection test successfully {}
2022-06-21T23:49:11.6162465Z Store event listener myFullTransactionListener results of {"transaction":"7"}
2022-06-21T23:49:11.6175700Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:49:11.6176138Z   eventService: EventService {
2022-06-21T23:49:11.6176699Z     type: 'EventService',
2022-06-21T23:49:11.6177087Z     name: 'myFullEventService',
2022-06-21T23:49:11.6177376Z     channel: Channel {
2022-06-21T23:49:11.6177688Z       type: 'Channel',
2022-06-21T23:49:11.6177999Z       name: 'basev2channel',
2022-06-21T23:49:11.6178258Z       client: [Client],
2022-06-21T23:49:11.6178515Z       endorsers: [Map],
2022-06-21T23:49:11.6178756Z       committers: [Map],
2022-06-21T23:49:11.6179002Z       msps: [Map]
2022-06-21T23:49:11.6179225Z     },
2022-06-21T23:49:11.6179703Z     lastBlockNumber: Long { low: 8, high: 0, unsigned: true },
2022-06-21T23:49:11.6180145Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:11.6180433Z     endBlock: null,
2022-06-21T23:49:11.6180684Z     _endBlockSeen: false,
2022-06-21T23:49:11.6180993Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:11.6181337Z       [EventListener] => [EventListener],
2022-06-21T23:49:11.6181658Z       [EventListener] => [EventListener]
2022-06-21T23:49:11.6182055Z     },
2022-06-21T23:49:11.6182324Z     _haveBlockListeners: false,
2022-06-21T23:49:11.6183052Z     _haveTxListeners: true,
2022-06-21T23:49:11.6183355Z     _haveChaincodeListeners: true,
2022-06-21T23:49:11.6183677Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:11.6183977Z     _currentEventer: Eventer {
2022-06-21T23:49:11.6184369Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:11.6184645Z       mspid: undefined,
2022-06-21T23:49:11.6185072Z       client: [Client],
2022-06-21T23:49:11.6185302Z       connected: true,
2022-06-21T23:49:11.6185567Z       connectAttempted: true,
2022-06-21T23:49:11.6185839Z       endpoint: [Endpoint],
2022-06-21T23:49:11.6192278Z       service: [ServiceClientImpl],
2022-06-21T23:49:11.6192682Z       serviceClass: [Function],
2022-06-21T23:49:11.6193073Z       type: 'Eventer',
2022-06-21T23:49:11.6193334Z       options: [Object],
2022-06-21T23:49:11.6193639Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:11.6193924Z       myCount: 13
2022-06-21T23:49:11.6196261Z     },
2022-06-21T23:49:11.6196497Z     _closeRunning: false,
2022-06-21T23:49:11.6196877Z     blockType: 'full',
2022-06-21T23:49:11.6197124Z     replay: true,
2022-06-21T23:49:11.6197356Z     startSpecified: true,
2022-06-21T23:49:11.6197606Z     myNumber: 10,
2022-06-21T23:49:11.6197830Z     inUse: true,
2022-06-21T23:49:11.6198299Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 c4 dc ab 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 39 32 36 30 64 39 35 38 61 ... 953 more bytes>,
2022-06-21T23:49:11.6198892Z     _signature: <Buffer 30 45 02 21 00 99 f5 16 8a 7d 2d 64 f9 54 30 2e 9b 60 af 15 aa 6a 31 c4 a9 31 75 76 62 3a 79 12 b6 1a f0 30 5b 02 20 69 99 6f b7 e6 5c 84 99 05 af 16 ... 21 more bytes>,
2022-06-21T23:49:11.6199269Z     currentStreamNumber: 10
2022-06-21T23:49:11.6200711Z   },
2022-06-21T23:49:11.6200957Z   endBlockReceived: false,
2022-06-21T23:49:11.6201217Z   chaincodeEvents: [
2022-06-21T23:49:11.6201451Z     ChaincodeEvent {
2022-06-21T23:49:11.6201805Z       chaincodeId: 'fabcar',
2022-06-21T23:49:11.6202627Z       transactionId: '888bcb2eed4b9d4c5b06a9dda27ec2b13f8cccc1bc2f5e1ad1af3a067b7b5951',
2022-06-21T23:49:11.6203075Z       status: 'VALID',
2022-06-21T23:49:11.6203382Z       eventName: 'createCar',
2022-06-21T23:49:11.6203688Z       payload: <Buffer 46 6f 63 75 73>
2022-06-21T23:49:11.6203911Z     }
2022-06-21T23:49:11.6204105Z   ],
2022-06-21T23:49:11.6204413Z   blockNumber: Long { low: 8, high: 0, unsigned: true }
2022-06-21T23:49:11.6204693Z }
2022-06-21T23:49:11.6205330Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"Focus"}
2022-06-21T23:49:11.6206462Z Successfully received the transaction event for 888bcb2eed4b9d4c5b06a9dda27ec2b13f8cccc1bc2f5e1ad1af3a067b7b5951 with status of VALID in block number 8 {}
2022-06-21T23:49:11.6207343Z  - commitChannelRequest complete
2022-06-21T23:49:11.6207742Z  - commitChannelRequest finally
2022-06-21T23:49:11.6230891Z - disconnected all endpoints for client object fred and request replay1
2022-06-21T23:49:11.6234982Z     Then the event listener myFilteredBlockListener of myFilteredEventService has results matching {"block":"3"} as client fred
2022-06-21T23:49:11.6239232Z Results compare for eventListener myFilteredBlockListener
2022-06-21T23:49:11.6241976Z     Then the event listener myFilteredChaincodeListener of myFilteredEventService has results matching {"createCar":""} as client fred
2022-06-21T23:49:11.6250877Z Results compare for eventListener myFilteredChaincodeListener
2022-06-21T23:49:11.6251541Z     Then the event listener myFilteredTransactionListener of myFilteredEventService has results matching {"transaction":"5"} as client fred
2022-06-21T23:49:11.6255302Z Results compare for eventListener myFilteredTransactionListener
2022-06-21T23:49:11.6259521Z     Then the event listener myFullBlockListener of myFullEventService has results matching {"block":"4"} as client fred
2022-06-21T23:49:11.6260056Z Results compare for eventListener myFullBlockListener
2022-06-21T23:49:11.6264559Z     Then I wait for events from chaincode listener named myFullChaincodeListener with myFullEventService as client fred
2022-06-21T23:49:11.6269237Z     Then the event listener myFullChaincodeListener of myFullEventService has results matching {"createCar":"Focus"} as client fred
2022-06-21T23:49:11.6272466Z Results compare for eventListener myFullChaincodeListener
2022-06-21T23:49:11.6273041Z     Then the event listener myFullTransactionListener of myFullEventService has results matching {"transaction":"7"} as client fred
2022-06-21T23:49:11.6278655Z Results compare for eventListener myFullTransactionListener
2022-06-21T23:49:11.6279089Z     When I disconnect Event Service myFilteredEventService as client fred
2022-06-21T23:49:11.6287854Z     And I regisister a block listener named myRestartListener with myFilteredEventService for startBlock 1 and endBlock 6 as client fred
2022-06-21T23:49:11.6291109Z Register event listener myRestartListener
2022-06-21T23:49:11.6291708Z Registering a block event with startBlock 1 endBlock 6
2022-06-21T23:49:11.6296357Z     And I restart the event service myFilteredEventService as filtered blocks to start at block 0 and end at block 6 as client fred
2022-06-21T23:49:11.6574930Z     When I build a new endorsement request named myEventRequest for smart contract named fabcar with arguments [createCar,2008,Chrysler,PTCurser,white,Jones] as client fred on discovery channel basev2channel
2022-06-21T23:49:11.6643755Z Store block event listener myRestartListener results of {"block":"1"}
2022-06-21T23:49:11.6654635Z Store block event listener myRestartListener results of {"block":"2"}
2022-06-21T23:49:11.6663691Z Store block event listener myRestartListener results of {"block":"3"}
2022-06-21T23:49:11.6675577Z Store block event listener myRestartListener results of {"block":"4"}
2022-06-21T23:49:11.6683568Z Store block event listener myRestartListener results of {"block":"5"}
2022-06-21T23:49:11.6691926Z Store block event listener myRestartListener results of {"block":"6"}
2022-06-21T23:49:11.6696359Z Endblock indication received for myRestartListener
2022-06-21T23:49:11.6815331Z Peer checkConnection test successfully
2022-06-21T23:49:11.6923064Z Peer checkConnection test successfully
2022-06-21T23:49:11.7058835Z Peer peer0.org1.example.com:7051 has chaincode fabcar
2022-06-21T23:49:11.7059722Z Peer peer0.org2.example.com:8051 has chaincode fabcar
2022-06-21T23:49:11.7061891Z     And I commit the endorsement request named myEventRequest as client fred on channel basev2channel
2022-06-21T23:49:11.7264726Z Eventer checkConnection test successfully
2022-06-21T23:49:11.7418162Z Orderer checkConnection test successfully {}
2022-06-21T23:49:12.3081273Z Store event listener myFullTransactionListener results of {"transaction":"8"}
2022-06-21T23:49:12.3092605Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:49:12.3093258Z   eventService: EventService {
2022-06-21T23:49:12.3094100Z     type: 'EventService',
2022-06-21T23:49:12.3094565Z     name: 'myFullEventService',
2022-06-21T23:49:12.3094941Z     channel: Channel {
2022-06-21T23:49:12.3095325Z       type: 'Channel',
2022-06-21T23:49:12.3095746Z       name: 'basev2channel',
2022-06-21T23:49:12.3096080Z       client: [Client],
2022-06-21T23:49:12.3096402Z       endorsers: [Map],
2022-06-21T23:49:12.3097471Z       committers: [Map],
2022-06-21T23:49:12.3097815Z       msps: [Map]
2022-06-21T23:49:12.3098107Z     },
2022-06-21T23:49:12.3098513Z     lastBlockNumber: Long { low: 9, high: 0, unsigned: true },
2022-06-21T23:49:12.3098958Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:12.3099319Z     endBlock: null,
2022-06-21T23:49:12.3099640Z     _endBlockSeen: false,
2022-06-21T23:49:12.3100040Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:12.3100442Z       [EventListener] => [EventListener],
2022-06-21T23:49:12.3100837Z       [EventListener] => [EventListener]
2022-06-21T23:49:12.3101158Z     },
2022-06-21T23:49:12.3101479Z     _haveBlockListeners: false,
2022-06-21T23:49:12.3101829Z     _haveTxListeners: true,
2022-06-21T23:49:12.3102471Z     _haveChaincodeListeners: true,
2022-06-21T23:49:12.3102862Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:12.3103219Z     _currentEventer: Eventer {
2022-06-21T23:49:12.3103719Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:12.3104288Z       mspid: undefined,
2022-06-21T23:49:12.3104612Z       client: [Client],
2022-06-21T23:49:12.3104915Z       connected: true,
2022-06-21T23:49:12.3105246Z       connectAttempted: true,
2022-06-21T23:49:12.3105591Z       endpoint: [Endpoint],
2022-06-21T23:49:12.3105951Z       service: [ServiceClientImpl],
2022-06-21T23:49:12.3106328Z       serviceClass: [Function],
2022-06-21T23:49:12.3106721Z       type: 'Eventer',
2022-06-21T23:49:12.3108095Z       options: [Object],
2022-06-21T23:49:12.3108505Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:12.3108875Z       myCount: 13
2022-06-21T23:49:12.3109176Z     },
2022-06-21T23:49:12.3109519Z     _closeRunning: false,
2022-06-21T23:49:12.3109960Z     blockType: 'full',
2022-06-21T23:49:12.3110305Z     replay: true,
2022-06-21T23:49:12.3110795Z     startSpecified: true,
2022-06-21T23:49:12.3111089Z     myNumber: 10,
2022-06-21T23:49:12.3111372Z     inUse: true,
2022-06-21T23:49:12.3111901Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 c4 dc ab 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 39 32 36 30 64 39 35 38 61 ... 953 more bytes>,
2022-06-21T23:49:12.3112530Z     _signature: <Buffer 30 45 02 21 00 99 f5 16 8a 7d 2d 64 f9 54 30 2e 9b 60 af 15 aa 6a 31 c4 a9 31 75 76 62 3a 79 12 b6 1a f0 30 5b 02 20 69 99 6f b7 e6 5c 84 99 05 af 16 ... 21 more bytes>,
2022-06-21T23:49:12.3112947Z     currentStreamNumber: 10
2022-06-21T23:49:12.3113229Z   },
2022-06-21T23:49:12.3113521Z   endBlockReceived: false,
2022-06-21T23:49:12.3113836Z   chaincodeEvents: [
2022-06-21T23:49:12.3114123Z     ChaincodeEvent {
2022-06-21T23:49:12.3114500Z       chaincodeId: 'fabcar',
2022-06-21T23:49:12.3115130Z       transactionId: '342747ff59fd1a9bb68473777a37aeb17b88156d8e9bedadd9b2da4b9c358233',
2022-06-21T23:49:12.3115797Z       status: 'VALID',
2022-06-21T23:49:12.3116258Z       eventName: 'createCar',
2022-06-21T23:49:12.3116659Z       payload: <Buffer 50 54 43 75 72 73 65 72>
2022-06-21T23:49:12.3116950Z     }
2022-06-21T23:49:12.3117221Z   ],
2022-06-21T23:49:12.3117596Z   blockNumber: Long { low: 9, high: 0, unsigned: true }
2022-06-21T23:49:12.3117936Z }
2022-06-21T23:49:12.3118548Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"PTCurser"}
2022-06-21T23:49:12.3379801Z Successfully received the transaction event for 342747ff59fd1a9bb68473777a37aeb17b88156d8e9bedadd9b2da4b9c358233 with status of VALID in block number 9 {}
2022-06-21T23:49:12.3423232Z  - commitChannelRequest complete
2022-06-21T23:49:12.3451668Z  - commitChannelRequest finally
2022-06-21T23:49:12.3452385Z - disconnected all endpoints for client object fred and request myEventRequest
2022-06-21T23:49:12.3453010Z     Then the event listener myRestartListener of myFilteredEventService has results matching {"block":"6"} as client fred
2022-06-21T23:49:12.3453544Z Results compare for eventListener myRestartListener
2022-06-21T23:49:12.3453982Z     When I disconnect Event Service myFilteredEventService as client fred
2022-06-21T23:49:12.3454591Z     And I regisister a block listener named myRestartListener with myFilteredEventService for startBlock 1 and endBlock 6 as client fred
2022-06-21T23:49:12.3455102Z Register event listener myRestartListener
2022-06-21T23:49:12.3455520Z Registering a block event with startBlock 1 endBlock 6
2022-06-21T23:49:12.3456055Z     And I restart the event service myFilteredEventService as filtered blocks to start at block 0 and end at block 6 as client fred
2022-06-21T23:49:12.4031449Z     When I build a new endorsement request named myEventRequest for smart contract named fabcar with arguments [createCar,2008,Chrysler,PTCurser,white,Jones] as client fred on discovery channel basev2channel
2022-06-21T23:49:12.4341470Z Store block event listener myRestartListener results of {"block":"1"}
2022-06-21T23:49:12.4385352Z Store block event listener myRestartListener results of {"block":"2"}
2022-06-21T23:49:12.4391683Z Store block event listener myRestartListener results of {"block":"3"}
2022-06-21T23:49:12.4400053Z Store block event listener myRestartListener results of {"block":"4"}
2022-06-21T23:49:12.4408875Z Store block event listener myRestartListener results of {"block":"5"}
2022-06-21T23:49:12.4417297Z Store block event listener myRestartListener results of {"block":"6"}
2022-06-21T23:49:12.4523441Z Endblock indication received for myRestartListener
2022-06-21T23:49:12.4936266Z Peer checkConnection test successfully
2022-06-21T23:49:12.5193703Z Peer checkConnection test successfully
2022-06-21T23:49:12.5377984Z Peer peer0.org1.example.com:7051 has chaincode fabcar
2022-06-21T23:49:12.5379051Z Peer peer0.org2.example.com:8051 has chaincode fabcar
2022-06-21T23:49:12.5381938Z     And I commit the endorsement request named myEventRequest as client fred on channel basev2channel
2022-06-21T23:49:12.5626701Z Eventer checkConnection test successfully
2022-06-21T23:49:12.5934591Z Orderer checkConnection test successfully {}
2022-06-21T23:49:13.1441754Z Successfully received the transaction event for c87167432a52e631aefcf83ef386d9da6c8144c15de9685fd11c3595c44c96ca with status of VALID in block number 10 {}
2022-06-21T23:49:13.1444573Z  - commitChannelRequest complete
2022-06-21T23:49:13.1445234Z  - commitChannelRequest finally
2022-06-21T23:49:13.1459488Z - disconnected all endpoints for client object fred and request myEventRequest
2022-06-21T23:49:13.1467389Z     Then the event listener myRestartListener of myFilteredEventService has results matching {"block":"6"} as client fred
2022-06-21T23:49:13.1472852Z Results compare for eventListener myRestartListener
2022-06-21T23:49:13.1476736Z 
2022-06-21T23:49:13.1483464Z @client_only @gateway @fabric_merge
2022-06-21T23:49:13.1488250Z Feature: Configure Fabric using CLI and submit/evaluate using a network Gateway with discovery enabled using an organization that has no peers # test/ts-scenario/features/client_only.feature:8
2022-06-21T23:49:13.1488732Z 
2022-06-21T23:49:13.1492564Z   @client_only @gateway @fabric_merge
2022-06-21T23:49:13.1494568Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract # test/ts-scenario/features/client_only.feature:19
2022-06-21T23:49:13.1498403Z     Given I place a scenario start message CLIENT ONLY FEATURE
2022-06-21T23:49:13.1498848Z 
2022-06-21T23:49:13.1501043Z 
2022-06-21T23:49:13.1501290Z 
2022-06-21T23:49:13.1501865Z **********************************************************************************
2022-06-21T23:49:13.1502468Z **********************************************************************************
2022-06-21T23:49:13.1502988Z ****** CLIENT ONLY FEATURE Scenario 0 ******
2022-06-21T23:49:13.1503727Z **********************************************************************************
2022-06-21T23:49:13.1575455Z **********************************************************************************
2022-06-21T23:49:13.1575655Z 
2022-06-21T23:49:13.1575665Z 
2022-06-21T23:49:13.1575690Z 
2022-06-21T23:49:13.1575887Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:49:13.1576550Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:49:13.1576952Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:49:13.1577348Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:49:13.1577804Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:49:13.1578317Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:49:13.1579306Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:13.1580782Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:13.1804634Z Store event listener myFullTransactionListener results of {"transaction":"9"}
2022-06-21T23:49:13.1820368Z Chaincode listener event received for myFullChaincodeListener :: EventInfo {
2022-06-21T23:49:13.1821050Z   eventService: EventService {
2022-06-21T23:49:13.1822597Z     type: 'EventService',
2022-06-21T23:49:13.1823371Z     name: 'myFullEventService',
2022-06-21T23:49:13.1823944Z     channel: Channel {
2022-06-21T23:49:13.1826029Z       type: 'Channel',
2022-06-21T23:49:13.1826806Z       name: 'basev2channel',
2022-06-21T23:49:13.1827524Z       client: [Client],
2022-06-21T23:49:13.1827869Z       endorsers: [Map],
2022-06-21T23:49:13.1828117Z       committers: [Map],
2022-06-21T23:49:13.1828358Z       msps: [Map]
2022-06-21T23:49:13.1828554Z     },
2022-06-21T23:49:13.1828889Z     lastBlockNumber: Long { low: 10, high: 0, unsigned: true },
2022-06-21T23:49:13.1829294Z     startBlock: Long { low: 0, high: 0, unsigned: false },
2022-06-21T23:49:13.1829552Z     endBlock: null,
2022-06-21T23:49:13.1829791Z     _endBlockSeen: false,
2022-06-21T23:49:13.1830300Z     _eventListenerRegistrations: Map(2) {
2022-06-21T23:49:13.1830649Z       [EventListener] => [EventListener],
2022-06-21T23:49:13.1830962Z       [EventListener] => [EventListener]
2022-06-21T23:49:13.1831211Z     },
2022-06-21T23:49:13.1831644Z     _haveBlockListeners: false,
2022-06-21T23:49:13.1831912Z     _haveTxListeners: true,
2022-06-21T23:49:13.1832235Z     _haveChaincodeListeners: true,
2022-06-21T23:49:13.1832563Z     targets: [ [Eventer], [Eventer] ],
2022-06-21T23:49:13.1832856Z     _currentEventer: Eventer {
2022-06-21T23:49:13.1833704Z       name: 'peer0.org1.example.com',
2022-06-21T23:49:13.1833989Z       mspid: undefined,
2022-06-21T23:49:13.1834220Z       client: [Client],
2022-06-21T23:49:13.1834465Z       connected: true,
2022-06-21T23:49:13.1834736Z       connectAttempted: true,
2022-06-21T23:49:13.1835278Z       endpoint: [Endpoint],
2022-06-21T23:49:13.1835626Z       service: [ServiceClientImpl],
2022-06-21T23:49:13.1835935Z       serviceClass: [Function],
2022-06-21T23:49:13.1836426Z       type: 'Eventer',
2022-06-21T23:49:13.1836654Z       options: [Object],
2022-06-21T23:49:13.1836964Z       stream: [ClientDuplexStreamImpl],
2022-06-21T23:49:13.1837234Z       myCount: 13
2022-06-21T23:49:13.1837432Z     },
2022-06-21T23:49:13.1837654Z     _closeRunning: false,
2022-06-21T23:49:13.1838111Z     blockType: 'full',
2022-06-21T23:49:13.1838325Z     replay: true,
2022-06-21T23:49:13.1838563Z     startSpecified: true,
2022-06-21T23:49:13.1838805Z     myNumber: 10,
2022-06-21T23:49:13.1839005Z     inUse: true,
2022-06-21T23:49:13.1839467Z     _payload: <Buffer 0a d0 07 0a 8b 01 08 05 10 01 1a 0c 08 f6 b1 c9 95 06 10 c0 c4 dc ab 03 22 0d 62 61 73 65 76 32 63 68 61 6e 6e 65 6c 2a 40 39 32 36 30 64 39 35 38 61 ... 953 more bytes>,
2022-06-21T23:49:13.1840045Z     _signature: <Buffer 30 45 02 21 00 99 f5 16 8a 7d 2d 64 f9 54 30 2e 9b 60 af 15 aa 6a 31 c4 a9 31 75 76 62 3a 79 12 b6 1a f0 30 5b 02 20 69 99 6f b7 e6 5c 84 99 05 af 16 ... 21 more bytes>,
2022-06-21T23:49:13.1840393Z     currentStreamNumber: 10
2022-06-21T23:49:13.1840610Z   },
2022-06-21T23:49:13.1840832Z   endBlockReceived: false,
2022-06-21T23:49:13.1841081Z   chaincodeEvents: [
2022-06-21T23:49:13.1841303Z     ChaincodeEvent {
2022-06-21T23:49:13.1841606Z       chaincodeId: 'fabcar',
2022-06-21T23:49:13.1842148Z       transactionId: 'c87167432a52e631aefcf83ef386d9da6c8144c15de9685fd11c3595c44c96ca',
2022-06-21T23:49:13.1842511Z       status: 'VALID',
2022-06-21T23:49:13.1842810Z       eventName: 'createCar',
2022-06-21T23:49:13.1843111Z       payload: <Buffer 50 54 43 75 72 73 65 72>
2022-06-21T23:49:13.1843345Z     }
2022-06-21T23:49:13.1843518Z   ],
2022-06-21T23:49:13.1843815Z   blockNumber: Long { low: 10, high: 0, unsigned: true }
2022-06-21T23:49:13.1844086Z }
2022-06-21T23:49:13.1844703Z Store chaincode event listener myFullChaincodeListener results of {"createCar":"PTCurser"}
2022-06-21T23:49:13.3293845Z Channel names ==>Channels peers has joined: 
2022-06-21T23:49:13.3294356Z basev2channel
2022-06-21T23:49:13.3294707Z baseapichannel
2022-06-21T23:49:13.3295115Z <== have been joined by organization org1
2022-06-21T23:49:13.3295616Z Attempting to create channel discoverychannel of type tls
2022-06-21T23:49:13.3297357Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c discoverychannel -f /etc/hyperledger/configtx/channel-config/discoverychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:13.3299590Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c discoverychannel -f /etc/hyperledger/configtx/channel-config/discoverychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:18.5434015Z Channel discoverychannel has been created
2022-06-21T23:49:18.5435155Z Attempting to join organization org1 to channel discoverychannel of type tls
2022-06-21T23:49:18.5436645Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:18.5438621Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:23.8768353Z Channel discoverychannel has been joined by organization org1
2022-06-21T23:49:23.8769979Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:49:23.8772039Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:23.8773779Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:24.0492869Z Channel names ==>Channels peers has joined: 
2022-06-21T23:49:24.0493659Z baseapichannel
2022-06-21T23:49:24.0494241Z basev2channel
2022-06-21T23:49:24.0495021Z <== have been joined by organization org2
2022-06-21T23:49:24.0495956Z Attempting to join organization org2 to channel discoverychannel of type tls
2022-06-21T23:49:24.0497742Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:24.0500826Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/discoverychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:29.3767724Z Channel discoverychannel has been joined by organization org2
2022-06-21T23:49:29.3774235Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:49:29.3778423Z Using default CLI container org1 to update channel discoverychannel of type tls with updateTx discoverychannel-anchor.tx
2022-06-21T23:49:29.3780164Z  -- runShellCommand ==>docker exec org1_cli peer channel update -o orderer.example.com:7050 -c discoverychannel -f /etc/hyperledger/configtx/channel-config/discoverychannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:29.3783262Z SCENARIO CMD: docker exec org1_cli peer channel update -o orderer.example.com:7050 -c discoverychannel -f /etc/hyperledger/configtx/channel-config/discoverychannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:34.5552214Z Channel discoverychannel has been updated
2022-06-21T23:49:34.5556338Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:49:34.5589455Z 
2022-06-21T23:49:34.5590179Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:49:34.5590639Z 
2022-06-21T23:49:34.5591256Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:49:34.5591926Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:49:34.5593090Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:49:34.5594618Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:49:34.7295513Z Smart contract with name fabcar is not committed for organization org1 using the CLI
2022-06-21T23:49:34.7296271Z Smart contract fabcar at version 1.0.0 is not committed on channel discoverychannel as fabcar 
2022-06-21T23:49:34.7296544Z 
2022-06-21T23:49:34.7309210Z  -- Lifecycle deploy step two - package Smart contract fabcar
2022-06-21T23:49:34.7313491Z Attempting lifecyle package of smart contract fabcar with label fabcar-discoverychannel for organization org1 using the CLI
2022-06-21T23:49:34.7314812Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-discoverychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:49:34.7315990Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-discoverychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:49:39.8940854Z Smart contract fabcar with label fabcar-discoverychannel has been packaged for organization org1 using the CLI
2022-06-21T23:49:39.8941712Z Attempting lifecyle package of smart contract fabcar with label fabcar-discoverychannel for organization org2 using the CLI
2022-06-21T23:49:39.8942661Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-discoverychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:49:39.8943983Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-discoverychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:49:45.0869495Z Smart contract fabcar with label fabcar-discoverychannel has been packaged for organization org2 using the CLI
2022-06-21T23:49:45.0869814Z 
2022-06-21T23:49:45.0870104Z  -- Lifecycle deploy step three - install Smart contract fabcar
2022-06-21T23:49:45.0870633Z Attempting lifecycle install of smart contract package fabcar for organization org1 using the CLI
2022-06-21T23:49:45.0871296Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:49:45.0872011Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:50:06.1692701Z Smart contract package fabcar has been installed for organization org1 using the CLI
2022-06-21T23:50:06.1693736Z Smart contract fabcar at version 1.0.0 has been installed on organization Org1 
2022-06-21T23:50:06.1738372Z Attempting lifecycle install of smart contract package fabcar for organization org2 using the CLI
2022-06-21T23:50:06.1739433Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:50:06.1740203Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:50:27.1658458Z Smart contract package fabcar has been installed for organization org2 using the CLI
2022-06-21T23:50:27.1659057Z Smart contract fabcar at version 1.0.0 has been installed on organization Org2 
2022-06-21T23:50:27.1659304Z 
2022-06-21T23:50:27.1659847Z  -- Lifecycle deploy step four - approve Smart contract fabcar
2022-06-21T23:50:27.1660635Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:50:27.1661208Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:50:27.3494195Z Attempting lifecycle approve of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:50:27.3499730Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID discoverychannel --name fabcar --version 1.0.0 --package-id fabcar-discoverychannel:e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:27.3502906Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID discoverychannel --name fabcar --version 1.0.0 --package-id fabcar-discoverychannel:e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:33.2542059Z Smart contract with reference fabcar has been approved for organization org1 using the CLI
2022-06-21T23:50:33.2542634Z Smart contract fabcar at version 1.0.0 has been approved on organization Org1 
2022-06-21T23:50:33.2543473Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:50:33.2544202Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:50:33.4418249Z Attempting lifecycle approve of smart contract with reference fabcar for organization org2 using the CLI
2022-06-21T23:50:33.4429808Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID discoverychannel --name fabcar --version 1.0.0 --package-id fabcar-discoverychannel:e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:33.4433105Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID discoverychannel --name fabcar --version 1.0.0 --package-id fabcar-discoverychannel:e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:39.3537695Z Smart contract with reference fabcar has been approved for organization org2 using the CLI
2022-06-21T23:50:39.3538851Z Smart contract fabcar at version 1.0.0 has been approved on organization Org2 
2022-06-21T23:50:44.3571273Z 
2022-06-21T23:50:44.3572484Z  -- Lifecycle deploy step five (final) - commit Smart contract fabcar
2022-06-21T23:50:44.3621131Z Attempting lifecycle commit of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:50:44.3624122Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID discoverychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:44.3628500Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID discoverychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:50.2569818Z Smart contract with reference fabcar has been committed for organization org1 using the CLI
2022-06-21T23:50:50.2574939Z     And I have a file backed gateway named myClientOnlyGateway with discovery set to true for user User1 in organization Org3 using the connection profile named ccp-client-only.json
2022-06-21T23:50:50.2579254Z Creating new Gateway named myClientOnlyGateway
2022-06-21T23:50:50.2594985Z Creating wallet of type file
2022-06-21T23:50:50.2616996Z Will build existing Identity User1@Org3
2022-06-21T23:50:50.2619943Z Adding identity for User1@Org3 to wallet
2022-06-21T23:50:50.2633621Z fabricCAEndpoint https://localhost:9054 will be used for TLS certificate
2022-06-21T23:50:50.5520214Z Gateway myClientOnlyGateway connected
2022-06-21T23:50:50.5521486Z     When I use the discovery gateway named myClientOnlyGateway to submit a transaction with args [createCar,1001,Ariel,Atom,red,Nick] for contract fabcar instantiated on channel discoverychannel using collection badbad
2022-06-21T23:50:50.5527036Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:50.6016565Z  -- adding a discovery interest colletion name to the contrace badbad
2022-06-21T23:50:50.6244057Z 
2022-06-21T23:50:50.6245660Z  --- in gateway transaction: Error: DiscoveryService: fabcar error: failed constructing descriptor for chaincodes:<name:"fabcar" collection_names:"badbad" > 
2022-06-21T23:50:50.6246230Z 
2022-06-21T23:50:50.6249706Z     Then The gateway named myClientOnlyGateway has a error type response containing failed constructing descriptor
2022-06-21T23:50:50.6254700Z Comparing gatewayObj.result.response Error: DiscoveryService: fabcar error: failed constructing descriptor for chaincodes:<name:"fabcar" collection_names:"badbad" >  to msg failed constructing descriptor
2022-06-21T23:50:50.6256216Z     When I use the discovery gateway named myClientOnlyGateway to submit a transaction with args [createCar,1001,Ariel,Atom,red,Nick] for contract fabcar instantiated on channel discoverychannel using collection collectionFabcar
2022-06-21T23:50:50.6260865Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:50.6261824Z  -- adding a discovery interest colletion name to the contrace collectionFabcar
2022-06-21T23:50:51.3955125Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:51.3960883Z     Then The gateway named myClientOnlyGateway has a submit type response
2022-06-21T23:50:51.3975193Z     When I use the gateway named myClientOnlyGateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:51.3990941Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:51.4223559Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}]
2022-06-21T23:50:51.4227740Z     Then The gateway named myClientOnlyGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:50:51.4232463Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"} to msg {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:50:51.4235968Z 
2022-06-21T23:50:51.4240518Z   @client_only @gateway @fabric_merge
2022-06-21T23:50:51.4244973Z   Scenario: Using a Gateway I recieve useful error messages when I submit or evaulate invalid transactions # test/ts-scenario/features/client_only.feature:27
2022-06-21T23:50:51.4249638Z     Given I place a scenario start message CLIENT ONLY FEATURE
2022-06-21T23:50:51.4253177Z 
2022-06-21T23:50:51.4253188Z 
2022-06-21T23:50:51.4253195Z 
2022-06-21T23:50:51.4253679Z **********************************************************************************
2022-06-21T23:50:51.4254099Z **********************************************************************************
2022-06-21T23:50:51.4254439Z ****** CLIENT ONLY FEATURE Scenario 1 ******
2022-06-21T23:50:51.4255214Z **********************************************************************************
2022-06-21T23:50:51.4255916Z **********************************************************************************
2022-06-21T23:50:51.4256268Z 
2022-06-21T23:50:51.4256276Z 
2022-06-21T23:50:51.4256284Z 
2022-06-21T23:50:51.4261702Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:51.4265143Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:51.4265763Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:51.4266500Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:51.4272183Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:51.4276515Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:51.4277842Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:51.4279353Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:51.6095344Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:51.6096185Z baseapichannel
2022-06-21T23:50:51.6096576Z basev2channel
2022-06-21T23:50:51.6096912Z discoverychannel
2022-06-21T23:50:51.6097419Z <== have been joined by organization org1
2022-06-21T23:50:51.6098011Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:51.6098451Z baseapichannel
2022-06-21T23:50:51.6098789Z basev2channel
2022-06-21T23:50:51.6099115Z discoverychannel
2022-06-21T23:50:51.6099433Z <==
2022-06-21T23:50:51.6099939Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:51.6101239Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:51.6103180Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:51.7813698Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:51.7814550Z baseapichannel
2022-06-21T23:50:51.7815051Z basev2channel
2022-06-21T23:50:51.7815499Z discoverychannel
2022-06-21T23:50:51.7815954Z <== have been joined by organization org2
2022-06-21T23:50:51.7816745Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:51.7817578Z baseapichannel
2022-06-21T23:50:51.7818025Z basev2channel
2022-06-21T23:50:51.7818466Z discoverychannel
2022-06-21T23:50:51.7818800Z <==
2022-06-21T23:50:51.7820247Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:51.7821237Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:51.7822972Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:51.7826837Z 
2022-06-21T23:50:51.7827576Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:51.7830063Z 
2022-06-21T23:50:51.7830899Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:51.7833909Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:51.7839079Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:51.7844155Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:51.9874774Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:51.9875995Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:51.9935520Z     And I have a file backed gateway named myClientOnlyGateway with discovery set to true for user User1 in organization Org3 using the connection profile named ccp-client-only.json
2022-06-21T23:50:51.9936153Z Gateway named myClientOnlyGateway already exists
2022-06-21T23:50:51.9936876Z     When I use the gateway named myClientOnlyGateway to submit a transaction with args [noSuchSubmitTransaction,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:51.9937489Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:52.0293671Z 
2022-06-21T23:50:52.0294592Z     Then The gateway named myClientOnlyGateway has a error type response containing function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:52.0295614Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:50:52.0298780Z     peer=peer0.org1.example.com:7051, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction to msg function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:52.0300447Z     When I use the gateway named myClientOnlyGateway to submit a transaction with args [createCar,9,Ford] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:52.0302262Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:50:52.0303324Z     peer=peer0.org1.example.com:7051, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:52.0304033Z 
2022-06-21T23:50:52.0304307Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:52.0531037Z 
2022-06-21T23:50:52.0533219Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:50:52.0534026Z     peer=peer0.org1.example.com:7051, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:50:52.0534388Z 
2022-06-21T23:50:52.0536581Z     Then The gateway named myClientOnlyGateway has a error type response containing No valid responses from any peers
2022-06-21T23:50:52.0538759Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:50:52.0540449Z     peer=peer0.org1.example.com:7051, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied to msg No valid responses from any peers
2022-06-21T23:50:52.0543449Z     When I use the gateway named myClientOnlyGateway to evaluate a transaction with args [noSuchEvauateTransaction,1001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:52.0546099Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:52.0711697Z 
2022-06-21T23:50:52.0713350Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:52.0714056Z 
2022-06-21T23:50:52.0720308Z     Then The gateway named myClientOnlyGateway has a error type response containing You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:52.0730971Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvauateTransaction to msg You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:52.0738438Z     When I use the gateway named myClientOnlyGateway to evaluate a transaction with args [queryCar,because,I,said,so] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:52.0744859Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:52.0904809Z 
2022-06-21T23:50:52.0906707Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:52.0907399Z 
2022-06-21T23:50:52.0911030Z     Then The gateway named myClientOnlyGateway has a error type response containing Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:52.0912408Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied to msg Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:52.0920020Z 
2022-06-21T23:50:52.0956678Z   @client_only @gateway @fabric_merge
2022-06-21T23:50:52.0961405Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/client_only.feature:37
2022-06-21T23:50:52.0962118Z     Given I place a scenario start message CLIENT ONLY FEATURE
2022-06-21T23:50:52.0962342Z 
2022-06-21T23:50:52.0962351Z 
2022-06-21T23:50:52.0962360Z 
2022-06-21T23:50:52.0962814Z **********************************************************************************
2022-06-21T23:50:52.0963416Z **********************************************************************************
2022-06-21T23:50:52.0963841Z ****** CLIENT ONLY FEATURE Scenario 2 ******
2022-06-21T23:50:52.0964438Z **********************************************************************************
2022-06-21T23:50:52.0966435Z **********************************************************************************
2022-06-21T23:50:52.0966638Z 
2022-06-21T23:50:52.0966647Z 
2022-06-21T23:50:52.0966951Z 
2022-06-21T23:50:52.0967198Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:52.0967626Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:52.0968041Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:52.0968464Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:52.0968964Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:52.0969518Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:52.0970776Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:52.0972052Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:52.2733429Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:52.2734268Z discoverychannel
2022-06-21T23:50:52.2735366Z baseapichannel
2022-06-21T23:50:52.2736011Z basev2channel
2022-06-21T23:50:52.2736862Z <== have been joined by organization org1
2022-06-21T23:50:52.2737845Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:52.2738847Z discoverychannel
2022-06-21T23:50:52.2740573Z baseapichannel
2022-06-21T23:50:52.2741384Z basev2channel
2022-06-21T23:50:52.2742397Z <==
2022-06-21T23:50:52.2746027Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:52.2747360Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:52.2748754Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:52.4501379Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:52.4502456Z baseapichannel
2022-06-21T23:50:52.4503031Z basev2channel
2022-06-21T23:50:52.4505290Z discoverychannel
2022-06-21T23:50:52.4508848Z <== have been joined by organization org2
2022-06-21T23:50:52.4512425Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:52.4513698Z baseapichannel
2022-06-21T23:50:52.4514294Z basev2channel
2022-06-21T23:50:52.4514813Z discoverychannel
2022-06-21T23:50:52.4515386Z <==
2022-06-21T23:50:52.4516727Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:52.4517880Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:52.4519075Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:52.4519665Z 
2022-06-21T23:50:52.4521485Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:52.4521816Z 
2022-06-21T23:50:52.4523268Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:52.4523965Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:52.4525358Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:52.4588837Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:52.6414673Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:52.6415916Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:52.6417559Z     And I have a file backed gateway named myClientOnlyGateway with discovery set to true for user User1 in organization Org3 using the connection profile named ccp-client-only.json
2022-06-21T23:50:52.6418587Z Gateway named myClientOnlyGateway already exists
2022-06-21T23:50:52.6419605Z     When I modify myClientOnlyGateway to submit a transaction with transient data using args [getTransient,value1,value2] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:52.6420686Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:53.2191773Z Successfully performed submit transaction [getTransient] with transient data with result of [{"key0":"value1","key1":"value2"}]
2022-06-21T23:50:53.2194327Z     Then The gateway named myClientOnlyGateway has a submit type response matching {"key0":"value1","key1":"value2"}
2022-06-21T23:50:53.2198476Z Comparing gatewayObj.result.response {"key0":"value1","key1":"value2"} to msg {"key0":"value1","key1":"value2"}
2022-06-21T23:50:53.2211279Z     When I modify myClientOnlyGateway to evaluate a transaction with transient data using args [getTransient,valueA,valueB] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:53.2216568Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:53.2389591Z Successfully performed evaluate transaction [getTransient] with transient data with result of [{"key0":"valueA","key1":"valueB"}]
2022-06-21T23:50:53.2395105Z     Then The gateway named myClientOnlyGateway has a evaluate type response matching {"key0":"valueA","key1":"valueB"}
2022-06-21T23:50:53.2398174Z Comparing gatewayObj.result.response {"key0":"valueA","key1":"valueB"} to msg {"key0":"valueA","key1":"valueB"}
2022-06-21T23:50:53.2399252Z 
2022-06-21T23:50:53.2404688Z   @client_only @gateway @fabric_merge
2022-06-21T23:50:53.2407388Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract with specific organizations # test/ts-scenario/features/client_only.feature:43
2022-06-21T23:50:53.2409581Z     Given I place a scenario start message CLIENT ONLY FEATURE
2022-06-21T23:50:53.2410018Z 
2022-06-21T23:50:53.2410656Z 
2022-06-21T23:50:53.2414869Z 
2022-06-21T23:50:53.2415419Z **********************************************************************************
2022-06-21T23:50:53.2416356Z **********************************************************************************
2022-06-21T23:50:53.2416948Z ****** CLIENT ONLY FEATURE Scenario 3 ******
2022-06-21T23:50:53.2417521Z **********************************************************************************
2022-06-21T23:50:53.2418099Z **********************************************************************************
2022-06-21T23:50:53.2418581Z 
2022-06-21T23:50:53.2421018Z 
2022-06-21T23:50:53.2421141Z 
2022-06-21T23:50:53.2427416Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:53.2428253Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:53.2428849Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:53.2429420Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:53.2430338Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:53.2432991Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:53.2434328Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:53.2436088Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:53.4051783Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:53.4052176Z baseapichannel
2022-06-21T23:50:53.4052440Z basev2channel
2022-06-21T23:50:53.4052677Z discoverychannel
2022-06-21T23:50:53.4053039Z <== have been joined by organization org1
2022-06-21T23:50:53.4053544Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:53.4053890Z baseapichannel
2022-06-21T23:50:53.4054115Z basev2channel
2022-06-21T23:50:53.4054357Z discoverychannel
2022-06-21T23:50:53.4054592Z <==
2022-06-21T23:50:53.4055008Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:53.4056199Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:53.4059397Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:53.5863201Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:53.5864071Z discoverychannel
2022-06-21T23:50:53.5864445Z baseapichannel
2022-06-21T23:50:53.5864778Z basev2channel
2022-06-21T23:50:53.5865225Z <== have been joined by organization org2
2022-06-21T23:50:53.5866679Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:53.5867161Z discoverychannel
2022-06-21T23:50:53.5867512Z baseapichannel
2022-06-21T23:50:53.5867835Z basev2channel
2022-06-21T23:50:53.5868153Z <==
2022-06-21T23:50:53.5869782Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:53.5870629Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:53.5872677Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:53.5873886Z 
2022-06-21T23:50:53.5874343Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:53.5874665Z 
2022-06-21T23:50:53.5875148Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:53.5875908Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:53.5877291Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:53.5879117Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:53.7769733Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:53.7774699Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:53.7778249Z     And I have a file backed gateway named myClientOnlyGateway with discovery set to true for user User1 in organization Org3 using the connection profile named ccp-client-only.json
2022-06-21T23:50:53.7780500Z Gateway named myClientOnlyGateway already exists
2022-06-21T23:50:53.7782269Z     When I use the discovery gateway named myClientOnlyGateway to submit a transaction with args [createCar,2001,Ford,F350,red,Sam] for contract fabcar instantiated on channel discoverychannel using requiredOrgs ["Org1MSP","Org2MSP"]
2022-06-21T23:50:53.7784934Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:54.4037412Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:54.4042330Z     Then The gateway named myClientOnlyGateway has a submit type response
2022-06-21T23:50:54.4049046Z     When I use the gateway named myClientOnlyGateway to evaluate a transaction with args [queryCar,2001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:54.4051810Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:54.4277114Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}]
2022-06-21T23:50:54.4279163Z     Then The gateway named myClientOnlyGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}
2022-06-21T23:50:54.4283146Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"} to msg {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}
2022-06-21T23:50:54.4284673Z 
2022-06-21T23:50:54.4285250Z @discovery @gateway @fabric_merge
2022-06-21T23:50:54.4287204Z Feature: Configure Fabric using CLI and submit/evaluate using a network Gateway with discovery enabled # test/ts-scenario/features/discovery.feature:8
2022-06-21T23:50:54.4287821Z 
2022-06-21T23:50:54.4288301Z   @discovery @gateway @fabric_merge
2022-06-21T23:50:54.4290625Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract # test/ts-scenario/features/discovery.feature:19
2022-06-21T23:50:54.4293990Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:50:54.4294396Z 
2022-06-21T23:50:54.4295114Z 
2022-06-21T23:50:54.4295288Z 
2022-06-21T23:50:54.4296072Z **********************************************************************************
2022-06-21T23:50:54.4296649Z **********************************************************************************
2022-06-21T23:50:54.4297154Z ****** DISCOVERY FEATURE Scenario 0 ******
2022-06-21T23:50:54.4297830Z **********************************************************************************
2022-06-21T23:50:54.4298784Z **********************************************************************************
2022-06-21T23:50:54.4299509Z 
2022-06-21T23:50:54.4299874Z 
2022-06-21T23:50:54.4300326Z 
2022-06-21T23:50:54.4303520Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:54.4304079Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:54.4304708Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:54.4305508Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:54.4308804Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:54.4309570Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:54.4313837Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:54.4315314Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:54.6004125Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:54.6004927Z baseapichannel
2022-06-21T23:50:54.6005479Z basev2channel
2022-06-21T23:50:54.6007328Z discoverychannel
2022-06-21T23:50:54.6008024Z <== have been joined by organization org1
2022-06-21T23:50:54.6008951Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:54.6009513Z baseapichannel
2022-06-21T23:50:54.6010046Z basev2channel
2022-06-21T23:50:54.6010866Z discoverychannel
2022-06-21T23:50:54.6012231Z <==
2022-06-21T23:50:54.6012885Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:54.6014426Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:54.6016680Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:54.7793527Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:54.7794286Z baseapichannel
2022-06-21T23:50:54.7794827Z basev2channel
2022-06-21T23:50:54.7795448Z discoverychannel
2022-06-21T23:50:54.7795982Z <== have been joined by organization org2
2022-06-21T23:50:54.7796626Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:54.7797160Z baseapichannel
2022-06-21T23:50:54.7797696Z basev2channel
2022-06-21T23:50:54.7798746Z discoverychannel
2022-06-21T23:50:54.7799141Z <==
2022-06-21T23:50:54.7804420Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:54.7805192Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:54.7806256Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:54.7806764Z 
2022-06-21T23:50:54.7807581Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:54.7808124Z 
2022-06-21T23:50:54.7812369Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:54.7813930Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:54.7815485Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:54.7817728Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:55.0200632Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:55.0202831Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:55.0209646Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:50:55.0213808Z Creating new Gateway named myDiscoveryGateway
2022-06-21T23:50:55.0225478Z Creating wallet of type file
2022-06-21T23:50:55.0240628Z Will build existing Identity User1@Org1
2022-06-21T23:50:55.0242442Z Adding identity for User1@Org1 to wallet
2022-06-21T23:50:55.0253580Z fabricCAEndpoint https://localhost:7054 will be used for TLS certificate
2022-06-21T23:50:55.3160970Z Gateway myDiscoveryGateway connected
2022-06-21T23:50:55.3166735Z     When I use the discovery gateway named myDiscoveryGateway to submit a transaction with args [createCar,1001,Ariel,Atom,red,Nick] for contract fabcar instantiated on channel discoverychannel using collection badbad
2022-06-21T23:50:55.3168332Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:55.3390533Z  -- adding a discovery interest colletion name to the contrace badbad
2022-06-21T23:50:55.3554651Z 
2022-06-21T23:50:55.3556945Z  --- in gateway transaction: Error: DiscoveryService: fabcar error: failed constructing descriptor for chaincodes:<name:"fabcar" collection_names:"badbad" > 
2022-06-21T23:50:55.3558300Z 
2022-06-21T23:50:55.3560200Z     Then The gateway named myDiscoveryGateway has a error type response containing failed constructing descriptor
2022-06-21T23:50:55.3561694Z Comparing gatewayObj.result.response Error: DiscoveryService: fabcar error: failed constructing descriptor for chaincodes:<name:"fabcar" collection_names:"badbad" >  to msg failed constructing descriptor
2022-06-21T23:50:55.3565243Z     When I use the discovery gateway named myDiscoveryGateway to submit a transaction with args [createCar,1001,Ariel,Atom,red,Nick] for contract fabcar instantiated on channel discoverychannel using collection collectionFabcar
2022-06-21T23:50:55.3566937Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:55.3569688Z  -- adding a discovery interest colletion name to the contrace collectionFabcar
2022-06-21T23:50:55.9651430Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:55.9658562Z     Then The gateway named myDiscoveryGateway has a submit type response
2022-06-21T23:50:55.9667325Z     When I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:55.9672152Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:55.9889520Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}]
2022-06-21T23:50:55.9896999Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:50:55.9902731Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"} to msg {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:50:55.9907794Z 
2022-06-21T23:50:55.9912729Z   @discovery @gateway @fabric_merge
2022-06-21T23:50:55.9933372Z   Scenario: Using a Gateway I recieve useful error messages when I submit or evaulate invalid transactions # test/ts-scenario/features/discovery.feature:27
2022-06-21T23:50:55.9933901Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:50:55.9934118Z 
2022-06-21T23:50:55.9935089Z 
2022-06-21T23:50:55.9935102Z 
2022-06-21T23:50:55.9936338Z **********************************************************************************
2022-06-21T23:50:55.9936779Z **********************************************************************************
2022-06-21T23:50:55.9937120Z ****** DISCOVERY FEATURE Scenario 1 ******
2022-06-21T23:50:55.9937493Z **********************************************************************************
2022-06-21T23:50:55.9937889Z **********************************************************************************
2022-06-21T23:50:55.9938051Z 
2022-06-21T23:50:55.9938059Z 
2022-06-21T23:50:55.9938067Z 
2022-06-21T23:50:55.9938251Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:55.9938634Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:55.9939028Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:55.9939390Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:55.9939856Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:55.9940349Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:55.9941445Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:55.9942585Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:56.1734282Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:56.1735490Z basev2channel
2022-06-21T23:50:56.1736026Z discoverychannel
2022-06-21T23:50:56.1736463Z baseapichannel
2022-06-21T23:50:56.1737003Z <== have been joined by organization org1
2022-06-21T23:50:56.1740049Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:56.1741762Z basev2channel
2022-06-21T23:50:56.1742097Z discoverychannel
2022-06-21T23:50:56.1742426Z baseapichannel
2022-06-21T23:50:56.1742641Z <==
2022-06-21T23:50:56.1743064Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:56.1744260Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:56.1745485Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:56.3859682Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:56.3860547Z discoverychannel
2022-06-21T23:50:56.3865747Z baseapichannel
2022-06-21T23:50:56.3866357Z basev2channel
2022-06-21T23:50:56.3867327Z <== have been joined by organization org2
2022-06-21T23:50:56.3868086Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:56.3868770Z discoverychannel
2022-06-21T23:50:56.3869294Z baseapichannel
2022-06-21T23:50:56.3870187Z basev2channel
2022-06-21T23:50:56.3870599Z <==
2022-06-21T23:50:56.3871455Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:56.3872170Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:56.3873113Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:56.3873480Z 
2022-06-21T23:50:56.3873748Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:56.3873941Z 
2022-06-21T23:50:56.3874292Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:56.3875213Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:56.3876404Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:56.3878109Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:56.6063575Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:56.6064591Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:56.6067175Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:50:56.6091495Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:50:56.6092462Z     When I use the gateway named myDiscoveryGateway to submit a transaction with args [noSuchSubmitTransaction,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:56.6093259Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:56.6321697Z 
2022-06-21T23:50:56.6322634Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:50:56.6328042Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:56.6328467Z 
2022-06-21T23:50:56.6329068Z     Then The gateway named myDiscoveryGateway has a error type response containing function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:56.6334904Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:50:56.6336339Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction to msg function that does not exist: noSuchSubmitTransaction
2022-06-21T23:50:56.6342751Z     When I use the gateway named myDiscoveryGateway to submit a transaction with args [createCar,9,Ford] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:56.6347376Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:56.6528565Z 
2022-06-21T23:50:56.6529425Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:50:56.6530762Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:50:56.6531188Z 
2022-06-21T23:50:56.6536135Z     Then The gateway named myDiscoveryGateway has a error type response containing No valid responses from any peers
2022-06-21T23:50:56.6537843Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:50:56.6538757Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied to msg No valid responses from any peers
2022-06-21T23:50:56.6540630Z     When I use the gateway named myDiscoveryGateway to evaluate a transaction with args [noSuchEvauateTransaction,1001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:56.6544340Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:56.6675388Z 
2022-06-21T23:50:56.6676327Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:56.6676736Z 
2022-06-21T23:50:56.6678884Z     Then The gateway named myDiscoveryGateway has a error type response containing You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:56.6681179Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvauateTransaction to msg You've asked to invoke a function that does not exist: noSuchEvauateTransaction
2022-06-21T23:50:56.6682854Z     When I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,because,I,said,so] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:56.6684027Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:56.6804647Z 
2022-06-21T23:50:56.6805814Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:56.6808185Z 
2022-06-21T23:50:56.6808822Z     Then The gateway named myDiscoveryGateway has a error type response containing Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:56.6810942Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied to msg Expected 1 parameters, but 4 have been supplied
2022-06-21T23:50:56.6812558Z 
2022-06-21T23:50:56.6813276Z   @discovery @gateway @fabric_merge
2022-06-21T23:50:56.6815140Z   Scenario: Using a Gateway to submit transactions I can use different event handler strategies # test/ts-scenario/features/discovery.feature:37
2022-06-21T23:50:56.6816533Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:50:56.6817893Z 
2022-06-21T23:50:56.6818016Z 
2022-06-21T23:50:56.6818092Z 
2022-06-21T23:50:56.6818455Z **********************************************************************************
2022-06-21T23:50:56.6819321Z **********************************************************************************
2022-06-21T23:50:56.6820424Z ****** DISCOVERY FEATURE Scenario 2 ******
2022-06-21T23:50:56.6821000Z **********************************************************************************
2022-06-21T23:50:56.6822140Z **********************************************************************************
2022-06-21T23:50:56.6828641Z 
2022-06-21T23:50:56.6828776Z 
2022-06-21T23:50:56.6829211Z 
2022-06-21T23:50:56.6829642Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:50:56.6830429Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:50:56.6835589Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:50:56.6836539Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:50:56.6837736Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:50:56.6838266Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:50:56.6839240Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:56.6841405Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:56.8691887Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:56.8695087Z baseapichannel
2022-06-21T23:50:56.8695517Z basev2channel
2022-06-21T23:50:56.8696185Z discoverychannel
2022-06-21T23:50:56.8699912Z <== have been joined by organization org1
2022-06-21T23:50:56.8701916Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:56.8703606Z baseapichannel
2022-06-21T23:50:56.8703966Z basev2channel
2022-06-21T23:50:56.8706451Z discoverychannel
2022-06-21T23:50:56.8706826Z <==
2022-06-21T23:50:56.8707700Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:50:56.8711843Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:56.8715326Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:57.0680738Z Channel names ==>Channels peers has joined: 
2022-06-21T23:50:57.0681981Z baseapichannel
2022-06-21T23:50:57.0683269Z basev2channel
2022-06-21T23:50:57.0683575Z discoverychannel
2022-06-21T23:50:57.0683925Z <== have been joined by organization org2
2022-06-21T23:50:57.0690241Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:50:57.0696511Z baseapichannel
2022-06-21T23:50:57.0696787Z basev2channel
2022-06-21T23:50:57.0697037Z discoverychannel
2022-06-21T23:50:57.0697279Z <==
2022-06-21T23:50:57.0706039Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:50:57.0713076Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:50:57.0719742Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:50:57.0724928Z 
2022-06-21T23:50:57.0725528Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:50:57.0725735Z 
2022-06-21T23:50:57.0726104Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:50:57.0727006Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:50:57.0728183Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:50:57.0730275Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:50:57.2514802Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:50:57.2516259Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:50:57.2519691Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:50:57.2522648Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:50:57.2524811Z     When I modify myDiscoveryGateway to submit a transaction with args [createCar,1002,Ford,Mustang,Silver,Andy] for contract fabcar instantiated on channel discoverychannel using handler option MSPID_SCOPE_ALLFORTX
2022-06-21T23:50:57.3035905Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:57.9366350Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:57.9368749Z     And I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,1002] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:57.9373716Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:57.9616455Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}]
2022-06-21T23:50:57.9621364Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:50:57.9628636Z Comparing gatewayObj.result.response {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"} to msg {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:50:57.9635228Z     When I modify myDiscoveryGateway to submit a transaction with args [createCar,1003,Ford,Fiesta,Blue,Heather] for contract fabcar instantiated on channel discoverychannel using handler option MSPID_SCOPE_ANYFORTX
2022-06-21T23:50:58.0064544Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:58.6636343Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:58.6638551Z     And I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,1003] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:58.6640933Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:58.6882348Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}]
2022-06-21T23:50:58.6884349Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:50:58.6886780Z Comparing gatewayObj.result.response {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"} to msg {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:50:58.6891847Z     When I modify myDiscoveryGateway to submit a transaction with args [createCar,1004,Vauxhall,Corsa,White,Mark] for contract fabcar instantiated on channel discoverychannel using handler option NETWORK_SCOPE_ALLFORTX
2022-06-21T23:50:58.7287166Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:59.3749388Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:50:59.3751241Z     And I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,1004] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:50:59.3755472Z Retrieving contract from channel discoverychannel
2022-06-21T23:50:59.3982370Z Successfully performed evaluate transaction [queryCar] with result [{"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}]
2022-06-21T23:50:59.3991848Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:50:59.3993741Z Comparing gatewayObj.result.response {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"} to msg {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:50:59.3998314Z     When I modify myDiscoveryGateway to submit a transaction with args [createCar,1005,Bugatti,Veyron,Black,Bret] for contract fabcar instantiated on channel discoverychannel using handler option NETWORK_SCOPE_ANYFORTX
2022-06-21T23:50:59.4412001Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:00.0837616Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:51:00.0840502Z     Then The gateway named myDiscoveryGateway has a submit type response
2022-06-21T23:51:00.0845962Z     When I modify myDiscoveryGateway to submit a transaction with args [createCar,1006,Lotus,Elise,Pink,Nick] for contract fabcar instantiated on channel discoverychannel using handler option custom
2022-06-21T23:51:00.1384465Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:00.7621206Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:51:00.7623865Z     And I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,1006] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:51:00.7627141Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:00.7894123Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}]
2022-06-21T23:51:00.7896911Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:51:00.7900513Z Comparing gatewayObj.result.response {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"} to msg {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:51:00.7902819Z 
2022-06-21T23:51:00.7906292Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:00.7909741Z   Scenario: Using a Gateway to evaluate transactions I can use different query handler strategies # test/ts-scenario/features/discovery.feature:53
2022-06-21T23:51:00.7911733Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:00.7914236Z 
2022-06-21T23:51:00.7914510Z 
2022-06-21T23:51:00.7914535Z 
2022-06-21T23:51:00.7914912Z **********************************************************************************
2022-06-21T23:51:00.7915370Z **********************************************************************************
2022-06-21T23:51:00.7915714Z ****** DISCOVERY FEATURE Scenario 3 ******
2022-06-21T23:51:00.7916318Z **********************************************************************************
2022-06-21T23:51:00.7916897Z **********************************************************************************
2022-06-21T23:51:00.7917318Z 
2022-06-21T23:51:00.7917327Z 
2022-06-21T23:51:00.7917336Z 
2022-06-21T23:51:00.7923337Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:00.7927414Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:00.7927874Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:00.7928478Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:00.7934082Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:00.7936729Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:00.7938204Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:00.7939597Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:00.9822481Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:00.9823214Z discoverychannel
2022-06-21T23:51:00.9823845Z baseapichannel
2022-06-21T23:51:00.9824265Z basev2channel
2022-06-21T23:51:00.9825038Z <== have been joined by organization org1
2022-06-21T23:51:00.9827643Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:00.9828172Z discoverychannel
2022-06-21T23:51:00.9828683Z baseapichannel
2022-06-21T23:51:00.9829074Z basev2channel
2022-06-21T23:51:00.9829405Z <==
2022-06-21T23:51:00.9829929Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:00.9831489Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:00.9832838Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:01.1693300Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:01.1694656Z discoverychannel
2022-06-21T23:51:01.1695404Z baseapichannel
2022-06-21T23:51:01.1695702Z basev2channel
2022-06-21T23:51:01.1696064Z <== have been joined by organization org2
2022-06-21T23:51:01.1696563Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:01.1696953Z discoverychannel
2022-06-21T23:51:01.1697729Z baseapichannel
2022-06-21T23:51:01.1698009Z basev2channel
2022-06-21T23:51:01.1698221Z <==
2022-06-21T23:51:01.1699159Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:01.1699773Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:01.1700776Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:01.1701186Z 
2022-06-21T23:51:01.1701488Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:01.1701679Z 
2022-06-21T23:51:01.1702066Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:01.1702904Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:01.1704208Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:01.1705906Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:01.3735667Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:01.3736489Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:01.3737636Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:01.3738577Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:01.3739872Z     When I modify myDiscoveryGateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel discoverychannel using handler option MSPID_SCOPE_SINGLE
2022-06-21T23:51:01.4347571Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:01.4669846Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}]
2022-06-21T23:51:01.4671741Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.4674082Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"} to msg {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.4676122Z     When I modify myDiscoveryGateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel discoverychannel using handler option MSPID_SCOPE_ROUND_ROBIN
2022-06-21T23:51:01.5229809Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:01.5565293Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}]
2022-06-21T23:51:01.5568237Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.5571794Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"} to msg {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.5572955Z     When I modify myDiscoveryGateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel discoverychannel using handler option custom
2022-06-21T23:51:01.6038805Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:01.6418120Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}]
2022-06-21T23:51:01.6422853Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.6425349Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"} to msg {"color":"red","docType":"car","make":"Ariel","model":"Atom","owner":"Nick"}
2022-06-21T23:51:01.6426931Z 
2022-06-21T23:51:01.6428660Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:01.6430579Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/discovery.feature:61
2022-06-21T23:51:01.6432637Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:01.6434608Z 
2022-06-21T23:51:01.6435458Z 
2022-06-21T23:51:01.6435669Z 
2022-06-21T23:51:01.6436074Z **********************************************************************************
2022-06-21T23:51:01.6437638Z **********************************************************************************
2022-06-21T23:51:01.6438971Z ****** DISCOVERY FEATURE Scenario 4 ******
2022-06-21T23:51:01.6440282Z **********************************************************************************
2022-06-21T23:51:01.6441558Z **********************************************************************************
2022-06-21T23:51:01.6442522Z 
2022-06-21T23:51:01.6442729Z 
2022-06-21T23:51:01.6443403Z 
2022-06-21T23:51:01.6443884Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:01.6445699Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:01.6447301Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:01.6448587Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:01.6449750Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:01.6451294Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:01.6452584Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:01.6454617Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:01.8226629Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:01.8227305Z baseapichannel
2022-06-21T23:51:01.8228069Z basev2channel
2022-06-21T23:51:01.8228551Z discoverychannel
2022-06-21T23:51:01.8229354Z <== have been joined by organization org1
2022-06-21T23:51:01.8230047Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:01.8230870Z baseapichannel
2022-06-21T23:51:01.8231333Z basev2channel
2022-06-21T23:51:01.8232096Z discoverychannel
2022-06-21T23:51:01.8232536Z <==
2022-06-21T23:51:01.8233376Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:01.8234785Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:01.8237770Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:01.9976810Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:01.9982860Z baseapichannel
2022-06-21T23:51:01.9984419Z basev2channel
2022-06-21T23:51:01.9985732Z discoverychannel
2022-06-21T23:51:01.9987819Z <== have been joined by organization org2
2022-06-21T23:51:01.9989669Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:01.9990700Z baseapichannel
2022-06-21T23:51:01.9992086Z basev2channel
2022-06-21T23:51:01.9992946Z discoverychannel
2022-06-21T23:51:01.9993896Z <==
2022-06-21T23:51:01.9995157Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:01.9996303Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:01.9997564Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:01.9998438Z 
2022-06-21T23:51:01.9998952Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:02.0000124Z 
2022-06-21T23:51:02.0000845Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:02.0002037Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:02.0003971Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:02.0006040Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:02.1845652Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:02.1846872Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:02.1848753Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:02.1861501Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:02.1876642Z     When I modify myDiscoveryGateway to submit a transaction with transient data using args [getTransient,value1,value2] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:51:02.1891314Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:02.7976167Z Successfully performed submit transaction [getTransient] with transient data with result of [{"key0":"value1","key1":"value2"}]
2022-06-21T23:51:02.7978128Z     Then The gateway named myDiscoveryGateway has a submit type response matching {"key0":"value1","key1":"value2"}
2022-06-21T23:51:02.7982975Z Comparing gatewayObj.result.response {"key0":"value1","key1":"value2"} to msg {"key0":"value1","key1":"value2"}
2022-06-21T23:51:02.7985670Z     When I modify myDiscoveryGateway to evaluate a transaction with transient data using args [getTransient,valueA,valueB] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:51:02.7987170Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:02.8468991Z Successfully performed evaluate transaction [getTransient] with transient data with result of [{"key0":"valueA","key1":"valueB"}]
2022-06-21T23:51:02.8532184Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"key0":"valueA","key1":"valueB"}
2022-06-21T23:51:02.8541156Z Comparing gatewayObj.result.response {"key0":"valueA","key1":"valueB"} to msg {"key0":"valueA","key1":"valueB"}
2022-06-21T23:51:02.8592049Z 
2022-06-21T23:51:02.8602873Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:02.8612244Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract with specific organizations # test/ts-scenario/features/discovery.feature:67
2022-06-21T23:51:02.8659117Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:02.8666720Z 
2022-06-21T23:51:02.8667448Z 
2022-06-21T23:51:02.8667727Z 
2022-06-21T23:51:02.8668258Z **********************************************************************************
2022-06-21T23:51:02.8672054Z **********************************************************************************
2022-06-21T23:51:02.8675429Z ****** DISCOVERY FEATURE Scenario 5 ******
2022-06-21T23:51:02.8679003Z **********************************************************************************
2022-06-21T23:51:02.8683273Z **********************************************************************************
2022-06-21T23:51:02.8683761Z 
2022-06-21T23:51:02.8684024Z 
2022-06-21T23:51:02.8684061Z 
2022-06-21T23:51:02.8729380Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:02.8735033Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:02.8772581Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:02.8793473Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:02.8814602Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:02.8820987Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:02.8826712Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:02.8832081Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:03.1433787Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:03.1434812Z discoverychannel
2022-06-21T23:51:03.1435477Z baseapichannel
2022-06-21T23:51:03.1435760Z basev2channel
2022-06-21T23:51:03.1436078Z <== have been joined by organization org1
2022-06-21T23:51:03.1436713Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:03.1438003Z discoverychannel
2022-06-21T23:51:03.1438241Z baseapichannel
2022-06-21T23:51:03.1438464Z basev2channel
2022-06-21T23:51:03.1438652Z <==
2022-06-21T23:51:03.1439031Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:03.1440125Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:03.1441230Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:03.3117506Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:03.3121172Z baseapichannel
2022-06-21T23:51:03.3132998Z basev2channel
2022-06-21T23:51:03.3137995Z discoverychannel
2022-06-21T23:51:03.3138759Z <== have been joined by organization org2
2022-06-21T23:51:03.3142030Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:03.3142448Z baseapichannel
2022-06-21T23:51:03.3143676Z basev2channel
2022-06-21T23:51:03.3155619Z discoverychannel
2022-06-21T23:51:03.3157475Z <==
2022-06-21T23:51:03.3158500Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:03.3160302Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:03.3161862Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:03.3162308Z 
2022-06-21T23:51:03.3162624Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:03.3162840Z 
2022-06-21T23:51:03.3163240Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:03.3164217Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:03.3165534Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:03.3167554Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:03.5053462Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:03.5056966Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:03.5059625Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:03.5062635Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:03.5065478Z     When I use the discovery gateway named myDiscoveryGateway to submit a transaction with args [createCar,2001,Ford,F350,red,Sam] for contract fabcar instantiated on channel discoverychannel using requiredOrgs ["Org1MSP","Org2MSP"]
2022-06-21T23:51:03.5066566Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:04.1046816Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:51:04.1049488Z     Then The gateway named myDiscoveryGateway has a submit type response
2022-06-21T23:51:04.1056256Z     When I use the gateway named myDiscoveryGateway to evaluate a transaction with args [queryCar,2001] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:51:04.1058147Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:04.1304321Z Successfully performed evaluate transaction [queryCar] with result [{"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}]
2022-06-21T23:51:04.1307707Z     Then The gateway named myDiscoveryGateway has a evaluate type response matching {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}
2022-06-21T23:51:04.1311279Z Comparing gatewayObj.result.response {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"} to msg {"color":"red","docType":"car","make":"Ford","model":"F350","owner":"Sam"}
2022-06-21T23:51:04.1313909Z 
2022-06-21T23:51:04.1318883Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:04.1320630Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/discovery.feature:73
2022-06-21T23:51:04.1324212Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:04.1327886Z 
2022-06-21T23:51:04.1327897Z 
2022-06-21T23:51:04.1327905Z 
2022-06-21T23:51:04.1328206Z **********************************************************************************
2022-06-21T23:51:04.1328618Z **********************************************************************************
2022-06-21T23:51:04.1328957Z ****** DISCOVERY FEATURE Scenario 6 ******
2022-06-21T23:51:04.1329355Z **********************************************************************************
2022-06-21T23:51:04.1329738Z **********************************************************************************
2022-06-21T23:51:04.1329902Z 
2022-06-21T23:51:04.1329910Z 
2022-06-21T23:51:04.1329918Z 
2022-06-21T23:51:04.1333801Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:04.1334197Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:04.1334599Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:04.1334993Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:04.1337633Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:04.1342691Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:04.1343789Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:04.1345026Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:04.3200762Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:04.3201702Z baseapichannel
2022-06-21T23:51:04.3202253Z basev2channel
2022-06-21T23:51:04.3203474Z discoverychannel
2022-06-21T23:51:04.3204433Z <== have been joined by organization org1
2022-06-21T23:51:04.3205060Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:04.3205554Z baseapichannel
2022-06-21T23:51:04.3206302Z basev2channel
2022-06-21T23:51:04.3209124Z discoverychannel
2022-06-21T23:51:04.3209517Z <==
2022-06-21T23:51:04.3210144Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:04.3351340Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:04.3358503Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:04.5144547Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:04.5145478Z discoverychannel
2022-06-21T23:51:04.5146072Z baseapichannel
2022-06-21T23:51:04.5146547Z basev2channel
2022-06-21T23:51:04.5147219Z <== have been joined by organization org2
2022-06-21T23:51:04.5147929Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:04.5148485Z discoverychannel
2022-06-21T23:51:04.5149377Z baseapichannel
2022-06-21T23:51:04.5149812Z basev2channel
2022-06-21T23:51:04.5150401Z <==
2022-06-21T23:51:04.5155101Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:04.5155834Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:04.5156892Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:04.5158058Z 
2022-06-21T23:51:04.5158515Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:04.5158818Z 
2022-06-21T23:51:04.5159370Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:04.5160271Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:04.5162641Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:04.5164927Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:04.7213439Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:04.7214424Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:04.7215929Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:04.7217189Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:04.7219017Z     When I use the discovery gateway named myDiscoveryGateway to submit a transaction a 100 times with args [createCar,2001,Ford,F350,red,Sam] for contract fabcar instantiated on channel discoverychannel
2022-06-21T23:51:04.7219741Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:08.0963185Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:51:08.0968987Z     Then The gateway named myDiscoveryGateway has a submit type response
2022-06-21T23:51:08.0986377Z 
2022-06-21T23:51:08.0991860Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:08.0996765Z   Scenario: Using a Gateway I can submit to system chaincodes # test/ts-scenario/features/discovery.feature:77
2022-06-21T23:51:08.1006464Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:08.1015727Z 
2022-06-21T23:51:08.1016042Z 
2022-06-21T23:51:08.1016242Z 
2022-06-21T23:51:08.1017103Z **********************************************************************************
2022-06-21T23:51:08.1017783Z **********************************************************************************
2022-06-21T23:51:08.1018397Z ****** DISCOVERY FEATURE Scenario 7 ******
2022-06-21T23:51:08.1019232Z **********************************************************************************
2022-06-21T23:51:08.1019651Z **********************************************************************************
2022-06-21T23:51:08.1019818Z 
2022-06-21T23:51:08.1019827Z 
2022-06-21T23:51:08.1019835Z 
2022-06-21T23:51:08.1031885Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:08.1047167Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.1055924Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.1059187Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.1059833Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:08.1062807Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:08.1064322Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:08.1065733Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:08.2688691Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:08.2689189Z baseapichannel
2022-06-21T23:51:08.2689537Z basev2channel
2022-06-21T23:51:08.2689863Z discoverychannel
2022-06-21T23:51:08.2690750Z <== have been joined by organization org1
2022-06-21T23:51:08.2691374Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:08.2691786Z baseapichannel
2022-06-21T23:51:08.2692112Z basev2channel
2022-06-21T23:51:08.2693130Z discoverychannel
2022-06-21T23:51:08.2693655Z <==
2022-06-21T23:51:08.2694136Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:08.2695397Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:08.2696712Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:08.4453324Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:08.4453686Z baseapichannel
2022-06-21T23:51:08.4453946Z basev2channel
2022-06-21T23:51:08.4454184Z discoverychannel
2022-06-21T23:51:08.4454536Z <== have been joined by organization org2
2022-06-21T23:51:08.4455033Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:08.4455380Z baseapichannel
2022-06-21T23:51:08.4455635Z basev2channel
2022-06-21T23:51:08.4456485Z discoverychannel
2022-06-21T23:51:08.4456734Z <==
2022-06-21T23:51:08.4457622Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:08.4458183Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:08.4459113Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:08.4459495Z 
2022-06-21T23:51:08.4459970Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:08.4460160Z 
2022-06-21T23:51:08.4460764Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:08.4461365Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:08.4462967Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:08.4464952Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:08.6350280Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:08.6353726Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:08.6364290Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:08.6373568Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:08.6385900Z     When I use the gateway named myDiscoveryGateway to submit a transaction with args [deploy] for contract lscc instantiated on channel discoverychannel
2022-06-21T23:51:08.6405824Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:08.6710272Z 
2022-06-21T23:51:08.6711187Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:51:08.6711771Z     peer=peer0.org2.example.com, status=500, message=invalid number of arguments to lscc: 1
2022-06-21T23:51:08.6712298Z     peer=peer0.org1.example.com, status=500, message=invalid number of arguments to lscc: 1
2022-06-21T23:51:08.6712560Z 
2022-06-21T23:51:08.6716242Z     Then The gateway named myDiscoveryGateway has a error type response containing invalid number of arguments to lscc:
2022-06-21T23:51:08.6717793Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:51:08.6718527Z     peer=peer0.org2.example.com, status=500, message=invalid number of arguments to lscc: 1
2022-06-21T23:51:08.6719710Z     peer=peer0.org1.example.com, status=500, message=invalid number of arguments to lscc: 1 to msg invalid number of arguments to lscc:
2022-06-21T23:51:08.6720183Z 
2022-06-21T23:51:08.6721691Z   @discovery @gateway @fabric_merge
2022-06-21T23:51:08.6723402Z   Scenario: Using a Gateway I can evaluate to system chaincodes # test/ts-scenario/features/discovery.feature:81
2022-06-21T23:51:08.6724680Z     Given I place a scenario start message DISCOVERY FEATURE
2022-06-21T23:51:08.6725856Z 
2022-06-21T23:51:08.6725981Z 
2022-06-21T23:51:08.6726062Z 
2022-06-21T23:51:08.6726451Z **********************************************************************************
2022-06-21T23:51:08.6726982Z **********************************************************************************
2022-06-21T23:51:08.6727445Z ****** DISCOVERY FEATURE Scenario 8 ******
2022-06-21T23:51:08.6728392Z **********************************************************************************
2022-06-21T23:51:08.6729987Z **********************************************************************************
2022-06-21T23:51:08.6731036Z 
2022-06-21T23:51:08.6731822Z 
2022-06-21T23:51:08.6731926Z 
2022-06-21T23:51:08.6732336Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:08.6733581Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.6734112Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.6734605Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:08.6735162Z     And I use the cli to create and join the channel named discoverychannel on the deployed network
2022-06-21T23:51:08.6735842Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:08.6736932Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:08.6738268Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:08.8656073Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:08.8656674Z basev2channel
2022-06-21T23:51:08.8657074Z discoverychannel
2022-06-21T23:51:08.8657493Z baseapichannel
2022-06-21T23:51:08.8657930Z <== have been joined by organization org1
2022-06-21T23:51:08.8658521Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:08.8658937Z basev2channel
2022-06-21T23:51:08.8659273Z discoverychannel
2022-06-21T23:51:08.8659828Z baseapichannel
2022-06-21T23:51:08.8660137Z <==
2022-06-21T23:51:08.8660610Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:08.8662127Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:08.8663961Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:09.0374181Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:09.0375038Z baseapichannel
2022-06-21T23:51:09.0375416Z basev2channel
2022-06-21T23:51:09.0377039Z discoverychannel
2022-06-21T23:51:09.0377756Z <== have been joined by organization org2
2022-06-21T23:51:09.0378529Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:51:09.0379298Z baseapichannel
2022-06-21T23:51:09.0381166Z basev2channel
2022-06-21T23:51:09.0381584Z discoverychannel
2022-06-21T23:51:09.0382036Z <==
2022-06-21T23:51:09.0383406Z     And I use the cli to update the channel with name discoverychannel with config file discoverychannel-anchor.tx on the deployed network
2022-06-21T23:51:09.0384195Z Channel discoverychannel has already been updated, skipping ...
2022-06-21T23:51:09.0386798Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel discoverychannel with default endorsement policy and init-required false
2022-06-21T23:51:09.0387583Z 
2022-06-21T23:51:09.0388728Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:51:09.0389031Z 
2022-06-21T23:51:09.0389454Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:51:09.0391774Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:51:09.0395195Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:09.0401348Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID discoverychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:09.2415437Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:51:09.2420994Z Smart contract fabcar at version 1.0.0 has already been committed on channel discoverychannel as fabcar 
2022-06-21T23:51:09.2425925Z     And I have a file backed gateway named myDiscoveryGateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:51:09.2427647Z Gateway named myDiscoveryGateway already exists
2022-06-21T23:51:09.2428428Z     When I use the gateway named myDiscoveryGateway to evaluate a transaction with args [GetBlockByNumber,discoverychannel,0] for contract qscc instantiated on channel discoverychannel
2022-06-21T23:51:09.2430600Z Retrieving contract from channel discoverychannel
2022-06-21T23:51:09.2522680Z Successfully performed evaluate transaction [GetBlockByNumber] with result [
2022-06-21T23:51:09.2523642Z " Uj���^�}�}�����(�U�,�Č�x�Ƨ�v
2022-06-21T23:51:09.2523952Z �v
2022-06-21T23:51:09.2524193Z �v
2022-06-21T23:51:09.2524423Z �
2022-06-21T23:51:09.2524764Z ��ɕ"discoverychannel�
2022-06-21T23:51:09.2525053Z �
2022-06-21T23:51:09.2525181Z 
2022-06-21T23:51:09.2525482Z OrdererMSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2526171Z MIICDTCCAbOgAwIBAgIRANU8wnYb/E6p84KzKBQ05MEwCgYIKoZIzj0EAwIwaTEL
2022-06-21T23:51:09.2526753Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2527383Z cmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt
2022-06-21T23:51:09.2528208Z cGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMFgxCzAJBgNV
2022-06-21T23:51:09.2529012Z BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp
2022-06-21T23:51:09.2529632Z c2NvMRwwGgYDVQQDExNvcmRlcmVyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYI
2022-06-21T23:51:09.2531535Z KoZIzj0DAQcDQgAEaCQDgH5hRiAfHsy/uGmMK03xbRXzgKfyInF4357lERr/ZjY+
2022-06-21T23:51:09.2532100Z ZkCQINu778vm8E2th6AC1Z5McOmtIVfbwfi6JqNNMEswDgYDVR0PAQH/BAQDAgeA
2022-06-21T23:51:09.2532681Z MAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgOdTuU2GyiieWqbKbumUvN6FZsbHB
2022-06-21T23:51:09.2533698Z lqXXSN5Pk4xrm/YwCgYIKoZIzj0EAwIDSAAwRQIhAKxD/rEGdbJZ7Tht4AaqVpd+
2022-06-21T23:51:09.2534245Z eXkV1knrhL3BMDqXVdmeAiAL0Gom7I1Zta23Rl/pPcPllKJP2G/a7t+NU3HgzUQ9
2022-06-21T23:51:09.2534714Z jg==
2022-06-21T23:51:09.2535270Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2535671Z С�k�w�/ӈaY�;�^�������o
2022-06-21T23:51:09.2535956Z �]�]�
2022-06-21T23:51:09.2536618Z Orderer��
2022-06-21T23:51:09.2536881Z 
2022-06-21T23:51:09.2537383Z OrdererMSP��
2022-06-21T23:51:09.2537678Z MSP���
2022-06-21T23:51:09.2537821Z 
2022-06-21T23:51:09.2538250Z OrdererMSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2538867Z MIICPjCCAeSgAwIBAgIRAOSd4/QATWrsRJQL5eB3DF4wCgYIKoZIzj0EAwIwaTEL
2022-06-21T23:51:09.2539781Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2540519Z cmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt
2022-06-21T23:51:09.2541435Z cGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMGkxCzAJBgNV
2022-06-21T23:51:09.2542206Z BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp
2022-06-21T23:51:09.2542989Z c2NvMRQwEgYDVQQKEwtleGFtcGxlLmNvbTEXMBUGA1UEAxMOY2EuZXhhbXBsZS5j
2022-06-21T23:51:09.2543859Z b20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQOp+6hOX/lzmoGFPq0RaMooDT2
2022-06-21T23:51:09.2544549Z BcK039we8KRHBkEKIOvIQ0neCzdnYXH8pCht9peqoi8Lvs+JCtCocM6nkYeuo20w
2022-06-21T23:51:09.2545278Z azAOBgNVHQ8BAf8EBAMCAaYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMB
2022-06-21T23:51:09.2545984Z MA8GA1UdEwEB/wQFMAMBAf8wKQYDVR0OBCIEIDnU7lNhsoonlqmym7plLzehWbGx
2022-06-21T23:51:09.2546659Z wZal10jeT5OMa5v2MAoGCCqGSM49BAMCA0gAMEUCIQCITNF+FNhWAQ3Mc/XhTqKq
2022-06-21T23:51:09.2547354Z SVQLmOKHAncd7IhPVvxHFAIgIMRIPeTQwaZ9rZFQSGrmju4cAk8A6IyIs3yEnIBf
2022-06-21T23:51:09.2548897Z dFY=
2022-06-21T23:51:09.2549575Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2569743Z "�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2570788Z MIICCjCCAbGgAwIBAgIRALJmgbDJMVwiWhs0wVoi94YwCgYIKoZIzj0EAwIwaTEL
2022-06-21T23:51:09.2571625Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2572405Z cmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt
2022-06-21T23:51:09.2573160Z cGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBaMFYxCzAJBgNV
2022-06-21T23:51:09.2573939Z BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp
2022-06-21T23:51:09.2574722Z c2NvMRowGAYDVQQDDBFBZG1pbkBleGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqG
2022-06-21T23:51:09.2575485Z SM49AwEHA0IABBwB7rlmUQ7H7PbYRoQISP+UdRXaib2pq4guPk0yRu8n3e6quVHM
2022-06-21T23:51:09.2576163Z l+OAA/nkEriVqrSKA/Q61DjIh37hgX9FMxGjTTBLMA4GA1UdDwEB/wQEAwIHgDAM
2022-06-21T23:51:09.2576867Z BgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDnU7lNhsoonlqmym7plLzehWbGxwZal
2022-06-21T23:51:09.2577621Z 10jeT5OMa5v2MAoGCCqGSM49BAMCA0cAMEQCIEqra/hCzW9OXM/ScKEDVbYfVjdd
2022-06-21T23:51:09.2578322Z AMbIJkOefs7KKdd7AiAvpXf17Vt9KCGSeRBrAJAK+h1Ib2ehufbVxa7bEDnQWg==
2022-06-21T23:51:09.2578969Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2579356Z B
2022-06-21T23:51:09.2579945Z SHA2SHA256J�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2580804Z MIICQjCCAemgAwIBAgIQTlWCDEqsWfKoWadF0SQ02zAKBggqhkjOPQQDAjBsMQsw
2022-06-21T23:51:09.2581590Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2582362Z YW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xGjAYBgNVBAMTEXRsc2NhLmV4
2022-06-21T23:51:09.2583111Z YW1wbGUuY29tMB4XDTIyMDYyMTIzMzgwMFoXDTMyMDYxODIzMzgwMFowbDELMAkG
2022-06-21T23:51:09.2583886Z A1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFu
2022-06-21T23:51:09.2584633Z Y2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5leGFt
2022-06-21T23:51:09.2585374Z cGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEYe5azZczfk6Vhn62yC
2022-06-21T23:51:09.2586418Z a44GWgGudqOgzKYN3z72GLZs5jywWLLOvPx3BC2/wEIg9/oRHpUp7rV7hi0PSc0+
2022-06-21T23:51:09.2587107Z TmqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB
2022-06-21T23:51:09.2588103Z BQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg8Ac0VQN6BkdoNYWWRCyH
2022-06-21T23:51:09.2588805Z 5P/BqkltcehwLaPtv8y2sAUwCgYIKoZIzj0EAwIDRwAwRAIgOGo7n++JZDH8rJbw
2022-06-21T23:51:09.2589519Z BFE6L/+m6M5J1HjeNBWzq20mEDECIEmXdcuD0J2sqCG3tS9WICM8tAqzGmvrWLmQ
2022-06-21T23:51:09.2589984Z LcGgWELT
2022-06-21T23:51:09.2590452Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2590872Z Admins"4
2022-06-21T23:51:09.2591337Z Admins* �
2022-06-21T23:51:09.2591603Z 
2022-06-21T23:51:09.2615949Z OrdererMSPAdmins"3
2022-06-21T23:51:09.2616547Z Readers(�
2022-06-21T23:51:09.2616834Z 
2022-06-21T23:51:09.2617119Z OrdererMSPAdmins"3
2022-06-21T23:51:09.2617475Z Writers(�
2022-06-21T23:51:09.2617633Z 
2022-06-21T23:51:09.2617985Z OrdererMSPAdmins*Admins
2022-06-21T23:51:09.2618884Z ChannelRestrictionsAdmins$
2022-06-21T23:51:09.2619365Z Capabilities
2022-06-21T23:51:09.2619626Z 
2022-06-21T23:51:09.2619836Z 
2022-06-21T23:51:09.2620108Z V1_1�Admins!
2022-06-21T23:51:09.2620255Z 
2022-06-21T23:51:09.2620563Z ConsensusType
2022-06-21T23:51:09.2620987Z soloAdmins"
2022-06-21T23:51:09.2621398Z 	BatchSize
2022-06-21T23:51:09.2621846Z ���1�� Admins!
2022-06-21T23:51:09.2622433Z BatchTimeout
2022-06-21T23:51:09.2622993Z 500msAdmins"*
2022-06-21T23:51:09.2623410Z BlockValidation
2022-06-21T23:51:09.2623851Z 	
2022-06-21T23:51:09.2624224Z WritersAdmins""
2022-06-21T23:51:09.2624615Z Readers
2022-06-21T23:51:09.2625161Z 	
2022-06-21T23:51:09.2625469Z ReadersAdmins""
2022-06-21T23:51:09.2625721Z Writers
2022-06-21T23:51:09.2625963Z 	
2022-06-21T23:51:09.2626368Z WritersAdmins""
2022-06-21T23:51:09.2626935Z Admins
2022-06-21T23:51:09.2627184Z 
2022-06-21T23:51:09.2627481Z AdminsAdmins*Admins�B
2022-06-21T23:51:09.2628041Z Application�B�
2022-06-21T23:51:09.2628385Z Org2MSP��
2022-06-21T23:51:09.2628667Z MSP���
2022-06-21T23:51:09.2629261Z Org2MSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2629937Z MIICUDCCAfegAwIBAgIQchXtRHnWbfJowa9c42k2VDAKBggqhkjOPQQDAjBzMQsw
2022-06-21T23:51:09.2630730Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2631509Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
2022-06-21T23:51:09.2632271Z b3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa
2022-06-21T23:51:09.2633044Z MHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
2022-06-21T23:51:09.2633807Z YW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcyLmV4YW1wbGUuY29tMRwwGgYDVQQD
2022-06-21T23:51:09.2634564Z ExNjYS5vcmcyLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
2022-06-21T23:51:09.2635424Z PtU9xQ7jzN6f93byjZpADDoonrBJ3ONsaktFX+tFM/JLpUOXA14O5jNh64Out9IA
2022-06-21T23:51:09.2636435Z H6wxSAlvapFY+r4KhchkuaNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG
2022-06-21T23:51:09.2637151Z CCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCCZ
2022-06-21T23:51:09.2637881Z auE29ztWJNL8MoA+F6OxKyOmjt41WRLoJYGjP+IRnTAKBggqhkjOPQQDAgNHADBE
2022-06-21T23:51:09.2638744Z AiAb9e919FszX1eAhcSJuDGgbvzFyfZJ1lLrfDbpkYdXNAIgXFOd7UbmFmnSWf8w
2022-06-21T23:51:09.2684949Z VSicm+Y0MGJTaM8ZreE4lkHN/eA=
2022-06-21T23:51:09.2685562Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2686004Z "�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2686532Z MIICGDCCAb+gAwIBAgIQI9h3kS9rMTOqmxwIznL6DDAKBggqhkjOPQQDAjBzMQsw
2022-06-21T23:51:09.2687208Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2687877Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
2022-06-21T23:51:09.2688529Z b3JnMi5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa
2022-06-21T23:51:09.2689173Z MFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
2022-06-21T23:51:09.2689843Z YW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmcyLmV4YW1wbGUuY29tMFkw
2022-06-21T23:51:09.2691382Z EwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6dmZIlOPdyMW7tq+nZw2d9IiYDRb3ewn
2022-06-21T23:51:09.2692436Z kRdv6FYn+bU4HJYFjbfzfSK4ipMBouMW5Vkil4HeruOg2JEwz3eDQKNNMEswDgYD
2022-06-21T23:51:09.2694276Z VR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgmWrhNvc7ViTS
2022-06-21T23:51:09.2694797Z /DKAPhejsSsjpo7eNVkS6CWBoz/iEZ0wCgYIKoZIzj0EAwIDRwAwRAIgSkl0mIis
2022-06-21T23:51:09.2695351Z YOSRFvzgjWI9r5onkzDtv0EJ8sZXqxNNLIkCIE5BCn9iT+2EdipPP5PgpUSpfiF2
2022-06-21T23:51:09.2695718Z TJPk4WdpkxoA/xN3
2022-06-21T23:51:09.2696093Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2696330Z B
2022-06-21T23:51:09.2696732Z SHA2SHA256J�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2697186Z MIICWDCCAf6gAwIBAgIRAJ5dKUYNv0niV/q43CRVllgwCgYIKoZIzj0EAwIwdjEL
2022-06-21T23:51:09.2697744Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2698324Z cmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs
2022-06-21T23:51:09.2698933Z c2NhLm9yZzIuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz
2022-06-21T23:51:09.2699527Z ODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE
2022-06-21T23:51:09.2700118Z BxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEfMB0G
2022-06-21T23:51:09.2700681Z A1UEAxMWdGxzY2Eub3JnMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49
2022-06-21T23:51:09.2701231Z AwEHA0IABKiHuXuqyt0XbQO3ah/qZDnP3jARaFTtWZFmNYFhDUnejMg8rcz9C8Rq
2022-06-21T23:51:09.2701749Z J2C0tSa5oq4hIuEUxt4kZCV4lAhF8nejbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV
2022-06-21T23:51:09.2702274Z HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV
2022-06-21T23:51:09.2702805Z HQ4EIgQg17cNuw7tQeLzWvVrW9dZ+fsJLo4b5pea6Cy3Q8jVfDkwCgYIKoZIzj0E
2022-06-21T23:51:09.2703599Z AwIDSAAwRQIhANrkKiViVHtAeiQau82yAUe7cRmZDql8u+U52wzsQ6GgAiAVFQDT
2022-06-21T23:51:09.2704089Z akpQOO6diOD6Z4kEdRyPeoDFSTu5D8G3gwj/rg==
2022-06-21T23:51:09.2704483Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2705183Z Admins"0
2022-06-21T23:51:09.2705681Z Readers%�	
2022-06-21T23:51:09.2706378Z Org2MSPAdmins"0
2022-06-21T23:51:09.2706749Z Writers%�	
2022-06-21T23:51:09.2707085Z Org2MSPAdmins"1
2022-06-21T23:51:09.2707387Z Admins'�
2022-06-21T23:51:09.2707635Z 
2022-06-21T23:51:09.2707946Z Org2MSPAdmins*Admins�
2022-06-21T23:51:09.2708219Z Org3MSP��
2022-06-21T23:51:09.2708648Z MSP���
2022-06-21T23:51:09.2709169Z Org3MSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2709619Z MIICUTCCAfegAwIBAgIQN8yeShYcbzxgMJyYv/CTPjAKBggqhkjOPQQDAjBzMQsw
2022-06-21T23:51:09.2710156Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2710741Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
2022-06-21T23:51:09.2711306Z b3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa
2022-06-21T23:51:09.2711878Z MHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
2022-06-21T23:51:09.2712440Z YW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmczLmV4YW1wbGUuY29tMRwwGgYDVQQD
2022-06-21T23:51:09.2713289Z ExNjYS5vcmczLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
2022-06-21T23:51:09.2713873Z 7BQXJ49vHgIORzmI9NKFgUdk/MtV4xKCQUYkO9DCParFHC3OwZjGXVZeJVjutI9z
2022-06-21T23:51:09.2714364Z 6ch0HjbLSRM8v56ctzpXfKNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG
2022-06-21T23:51:09.2715081Z CCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCAG
2022-06-21T23:51:09.2716146Z Fh9EidcR7yMjcEIlytw2sitKOMCIukxkrhn4BB/rFjAKBggqhkjOPQQDAgNIADBF
2022-06-21T23:51:09.2716881Z AiEAzG2xQ/ngjLVqK7g/AaiNSCO2qlTlFxhFI8DeFJifqzkCIGaGqIQAAO28GprD
2022-06-21T23:51:09.2717291Z 4Lc5xpEm9grIMASfOLEh5RWN6iix
2022-06-21T23:51:09.2717704Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2718107Z "�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2718587Z MIICGTCCAb+gAwIBAgIQI/+b3Ujk/FdOqwAoTMwuNTAKBggqhkjOPQQDAjBzMQsw
2022-06-21T23:51:09.2719203Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2719861Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
2022-06-21T23:51:09.2720687Z b3JnMy5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa
2022-06-21T23:51:09.2721501Z MFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
2022-06-21T23:51:09.2723021Z YW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmczLmV4YW1wbGUuY29tMFkw
2022-06-21T23:51:09.2723643Z EwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUgJmNp8QGjMfwpAaGHNzk74jE1Yd4jMO
2022-06-21T23:51:09.2724250Z UNafAKcbHLoHBtiGbmQCAYIuOcVCvff0gogEDNkhoZ1YMNlC+zEoNqNNMEswDgYD
2022-06-21T23:51:09.2724819Z VR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgBhYfRInXEe8j
2022-06-21T23:51:09.2725389Z I3BCJcrcNrIrSjjAiLpMZK4Z+AQf6xYwCgYIKoZIzj0EAwIDSAAwRQIhAMkM46tj
2022-06-21T23:51:09.2726106Z LVkiH6GUmUF2j9HfeTM+PnnlvgF7YUz/smCLAiBt5Auyg2M2j4P68hqibD//t7sD
2022-06-21T23:51:09.2726604Z jA5cnI5ZwyIpJcRJVA==
2022-06-21T23:51:09.2726929Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2727166Z B
2022-06-21T23:51:09.2727543Z SHA2SHA256J�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2728020Z MIICVzCCAf6gAwIBAgIRANW6YB2NxOwShAX1Z7U1xrgwCgYIKoZIzj0EAwIwdjEL
2022-06-21T23:51:09.2728595Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2729176Z cmFuY2lzY28xGTAXBgNVBAoTEG9yZzMuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs
2022-06-21T23:51:09.2729741Z c2NhLm9yZzMuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMz
2022-06-21T23:51:09.2730309Z ODAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE
2022-06-21T23:51:09.2731857Z BxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMy5leGFtcGxlLmNvbTEfMB0G
2022-06-21T23:51:09.2732451Z A1UEAxMWdGxzY2Eub3JnMy5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49
2022-06-21T23:51:09.2733183Z AwEHA0IABCwNf5IobWmGRO6XZt+181P70cVgl+517pyqky580s/E/ZrzB4U8A8su
2022-06-21T23:51:09.2734863Z X304ZzhQiXlspP89pEy0g51CnN586QqjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNV
2022-06-21T23:51:09.2735453Z HSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNV
2022-06-21T23:51:09.2736046Z HQ4EIgQgAS2uFcTSgd1Yiv3/tgFEPmuyUJJ+IGJrg3h7HWVIlEAwCgYIKoZIzj0E
2022-06-21T23:51:09.2736656Z AwIDRwAwRAIgNtTIkT+70EDg5P3WnycSszsy3MUMKV+QDqxQ0jH1R04CICztdym1
2022-06-21T23:51:09.2737341Z 6JVjKt36rtb5UZqg5ZxSffFRoAZeHVoNq4Bd
2022-06-21T23:51:09.2737806Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2738115Z Admins"1
2022-06-21T23:51:09.2738425Z Admins'�
2022-06-21T23:51:09.2738690Z 
2022-06-21T23:51:09.2738961Z Org3MSPAdmins"0
2022-06-21T23:51:09.2739318Z Readers%�	
2022-06-21T23:51:09.2739637Z Org3MSPAdmins"0
2022-06-21T23:51:09.2739990Z Writers%�	
2022-06-21T23:51:09.2740326Z Org3MSPAdmins*Admins�
2022-06-21T23:51:09.2740635Z Org1MSP��
2022-06-21T23:51:09.2740917Z MSP���
2022-06-21T23:51:09.2741326Z Org1MSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2741826Z MIICUDCCAfegAwIBAgIQQTheGb/dKDBSBcintljmbjAKBggqhkjOPQQDAjBzMQsw
2022-06-21T23:51:09.2742457Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2743120Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
2022-06-21T23:51:09.2744109Z b3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4MDBa
2022-06-21T23:51:09.2745184Z MHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
2022-06-21T23:51:09.2745903Z YW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQD
2022-06-21T23:51:09.2746556Z ExNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
2022-06-21T23:51:09.2747148Z T0h+SX/O4wLY8UiFWP/rA3wjYlA9CHbN3Zofw+1o5HT0P20F2oTVb3MkOiazoTyT
2022-06-21T23:51:09.2747694Z EMky4j7T+VlgtAKsLbj0LqNtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQG
2022-06-21T23:51:09.2748259Z CCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdDgQiBCDl
2022-06-21T23:51:09.2748839Z DSamehV86lRLjQ5g3zxBzm9k9t5C/d1eXh8r/FbTjjAKBggqhkjOPQQDAgNHADBE
2022-06-21T23:51:09.2749374Z AiAMLWEqq0KX8xCN23DCerE40F/hWWCgojddPuA/xfhaDgIgXP0V+e1ib/+MG1ku
2022-06-21T23:51:09.2749755Z d8m/R+dqE5wkm35j7DF3MndWCTo=
2022-06-21T23:51:09.2750620Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2751126Z "�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2752291Z MIICGjCCAcCgAwIBAgIRALSkm8uBeZrqQiu9skWyZbAwCgYIKoZIzj0EAwIwczEL
2022-06-21T23:51:09.2752971Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2753615Z cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
2022-06-21T23:51:09.2754390Z Lm9yZzEuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMzODAw
2022-06-21T23:51:09.2755005Z WjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
2022-06-21T23:51:09.2755941Z U2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZ
2022-06-21T23:51:09.2756670Z MBMGByqGSM49AgEGCCqGSM49AwEHA0IABNU+4DilvvFSs27uwkdizlUCRQz1Wcyz
2022-06-21T23:51:09.2757222Z Dbk80dDh8N75Eir30l7Kt8iVbT3+jwLrlzf+RCBny6LTGECSLQk5rKSjTTBLMA4G
2022-06-21T23:51:09.2757770Z A1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIOUNJqZ6FXzq
2022-06-21T23:51:09.2758473Z VEuNDmDfPEHOb2T23kL93V5eHyv8VtOOMAoGCCqGSM49BAMCA0gAMEUCIQCUWOls
2022-06-21T23:51:09.2758997Z ZHcLyGdbSlYVS1nyTj8xWt7rNFcYEdGb34H8LAIgfcnLxA6EX/VvrI/FkYvukqYg
2022-06-21T23:51:09.2759341Z 9q5+kvOWMZpQj8SqWUY=
2022-06-21T23:51:09.2759703Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2759944Z B
2022-06-21T23:51:09.2760304Z SHA2SHA256J�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2760912Z MIICVjCCAf2gAwIBAgIQWLH0lxZAxHqMSWAT/MJS8DAKBggqhkjOPQQDAjB2MQsw
2022-06-21T23:51:09.2761822Z CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
2022-06-21T23:51:09.2762416Z YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz
2022-06-21T23:51:09.2762992Z Y2Eub3JnMS5leGFtcGxlLmNvbTAeFw0yMjA2MjEyMzM4MDBaFw0zMjA2MTgyMzM4
2022-06-21T23:51:09.2763565Z MDBaMHYxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH
2022-06-21T23:51:09.2764168Z Ew1TYW4gRnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMR8wHQYD
2022-06-21T23:51:09.2764891Z VQQDExZ0bHNjYS5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0D
2022-06-21T23:51:09.2765458Z AQcDQgAEVbtIiQgFXCBOGMm5fO7iziUMmi+TrAmFEbvSKNMABDKg3p+ygJ5xpQlZ
2022-06-21T23:51:09.2765977Z 8ecv8RVbhW3cMJTih6LgDa8Hr3lWZ6NtMGswDgYDVR0PAQH/BAQDAgGmMB0GA1Ud
2022-06-21T23:51:09.2766648Z JQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1Ud
2022-06-21T23:51:09.2767243Z DgQiBCAYGjv7wRKTypBrA5D8QNGWxX3eVs2fpvAoIweOFS0rljAKBggqhkjOPQQD
2022-06-21T23:51:09.2768503Z AgNHADBEAiAcZuRJjH3v3G6j06vJdi9M1AguZJNvl6YYELWkt2eetgIgSNHKml+H
2022-06-21T23:51:09.2768950Z KkvzXlGvH3NbBUO2yM4Ry5mmwHmLdaCRZjU=
2022-06-21T23:51:09.2769701Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2770002Z Admins"0
2022-06-21T23:51:09.2770582Z Readers%�	
2022-06-21T23:51:09.2770940Z Org1MSPAdmins"0
2022-06-21T23:51:09.2771293Z Writers%�	
2022-06-21T23:51:09.2771609Z Org1MSPAdmins"1
2022-06-21T23:51:09.2771926Z Admins'�
2022-06-21T23:51:09.2772176Z 
2022-06-21T23:51:09.2772487Z Org1MSPAdmins*Admins$
2022-06-21T23:51:09.2772800Z Capabilities
2022-06-21T23:51:09.2772957Z 
2022-06-21T23:51:09.2773075Z 
2022-06-21T23:51:09.2773338Z V2_0�Admins"&
2022-06-21T23:51:09.2773626Z Endorsement
2022-06-21T23:51:09.2773894Z 	
2022-06-21T23:51:09.2774167Z WritersAdmins""
2022-06-21T23:51:09.2774443Z Readers
2022-06-21T23:51:09.2774698Z 	
2022-06-21T23:51:09.2774979Z ReadersAdmins""
2022-06-21T23:51:09.2775239Z Writers
2022-06-21T23:51:09.2775488Z 	
2022-06-21T23:51:09.2775772Z WritersAdmins""
2022-06-21T23:51:09.2776213Z Admins
2022-06-21T23:51:09.2776656Z 
2022-06-21T23:51:09.2776804Z AdminsAdmins"/
2022-06-21T23:51:09.2777103Z LifecycleEndorsement
2022-06-21T23:51:09.2777353Z 	
2022-06-21T23:51:09.2777623Z WritersAdmins*Admins$
2022-06-21T23:51:09.2777875Z Capabilities
2022-06-21T23:51:09.2778009Z 
2022-06-21T23:51:09.2778112Z 
2022-06-21T23:51:09.2778351Z V1_1�Admins*
2022-06-21T23:51:09.2778475Z 
2022-06-21T23:51:09.2778777Z Consortium
2022-06-21T23:51:09.2779072Z SampleConsortiumAdmins&
2022-06-21T23:51:09.2779734Z HashingAlgorithm
2022-06-21T23:51:09.2780278Z SHA256Admins-
2022-06-21T23:51:09.2780685Z BlockDataHashingStructure����AdminsI
2022-06-21T23:51:09.2781216Z OrdererAddresses5
2022-06-21T23:51:09.2781863Z orderer.example.com:7050/Channel/Orderer/Admins""
2022-06-21T23:51:09.2782191Z Readers
2022-06-21T23:51:09.2782420Z 	
2022-06-21T23:51:09.2782692Z ReadersAdmins""
2022-06-21T23:51:09.2783140Z Writers
2022-06-21T23:51:09.2783391Z 	
2022-06-21T23:51:09.2783657Z WritersAdmins""
2022-06-21T23:51:09.2783938Z Admins
2022-06-21T23:51:09.2784083Z 
2022-06-21T23:51:09.2784288Z AdminsAdmins*Admins�
2022-06-21T23:51:09.2784570Z �
2022-06-21T23:51:09.2784879Z �
2022-06-21T23:51:09.2785231Z ��ɕ"discoverychannel�
2022-06-21T23:51:09.2785511Z �
2022-06-21T23:51:09.2785898Z Org1MSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2786592Z MIICGjCCAcCgAwIBAgIRALSkm8uBeZrqQiu9skWyZbAwCgYIKoZIzj0EAwIwczEL
2022-06-21T23:51:09.2787244Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2788029Z cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
2022-06-21T23:51:09.2788631Z Lm9yZzEuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMzODAw
2022-06-21T23:51:09.2789212Z WjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
2022-06-21T23:51:09.2789807Z U2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZ
2022-06-21T23:51:09.2790590Z MBMGByqGSM49AgEGCCqGSM49AwEHA0IABNU+4DilvvFSs27uwkdizlUCRQz1Wcyz
2022-06-21T23:51:09.2791161Z Dbk80dDh8N75Eir30l7Kt8iVbT3+jwLrlzf+RCBny6LTGECSLQk5rKSjTTBLMA4G
2022-06-21T23:51:09.2791896Z A1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIOUNJqZ6FXzq
2022-06-21T23:51:09.2792498Z VEuNDmDfPEHOb2T23kL93V5eHyv8VtOOMAoGCCqGSM49BAMCA0gAMEUCIQCUWOls
2022-06-21T23:51:09.2793090Z ZHcLyGdbSlYVS1nyTj8xWt7rNFcYEdGb34H8LAIgfcnLxA6EX/VvrI/FkYvukqYg
2022-06-21T23:51:09.2793477Z 9q5+kvOWMZpQj8SqWUY=
2022-06-21T23:51:09.2794020Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2794389Z ��L#Ke�����`Xިms�����
2022-06-21T23:51:09.2794555Z 
2022-06-21T23:51:09.2794679Z �
2022-06-21T23:51:09.2794992Z discoverychannelH6
2022-06-21T23:51:09.2795428Z Application'
2022-06-21T23:51:09.2795743Z Org3MSP�
2022-06-21T23:51:09.2796031Z Org1MSP�
2022-06-21T23:51:09.2796299Z Org2MSP�
2022-06-21T23:51:09.2796439Z 
2022-06-21T23:51:09.2796605Z Consortium���
2022-06-21T23:51:09.2800051Z Application�
2022-06-21T23:51:09.2800461Z Org3MSP�
2022-06-21T23:51:09.2800731Z Org1MSP�
2022-06-21T23:51:09.2800975Z Org2MSP�$
2022-06-21T23:51:09.2801248Z Capabilities
2022-06-21T23:51:09.2801394Z 
2022-06-21T23:51:09.2801509Z 
2022-06-21T23:51:09.2801783Z V2_0�Admins"&
2022-06-21T23:51:09.2802041Z Endorsement
2022-06-21T23:51:09.2802289Z 	
2022-06-21T23:51:09.2802565Z WritersAdmins""
2022-06-21T23:51:09.2802993Z Readers
2022-06-21T23:51:09.2803249Z 	
2022-06-21T23:51:09.2803532Z ReadersAdmins""
2022-06-21T23:51:09.2803806Z Writers
2022-06-21T23:51:09.2804040Z 	
2022-06-21T23:51:09.2804323Z WritersAdmins""
2022-06-21T23:51:09.2804604Z Admins
2022-06-21T23:51:09.2804765Z 
2022-06-21T23:51:09.2804936Z AdminsAdmins"/
2022-06-21T23:51:09.2805314Z LifecycleEndorsement
2022-06-21T23:51:09.2805595Z 	
2022-06-21T23:51:09.2805905Z WritersAdmins*Admins"
2022-06-21T23:51:09.2806403Z 
2022-06-21T23:51:09.2806599Z Consortium
2022-06-21T23:51:09.2806924Z SampleConsortium�
2022-06-21T23:51:09.2807197Z �
2022-06-21T23:51:09.2807434Z �
2022-06-21T23:51:09.2807814Z Org1MSP�-----BEGIN CERTIFICATE-----
2022-06-21T23:51:09.2808371Z MIICGjCCAcCgAwIBAgIRALSkm8uBeZrqQiu9skWyZbAwCgYIKoZIzj0EAwIwczEL
2022-06-21T23:51:09.2809047Z MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
2022-06-21T23:51:09.2810105Z cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh
2022-06-21T23:51:09.2811310Z Lm9yZzEuZXhhbXBsZS5jb20wHhcNMjIwNjIxMjMzODAwWhcNMzIwNjE4MjMzODAw
2022-06-21T23:51:09.2811963Z WjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN
2022-06-21T23:51:09.2812628Z U2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZ
2022-06-21T23:51:09.2813495Z MBMGByqGSM49AgEGCCqGSM49AwEHA0IABNU+4DilvvFSs27uwkdizlUCRQz1Wcyz
2022-06-21T23:51:09.2814195Z Dbk80dDh8N75Eir30l7Kt8iVbT3+jwLrlzf+RCBny6LTGECSLQk5rKSjTTBLMA4G
2022-06-21T23:51:09.2814778Z A1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIOUNJqZ6FXzq
2022-06-21T23:51:09.2815729Z VEuNDmDfPEHOb2T23kL93V5eHyv8VtOOMAoGCCqGSM49BAMCA0gAMEUCIQCUWOls
2022-06-21T23:51:09.2816540Z ZHcLyGdbSlYVS1nyTj8xWt7rNFcYEdGb34H8LAIgfcnLxA6EX/VvrI/FkYvukqYg
2022-06-21T23:51:09.2817485Z 9q5+kvOWMZpQj8SqWUY=
2022-06-21T23:51:09.2817892Z -----END CERTIFICATE-----
2022-06-21T23:51:09.2818706Z ����>���V��:L��%�H��uF0D ;_\���p(K=j0���T���YS��m�C]= ����n �K��]䉨[C����%Y-���F0D B����Z�ʸ��M����\]���ʔR�Z
2022-06-21T23:51:09.2819267Z ��� $��Qy���yZ�~83(V�VU۬��$�)�xF0D 
2022-06-21T23:51:09.2819830Z ���R����W2�@J�|n�9������p�i*�� sYq�{� 5��^�_%��J��Y���{�`왫
2022-06-21T23:51:09.2820136Z �
2022-06-21T23:51:09.2820374Z �
2022-06-21T23:51:09.2820603Z �
2022-06-21T23:51:09.2820864Z �
2022-06-21T23:51:09.2821078Z �]
2022-06-21T23:51:09.2821635Z     Then The gateway named myDiscoveryGateway has a evaluate type response
2022-06-21T23:51:09.2821873Z 
2022-06-21T23:51:09.2822037Z @events @gateway @fabric_merge
2022-06-21T23:51:09.2822582Z Feature: Node SDK Events # test/ts-scenario/features/events.feature:8
2022-06-21T23:51:09.2822809Z 
2022-06-21T23:51:09.2822937Z   @events @gateway @fabric_merge
2022-06-21T23:51:09.2823817Z   Scenario: Using a Contract I can listen to full contract create events emitted by instantiated chaincodes # test/ts-scenario/features/events.feature:18
2022-06-21T23:51:09.2824618Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:51:09.2824798Z 
2022-06-21T23:51:09.2824805Z 
2022-06-21T23:51:09.2824812Z 
2022-06-21T23:51:09.2825034Z **********************************************************************************
2022-06-21T23:51:09.2829658Z **********************************************************************************
2022-06-21T23:51:09.2830184Z ****** EVENTS FEATURE Scenario 0 ******
2022-06-21T23:51:09.2830588Z **********************************************************************************
2022-06-21T23:51:09.2830956Z **********************************************************************************
2022-06-21T23:51:09.2831109Z 
2022-06-21T23:51:09.2831117Z 
2022-06-21T23:51:09.2831124Z 
2022-06-21T23:51:09.2831301Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:51:09.2831671Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:51:09.2832030Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:51:09.2832403Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:51:09.2832834Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:51:09.2833286Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:51:09.2834186Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:09.2835585Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:09.4332243Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:09.4332671Z baseapichannel
2022-06-21T23:51:09.4360445Z basev2channel
2022-06-21T23:51:09.4360901Z discoverychannel
2022-06-21T23:51:09.4361275Z <== have been joined by organization org1
2022-06-21T23:51:09.4361798Z Attempting to create channel eventschannel of type tls
2022-06-21T23:51:09.4363710Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c eventschannel -f /etc/hyperledger/configtx/channel-config/eventschannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:09.4365979Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c eventschannel -f /etc/hyperledger/configtx/channel-config/eventschannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:14.6251284Z Channel eventschannel has been created
2022-06-21T23:51:14.6252347Z Attempting to join organization org1 to channel eventschannel of type tls
2022-06-21T23:51:14.6254402Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:14.6257328Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:19.9735116Z Channel eventschannel has been joined by organization org1
2022-06-21T23:51:19.9735854Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:51:19.9737066Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:19.9738704Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:20.1534070Z Channel names ==>Channels peers has joined: 
2022-06-21T23:51:20.1534440Z discoverychannel
2022-06-21T23:51:20.1534690Z baseapichannel
2022-06-21T23:51:20.1534926Z basev2channel
2022-06-21T23:51:20.1535263Z <== have been joined by organization org2
2022-06-21T23:51:20.1536030Z Attempting to join organization org2 to channel eventschannel of type tls
2022-06-21T23:51:20.1538011Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:20.1540243Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/eventschannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:25.4892379Z Channel eventschannel has been joined by organization org2
2022-06-21T23:51:25.4895054Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:51:25.4896326Z Using default CLI container org1 to update channel eventschannel of type tls with updateTx eventschannel-anchor.tx
2022-06-21T23:51:25.4898464Z  -- runShellCommand ==>docker exec org1_cli peer channel update -o orderer.example.com:7050 -c eventschannel -f /etc/hyperledger/configtx/channel-config/eventschannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:25.4900994Z SCENARIO CMD: docker exec org1_cli peer channel update -o orderer.example.com:7050 -c eventschannel -f /etc/hyperledger/configtx/channel-config/eventschannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:30.6766626Z Channel eventschannel has been updated
2022-06-21T23:51:30.6772155Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:51:30.6772956Z 
2022-06-21T23:51:30.6774341Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:51:30.6774762Z 
2022-06-21T23:51:30.6775166Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:51:30.6775982Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:51:30.6777376Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:51:30.6784978Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:51:30.8599862Z Smart contract with name events is not committed for organization org1 using the CLI
2022-06-21T23:51:30.8600727Z Smart contract events at version 1.0.0 is not committed on channel eventschannel as events 
2022-06-21T23:51:30.8601089Z 
2022-06-21T23:51:30.8601760Z  -- Lifecycle deploy step two - package Smart contract events
2022-06-21T23:51:30.8602752Z Attempting lifecyle package of smart contract events with label events-eventschannel for organization org1 using the CLI
2022-06-21T23:51:30.8603948Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode package events.tar.gz --lang node --label events-eventschannel --path /opt/gopath/src/github.com/chaincode/node/events<==
2022-06-21T23:51:30.8605283Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode package events.tar.gz --lang node --label events-eventschannel --path /opt/gopath/src/github.com/chaincode/node/events
2022-06-21T23:51:36.0213772Z Smart contract events with label events-eventschannel has been packaged for organization org1 using the CLI
2022-06-21T23:51:36.0215223Z Attempting lifecyle package of smart contract events with label events-eventschannel for organization org2 using the CLI
2022-06-21T23:51:36.0216894Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode package events.tar.gz --lang node --label events-eventschannel --path /opt/gopath/src/github.com/chaincode/node/events<==
2022-06-21T23:51:36.0217971Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode package events.tar.gz --lang node --label events-eventschannel --path /opt/gopath/src/github.com/chaincode/node/events
2022-06-21T23:51:41.2021472Z Smart contract events with label events-eventschannel has been packaged for organization org2 using the CLI
2022-06-21T23:51:41.2022211Z 
2022-06-21T23:51:41.2070722Z  -- Lifecycle deploy step three - install Smart contract events
2022-06-21T23:51:41.2071333Z Attempting lifecycle install of smart contract package events for organization org1 using the CLI
2022-06-21T23:51:41.2072480Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode install events.tar.gz --connTimeout 240s<==
2022-06-21T23:51:41.2073251Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode install events.tar.gz --connTimeout 240s
2022-06-21T23:51:56.2678185Z Smart contract package events has been installed for organization org1 using the CLI
2022-06-21T23:51:56.2678927Z Smart contract events at version 1.0.0 has been installed on organization Org1 
2022-06-21T23:51:56.2679562Z Attempting lifecycle install of smart contract package events for organization org2 using the CLI
2022-06-21T23:51:56.2680830Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode install events.tar.gz --connTimeout 240s<==
2022-06-21T23:51:56.2681607Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode install events.tar.gz --connTimeout 240s
2022-06-21T23:52:11.0577174Z Smart contract package events has been installed for organization org2 using the CLI
2022-06-21T23:52:11.0578268Z Smart contract events at version 1.0.0 has been installed on organization Org2 
2022-06-21T23:52:11.0682026Z 
2022-06-21T23:52:11.0683391Z  -- Lifecycle deploy step four - approve Smart contract events
2022-06-21T23:52:11.0685073Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:52:11.0689253Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:52:11.2267335Z Attempting lifecycle approve of smart contract with reference events for organization org1 using the CLI
2022-06-21T23:52:11.2270350Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID eventschannel --name events --version 1.0.0 --package-id events-eventschannel:d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:11.2274066Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID eventschannel --name events --version 1.0.0 --package-id events-eventschannel:d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:17.1515267Z Smart contract with reference events has been approved for organization org1 using the CLI
2022-06-21T23:52:17.1517388Z Smart contract events at version 1.0.0 has been approved on organization Org1 
2022-06-21T23:52:17.1518673Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:52:17.1609528Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:52:17.3229253Z Attempting lifecycle approve of smart contract with reference events for organization org2 using the CLI
2022-06-21T23:52:17.3232345Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID eventschannel --name events --version 1.0.0 --package-id events-eventschannel:d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:17.3235892Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID eventschannel --name events --version 1.0.0 --package-id events-eventschannel:d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:23.2287699Z Smart contract with reference events has been approved for organization org2 using the CLI
2022-06-21T23:52:23.2288230Z Smart contract events at version 1.0.0 has been approved on organization Org2 
2022-06-21T23:52:28.2329164Z 
2022-06-21T23:52:28.2330876Z  -- Lifecycle deploy step five (final) - commit Smart contract events
2022-06-21T23:52:28.2331814Z Attempting lifecycle commit of smart contract with reference events for organization org1 using the CLI
2022-06-21T23:52:28.2335260Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID eventschannel --name events --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:28.2344550Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID eventschannel --name events --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/events/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:34.2054069Z Smart contract with reference events has been committed for organization org1 using the CLI
2022-06-21T23:52:34.2058601Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:34.2060304Z Creating new Gateway named event_gateway
2022-06-21T23:52:34.2065168Z Creating wallet of type memory
2022-06-21T23:52:34.2071229Z Will build existing Identity User1@Org1
2022-06-21T23:52:34.2074078Z Adding identity for User1@Org1 to wallet
2022-06-21T23:52:34.2077324Z fabricCAEndpoint https://localhost:7054 will be used for TLS certificate
2022-06-21T23:52:34.4744013Z Gateway event_gateway connected
2022-06-21T23:52:34.4749949Z     When I use the gateway named event_gateway to listen for full contract events named create with a listener named createValueListener for the smart contract named events on channel eventschannel
2022-06-21T23:52:34.4759379Z Retrieving contract from channel eventschannel
2022-06-21T23:52:34.5258810Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:52:34.5274131Z Retrieving contract from channel eventschannel
2022-06-21T23:52:35.1445367Z -> Received a contract event for listener [createValueListener] of eventName create
2022-06-21T23:52:35.1461115Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:35.1493315Z Retrieving contract from channel eventschannel
2022-06-21T23:52:35.7104963Z -> Received a contract event for listener [createValueListener] of eventName create
2022-06-21T23:52:35.7120426Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:35.7121377Z Retrieving contract from channel eventschannel
2022-06-21T23:52:36.2844787Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:36.2845408Z Retrieving contract from channel eventschannel
2022-06-21T23:52:36.2924092Z -> Received a contract event for listener [createValueListener] of eventName create
2022-06-21T23:52:36.8407534Z -> Received a contract event for listener [createValueListener] of eventName create
2022-06-21T23:52:36.8512582Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:36.8515109Z Retrieving contract from channel eventschannel
2022-06-21T23:52:37.4111604Z -> Received a contract event for listener [createValueListener] of eventName create
2022-06-21T23:52:37.4125144Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:37.4133203Z     Then I receive 5 events from the listener named createValueListener
2022-06-21T23:52:38.4158197Z Verified that the listener was called exactly 5 times
2022-06-21T23:52:38.4162614Z     And the listener named createValueListener should have contract events with payload containing "createValueTransactionContent"
2022-06-21T23:52:38.4169647Z ->Contract Event payload matches what we expect: createValueTransactionContent
2022-06-21T23:52:38.4170047Z 
2022-06-21T23:52:38.4175366Z   @events @gateway @fabric_merge
2022-06-21T23:52:38.4176207Z   Scenario: Using a Contract I can stop listening to full contract create events emitted by instantiated chaincodes # test/ts-scenario/features/events.feature:24
2022-06-21T23:52:38.4180423Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:38.4182762Z 
2022-06-21T23:52:38.4182771Z 
2022-06-21T23:52:38.4182778Z 
2022-06-21T23:52:38.4183072Z **********************************************************************************
2022-06-21T23:52:38.4183492Z **********************************************************************************
2022-06-21T23:52:38.4183807Z ****** EVENTS FEATURE Scenario 1 ******
2022-06-21T23:52:38.4184173Z **********************************************************************************
2022-06-21T23:52:38.4184528Z **********************************************************************************
2022-06-21T23:52:38.4184674Z 
2022-06-21T23:52:38.4184681Z 
2022-06-21T23:52:38.4184688Z 
2022-06-21T23:52:38.4189165Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:38.4190499Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:38.4194330Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:38.4194740Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:38.4199207Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:38.4202244Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:38.4203566Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:38.4204641Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:38.6011997Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:38.6013087Z baseapichannel
2022-06-21T23:52:38.6013357Z basev2channel
2022-06-21T23:52:38.6013879Z discoverychannel
2022-06-21T23:52:38.6014128Z eventschannel
2022-06-21T23:52:38.6014617Z <== have been joined by organization org1
2022-06-21T23:52:38.6015173Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:38.6015998Z baseapichannel
2022-06-21T23:52:38.6016678Z basev2channel
2022-06-21T23:52:38.6017534Z discoverychannel
2022-06-21T23:52:38.6018641Z eventschannel
2022-06-21T23:52:38.6019605Z <==
2022-06-21T23:52:38.6020319Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:38.6021507Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:38.6023246Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:38.7826790Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:38.7828039Z baseapichannel
2022-06-21T23:52:38.7830157Z basev2channel
2022-06-21T23:52:38.7839178Z discoverychannel
2022-06-21T23:52:38.7839889Z eventschannel
2022-06-21T23:52:38.7840393Z <== have been joined by organization org2
2022-06-21T23:52:38.7842174Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:38.7842665Z baseapichannel
2022-06-21T23:52:38.7844843Z basev2channel
2022-06-21T23:52:38.7845340Z discoverychannel
2022-06-21T23:52:38.7847447Z eventschannel
2022-06-21T23:52:38.7848043Z <==
2022-06-21T23:52:38.7849004Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:38.7852310Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:38.7853507Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:38.7855745Z 
2022-06-21T23:52:38.7856527Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:38.7859847Z 
2022-06-21T23:52:38.7860490Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:38.7861678Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:38.7864455Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:38.7868970Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:39.0049049Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:39.0049651Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:39.0050966Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:39.0051705Z Gateway named event_gateway already exists
2022-06-21T23:52:39.0052156Z     Given I am listening for full contract events named create with a listener named createValueListener
2022-06-21T23:52:39.0052579Z     When I unregister the listener named createValueListener
2022-06-21T23:52:39.0053136Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:52:39.0053629Z Retrieving contract from channel eventschannel
2022-06-21T23:52:39.5692460Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:39.5693507Z Retrieving contract from channel eventschannel
2022-06-21T23:52:40.1333188Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:40.1334069Z Retrieving contract from channel eventschannel
2022-06-21T23:52:40.7039984Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:40.7040702Z Retrieving contract from channel eventschannel
2022-06-21T23:52:41.2569313Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:41.2570633Z Retrieving contract from channel eventschannel
2022-06-21T23:52:41.8213914Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:41.8222217Z     Then I receive 0 events from the listener named createValueListener
2022-06-21T23:52:42.8249030Z Verified that the listener was called exactly 0 times
2022-06-21T23:52:42.8251842Z 
2022-06-21T23:52:42.8255317Z   @events @gateway @fabric_merge
2022-06-21T23:52:42.8259965Z   Scenario: Using a Contract I can listen to filtered contract events emitted by instantiated chaincodes # test/ts-scenario/features/events.feature:30
2022-06-21T23:52:42.8264451Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:42.8267775Z 
2022-06-21T23:52:42.8267863Z 
2022-06-21T23:52:42.8267870Z 
2022-06-21T23:52:42.8268361Z **********************************************************************************
2022-06-21T23:52:42.8268739Z **********************************************************************************
2022-06-21T23:52:42.8269040Z ****** EVENTS FEATURE Scenario 2 ******
2022-06-21T23:52:42.8269378Z **********************************************************************************
2022-06-21T23:52:42.8269711Z **********************************************************************************
2022-06-21T23:52:42.8269837Z 
2022-06-21T23:52:42.8269860Z 
2022-06-21T23:52:42.8269867Z 
2022-06-21T23:52:42.8278045Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:42.8283120Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:42.8286492Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:42.8290192Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:42.8299294Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:42.8304707Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:42.8308556Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:42.8312593Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:43.0261183Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:43.0262055Z eventschannel
2022-06-21T23:52:43.0265150Z baseapichannel
2022-06-21T23:52:43.0265822Z basev2channel
2022-06-21T23:52:43.0266281Z discoverychannel
2022-06-21T23:52:43.0267716Z <== have been joined by organization org1
2022-06-21T23:52:43.0268646Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:43.0271590Z eventschannel
2022-06-21T23:52:43.0277648Z baseapichannel
2022-06-21T23:52:43.0279847Z basev2channel
2022-06-21T23:52:43.0280080Z discoverychannel
2022-06-21T23:52:43.0280301Z <==
2022-06-21T23:52:43.0282109Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:43.0283540Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:43.0289098Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:43.2029509Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:43.2030592Z eventschannel
2022-06-21T23:52:43.2031048Z baseapichannel
2022-06-21T23:52:43.2031397Z basev2channel
2022-06-21T23:52:43.2032060Z discoverychannel
2022-06-21T23:52:43.2032468Z <== have been joined by organization org2
2022-06-21T23:52:43.2033111Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:43.2033438Z eventschannel
2022-06-21T23:52:43.2033654Z baseapichannel
2022-06-21T23:52:43.2033881Z basev2channel
2022-06-21T23:52:43.2034109Z discoverychannel
2022-06-21T23:52:43.2034327Z <==
2022-06-21T23:52:43.2061667Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:43.2065238Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:43.2066543Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:43.2067293Z 
2022-06-21T23:52:43.2067780Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:43.2068000Z 
2022-06-21T23:52:43.2068372Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:43.2069002Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:43.2070180Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:43.2071734Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:43.4013748Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:43.4014944Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:43.4016817Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:43.4017636Z Gateway named event_gateway already exists
2022-06-21T23:52:43.4021287Z     When I use the gateway named event_gateway to listen for filtered contract events named publicDC with a listener named dcValueListener for the smart contract named events on channel eventschannel
2022-06-21T23:52:43.4025188Z Retrieving contract from channel eventschannel
2022-06-21T23:52:43.4185478Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:43.4195532Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValueDisconnect] for contract events instantiated on channel eventschannel
2022-06-21T23:52:43.4198920Z Retrieving contract from channel eventschannel
2022-06-21T23:52:43.9742937Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:43.9772884Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:43.9773516Z Retrieving contract from channel eventschannel
2022-06-21T23:52:44.5357901Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:44.5358575Z Retrieving contract from channel eventschannel
2022-06-21T23:52:44.5404335Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:45.1078629Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:45.1091039Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:45.1092080Z Retrieving contract from channel eventschannel
2022-06-21T23:52:45.6694197Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:45.6719984Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:45.6720886Z Retrieving contract from channel eventschannel
2022-06-21T23:52:46.2241029Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:46.2244313Z     Then I receive 5 events from the listener named dcValueListener
2022-06-21T23:52:46.2285850Z -> Received a contract event for listener [dcValueListener] of eventName publicDC
2022-06-21T23:52:47.2248005Z Verified that the listener was called exactly 5 times
2022-06-21T23:52:47.2252901Z 
2022-06-21T23:52:47.2260981Z   @events @gateway @fabric_merge
2022-06-21T23:52:47.2263887Z   Scenario: Using a Contract I can stop listening to filtered contract events emitted by instantiated chaincodes # test/ts-scenario/features/events.feature:35
2022-06-21T23:52:47.2270400Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:47.2275374Z 
2022-06-21T23:52:47.2275406Z 
2022-06-21T23:52:47.2275559Z 
2022-06-21T23:52:47.2276247Z **********************************************************************************
2022-06-21T23:52:47.2276634Z **********************************************************************************
2022-06-21T23:52:47.2276941Z ****** EVENTS FEATURE Scenario 3 ******
2022-06-21T23:52:47.2277292Z **********************************************************************************
2022-06-21T23:52:47.2277638Z **********************************************************************************
2022-06-21T23:52:47.2277782Z 
2022-06-21T23:52:47.2277789Z 
2022-06-21T23:52:47.2277796Z 
2022-06-21T23:52:47.2285575Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:47.2290230Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:47.2290770Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:47.2292563Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:47.2295684Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:47.2297924Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:47.2300249Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:47.2301891Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:47.3869083Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:47.3869760Z baseapichannel
2022-06-21T23:52:47.3870149Z basev2channel
2022-06-21T23:52:47.3870515Z discoverychannel
2022-06-21T23:52:47.3870911Z eventschannel
2022-06-21T23:52:47.3871672Z <== have been joined by organization org1
2022-06-21T23:52:47.3872483Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:47.3872876Z baseapichannel
2022-06-21T23:52:47.3873437Z basev2channel
2022-06-21T23:52:47.3873747Z discoverychannel
2022-06-21T23:52:47.3874438Z eventschannel
2022-06-21T23:52:47.3874904Z <==
2022-06-21T23:52:47.3875907Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:47.3877190Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:47.3878736Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:47.5691863Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:47.5692995Z baseapichannel
2022-06-21T23:52:47.5694283Z basev2channel
2022-06-21T23:52:47.5694632Z discoverychannel
2022-06-21T23:52:47.5695034Z eventschannel
2022-06-21T23:52:47.5695618Z <== have been joined by organization org2
2022-06-21T23:52:47.5697403Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:47.5697871Z baseapichannel
2022-06-21T23:52:47.5698211Z basev2channel
2022-06-21T23:52:47.5698746Z discoverychannel
2022-06-21T23:52:47.5701036Z eventschannel
2022-06-21T23:52:47.5701387Z <==
2022-06-21T23:52:47.5702483Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:47.5703706Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:47.5704730Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:47.5705329Z 
2022-06-21T23:52:47.5705848Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:47.5706165Z 
2022-06-21T23:52:47.5706677Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:47.5707370Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:47.5708548Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:47.5710039Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:47.7547831Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:47.7548938Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:47.7573572Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:47.7574638Z Gateway named event_gateway already exists
2022-06-21T23:52:47.7575923Z     Given I am listening for filtered contract events named publicDC with a listener named dcValueListener
2022-06-21T23:52:47.7581580Z     When I unregister the listener named dcValueListener
2022-06-21T23:52:47.7582767Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValueDisconnect] for contract events instantiated on channel eventschannel
2022-06-21T23:52:47.7584212Z Retrieving contract from channel eventschannel
2022-06-21T23:52:48.3164605Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:48.3165730Z Retrieving contract from channel eventschannel
2022-06-21T23:52:48.8860133Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:48.8865915Z Retrieving contract from channel eventschannel
2022-06-21T23:52:49.4407488Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:49.4407999Z Retrieving contract from channel eventschannel
2022-06-21T23:52:49.9998678Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:49.9999228Z Retrieving contract from channel eventschannel
2022-06-21T23:52:50.5578952Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:50.5586880Z     Then I receive 0 events from the listener named dcValueListener
2022-06-21T23:52:51.5606008Z Verified that the listener was called exactly 0 times
2022-06-21T23:52:51.5609056Z 
2022-06-21T23:52:51.5613529Z   @events @gateway @fabric_merge
2022-06-21T23:52:51.5616868Z   Scenario: Using a Contract I can replay filtered contract events emitted by instantiated chaincodes # test/ts-scenario/features/events.feature:41
2022-06-21T23:52:51.5620714Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:51.5624252Z 
2022-06-21T23:52:51.5624285Z 
2022-06-21T23:52:51.5624441Z 
2022-06-21T23:52:51.5624792Z **********************************************************************************
2022-06-21T23:52:51.5625174Z **********************************************************************************
2022-06-21T23:52:51.5626831Z ****** EVENTS FEATURE Scenario 4 ******
2022-06-21T23:52:51.5627174Z **********************************************************************************
2022-06-21T23:52:51.5627521Z **********************************************************************************
2022-06-21T23:52:51.5627662Z 
2022-06-21T23:52:51.5627670Z 
2022-06-21T23:52:51.5627677Z 
2022-06-21T23:52:51.5634656Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:51.5636669Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:51.5637512Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:51.5638052Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:51.5642121Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:51.5643812Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:51.5645429Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:51.5646763Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:51.7290007Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:51.7291716Z baseapichannel
2022-06-21T23:52:51.7292933Z basev2channel
2022-06-21T23:52:51.7293441Z discoverychannel
2022-06-21T23:52:51.7294320Z eventschannel
2022-06-21T23:52:51.7294868Z <== have been joined by organization org1
2022-06-21T23:52:51.7296875Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:51.7298144Z baseapichannel
2022-06-21T23:52:51.7298633Z basev2channel
2022-06-21T23:52:51.7299566Z discoverychannel
2022-06-21T23:52:51.7300050Z eventschannel
2022-06-21T23:52:51.7300881Z <==
2022-06-21T23:52:51.7301532Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:51.7303536Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:51.7305457Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:51.9014984Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:51.9019928Z baseapichannel
2022-06-21T23:52:51.9020956Z basev2channel
2022-06-21T23:52:51.9021417Z discoverychannel
2022-06-21T23:52:51.9021730Z eventschannel
2022-06-21T23:52:51.9022813Z <== have been joined by organization org2
2022-06-21T23:52:51.9023920Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:51.9024725Z baseapichannel
2022-06-21T23:52:51.9025116Z basev2channel
2022-06-21T23:52:51.9025798Z discoverychannel
2022-06-21T23:52:51.9026189Z eventschannel
2022-06-21T23:52:51.9026863Z <==
2022-06-21T23:52:51.9027820Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:51.9029039Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:51.9030126Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:51.9031555Z 
2022-06-21T23:52:51.9032022Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:51.9032702Z 
2022-06-21T23:52:51.9033228Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:51.9034286Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:51.9035514Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:51.9037531Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:52.0855126Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:52.0856696Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:52.0861724Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:52.0867252Z Gateway named event_gateway already exists
2022-06-21T23:52:52.0877180Z     When I use the gateway named event_gateway to submit a total of 1 transactions with args [createValueDisconnect] for contract events instantiated on channel eventschannel
2022-06-21T23:52:52.0881326Z Retrieving contract from channel eventschannel
2022-06-21T23:52:52.6514783Z Successfully performed submit transaction [createValueDisconnect] with result []
2022-06-21T23:52:52.6516216Z     And I use the gateway named event_gateway to replay filtered contract events named publicDC from starting block 1 with a listener named filteredContractReplayListener for the smart contract named events on channel eventschannel
2022-06-21T23:52:52.6520927Z Retrieving contract from channel eventschannel
2022-06-21T23:52:52.6727395Z     Then I receive a minimum 1 events from the listener named filteredContractReplayListener
2022-06-21T23:52:52.6782692Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6792259Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6801413Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6810843Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6819094Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6830076Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6840168Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6857605Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6866672Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6876076Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6884692Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6893975Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6902196Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6911126Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6920191Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6927532Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6937934Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6949395Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6958354Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6968086Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:52.6975938Z -> Received a contract event for listener [filteredContractReplayListener] of eventName publicDC
2022-06-21T23:52:53.6745442Z Verified that the listener was called at least 1 times
2022-06-21T23:52:53.6749630Z     And I unregister the listener named filteredContractReplayListener
2022-06-21T23:52:53.6766372Z 
2022-06-21T23:52:53.6768764Z   @events @gateway @fabric_merge
2022-06-21T23:52:53.6770976Z   Scenario: Using a gateway I can listen to full block events emitted by networks # test/ts-scenario/features/events.feature:47
2022-06-21T23:52:53.6773106Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:53.6774407Z 
2022-06-21T23:52:53.6774704Z 
2022-06-21T23:52:53.6774864Z 
2022-06-21T23:52:53.6775546Z **********************************************************************************
2022-06-21T23:52:53.6776002Z **********************************************************************************
2022-06-21T23:52:53.6776330Z ****** EVENTS FEATURE Scenario 5 ******
2022-06-21T23:52:53.6776710Z **********************************************************************************
2022-06-21T23:52:53.6777104Z **********************************************************************************
2022-06-21T23:52:53.6777262Z 
2022-06-21T23:52:53.6777271Z 
2022-06-21T23:52:53.6777278Z 
2022-06-21T23:52:53.6782463Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:53.6783112Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:53.6783814Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:53.6785468Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:53.6786138Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:53.6789292Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:53.6790378Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:53.6792011Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:53.8448087Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:53.8448395Z basev2channel
2022-06-21T23:52:53.8448781Z discoverychannel
2022-06-21T23:52:53.8448982Z eventschannel
2022-06-21T23:52:53.8450111Z baseapichannel
2022-06-21T23:52:53.8451226Z <== have been joined by organization org1
2022-06-21T23:52:53.8451958Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:53.8452286Z basev2channel
2022-06-21T23:52:53.8452684Z discoverychannel
2022-06-21T23:52:53.8452900Z eventschannel
2022-06-21T23:52:53.8453124Z baseapichannel
2022-06-21T23:52:53.8453335Z <==
2022-06-21T23:52:53.8453876Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:53.8455346Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:53.8457041Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:54.0133944Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:54.0134436Z baseapichannel
2022-06-21T23:52:54.0135751Z basev2channel
2022-06-21T23:52:54.0137078Z discoverychannel
2022-06-21T23:52:54.0137862Z eventschannel
2022-06-21T23:52:54.0138557Z <== have been joined by organization org2
2022-06-21T23:52:54.0139044Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:54.0139354Z baseapichannel
2022-06-21T23:52:54.0139590Z basev2channel
2022-06-21T23:52:54.0139829Z discoverychannel
2022-06-21T23:52:54.0140065Z eventschannel
2022-06-21T23:52:54.0140260Z <==
2022-06-21T23:52:54.0141123Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:54.0141682Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:54.0142803Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:54.0143365Z 
2022-06-21T23:52:54.0143643Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:54.0143855Z 
2022-06-21T23:52:54.0144237Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:54.0146659Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:54.0147986Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:54.0149960Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:54.2053145Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:54.2057009Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:54.2058447Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:54.2059566Z Gateway named event_gateway already exists
2022-06-21T23:52:54.2061359Z     When I use the gateway named event_gateway to listen for full block events with a listener named fullBlockListener on channel eventschannel
2022-06-21T23:52:54.2064209Z ->Stored a block event listener: fullBlockListener
2022-06-21T23:52:54.2065753Z     When I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:52:54.2067288Z Retrieving contract from channel eventschannel
2022-06-21T23:52:54.7877803Z ->Received a block event fullBlockListener
2022-06-21T23:52:54.7878492Z ->Received a block event - added blockevent to payloads fullBlockListener
2022-06-21T23:52:54.7912545Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:54.7920997Z     Then I receive a minimum 1 events from the listener named fullBlockListener
2022-06-21T23:52:55.7952151Z Verified that the listener was called at least 1 times
2022-06-21T23:52:55.7955819Z 
2022-06-21T23:52:55.7956366Z   @events @gateway @fabric_merge
2022-06-21T23:52:55.7957531Z   Scenario: Using a gateway I can stop listening to full block events emitted by networks # test/ts-scenario/features/events.feature:52
2022-06-21T23:52:55.7963557Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:52:55.7964317Z 
2022-06-21T23:52:55.7964493Z 
2022-06-21T23:52:55.7964700Z 
2022-06-21T23:52:55.7966366Z **********************************************************************************
2022-06-21T23:52:55.7966954Z **********************************************************************************
2022-06-21T23:52:55.7967723Z ****** EVENTS FEATURE Scenario 6 ******
2022-06-21T23:52:55.7968273Z **********************************************************************************
2022-06-21T23:52:55.7968952Z **********************************************************************************
2022-06-21T23:52:55.7969622Z 
2022-06-21T23:52:55.7970956Z 
2022-06-21T23:52:55.8027359Z 
2022-06-21T23:52:55.8030117Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:52:55.8033064Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:52:55.8035847Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:52:55.8038779Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:52:55.8042725Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:52:55.8045552Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:52:55.8049214Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:55.8054044Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:55.9604366Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:55.9604678Z baseapichannel
2022-06-21T23:52:55.9606125Z basev2channel
2022-06-21T23:52:55.9606593Z discoverychannel
2022-06-21T23:52:55.9607154Z eventschannel
2022-06-21T23:52:55.9610166Z <== have been joined by organization org1
2022-06-21T23:52:55.9611126Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:55.9611908Z baseapichannel
2022-06-21T23:52:55.9612179Z basev2channel
2022-06-21T23:52:55.9612416Z discoverychannel
2022-06-21T23:52:55.9612627Z eventschannel
2022-06-21T23:52:55.9612989Z <==
2022-06-21T23:52:55.9613362Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:52:55.9614443Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:55.9615501Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:56.1255242Z Channel names ==>Channels peers has joined: 
2022-06-21T23:52:56.1256265Z baseapichannel
2022-06-21T23:52:56.1258623Z basev2channel
2022-06-21T23:52:56.1259078Z discoverychannel
2022-06-21T23:52:56.1259800Z eventschannel
2022-06-21T23:52:56.1260255Z <== have been joined by organization org2
2022-06-21T23:52:56.1260819Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:52:56.1261276Z baseapichannel
2022-06-21T23:52:56.1261638Z basev2channel
2022-06-21T23:52:56.1262006Z discoverychannel
2022-06-21T23:52:56.1262401Z eventschannel
2022-06-21T23:52:56.1265128Z <==
2022-06-21T23:52:56.1266448Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:52:56.1267106Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:52:56.1268442Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:52:56.1269062Z 
2022-06-21T23:52:56.1269339Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:52:56.1269517Z 
2022-06-21T23:52:56.1269838Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:52:56.1270390Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:52:56.1271422Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:52:56.1274588Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:52:56.3052955Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:52:56.3191646Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:52:56.3192685Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:52:56.3193357Z Gateway named event_gateway already exists
2022-06-21T23:52:56.3193841Z     Given I am listening for full block events with a listener named fullBlockListener
2022-06-21T23:52:56.3194954Z     When I unregister the listener named fullBlockListener
2022-06-21T23:52:56.3195582Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:52:56.3196147Z Retrieving contract from channel eventschannel
2022-06-21T23:52:56.8879002Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:56.8879881Z Retrieving contract from channel eventschannel
2022-06-21T23:52:57.4517455Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:57.4518041Z Retrieving contract from channel eventschannel
2022-06-21T23:52:58.0324854Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:58.0325441Z Retrieving contract from channel eventschannel
2022-06-21T23:52:58.5963712Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:58.5965174Z Retrieving contract from channel eventschannel
2022-06-21T23:52:59.1590356Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:52:59.1592318Z     Then I receive 0 events from the listener named fullBlockListener
2022-06-21T23:53:00.1602321Z Verified that the listener was called exactly 0 times
2022-06-21T23:53:00.1605911Z 
2022-06-21T23:53:00.1608873Z   @events @gateway @fabric_merge
2022-06-21T23:53:00.1611009Z   Scenario: Using a gateway I can listen to filtered block events emitted by networks # test/ts-scenario/features/events.feature:58
2022-06-21T23:53:00.1614711Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:00.1616011Z 
2022-06-21T23:53:00.1616280Z 
2022-06-21T23:53:00.1616539Z 
2022-06-21T23:53:00.1616841Z **********************************************************************************
2022-06-21T23:53:00.1617225Z **********************************************************************************
2022-06-21T23:53:00.1618961Z ****** EVENTS FEATURE Scenario 7 ******
2022-06-21T23:53:00.1619998Z **********************************************************************************
2022-06-21T23:53:00.1622355Z **********************************************************************************
2022-06-21T23:53:00.1622657Z 
2022-06-21T23:53:00.1625125Z 
2022-06-21T23:53:00.1625244Z 
2022-06-21T23:53:00.1628652Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:00.1629396Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:00.1630086Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:00.1630954Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:00.1633437Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:00.1634110Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:00.1637363Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:00.1638859Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:00.3413351Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:00.3414536Z baseapichannel
2022-06-21T23:53:00.3415685Z basev2channel
2022-06-21T23:53:00.3418732Z discoverychannel
2022-06-21T23:53:00.3419275Z eventschannel
2022-06-21T23:53:00.3419950Z <== have been joined by organization org1
2022-06-21T23:53:00.3421005Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:00.3424484Z baseapichannel
2022-06-21T23:53:00.3425523Z basev2channel
2022-06-21T23:53:00.3426611Z discoverychannel
2022-06-21T23:53:00.3431790Z eventschannel
2022-06-21T23:53:00.3432103Z <==
2022-06-21T23:53:00.3432611Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:00.3433763Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:00.3444838Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:00.5144453Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:00.5145189Z discoverychannel
2022-06-21T23:53:00.5145713Z eventschannel
2022-06-21T23:53:00.5147083Z baseapichannel
2022-06-21T23:53:00.5147455Z basev2channel
2022-06-21T23:53:00.5147886Z <== have been joined by organization org2
2022-06-21T23:53:00.5148456Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:00.5148992Z discoverychannel
2022-06-21T23:53:00.5149562Z eventschannel
2022-06-21T23:53:00.5152404Z baseapichannel
2022-06-21T23:53:00.5152768Z basev2channel
2022-06-21T23:53:00.5153190Z <==
2022-06-21T23:53:00.5156704Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:00.5157440Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:00.5158681Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:00.5160008Z 
2022-06-21T23:53:00.5160488Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:00.5160871Z 
2022-06-21T23:53:00.5161351Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:00.5162082Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:00.5163341Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:00.5165282Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:00.7133157Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:00.7134154Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:00.7135758Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:00.7136276Z Gateway named event_gateway already exists
2022-06-21T23:53:00.7136812Z     When I use the gateway named event_gateway to listen for filtered block events with a listener named filteredBlockListener on channel eventschannel
2022-06-21T23:53:00.7137447Z ->Stored a block event listener: filteredBlockListener
2022-06-21T23:53:00.7137987Z     And I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:00.7138465Z Retrieving contract from channel eventschannel
2022-06-21T23:53:01.2821486Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:01.2832116Z     Then I receive a minimum 1 events from the listener named filteredBlockListener
2022-06-21T23:53:01.2845796Z ->Received a block event filteredBlockListener
2022-06-21T23:53:01.2850596Z ->Received a block event - added blockevent to payloads filteredBlockListener
2022-06-21T23:53:02.2847029Z Verified that the listener was called at least 1 times
2022-06-21T23:53:02.2849153Z 
2022-06-21T23:53:02.2852234Z   @events @gateway @fabric_merge
2022-06-21T23:53:02.2854442Z   Scenario: Using a gateway I can stop listening to filtered block events emitted by networks # test/ts-scenario/features/events.feature:63
2022-06-21T23:53:02.2858506Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:02.2861013Z 
2022-06-21T23:53:02.2861282Z 
2022-06-21T23:53:02.2863011Z 
2022-06-21T23:53:02.2864672Z **********************************************************************************
2022-06-21T23:53:02.2865152Z **********************************************************************************
2022-06-21T23:53:02.2866655Z ****** EVENTS FEATURE Scenario 8 ******
2022-06-21T23:53:02.2869933Z **********************************************************************************
2022-06-21T23:53:02.2871403Z **********************************************************************************
2022-06-21T23:53:02.2872226Z 
2022-06-21T23:53:02.2872551Z 
2022-06-21T23:53:02.2872688Z 
2022-06-21T23:53:02.2882719Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:02.2884201Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:02.2884847Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:02.2885441Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:02.2886206Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:02.2890079Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:02.2891682Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:02.2893700Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:02.4507173Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:02.4508467Z basev2channel
2022-06-21T23:53:02.4510631Z discoverychannel
2022-06-21T23:53:02.4511618Z eventschannel
2022-06-21T23:53:02.4512221Z baseapichannel
2022-06-21T23:53:02.4513433Z <== have been joined by organization org1
2022-06-21T23:53:02.4528839Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:02.4533120Z basev2channel
2022-06-21T23:53:02.4533536Z discoverychannel
2022-06-21T23:53:02.4533752Z eventschannel
2022-06-21T23:53:02.4533977Z baseapichannel
2022-06-21T23:53:02.4534195Z <==
2022-06-21T23:53:02.4534587Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:02.4535694Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:02.4536852Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:02.6174624Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:02.6175892Z basev2channel
2022-06-21T23:53:02.6176403Z discoverychannel
2022-06-21T23:53:02.6178354Z eventschannel
2022-06-21T23:53:02.6178920Z baseapichannel
2022-06-21T23:53:02.6179856Z <== have been joined by organization org2
2022-06-21T23:53:02.6180601Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:02.6180955Z basev2channel
2022-06-21T23:53:02.6181202Z discoverychannel
2022-06-21T23:53:02.6181446Z eventschannel
2022-06-21T23:53:02.6181666Z baseapichannel
2022-06-21T23:53:02.6181886Z <==
2022-06-21T23:53:02.6183276Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:02.6183850Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:02.6184817Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:02.6185374Z 
2022-06-21T23:53:02.6185854Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:02.6186193Z 
2022-06-21T23:53:02.6186687Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:02.6187348Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:02.6198754Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:02.6200837Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:02.8075768Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:02.8076746Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:02.8078163Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:02.8079106Z Gateway named event_gateway already exists
2022-06-21T23:53:02.8079735Z     Given I am listening for filtered block events with a listener named filteredBlockListener
2022-06-21T23:53:02.8080391Z     When I unregister the listener named filteredBlockListener
2022-06-21T23:53:02.8081496Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:02.8082691Z Retrieving contract from channel eventschannel
2022-06-21T23:53:03.3920779Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:03.3922682Z Retrieving contract from channel eventschannel
2022-06-21T23:53:03.9450928Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:03.9451699Z Retrieving contract from channel eventschannel
2022-06-21T23:53:04.5228536Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:04.5229522Z Retrieving contract from channel eventschannel
2022-06-21T23:53:05.0871389Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:05.0872333Z Retrieving contract from channel eventschannel
2022-06-21T23:53:05.6501877Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:05.6503667Z     Then I receive 0 events from the listener named filteredBlockListener
2022-06-21T23:53:06.6522877Z Verified that the listener was called exactly 0 times
2022-06-21T23:53:06.6524005Z 
2022-06-21T23:53:06.6528383Z   @events @gateway @fabric_merge
2022-06-21T23:53:06.6542415Z   Scenario: Using a gateway I can listen to filtered block events emitted by networks between a start and end block # test/ts-scenario/features/events.feature:69
2022-06-21T23:53:06.6542924Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:06.6546311Z 
2022-06-21T23:53:06.6546546Z 
2022-06-21T23:53:06.6546558Z 
2022-06-21T23:53:06.6547118Z **********************************************************************************
2022-06-21T23:53:06.6547745Z **********************************************************************************
2022-06-21T23:53:06.6548099Z ****** EVENTS FEATURE Scenario 9 ******
2022-06-21T23:53:06.6548498Z **********************************************************************************
2022-06-21T23:53:06.6548887Z **********************************************************************************
2022-06-21T23:53:06.6549235Z 
2022-06-21T23:53:06.6549244Z 
2022-06-21T23:53:06.6549252Z 
2022-06-21T23:53:06.6554551Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:06.6558704Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:06.6559095Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:06.6559471Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:06.6563660Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:06.6564764Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:06.6566575Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:06.6567863Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:06.8292142Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:06.8292465Z discoverychannel
2022-06-21T23:53:06.8292887Z eventschannel
2022-06-21T23:53:06.8293085Z baseapichannel
2022-06-21T23:53:06.8293296Z basev2channel
2022-06-21T23:53:06.8293595Z <== have been joined by organization org1
2022-06-21T23:53:06.8294017Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:06.8294298Z discoverychannel
2022-06-21T23:53:06.8294510Z eventschannel
2022-06-21T23:53:06.8294720Z baseapichannel
2022-06-21T23:53:06.8294909Z basev2channel
2022-06-21T23:53:06.8295411Z <==
2022-06-21T23:53:06.8295784Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:06.8296821Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:06.8297861Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:07.0055888Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:07.0056254Z baseapichannel
2022-06-21T23:53:07.0057038Z basev2channel
2022-06-21T23:53:07.0057296Z discoverychannel
2022-06-21T23:53:07.0057625Z eventschannel
2022-06-21T23:53:07.0057968Z <== have been joined by organization org2
2022-06-21T23:53:07.0063897Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:07.0065322Z baseapichannel
2022-06-21T23:53:07.0065938Z basev2channel
2022-06-21T23:53:07.0066231Z discoverychannel
2022-06-21T23:53:07.0066492Z eventschannel
2022-06-21T23:53:07.0066721Z <==
2022-06-21T23:53:07.0110495Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:07.0111298Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:07.0112755Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:07.0113384Z 
2022-06-21T23:53:07.0113802Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:07.0114369Z 
2022-06-21T23:53:07.0116734Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:07.0117506Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:07.0119457Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:07.0121863Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:07.1892381Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:07.1893440Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:07.1894832Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:07.1895359Z Gateway named event_gateway already exists
2022-06-21T23:53:07.1896199Z     When I use the gateway named event_gateway to listen for filtered block events between 0 and 2 with a listener named filteredNumberedBlockListener on channel eventschannel
2022-06-21T23:53:07.2100911Z ->Received a block event filteredNumberedBlockListener
2022-06-21T23:53:07.2102297Z ->Received a block event - added blockevent to payloads filteredNumberedBlockListener
2022-06-21T23:53:07.2103204Z ->Stored a block event listener: filteredNumberedBlockListener
2022-06-21T23:53:07.2108727Z     And I use the gateway named event_gateway to submit a total of 10 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:07.2110399Z Retrieving contract from channel eventschannel
2022-06-21T23:53:07.2190455Z ->Received a block event filteredNumberedBlockListener
2022-06-21T23:53:07.2191583Z ->Received a block event - added blockevent to payloads filteredNumberedBlockListener
2022-06-21T23:53:07.2200821Z ->Received a block event filteredNumberedBlockListener
2022-06-21T23:53:07.2201869Z ->Received a block event - added blockevent to payloads filteredNumberedBlockListener
2022-06-21T23:53:07.7756789Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:07.7758032Z Retrieving contract from channel eventschannel
2022-06-21T23:53:08.3450955Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:08.3451527Z Retrieving contract from channel eventschannel
2022-06-21T23:53:08.9074528Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:08.9075661Z Retrieving contract from channel eventschannel
2022-06-21T23:53:09.4641696Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:09.4645185Z Retrieving contract from channel eventschannel
2022-06-21T23:53:10.0260593Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:10.0290024Z Retrieving contract from channel eventschannel
2022-06-21T23:53:10.5787374Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:10.5789109Z Retrieving contract from channel eventschannel
2022-06-21T23:53:11.1686335Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:11.1687318Z Retrieving contract from channel eventschannel
2022-06-21T23:53:11.7416613Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:11.7417642Z Retrieving contract from channel eventschannel
2022-06-21T23:53:12.3124810Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:12.3125805Z Retrieving contract from channel eventschannel
2022-06-21T23:53:12.8824442Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:12.8830053Z     Then I receive a minimum 2 events from the listener named filteredNumberedBlockListener
2022-06-21T23:53:13.8842457Z Verified that the listener was called at least 2 times
2022-06-21T23:53:13.8845661Z 
2022-06-21T23:53:13.8849822Z   @events @gateway @fabric_merge
2022-06-21T23:53:13.8853900Z   Scenario: Using a gateway I can stop listening to filtered block events emitted by networks between a start and end block # test/ts-scenario/features/events.feature:74
2022-06-21T23:53:13.8857540Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:13.8861470Z 
2022-06-21T23:53:13.8861487Z 
2022-06-21T23:53:13.8861494Z 
2022-06-21T23:53:13.8861805Z **********************************************************************************
2022-06-21T23:53:13.8862197Z **********************************************************************************
2022-06-21T23:53:13.8862524Z ****** EVENTS FEATURE Scenario 10 ******
2022-06-21T23:53:13.8862902Z **********************************************************************************
2022-06-21T23:53:13.8863272Z **********************************************************************************
2022-06-21T23:53:13.8863425Z 
2022-06-21T23:53:13.8863433Z 
2022-06-21T23:53:13.8863440Z 
2022-06-21T23:53:13.8868600Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:13.8869751Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:13.8870264Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:13.8871056Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:13.8872173Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:13.8873311Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:13.8874780Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:13.8876062Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:14.0532464Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:14.0533194Z basev2channel
2022-06-21T23:53:14.0533576Z discoverychannel
2022-06-21T23:53:14.0533923Z eventschannel
2022-06-21T23:53:14.0534272Z baseapichannel
2022-06-21T23:53:14.0534719Z <== have been joined by organization org1
2022-06-21T23:53:14.0535523Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:14.0536828Z basev2channel
2022-06-21T23:53:14.0537217Z discoverychannel
2022-06-21T23:53:14.0537533Z eventschannel
2022-06-21T23:53:14.0537825Z baseapichannel
2022-06-21T23:53:14.0538119Z <==
2022-06-21T23:53:14.0538941Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:14.0540475Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:14.0541954Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:14.2252883Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:14.2253855Z basev2channel
2022-06-21T23:53:14.2254692Z discoverychannel
2022-06-21T23:53:14.2255165Z eventschannel
2022-06-21T23:53:14.2255613Z baseapichannel
2022-06-21T23:53:14.2256260Z <== have been joined by organization org2
2022-06-21T23:53:14.2257802Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:14.2258499Z basev2channel
2022-06-21T23:53:14.2259313Z discoverychannel
2022-06-21T23:53:14.2259895Z eventschannel
2022-06-21T23:53:14.2260672Z baseapichannel
2022-06-21T23:53:14.2261724Z <==
2022-06-21T23:53:14.2263603Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:14.2265148Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:14.2267793Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:14.2268727Z 
2022-06-21T23:53:14.2269181Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:14.2269857Z 
2022-06-21T23:53:14.2270591Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:14.2271637Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:14.2272985Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:14.2274575Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:14.4281735Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:14.4283499Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:14.4285401Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:14.4287602Z Gateway named event_gateway already exists
2022-06-21T23:53:14.4289714Z     Given I am listening for filtered block events with a listener named filteredNumberedBlockListener
2022-06-21T23:53:14.4292596Z     When I unregister the listener named filteredNumberedBlockListener
2022-06-21T23:53:14.4296024Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:14.4298761Z Retrieving contract from channel eventschannel
2022-06-21T23:53:15.0062247Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:15.0081073Z Retrieving contract from channel eventschannel
2022-06-21T23:53:15.5742889Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:15.5749672Z Retrieving contract from channel eventschannel
2022-06-21T23:53:16.1340497Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:16.1350905Z Retrieving contract from channel eventschannel
2022-06-21T23:53:16.6856877Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:16.6876032Z Retrieving contract from channel eventschannel
2022-06-21T23:53:17.2481773Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:17.2489122Z     Then I receive 0 events from the listener named filteredNumberedBlockListener
2022-06-21T23:53:18.2498096Z Verified that the listener was called exactly 0 times
2022-06-21T23:53:18.2499302Z 
2022-06-21T23:53:18.2504288Z   @events @gateway @fabric_merge
2022-06-21T23:53:18.2509742Z   Scenario: Using a gateway I can listen to private block events emitted by networks # test/ts-scenario/features/events.feature:80
2022-06-21T23:53:18.2515184Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:18.2520046Z 
2022-06-21T23:53:18.2520099Z 
2022-06-21T23:53:18.2520229Z 
2022-06-21T23:53:18.2520543Z **********************************************************************************
2022-06-21T23:53:18.2520963Z **********************************************************************************
2022-06-21T23:53:18.2521290Z ****** EVENTS FEATURE Scenario 11 ******
2022-06-21T23:53:18.2521652Z **********************************************************************************
2022-06-21T23:53:18.2522392Z **********************************************************************************
2022-06-21T23:53:18.2522566Z 
2022-06-21T23:53:18.2522573Z 
2022-06-21T23:53:18.2522598Z 
2022-06-21T23:53:18.2527987Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:18.2532879Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:18.2533272Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:18.2533635Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:18.2537398Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:18.2542274Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:18.2543523Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:18.2544853Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:18.4373391Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:18.4374028Z baseapichannel
2022-06-21T23:53:18.4374618Z basev2channel
2022-06-21T23:53:18.4374916Z discoverychannel
2022-06-21T23:53:18.4375156Z eventschannel
2022-06-21T23:53:18.4375506Z <== have been joined by organization org1
2022-06-21T23:53:18.4375980Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:18.4376287Z baseapichannel
2022-06-21T23:53:18.4376513Z basev2channel
2022-06-21T23:53:18.4376740Z discoverychannel
2022-06-21T23:53:18.4376950Z eventschannel
2022-06-21T23:53:18.4377154Z <==
2022-06-21T23:53:18.4377539Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:18.4378669Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:18.4379822Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:18.6212931Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:18.6213450Z baseapichannel
2022-06-21T23:53:18.6213696Z basev2channel
2022-06-21T23:53:18.6213937Z discoverychannel
2022-06-21T23:53:18.6214159Z eventschannel
2022-06-21T23:53:18.6214487Z <== have been joined by organization org2
2022-06-21T23:53:18.6215055Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:18.6215388Z baseapichannel
2022-06-21T23:53:18.6215605Z basev2channel
2022-06-21T23:53:18.6215840Z discoverychannel
2022-06-21T23:53:18.6216074Z eventschannel
2022-06-21T23:53:18.6216284Z <==
2022-06-21T23:53:18.6217516Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:18.6218068Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:18.6218922Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:18.6219267Z 
2022-06-21T23:53:18.6219517Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:18.6219699Z 
2022-06-21T23:53:18.6220018Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:18.6220582Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:18.6221680Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:18.6223386Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:18.8152427Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:18.8153431Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:18.8155936Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:18.8158069Z Gateway named event_gateway already exists
2022-06-21T23:53:18.8160396Z     When I use the gateway named event_gateway to listen for private block events with a listener named privateBlockListener on channel eventschannel
2022-06-21T23:53:18.8361393Z ->Received a block event privateBlockListener
2022-06-21T23:53:18.8362446Z ->Received a block event - added blockevent to payloads privateBlockListener
2022-06-21T23:53:18.8372479Z ->Stored a block event listener: privateBlockListener
2022-06-21T23:53:18.8378298Z     And I use the gateway named event_gateway to submit a transaction with args [privateValuePut] for contract events instantiated on channel eventschannel
2022-06-21T23:53:18.8382996Z Retrieving contract from channel eventschannel
2022-06-21T23:53:19.5398342Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:19.5409727Z     Then I receive a minimum 1 events from the listener named privateBlockListener
2022-06-21T23:53:19.5489728Z ->Received a block event privateBlockListener
2022-06-21T23:53:19.5490879Z ->Received a block event - added blockevent to payloads privateBlockListener
2022-06-21T23:53:19.5495683Z ->Received a block event - blockevent has privateData {"data_model":0,"ns_pvt_rwset":[{"namespace":"events","collection_pvt_rwset":[{"collection_name":"collectionEvents","rwset":{"reads":[],"range_queries_info":[],"writes":[{"key":"myprivatekey","is_delete":false,"value":{"type":"Buffer","data":[109,121,112,114,105,118,97,116,101,100,97,116,97]}}],"metadata_writes":[]}}]}]}
2022-06-21T23:53:20.5420273Z Verified that the listener was called at least 1 times
2022-06-21T23:53:20.5427164Z     And the listener named privateBlockListener should have private data containing "myprivatedata"
2022-06-21T23:53:20.5436113Z ->Transaction Payload has privateData {"data_model":0,"ns_pvt_rwset":[{"namespace":"events","collection_pvt_rwset":[{"collection_name":"collectionEvents","rwset":{"reads":[],"range_queries_info":[],"writes":[{"key":"myprivatekey","is_delete":false,"value":{"type":"Buffer","data":[109,121,112,114,105,118,97,116,101,100,97,116,97]}}],"metadata_writes":[]}}]}]}
2022-06-21T23:53:20.5438522Z ->privateData myprivatedata
2022-06-21T23:53:20.5440388Z ->Transaction Payload privateData checks out privateBlockListener
2022-06-21T23:53:20.5440954Z 
2022-06-21T23:53:20.5442539Z   @events @gateway @fabric_merge
2022-06-21T23:53:20.5443535Z   Scenario: Using a gateway I can stop listening to private block events emitted by networks # test/ts-scenario/features/events.feature:86
2022-06-21T23:53:20.5445521Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:20.5445934Z 
2022-06-21T23:53:20.5446604Z 
2022-06-21T23:53:20.5446786Z 
2022-06-21T23:53:20.5447152Z **********************************************************************************
2022-06-21T23:53:20.5449512Z **********************************************************************************
2022-06-21T23:53:20.5449864Z ****** EVENTS FEATURE Scenario 12 ******
2022-06-21T23:53:20.5450250Z **********************************************************************************
2022-06-21T23:53:20.5450824Z **********************************************************************************
2022-06-21T23:53:20.5450987Z 
2022-06-21T23:53:20.5450995Z 
2022-06-21T23:53:20.5451010Z 
2022-06-21T23:53:20.5451557Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:20.5455714Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:20.5456161Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:20.5456563Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:20.5457062Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:20.5459386Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:20.5460742Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:20.5462309Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:20.7333075Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:20.7334173Z baseapichannel
2022-06-21T23:53:20.7335484Z basev2channel
2022-06-21T23:53:20.7336019Z discoverychannel
2022-06-21T23:53:20.7336926Z eventschannel
2022-06-21T23:53:20.7337689Z <== have been joined by organization org1
2022-06-21T23:53:20.7338938Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:20.7339830Z baseapichannel
2022-06-21T23:53:20.7340945Z basev2channel
2022-06-21T23:53:20.7341380Z discoverychannel
2022-06-21T23:53:20.7342204Z eventschannel
2022-06-21T23:53:20.7342624Z <==
2022-06-21T23:53:20.7344008Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:20.7346180Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:20.7348805Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:20.9093012Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:20.9093849Z baseapichannel
2022-06-21T23:53:20.9094095Z basev2channel
2022-06-21T23:53:20.9094327Z discoverychannel
2022-06-21T23:53:20.9094546Z eventschannel
2022-06-21T23:53:20.9096650Z <== have been joined by organization org2
2022-06-21T23:53:20.9097908Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:20.9098644Z baseapichannel
2022-06-21T23:53:20.9099116Z basev2channel
2022-06-21T23:53:20.9099358Z discoverychannel
2022-06-21T23:53:20.9099580Z eventschannel
2022-06-21T23:53:20.9099767Z <==
2022-06-21T23:53:20.9100625Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:20.9101160Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:20.9102107Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:20.9102473Z 
2022-06-21T23:53:20.9102717Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:20.9102908Z 
2022-06-21T23:53:20.9103253Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:20.9103844Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:20.9104974Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:20.9107444Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:21.1237681Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:21.1238801Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:21.1241459Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:21.1243747Z Gateway named event_gateway already exists
2022-06-21T23:53:21.1247301Z     Given I am listening for private block events with a listener named privateBlockListener
2022-06-21T23:53:21.1250167Z     When I unregister the listener named privateBlockListener
2022-06-21T23:53:21.1258269Z     And I use the gateway named event_gateway to submit a total of 5 transactions with args [privateValuePut] for contract events instantiated on channel eventschannel
2022-06-21T23:53:21.1259565Z Retrieving contract from channel eventschannel
2022-06-21T23:53:21.7348765Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:21.7351583Z Retrieving contract from channel eventschannel
2022-06-21T23:53:22.3386870Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:22.3388141Z Retrieving contract from channel eventschannel
2022-06-21T23:53:22.9797011Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:22.9798082Z Retrieving contract from channel eventschannel
2022-06-21T23:53:23.5959353Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:23.5960185Z Retrieving contract from channel eventschannel
2022-06-21T23:53:24.1939258Z Successfully performed submit transaction [privateValuePut] with result []
2022-06-21T23:53:24.1943179Z     Then I receive 0 events from the listener named privateBlockListener
2022-06-21T23:53:25.1953282Z Verified that the listener was called exactly 0 times
2022-06-21T23:53:25.1954721Z 
2022-06-21T23:53:25.1961621Z   @events @gateway @fabric_merge
2022-06-21T23:53:25.1966679Z   Scenario: Checkpoint block event listening # test/ts-scenario/features/events.feature:92
2022-06-21T23:53:25.1967441Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:25.1974036Z 
2022-06-21T23:53:25.1974325Z 
2022-06-21T23:53:25.1974424Z 
2022-06-21T23:53:25.1975040Z **********************************************************************************
2022-06-21T23:53:25.1975499Z **********************************************************************************
2022-06-21T23:53:25.1975836Z ****** EVENTS FEATURE Scenario 13 ******
2022-06-21T23:53:25.1976241Z **********************************************************************************
2022-06-21T23:53:25.1976635Z **********************************************************************************
2022-06-21T23:53:25.1976832Z 
2022-06-21T23:53:25.1976841Z 
2022-06-21T23:53:25.1976854Z 
2022-06-21T23:53:25.1979242Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:25.1982460Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:25.1983341Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:25.1983797Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:25.2022064Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:25.2024188Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:25.2025681Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:25.2027364Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:25.3648545Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:25.3649399Z basev2channel
2022-06-21T23:53:25.3651259Z discoverychannel
2022-06-21T23:53:25.3651759Z eventschannel
2022-06-21T23:53:25.3652383Z baseapichannel
2022-06-21T23:53:25.3653278Z <== have been joined by organization org1
2022-06-21T23:53:25.3658054Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:25.3658716Z basev2channel
2022-06-21T23:53:25.3662600Z discoverychannel
2022-06-21T23:53:25.3663157Z eventschannel
2022-06-21T23:53:25.3663903Z baseapichannel
2022-06-21T23:53:25.3664366Z <==
2022-06-21T23:53:25.3665474Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:25.3666859Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:25.3669228Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:25.5305983Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:25.5310031Z baseapichannel
2022-06-21T23:53:25.5311180Z basev2channel
2022-06-21T23:53:25.5311643Z discoverychannel
2022-06-21T23:53:25.5313029Z eventschannel
2022-06-21T23:53:25.5317643Z <== have been joined by organization org2
2022-06-21T23:53:25.5319378Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:25.5320164Z baseapichannel
2022-06-21T23:53:25.5321220Z basev2channel
2022-06-21T23:53:25.5321686Z discoverychannel
2022-06-21T23:53:25.5322392Z eventschannel
2022-06-21T23:53:25.5322850Z <==
2022-06-21T23:53:25.5324784Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:25.5325606Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:25.5327744Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:25.5328639Z 
2022-06-21T23:53:25.5329554Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:25.5330142Z 
2022-06-21T23:53:25.5331305Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:25.5332609Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:25.5340935Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:25.5349183Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:25.7308806Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:25.7309643Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:25.7310885Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:25.7311574Z Gateway named event_gateway already exists
2022-06-21T23:53:25.7312350Z     When I use the gateway named event_gateway to listen for full block events with a new file checkpoint listener named checkpointBlockListener on channel eventschannel
2022-06-21T23:53:25.7343226Z ->Stored a block event listener: checkpointBlockListener
2022-06-21T23:53:25.7345643Z     When I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:25.7348193Z Retrieving contract from channel eventschannel
2022-06-21T23:53:26.2940599Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:26.2946058Z     Then I receive a minimum 1 events from the listener named checkpointBlockListener
2022-06-21T23:53:26.2993533Z ->Received a block event checkpointBlockListener
2022-06-21T23:53:26.2994579Z ->Received a block event - added blockevent to payloads checkpointBlockListener
2022-06-21T23:53:27.2960461Z Verified that the listener was called at least 1 times
2022-06-21T23:53:27.2966141Z     When I unregister the listener named checkpointBlockListener
2022-06-21T23:53:27.2972297Z     When I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:27.2977537Z Retrieving contract from channel eventschannel
2022-06-21T23:53:27.8592882Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:27.8594981Z     When I use the gateway named event_gateway to listen for full block events with an existing file checkpoint listener named checkpointBlockListener on channel eventschannel
2022-06-21T23:53:27.8808376Z ->Stored a block event listener: checkpointBlockListener
2022-06-21T23:53:27.8809721Z     Then I receive a minimum 1 events from the listener named checkpointBlockListener
2022-06-21T23:53:27.8825982Z ->Received a block event checkpointBlockListener
2022-06-21T23:53:27.8826999Z ->Received a block event - added blockevent to payloads checkpointBlockListener
2022-06-21T23:53:28.8819325Z Verified that the listener was called at least 1 times
2022-06-21T23:53:28.8820494Z 
2022-06-21T23:53:28.8823449Z   @events @gateway @fabric_merge
2022-06-21T23:53:28.8824492Z   Scenario: Checkpoint contract event listening # test/ts-scenario/features/events.feature:101
2022-06-21T23:53:28.8827649Z     Given I place a scenario start message EVENTS FEATURE
2022-06-21T23:53:28.8828148Z 
2022-06-21T23:53:28.8828282Z 
2022-06-21T23:53:28.8828565Z 
2022-06-21T23:53:28.8830763Z **********************************************************************************
2022-06-21T23:53:28.8831322Z **********************************************************************************
2022-06-21T23:53:28.8832134Z ****** EVENTS FEATURE Scenario 14 ******
2022-06-21T23:53:28.8832889Z **********************************************************************************
2022-06-21T23:53:28.8833358Z **********************************************************************************
2022-06-21T23:53:28.8833612Z 
2022-06-21T23:53:28.8833690Z 
2022-06-21T23:53:28.8833764Z 
2022-06-21T23:53:28.8837634Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:28.8838247Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:28.8838986Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:28.8839555Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:28.8840172Z     And I use the cli to create and join the channel named eventschannel on the deployed network
2022-06-21T23:53:28.8840989Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:28.8842102Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:28.8843735Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:29.0542077Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:29.0542876Z baseapichannel
2022-06-21T23:53:29.0543707Z basev2channel
2022-06-21T23:53:29.0544397Z discoverychannel
2022-06-21T23:53:29.0545050Z eventschannel
2022-06-21T23:53:29.0545698Z <== have been joined by organization org1
2022-06-21T23:53:29.0547850Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:29.0548520Z baseapichannel
2022-06-21T23:53:29.0548931Z basev2channel
2022-06-21T23:53:29.0549384Z discoverychannel
2022-06-21T23:53:29.0549862Z eventschannel
2022-06-21T23:53:29.0550200Z <==
2022-06-21T23:53:29.0550778Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:29.0552210Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:29.0553854Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:29.2452508Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:29.2453302Z discoverychannel
2022-06-21T23:53:29.2454147Z eventschannel
2022-06-21T23:53:29.2454767Z baseapichannel
2022-06-21T23:53:29.2455212Z basev2channel
2022-06-21T23:53:29.2455828Z <== have been joined by organization org2
2022-06-21T23:53:29.2456719Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:53:29.2457403Z discoverychannel
2022-06-21T23:53:29.2457893Z eventschannel
2022-06-21T23:53:29.2458412Z baseapichannel
2022-06-21T23:53:29.2458820Z basev2channel
2022-06-21T23:53:29.2459387Z <==
2022-06-21T23:53:29.2460395Z     And I use the cli to update the channel with name eventschannel with config file eventschannel-anchor.tx on the deployed network
2022-06-21T23:53:29.2461123Z Channel eventschannel has already been updated, skipping ...
2022-06-21T23:53:29.2462427Z     And I use the cli to lifecycle deploy a node smart contract named events at version 1.0.0 as events for all organizations on channel eventschannel with default endorsement policy and init-required false
2022-06-21T23:53:29.2462971Z 
2022-06-21T23:53:29.2463375Z  -- Lifecycle deploy start for Smart contract events
2022-06-21T23:53:29.2463686Z 
2022-06-21T23:53:29.2464185Z  -- Lifecycle deploy step one - check if already committed for Smart contract events
2022-06-21T23:53:29.2465796Z Attempting lifecycle query for committed smart contract with name events for organization org1 using the CLI
2022-06-21T23:53:29.2469996Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:29.2480845Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID eventschannel --name events --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:29.4605310Z Smart contract with name events is committed for organization org1 using the CLI
2022-06-21T23:53:29.4607004Z Smart contract events at version 1.0.0 has already been committed on channel eventschannel as events 
2022-06-21T23:53:29.4609902Z     And I have a memory backed gateway named event_gateway with discovery set to true for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:53:29.4618976Z Gateway named event_gateway already exists
2022-06-21T23:53:29.4619937Z     When I use the gateway named event_gateway to listen for full contract events named create with a new file checkpoint listener named checkpointContractListener for the smart contract named events on channel eventschannel
2022-06-21T23:53:29.4651424Z Retrieving contract from channel eventschannel
2022-06-21T23:53:29.4652713Z     And I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:29.4653555Z Retrieving contract from channel eventschannel
2022-06-21T23:53:30.0286990Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:30.0295412Z     Then I receive a minimum 1 events from the listener named checkpointContractListener
2022-06-21T23:53:30.0311330Z ->Received a block event checkpointBlockListener
2022-06-21T23:53:30.0312091Z ->Received a block event - added blockevent to payloads checkpointBlockListener
2022-06-21T23:53:30.0333402Z -> Received a contract event for listener [checkpointContractListener] of eventName create
2022-06-21T23:53:31.0300035Z Verified that the listener was called at least 1 times
2022-06-21T23:53:31.0302915Z     And the listener named checkpointContractListener should have contract events with payload containing "createValueTransactionContent"
2022-06-21T23:53:31.0304598Z ->Contract Event payload matches what we expect: createValueTransactionContent
2022-06-21T23:53:31.0306050Z     When I unregister the listener named checkpointContractListener
2022-06-21T23:53:31.0308289Z     And I use the gateway named event_gateway to submit a transaction with args [createValue] for contract events instantiated on channel eventschannel
2022-06-21T23:53:31.0309423Z Retrieving contract from channel eventschannel
2022-06-21T23:53:31.5887418Z Successfully performed submit transaction [createValue] with result [eventName "create" set with value "createValueTransactionContent"]
2022-06-21T23:53:31.5892243Z     And I use the gateway named event_gateway to listen for full contract events named create with an existing file checkpoint listener named checkpointContractListener for the smart contract named events on channel eventschannel
2022-06-21T23:53:31.5906493Z ->Received a block event checkpointBlockListener
2022-06-21T23:53:31.5908136Z ->Received a block event - added blockevent to payloads checkpointBlockListener
2022-06-21T23:53:31.5961259Z Retrieving contract from channel eventschannel
2022-06-21T23:53:31.6072892Z     Then I receive a minimum 1 events from the listener named checkpointContractListener
2022-06-21T23:53:31.6089956Z -> Received a contract event for listener [checkpointContractListener] of eventName create
2022-06-21T23:53:32.6081152Z Verified that the listener was called at least 1 times
2022-06-21T23:53:32.6083345Z     And the listener named checkpointContractListener should have contract events with payload containing "createValueTransactionContent"
2022-06-21T23:53:32.6086277Z ->Contract Event payload matches what we expect: createValueTransactionContent
2022-06-21T23:53:32.6086558Z 
2022-06-21T23:53:32.6088945Z @gateway_basic @gateway @fabric_merge
2022-06-21T23:53:32.6089861Z Feature: Configure Fabric using CLI and submit/evaluate using a network Gateway without discovery # test/ts-scenario/features/gateway.feature:8
2022-06-21T23:53:32.6090590Z 
2022-06-21T23:53:32.6090792Z   @gateway_basic @gateway @fabric_merge
2022-06-21T23:53:32.6093197Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract # test/ts-scenario/features/gateway.feature:18
2022-06-21T23:53:32.6095454Z     Given I place a scenario start message GATEWAY FEATURE
2022-06-21T23:53:32.6095670Z 
2022-06-21T23:53:32.6095679Z 
2022-06-21T23:53:32.6095687Z 
2022-06-21T23:53:32.6097453Z **********************************************************************************
2022-06-21T23:53:32.6098346Z **********************************************************************************
2022-06-21T23:53:32.6099319Z ****** GATEWAY FEATURE Scenario 0 ******
2022-06-21T23:53:32.6099744Z **********************************************************************************
2022-06-21T23:53:32.6100158Z **********************************************************************************
2022-06-21T23:53:32.6100934Z 
2022-06-21T23:53:32.6100942Z 
2022-06-21T23:53:32.6100950Z 
2022-06-21T23:53:32.6101821Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:53:32.6103811Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:53:32.6104214Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:53:32.6104585Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:53:32.6105483Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:53:32.6106786Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:53:32.6107950Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:32.6109144Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:32.7717654Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:32.7718993Z basev2channel
2022-06-21T23:53:32.7719779Z discoverychannel
2022-06-21T23:53:32.7720199Z eventschannel
2022-06-21T23:53:32.7720588Z baseapichannel
2022-06-21T23:53:32.7721177Z <== have been joined by organization org1
2022-06-21T23:53:32.7721821Z Attempting to create channel gatewaychannel of type tls
2022-06-21T23:53:32.7723798Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:32.7777121Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:37.9597867Z Channel gatewaychannel has been created
2022-06-21T23:53:37.9599508Z Attempting to join organization org1 to channel gatewaychannel of type tls
2022-06-21T23:53:37.9601356Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:37.9604775Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:43.2907194Z Channel gatewaychannel has been joined by organization org1
2022-06-21T23:53:43.2907728Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:53:43.2909111Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:43.2910307Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:43.4936156Z Channel names ==>Channels peers has joined: 
2022-06-21T23:53:43.4937297Z discoverychannel
2022-06-21T23:53:43.4937696Z eventschannel
2022-06-21T23:53:43.4938272Z baseapichannel
2022-06-21T23:53:43.4943859Z basev2channel
2022-06-21T23:53:43.4944547Z <== have been joined by organization org2
2022-06-21T23:53:43.4945183Z Attempting to join organization org2 to channel gatewaychannel of type tls
2022-06-21T23:53:43.4947362Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:43.4952174Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:48.8120893Z Channel gatewaychannel has been joined by organization org2
2022-06-21T23:53:48.8130770Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:53:48.8132086Z Using default CLI container org1 to update channel gatewaychannel of type tls with updateTx gatewaychannel-anchor.tx
2022-06-21T23:53:48.8134387Z  -- runShellCommand ==>docker exec org1_cli peer channel update -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:48.8137609Z SCENARIO CMD: docker exec org1_cli peer channel update -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel-anchor.tx --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:53.9888678Z Channel gatewaychannel has been updated
2022-06-21T23:53:53.9893964Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:53:53.9899885Z 
2022-06-21T23:53:53.9900261Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:53:53.9900466Z 
2022-06-21T23:53:53.9900811Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:53:53.9901426Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:53:53.9902556Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:53:53.9904021Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:53:54.1781369Z Smart contract with name fabcar is not committed for organization org1 using the CLI
2022-06-21T23:53:54.1782381Z Smart contract fabcar at version 1.0.0 is not committed on channel gatewaychannel as fabcar 
2022-06-21T23:53:54.1782895Z 
2022-06-21T23:53:54.1784473Z  -- Lifecycle deploy step two - package Smart contract fabcar
2022-06-21T23:53:54.1785739Z Attempting lifecyle package of smart contract fabcar with label fabcar-gatewaychannel for organization org1 using the CLI
2022-06-21T23:53:54.1786947Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:53:54.1789418Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:53:59.3452345Z Smart contract fabcar with label fabcar-gatewaychannel has been packaged for organization org1 using the CLI
2022-06-21T23:53:59.3454319Z Attempting lifecyle package of smart contract fabcar with label fabcar-gatewaychannel for organization org2 using the CLI
2022-06-21T23:53:59.3456967Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:53:59.3458272Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:54:04.5145198Z Smart contract fabcar with label fabcar-gatewaychannel has been packaged for organization org2 using the CLI
2022-06-21T23:54:04.5145548Z 
2022-06-21T23:54:04.5145885Z  -- Lifecycle deploy step three - install Smart contract fabcar
2022-06-21T23:54:04.5146473Z Attempting lifecycle install of smart contract package fabcar for organization org1 using the CLI
2022-06-21T23:54:04.5147198Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:54:04.5148867Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:54:26.2299672Z Smart contract package fabcar has been installed for organization org1 using the CLI
2022-06-21T23:54:26.2301340Z Smart contract fabcar at version 1.0.0 has been installed on organization Org1 
2022-06-21T23:54:26.2346318Z Attempting lifecycle install of smart contract package fabcar for organization org2 using the CLI
2022-06-21T23:54:26.2348191Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:54:26.2348922Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:54:48.0711500Z Smart contract package fabcar has been installed for organization org2 using the CLI
2022-06-21T23:54:48.0712478Z Smart contract fabcar at version 1.0.0 has been installed on organization Org2 
2022-06-21T23:54:48.0713019Z 
2022-06-21T23:54:48.0713656Z  -- Lifecycle deploy step four - approve Smart contract fabcar
2022-06-21T23:54:48.0714627Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:54:48.0717599Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:54:48.2465734Z Attempting lifecycle approve of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:54:48.2487716Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:54:48.2492412Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:54:54.1952820Z Smart contract with reference fabcar has been approved for organization org1 using the CLI
2022-06-21T23:54:54.1954392Z Smart contract fabcar at version 1.0.0 has been approved on organization Org1 
2022-06-21T23:54:54.1955824Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:54:54.1957557Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:54:54.3633807Z Attempting lifecycle approve of smart contract with reference fabcar for organization org2 using the CLI
2022-06-21T23:54:54.3636858Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:54:54.3640078Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:00.2544271Z Smart contract with reference fabcar has been approved for organization org2 using the CLI
2022-06-21T23:55:00.2544943Z Smart contract fabcar at version 1.0.0 has been approved on organization Org2 
2022-06-21T23:55:05.2561233Z 
2022-06-21T23:55:05.2563530Z  -- Lifecycle deploy step five (final) - commit Smart contract fabcar
2022-06-21T23:55:05.2564141Z Attempting lifecycle commit of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:55:05.2566456Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID gatewaychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:05.2570259Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID gatewaychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json --tlsRootCertFiles /etc/hyperledger/config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt /etc/hyperledger/config/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:11.2017826Z Smart contract with reference fabcar has been committed for organization org1 using the CLI
2022-06-21T23:55:11.2027322Z     And I have a couchDB backed gateway named mycouchgateway with discovery set to false for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:55:11.2034379Z Creating new Gateway named mycouchgateway
2022-06-21T23:55:11.2042347Z Creating wallet of type couchDB
2022-06-21T23:55:11.2907154Z Will build existing Identity User1@Org1
2022-06-21T23:55:11.2912782Z Adding identity for User1@Org1 to wallet
2022-06-21T23:55:11.3038158Z fabricCAEndpoint https://localhost:7054 will be used for TLS certificate
2022-06-21T23:55:11.6736762Z Gateway mycouchgateway connected
2022-06-21T23:55:11.6741322Z     When I use the gateway named mycouchgateway to submit a transaction with args [createCar,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:11.6746944Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:12.4547022Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:12.4552782Z     Then The gateway named mycouchgateway has a submit type response
2022-06-21T23:55:12.4560494Z     When I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:12.4564770Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:12.4767391Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:12.4772487Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:12.4779870Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:12.4785348Z 
2022-06-21T23:55:12.4789695Z   @gateway_basic @gateway @fabric_merge
2022-06-21T23:55:12.4794053Z   Scenario: Using a Gateway I receive useful error messages when I submit or evaulate invalid transactions # test/ts-scenario/features/gateway.feature:24
2022-06-21T23:55:12.4801034Z     Given I place a scenario start message GATEWAY FEATURE
2022-06-21T23:55:12.4805240Z 
2022-06-21T23:55:12.4805336Z 
2022-06-21T23:55:12.4805453Z 
2022-06-21T23:55:12.4806250Z **********************************************************************************
2022-06-21T23:55:12.4806699Z **********************************************************************************
2022-06-21T23:55:12.4809297Z ****** GATEWAY FEATURE Scenario 1 ******
2022-06-21T23:55:12.4812603Z **********************************************************************************
2022-06-21T23:55:12.4816481Z **********************************************************************************
2022-06-21T23:55:12.4824594Z 
2022-06-21T23:55:12.4826771Z 
2022-06-21T23:55:12.4827318Z 
2022-06-21T23:55:12.4840921Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:12.4844124Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:12.4845217Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:12.4847285Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:12.4850557Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:12.4868832Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:12.4872325Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:12.4881958Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:12.6598404Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:12.6599139Z baseapichannel
2022-06-21T23:55:12.6599920Z basev2channel
2022-06-21T23:55:12.6600592Z discoverychannel
2022-06-21T23:55:12.6601782Z eventschannel
2022-06-21T23:55:12.6602535Z gatewaychannel
2022-06-21T23:55:12.6604072Z <== have been joined by organization org1
2022-06-21T23:55:12.6604797Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:12.6605804Z baseapichannel
2022-06-21T23:55:12.6606282Z basev2channel
2022-06-21T23:55:12.6606987Z discoverychannel
2022-06-21T23:55:12.6607454Z eventschannel
2022-06-21T23:55:12.6608451Z gatewaychannel
2022-06-21T23:55:12.6608858Z <==
2022-06-21T23:55:12.6609680Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:12.6611500Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:12.6613722Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:12.8296028Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:12.8297647Z eventschannel
2022-06-21T23:55:12.8298355Z gatewaychannel
2022-06-21T23:55:12.8298805Z baseapichannel
2022-06-21T23:55:12.8299449Z basev2channel
2022-06-21T23:55:12.8299884Z discoverychannel
2022-06-21T23:55:12.8300924Z <== have been joined by organization org2
2022-06-21T23:55:12.8301569Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:12.8302425Z eventschannel
2022-06-21T23:55:12.8302827Z gatewaychannel
2022-06-21T23:55:12.8303424Z baseapichannel
2022-06-21T23:55:12.8303805Z basev2channel
2022-06-21T23:55:12.8304406Z discoverychannel
2022-06-21T23:55:12.8304796Z <==
2022-06-21T23:55:12.8306383Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:12.8307533Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:12.8308919Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:12.8309509Z 
2022-06-21T23:55:12.8310201Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:12.8310772Z 
2022-06-21T23:55:12.8311557Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:12.8312616Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:12.8314360Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:12.8316517Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:13.0409041Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:13.0418695Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:13.0420631Z     And I have a couchDB backed gateway named mycouchgateway with discovery set to false for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:55:13.0422352Z Gateway named mycouchgateway already exists
2022-06-21T23:55:13.0423286Z     When I use the gateway named mycouchgateway to submit a transaction with args [noSuchSubmitTransaction,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:13.0424434Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:13.0708588Z 
2022-06-21T23:55:13.0709492Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:55:13.0710636Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:13.0711957Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:13.0712422Z 
2022-06-21T23:55:13.0720282Z     Then The gateway named mycouchgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:13.0724255Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:55:13.0725779Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:13.0727224Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:13.0732099Z     When I use the gateway named mycouchgateway to submit a transaction with args [createCar,9,Ford] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:13.0735087Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:13.0957102Z 
2022-06-21T23:55:13.0958350Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:55:13.0959037Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:13.0960020Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:13.0960341Z 
2022-06-21T23:55:13.0962696Z     Then The gateway named mycouchgateway has a error type response containing Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:13.0966152Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:55:13.0966958Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:13.0967881Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied to msg Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:13.0972107Z     When I use the gateway named mycouchgateway to evaluate a transaction with args [noSuchEvaluateTransaction,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:13.0974839Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:13.1112759Z 
2022-06-21T23:55:13.1113689Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:13.1114050Z 
2022-06-21T23:55:13.1118215Z     Then The gateway named mycouchgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:13.1123221Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:13.1126927Z     When I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,because,I,said,so] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:13.1130002Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:13.1259119Z 
2022-06-21T23:55:13.1259895Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:13.1260214Z 
2022-06-21T23:55:13.1263105Z     Then The gateway named mycouchgateway has a error type response containing Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:13.1266464Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied to msg Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:13.1269355Z 
2022-06-21T23:55:13.1274481Z   @gateway_basic @gateway @fabric_merge
2022-06-21T23:55:13.1276916Z   Scenario: Using a Gateway to submit transactions I can use different event handler strategies # test/ts-scenario/features/gateway.feature:34
2022-06-21T23:55:13.1281149Z     Given I place a scenario start message GATEWAY FEATURE
2022-06-21T23:55:13.1284187Z 
2022-06-21T23:55:13.1284259Z 
2022-06-21T23:55:13.1284266Z 
2022-06-21T23:55:13.1284589Z **********************************************************************************
2022-06-21T23:55:13.1285108Z **********************************************************************************
2022-06-21T23:55:13.1285533Z ****** GATEWAY FEATURE Scenario 2 ******
2022-06-21T23:55:13.1286064Z **********************************************************************************
2022-06-21T23:55:13.1286532Z **********************************************************************************
2022-06-21T23:55:13.1286767Z 
2022-06-21T23:55:13.1286872Z 
2022-06-21T23:55:13.1286878Z 
2022-06-21T23:55:13.1291806Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:13.1295880Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:13.1296818Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:13.1297357Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:13.1301381Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:13.1304860Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:13.1305952Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:13.1307205Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:13.3015024Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:13.3015583Z baseapichannel
2022-06-21T23:55:13.3021467Z basev2channel
2022-06-21T23:55:13.3021746Z discoverychannel
2022-06-21T23:55:13.3025807Z eventschannel
2022-06-21T23:55:13.3026818Z gatewaychannel
2022-06-21T23:55:13.3028031Z <== have been joined by organization org1
2022-06-21T23:55:13.3028634Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:13.3029218Z baseapichannel
2022-06-21T23:55:13.3030027Z basev2channel
2022-06-21T23:55:13.3030746Z discoverychannel
2022-06-21T23:55:13.3031432Z eventschannel
2022-06-21T23:55:13.3032156Z gatewaychannel
2022-06-21T23:55:13.3032722Z <==
2022-06-21T23:55:13.3033758Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:13.3034966Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:13.3036181Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:13.4892005Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:13.4893639Z baseapichannel
2022-06-21T23:55:13.4894984Z basev2channel
2022-06-21T23:55:13.4895463Z discoverychannel
2022-06-21T23:55:13.4896146Z eventschannel
2022-06-21T23:55:13.4896571Z gatewaychannel
2022-06-21T23:55:13.4897350Z <== have been joined by organization org2
2022-06-21T23:55:13.4898263Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:13.4899680Z baseapichannel
2022-06-21T23:55:13.4900331Z basev2channel
2022-06-21T23:55:13.4901006Z discoverychannel
2022-06-21T23:55:13.4901450Z eventschannel
2022-06-21T23:55:13.4902297Z gatewaychannel
2022-06-21T23:55:13.4902730Z <==
2022-06-21T23:55:13.4904020Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:13.4905156Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:13.4906653Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:13.4907272Z 
2022-06-21T23:55:13.4908326Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:13.4909230Z 
2022-06-21T23:55:13.4911765Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:13.4914631Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:13.4916357Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:13.4920155Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:13.6708703Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:13.6724005Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:13.6729541Z     And I have a couchDB backed gateway named mycouchgateway with discovery set to false for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:55:13.6731247Z Gateway named mycouchgateway already exists
2022-06-21T23:55:13.6736769Z     When I modify mycouchgateway to submit a transaction with args [createCar,1002,Ford,Mustang,Silver,Andy] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ALLFORTX
2022-06-21T23:55:13.7438940Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:14.3757486Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:14.3762456Z     And I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,1002] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:14.3763584Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:14.3952716Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}]
2022-06-21T23:55:14.3954507Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:55:14.3957863Z Comparing gatewayObj.result.response {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"} to msg {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:55:14.3959731Z     When I modify mycouchgateway to submit a transaction with args [createCar,1003,Ford,Fiesta,Blue,Heather] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ANYFORTX
2022-06-21T23:55:14.4515302Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:15.0647278Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:15.0652852Z     And I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,1003] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:15.0653854Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:15.0974146Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}]
2022-06-21T23:55:15.0981579Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:55:15.0983131Z Comparing gatewayObj.result.response {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"} to msg {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:55:15.1173094Z     When I modify mycouchgateway to submit a transaction with args [createCar,1004,Vauxhall,Corsa,White,Mark] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ALLFORTX
2022-06-21T23:55:15.1480716Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:15.7715371Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:15.7716393Z     And I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,1004] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:15.7716940Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:15.8051526Z Successfully performed evaluate transaction [queryCar] with result [{"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}]
2022-06-21T23:55:15.8052607Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:55:15.8053569Z Comparing gatewayObj.result.response {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"} to msg {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:55:15.8054658Z     When I modify mycouchgateway to submit a transaction with args [createCar,1005,Bugatti,Veyron,Black,Bret] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ANYFORTX
2022-06-21T23:55:15.8735205Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:16.5455419Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:16.5464254Z     Then The gateway named mycouchgateway has a submit type response
2022-06-21T23:55:16.5472856Z     When I modify mycouchgateway to submit a transaction with args [createCar,1006,Lotus,Elise,Pink,Nick] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:55:16.6240438Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:17.2226390Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:17.2228936Z     And I use the gateway named mycouchgateway to evaluate a transaction with args [queryCar,1006] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:17.2230168Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:17.2451815Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}]
2022-06-21T23:55:17.2462832Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:55:17.2465310Z Comparing gatewayObj.result.response {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"} to msg {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:55:17.2466783Z 
2022-06-21T23:55:17.2469258Z   @gateway_basic @gateway @fabric_merge
2022-06-21T23:55:17.2471280Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/gateway.feature:50
2022-06-21T23:55:17.2473070Z     Given I place a scenario start message GATEWAY FEATURE
2022-06-21T23:55:17.2479307Z 
2022-06-21T23:55:17.2479458Z 
2022-06-21T23:55:17.2479583Z 
2022-06-21T23:55:17.2480025Z **********************************************************************************
2022-06-21T23:55:17.2480453Z **********************************************************************************
2022-06-21T23:55:17.2480819Z ****** GATEWAY FEATURE Scenario 3 ******
2022-06-21T23:55:17.2481476Z **********************************************************************************
2022-06-21T23:55:17.2481912Z **********************************************************************************
2022-06-21T23:55:17.2482078Z 
2022-06-21T23:55:17.2482087Z 
2022-06-21T23:55:17.2482095Z 
2022-06-21T23:55:17.2487592Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:17.2491038Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:17.2491723Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:17.2492169Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:17.2495775Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:17.2497232Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:17.2499274Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:17.2500967Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:17.4176802Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:17.4177513Z baseapichannel
2022-06-21T23:55:17.4178428Z basev2channel
2022-06-21T23:55:17.4179096Z discoverychannel
2022-06-21T23:55:17.4179440Z eventschannel
2022-06-21T23:55:17.4179783Z gatewaychannel
2022-06-21T23:55:17.4180259Z <== have been joined by organization org1
2022-06-21T23:55:17.4181010Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:17.4181616Z baseapichannel
2022-06-21T23:55:17.4182270Z basev2channel
2022-06-21T23:55:17.4182600Z discoverychannel
2022-06-21T23:55:17.4182924Z eventschannel
2022-06-21T23:55:17.4183251Z gatewaychannel
2022-06-21T23:55:17.4183553Z <==
2022-06-21T23:55:17.4184032Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:17.4185303Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:17.4186603Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:17.5906398Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:17.5907088Z discoverychannel
2022-06-21T23:55:17.5907794Z eventschannel
2022-06-21T23:55:17.5908392Z gatewaychannel
2022-06-21T23:55:17.5908795Z baseapichannel
2022-06-21T23:55:17.5909512Z basev2channel
2022-06-21T23:55:17.5909961Z <== have been joined by organization org2
2022-06-21T23:55:17.5910528Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:17.5910932Z discoverychannel
2022-06-21T23:55:17.5912078Z eventschannel
2022-06-21T23:55:17.5912457Z gatewaychannel
2022-06-21T23:55:17.5912800Z baseapichannel
2022-06-21T23:55:17.5913113Z basev2channel
2022-06-21T23:55:17.5913413Z <==
2022-06-21T23:55:17.5914613Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:17.5915873Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:17.5917014Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:17.5917976Z 
2022-06-21T23:55:17.5918441Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:17.5918735Z 
2022-06-21T23:55:17.5919214Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:17.5920082Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:17.5921611Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:17.5923450Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:17.7657330Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:17.7660630Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:17.7663039Z     And I have a couchDB backed gateway named mycouchgateway with discovery set to false for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:55:17.7671959Z Gateway named mycouchgateway already exists
2022-06-21T23:55:17.7677487Z     When I modify mycouchgateway to submit a transaction with transient data using args [getTransient,value1,value2] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:17.7682403Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:18.3598206Z Successfully performed submit transaction [getTransient] with transient data with result of [{"key0":"value1","key1":"value2"}]
2022-06-21T23:55:18.3603492Z     Then The gateway named mycouchgateway has a submit type response matching {"key0":"value1","key1":"value2"}
2022-06-21T23:55:18.3608315Z Comparing gatewayObj.result.response {"key0":"value1","key1":"value2"} to msg {"key0":"value1","key1":"value2"}
2022-06-21T23:55:18.3612455Z     When I modify mycouchgateway to evaluate a transaction with transient data using args [getTransient,valueA,valueB] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:18.3616030Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:18.3815978Z Successfully performed evaluate transaction [getTransient] with transient data with result of [{"key0":"valueA","key1":"valueB"}]
2022-06-21T23:55:18.3816773Z     Then The gateway named mycouchgateway has a evaluate type response matching {"key0":"valueA","key1":"valueB"}
2022-06-21T23:55:18.3828219Z Comparing gatewayObj.result.response {"key0":"valueA","key1":"valueB"} to msg {"key0":"valueA","key1":"valueB"}
2022-06-21T23:55:18.3828649Z 
2022-06-21T23:55:18.3829089Z   @gateway_basic @gateway @fabric_merge
2022-06-21T23:55:18.3832465Z   Scenario: Using a Gateway to evaluate transactions I can use different query handler strategies # test/ts-scenario/features/gateway.feature:56
2022-06-21T23:55:18.3835137Z     Given I place a scenario start message GATEWAY FEATURE
2022-06-21T23:55:18.3838256Z 
2022-06-21T23:55:18.3838292Z 
2022-06-21T23:55:18.3838398Z 
2022-06-21T23:55:18.3839297Z **********************************************************************************
2022-06-21T23:55:18.3839922Z **********************************************************************************
2022-06-21T23:55:18.3840407Z ****** GATEWAY FEATURE Scenario 4 ******
2022-06-21T23:55:18.3841303Z **********************************************************************************
2022-06-21T23:55:18.3841929Z **********************************************************************************
2022-06-21T23:55:18.3842199Z 
2022-06-21T23:55:18.3842363Z 
2022-06-21T23:55:18.3842372Z 
2022-06-21T23:55:18.3848158Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:18.3850788Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:18.3851381Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:18.3851910Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:18.3855920Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:18.3859440Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:18.3860686Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:18.3862278Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:18.5638372Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:18.5639449Z baseapichannel
2022-06-21T23:55:18.5640603Z basev2channel
2022-06-21T23:55:18.5641407Z discoverychannel
2022-06-21T23:55:18.5642416Z eventschannel
2022-06-21T23:55:18.5643206Z gatewaychannel
2022-06-21T23:55:18.5644409Z <== have been joined by organization org1
2022-06-21T23:55:18.5645361Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:18.5646899Z baseapichannel
2022-06-21T23:55:18.5647694Z basev2channel
2022-06-21T23:55:18.5648700Z discoverychannel
2022-06-21T23:55:18.5649459Z eventschannel
2022-06-21T23:55:18.5651211Z gatewaychannel
2022-06-21T23:55:18.5652062Z <==
2022-06-21T23:55:18.5652930Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:18.5655100Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:18.5657194Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:18.7463752Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:18.7464957Z basev2channel
2022-06-21T23:55:18.7466306Z discoverychannel
2022-06-21T23:55:18.7467120Z eventschannel
2022-06-21T23:55:18.7468106Z gatewaychannel
2022-06-21T23:55:18.7468828Z baseapichannel
2022-06-21T23:55:18.7470138Z <== have been joined by organization org2
2022-06-21T23:55:18.7471046Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:18.7472347Z basev2channel
2022-06-21T23:55:18.7473567Z discoverychannel
2022-06-21T23:55:18.7474410Z eventschannel
2022-06-21T23:55:18.7474892Z gatewaychannel
2022-06-21T23:55:18.7475597Z baseapichannel
2022-06-21T23:55:18.7476046Z <==
2022-06-21T23:55:18.7477861Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:18.7483116Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:18.7485090Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:18.7485824Z 
2022-06-21T23:55:18.7486565Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:18.7487004Z 
2022-06-21T23:55:18.7487831Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:18.7488710Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:18.7490551Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:18.7492843Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:18.9574386Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:18.9581391Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:18.9582979Z     And I have a couchDB backed gateway named mycouchgateway with discovery set to false for user User1 using the connection profile named ccp-tls.json
2022-06-21T23:55:18.9584398Z Gateway named mycouchgateway already exists
2022-06-21T23:55:18.9586609Z     When I modify mycouchgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_SINGLE
2022-06-21T23:55:19.0234992Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:19.0421795Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:19.0423766Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.0426265Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.0427715Z     When I modify mycouchgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ROUND_ROBIN
2022-06-21T23:55:19.0881654Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:19.1070074Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:19.1072663Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.1074699Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.1075838Z     When I modify mycouchgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:55:19.1540352Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:19.1699330Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:19.1701099Z     Then The gateway named mycouchgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.1703052Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:19.1705152Z 
2022-06-21T23:55:19.1707101Z @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:19.1709122Z Feature: Configure Fabric using CLI and submit/evaluate using a network Gateway without discovery # test/ts-scenario/features/hsm-gateway.feature:8
2022-06-21T23:55:19.1710105Z 
2022-06-21T23:55:19.1710993Z   @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:19.1712222Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract # test/ts-scenario/features/hsm-gateway.feature:18
2022-06-21T23:55:19.1713354Z     Given I place a scenario start message GATEWAY HSM FEATURE
2022-06-21T23:55:19.1714550Z 
2022-06-21T23:55:19.1714732Z 
2022-06-21T23:55:19.1716000Z 
2022-06-21T23:55:19.1716447Z **********************************************************************************
2022-06-21T23:55:19.1717835Z **********************************************************************************
2022-06-21T23:55:19.1718869Z ****** GATEWAY HSM FEATURE Scenario 0 ******
2022-06-21T23:55:19.1719938Z **********************************************************************************
2022-06-21T23:55:19.1720584Z **********************************************************************************
2022-06-21T23:55:19.1721124Z 
2022-06-21T23:55:19.1721283Z 
2022-06-21T23:55:19.1721627Z 
2022-06-21T23:55:19.1722027Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:19.1722784Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:19.1723347Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:19.1724085Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:19.1724702Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:19.1725582Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:19.1726844Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:19.1729034Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:19.3372290Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:19.3372842Z baseapichannel
2022-06-21T23:55:19.3373742Z basev2channel
2022-06-21T23:55:19.3374505Z discoverychannel
2022-06-21T23:55:19.3411314Z eventschannel
2022-06-21T23:55:19.3411968Z gatewaychannel
2022-06-21T23:55:19.3412813Z <== have been joined by organization org1
2022-06-21T23:55:19.3413526Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:19.3414284Z baseapichannel
2022-06-21T23:55:19.3414702Z basev2channel
2022-06-21T23:55:19.3415347Z discoverychannel
2022-06-21T23:55:19.3415782Z eventschannel
2022-06-21T23:55:19.3416442Z gatewaychannel
2022-06-21T23:55:19.3416839Z <==
2022-06-21T23:55:19.3418075Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:19.3420210Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:19.3421341Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:19.5293527Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:19.5298177Z basev2channel
2022-06-21T23:55:19.5299386Z discoverychannel
2022-06-21T23:55:19.5299901Z eventschannel
2022-06-21T23:55:19.5301182Z gatewaychannel
2022-06-21T23:55:19.5301668Z baseapichannel
2022-06-21T23:55:19.5302699Z <== have been joined by organization org2
2022-06-21T23:55:19.5303434Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:19.5304480Z basev2channel
2022-06-21T23:55:19.5304966Z discoverychannel
2022-06-21T23:55:19.5306012Z eventschannel
2022-06-21T23:55:19.5306453Z gatewaychannel
2022-06-21T23:55:19.5307323Z baseapichannel
2022-06-21T23:55:19.5307726Z <==
2022-06-21T23:55:19.5309213Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:19.5310020Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:19.5311564Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:19.5312159Z 
2022-06-21T23:55:19.5313094Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:19.5313502Z 
2022-06-21T23:55:19.5314524Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:19.5315593Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:19.5317556Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:19.5319386Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:19.7375300Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:19.7376277Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:19.7377761Z     And I have a HSM backed gateway named myhsmgateway with discovery set to false for user User2 using the connection profile named ccp-tls.json
2022-06-21T23:55:19.7378945Z Creating new Gateway named myhsmgateway
2022-06-21T23:55:19.7379356Z Creating wallet of type HSM
2022-06-21T23:55:19.7946048Z Will create HSM Identity User2@Org1
2022-06-21T23:55:20.2807998Z Adding HSM identity for User2@Org1 to wallet
2022-06-21T23:55:20.2809213Z fabricCAEndpoint https://localhost:7054 will be used for TLS certificate
2022-06-21T23:55:20.5434139Z Gateway myhsmgateway connected
2022-06-21T23:55:20.5440119Z     When I use the gateway named myhsmgateway to submit a transaction with args [createCar,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:20.5445971Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.1613322Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:21.1615722Z     Then The gateway named myhsmgateway has a submit type response
2022-06-21T23:55:21.1621241Z     When I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:21.1623387Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.1825192Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:21.1827321Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:21.1885211Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:21.1887746Z 
2022-06-21T23:55:21.1893069Z   @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:21.1896415Z   Scenario: Using a Gateway I recieve useful error messages when I submit or evaulate invalid transactions # test/ts-scenario/features/hsm-gateway.feature:24
2022-06-21T23:55:21.1898708Z     Given I place a scenario start message GATEWAY HSM FEATURE
2022-06-21T23:55:21.1901702Z 
2022-06-21T23:55:21.1902014Z 
2022-06-21T23:55:21.1902027Z 
2022-06-21T23:55:21.1902392Z **********************************************************************************
2022-06-21T23:55:21.1902804Z **********************************************************************************
2022-06-21T23:55:21.1903134Z ****** GATEWAY HSM FEATURE Scenario 1 ******
2022-06-21T23:55:21.1903483Z **********************************************************************************
2022-06-21T23:55:21.1903839Z **********************************************************************************
2022-06-21T23:55:21.1903987Z 
2022-06-21T23:55:21.1903994Z 
2022-06-21T23:55:21.1904001Z 
2022-06-21T23:55:21.1907670Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:21.1932973Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.1933463Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.1934061Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.1936970Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:21.1940141Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:21.1942947Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:21.1945434Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:21.3548909Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:21.3550030Z baseapichannel
2022-06-21T23:55:21.3550282Z basev2channel
2022-06-21T23:55:21.3550518Z discoverychannel
2022-06-21T23:55:21.3550751Z eventschannel
2022-06-21T23:55:21.3550960Z gatewaychannel
2022-06-21T23:55:21.3552011Z <== have been joined by organization org1
2022-06-21T23:55:21.3552490Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:21.3552811Z baseapichannel
2022-06-21T23:55:21.3553019Z basev2channel
2022-06-21T23:55:21.3553249Z discoverychannel
2022-06-21T23:55:21.3553480Z eventschannel
2022-06-21T23:55:21.3553684Z gatewaychannel
2022-06-21T23:55:21.3553895Z <==
2022-06-21T23:55:21.3554276Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:21.3555923Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:21.3557480Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:21.5292134Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:21.5293101Z eventschannel
2022-06-21T23:55:21.5294841Z gatewaychannel
2022-06-21T23:55:21.5295484Z baseapichannel
2022-06-21T23:55:21.5295982Z basev2channel
2022-06-21T23:55:21.5296530Z discoverychannel
2022-06-21T23:55:21.5297236Z <== have been joined by organization org2
2022-06-21T23:55:21.5297822Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:21.5298238Z eventschannel
2022-06-21T23:55:21.5299019Z gatewaychannel
2022-06-21T23:55:21.5299329Z baseapichannel
2022-06-21T23:55:21.5299561Z basev2channel
2022-06-21T23:55:21.5299798Z discoverychannel
2022-06-21T23:55:21.5300001Z <==
2022-06-21T23:55:21.5300853Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:21.5301438Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:21.5302355Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:21.5302728Z 
2022-06-21T23:55:21.5302982Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:21.5303178Z 
2022-06-21T23:55:21.5303538Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:21.5304346Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:21.5305772Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:21.5307952Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:21.7165646Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:21.7172464Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:21.7173386Z     And I have a HSM backed gateway named myhsmgateway with discovery set to false for user User2 using the connection profile named ccp-tls.json
2022-06-21T23:55:21.7173822Z Gateway named myhsmgateway already exists
2022-06-21T23:55:21.7241920Z Gateway contained an HSM Wallet, discard the old one and create a new Gateway, reusing the in memory wallet holding the HSM identities
2022-06-21T23:55:21.7242930Z Creating new Gateway named myhsmgateway
2022-06-21T23:55:21.7254736Z Reusing HSM Wallet. Should expect the user to be found
2022-06-21T23:55:21.7350073Z Identity User2@Org1 already exists in wallet and will be used
2022-06-21T23:55:21.7899740Z Gateway myhsmgateway connected
2022-06-21T23:55:21.7905508Z     When I use the gateway named myhsmgateway to submit a transaction with args [noSuchSubmitTransaction,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:21.7911050Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.8133514Z 
2022-06-21T23:55:21.8134485Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:55:21.8135482Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:21.8136765Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:21.8137274Z 
2022-06-21T23:55:21.8143709Z     Then The gateway named myhsmgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:21.8146360Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:55:21.8147712Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:21.8157500Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:55:21.8163473Z     When I use the gateway named myhsmgateway to submit a transaction with args [createCar,9,Ford] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:21.8167202Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.8347351Z 
2022-06-21T23:55:21.8349654Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:55:21.8350406Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:21.8358284Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:21.8358665Z 
2022-06-21T23:55:21.8360124Z     Then The gateway named myhsmgateway has a error type response containing Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:21.8360774Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:55:21.8361967Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:21.8362760Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied to msg Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:55:21.8363556Z     When I use the gateway named myhsmgateway to evaluate a transaction with args [noSuchEvaluateTransaction,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:21.8364083Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.8449164Z 
2022-06-21T23:55:21.8451599Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:21.8451954Z 
2022-06-21T23:55:21.8454898Z     Then The gateway named myhsmgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:21.8458787Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:55:21.8460707Z     When I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,because,I,said,so] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:21.8461220Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:21.8547408Z 
2022-06-21T23:55:21.8549302Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:21.8549632Z 
2022-06-21T23:55:21.8549990Z     Then The gateway named myhsmgateway has a error type response containing Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:21.8552903Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied to msg Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:55:21.8555125Z 
2022-06-21T23:55:21.8556815Z   @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:21.8558576Z   Scenario: Using a Gateway to submit transactions I can use different event handler strategies # test/ts-scenario/features/hsm-gateway.feature:34
2022-06-21T23:55:21.8559889Z     Given I place a scenario start message GATEWAY HSM FEATURE
2022-06-21T23:55:21.8560112Z 
2022-06-21T23:55:21.8560122Z 
2022-06-21T23:55:21.8560131Z 
2022-06-21T23:55:21.8560398Z **********************************************************************************
2022-06-21T23:55:21.8561955Z **********************************************************************************
2022-06-21T23:55:21.8562399Z ****** GATEWAY HSM FEATURE Scenario 2 ******
2022-06-21T23:55:21.8563580Z **********************************************************************************
2022-06-21T23:55:21.8563995Z **********************************************************************************
2022-06-21T23:55:21.8564162Z 
2022-06-21T23:55:21.8564171Z 
2022-06-21T23:55:21.8564179Z 
2022-06-21T23:55:21.8564968Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:21.8566542Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.8567806Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.8568543Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:21.8569643Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:21.8570114Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:21.8571675Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:21.8572790Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:22.0303971Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:22.0305197Z baseapichannel
2022-06-21T23:55:22.0305923Z basev2channel
2022-06-21T23:55:22.0306379Z discoverychannel
2022-06-21T23:55:22.0307029Z eventschannel
2022-06-21T23:55:22.0307452Z gatewaychannel
2022-06-21T23:55:22.0308189Z <== have been joined by organization org1
2022-06-21T23:55:22.0308853Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:22.0309739Z baseapichannel
2022-06-21T23:55:22.0310500Z basev2channel
2022-06-21T23:55:22.0311135Z discoverychannel
2022-06-21T23:55:22.0312085Z eventschannel
2022-06-21T23:55:22.0312739Z gatewaychannel
2022-06-21T23:55:22.0313167Z <==
2022-06-21T23:55:22.0313959Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:22.0315279Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:22.0317174Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:22.2056367Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:22.2058967Z eventschannel
2022-06-21T23:55:22.2061444Z gatewaychannel
2022-06-21T23:55:22.2062037Z baseapichannel
2022-06-21T23:55:22.2062707Z basev2channel
2022-06-21T23:55:22.2063134Z discoverychannel
2022-06-21T23:55:22.2063965Z <== have been joined by organization org2
2022-06-21T23:55:22.2064608Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:22.2065490Z eventschannel
2022-06-21T23:55:22.2067659Z gatewaychannel
2022-06-21T23:55:22.2068379Z baseapichannel
2022-06-21T23:55:22.2068794Z basev2channel
2022-06-21T23:55:22.2069423Z discoverychannel
2022-06-21T23:55:22.2069830Z <==
2022-06-21T23:55:22.2071064Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:22.2071978Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:22.2076209Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:22.2076861Z 
2022-06-21T23:55:22.2077577Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:22.2077985Z 
2022-06-21T23:55:22.2078962Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:22.2080461Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:22.2082506Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:22.2084585Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:22.3977050Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:22.3977943Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:22.3979769Z     And I have a HSM backed gateway named myhsmgateway with discovery set to false for user User2 using the connection profile named ccp-tls.json
2022-06-21T23:55:22.3980437Z Gateway named myhsmgateway already exists
2022-06-21T23:55:22.4034858Z Gateway contained an HSM Wallet, discard the old one and create a new Gateway, reusing the in memory wallet holding the HSM identities
2022-06-21T23:55:22.4035700Z Creating new Gateway named myhsmgateway
2022-06-21T23:55:22.4042450Z Reusing HSM Wallet. Should expect the user to be found
2022-06-21T23:55:22.4125676Z Identity User2@Org1 already exists in wallet and will be used
2022-06-21T23:55:22.4551160Z Gateway myhsmgateway connected
2022-06-21T23:55:22.4553231Z     When I modify myhsmgateway to submit a transaction with args [createCar,1002,Ford,Mustang,Silver,Andy] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ALLFORTX
2022-06-21T23:55:22.4980717Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:23.1094888Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:23.1099936Z     And I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,1002] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:23.1101097Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:23.1242311Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}]
2022-06-21T23:55:23.1248169Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:55:23.1250594Z Comparing gatewayObj.result.response {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"} to msg {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:55:23.1252831Z     When I modify myhsmgateway to submit a transaction with args [createCar,1003,Ford,Fiesta,Blue,Heather] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ANYFORTX
2022-06-21T23:55:23.1652970Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:23.7668429Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:23.7670214Z     And I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,1003] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:23.7672117Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:23.7889869Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}]
2022-06-21T23:55:23.7892032Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:55:23.7894391Z Comparing gatewayObj.result.response {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"} to msg {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:55:23.7896632Z     When I modify myhsmgateway to submit a transaction with args [createCar,1004,Vauxhall,Corsa,White,Mark] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ALLFORTX
2022-06-21T23:55:23.8453935Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:24.4524053Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:24.4526707Z     And I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,1004] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:24.4529877Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:24.4736698Z Successfully performed evaluate transaction [queryCar] with result [{"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}]
2022-06-21T23:55:24.4738749Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:55:24.4742675Z Comparing gatewayObj.result.response {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"} to msg {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:55:24.4743970Z     When I modify myhsmgateway to submit a transaction with args [createCar,1005,Bugatti,Veyron,Black,Bret] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ANYFORTX
2022-06-21T23:55:24.5178581Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:25.1416207Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:25.1423590Z     Then The gateway named myhsmgateway has a submit type response
2022-06-21T23:55:25.1434746Z     When I modify myhsmgateway to submit a transaction with args [createCar,1006,Lotus,Elise,Pink,Nick] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:55:25.1887312Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:25.7730721Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:55:25.7740829Z     And I use the gateway named myhsmgateway to evaluate a transaction with args [queryCar,1006] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:25.7741709Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:25.7861521Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}]
2022-06-21T23:55:25.7872000Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:55:25.7879983Z Comparing gatewayObj.result.response {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"} to msg {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:55:25.7889285Z 
2022-06-21T23:55:25.7894961Z   @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:25.7899694Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/hsm-gateway.feature:50
2022-06-21T23:55:25.7905780Z     Given I place a scenario start message GATEWAY HSM FEATURE
2022-06-21T23:55:25.7910473Z 
2022-06-21T23:55:25.7910481Z 
2022-06-21T23:55:25.7910515Z 
2022-06-21T23:55:25.7910986Z **********************************************************************************
2022-06-21T23:55:25.7913606Z **********************************************************************************
2022-06-21T23:55:25.7913960Z ****** GATEWAY HSM FEATURE Scenario 3 ******
2022-06-21T23:55:25.7915893Z **********************************************************************************
2022-06-21T23:55:25.7918485Z **********************************************************************************
2022-06-21T23:55:25.7919858Z 
2022-06-21T23:55:25.7920011Z 
2022-06-21T23:55:25.7920155Z 
2022-06-21T23:55:25.7923125Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:25.7923782Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:25.7925327Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:25.7925864Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:25.7926291Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:25.7926739Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:25.7927613Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:25.7928855Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:25.9671217Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:25.9672669Z discoverychannel
2022-06-21T23:55:25.9673104Z eventschannel
2022-06-21T23:55:25.9673467Z gatewaychannel
2022-06-21T23:55:25.9673859Z baseapichannel
2022-06-21T23:55:25.9674235Z basev2channel
2022-06-21T23:55:25.9674695Z <== have been joined by organization org1
2022-06-21T23:55:25.9675316Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:25.9675825Z discoverychannel
2022-06-21T23:55:25.9676532Z eventschannel
2022-06-21T23:55:25.9678802Z gatewaychannel
2022-06-21T23:55:25.9681062Z baseapichannel
2022-06-21T23:55:25.9681452Z basev2channel
2022-06-21T23:55:25.9681819Z <==
2022-06-21T23:55:25.9682463Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:25.9684081Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:25.9686567Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:26.1373430Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:26.1374228Z eventschannel
2022-06-21T23:55:26.1374793Z gatewaychannel
2022-06-21T23:55:26.1375292Z baseapichannel
2022-06-21T23:55:26.1376144Z basev2channel
2022-06-21T23:55:26.1376555Z discoverychannel
2022-06-21T23:55:26.1377721Z <== have been joined by organization org2
2022-06-21T23:55:26.1378503Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:26.1379252Z eventschannel
2022-06-21T23:55:26.1379632Z gatewaychannel
2022-06-21T23:55:26.1380637Z baseapichannel
2022-06-21T23:55:26.1380997Z basev2channel
2022-06-21T23:55:26.1381394Z discoverychannel
2022-06-21T23:55:26.1381741Z <==
2022-06-21T23:55:26.1383421Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:26.1384186Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:26.1385660Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:26.1386852Z 
2022-06-21T23:55:26.1387305Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:26.1387619Z 
2022-06-21T23:55:26.1388114Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:26.1389027Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:26.1390699Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:26.1425459Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:26.3280764Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:26.3281962Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:26.3304380Z     And I have a HSM backed gateway named myhsmgateway with discovery set to false for user User2 using the connection profile named ccp-tls.json
2022-06-21T23:55:26.3305394Z Gateway named myhsmgateway already exists
2022-06-21T23:55:26.3323528Z Gateway contained an HSM Wallet, discard the old one and create a new Gateway, reusing the in memory wallet holding the HSM identities
2022-06-21T23:55:26.3324430Z Creating new Gateway named myhsmgateway
2022-06-21T23:55:26.3330724Z Reusing HSM Wallet. Should expect the user to be found
2022-06-21T23:55:26.3443098Z Identity User2@Org1 already exists in wallet and will be used
2022-06-21T23:55:26.3879279Z Gateway myhsmgateway connected
2022-06-21T23:55:26.3880937Z     When I modify myhsmgateway to submit a transaction with transient data using args [getTransient,value1,value2] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:26.3883370Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:26.9642052Z Successfully performed submit transaction [getTransient] with transient data with result of [{"key0":"value1","key1":"value2"}]
2022-06-21T23:55:26.9643354Z     Then The gateway named myhsmgateway has a submit type response matching {"key0":"value1","key1":"value2"}
2022-06-21T23:55:26.9644882Z Comparing gatewayObj.result.response {"key0":"value1","key1":"value2"} to msg {"key0":"value1","key1":"value2"}
2022-06-21T23:55:26.9647055Z     When I modify myhsmgateway to evaluate a transaction with transient data using args [getTransient,valueA,valueB] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:55:26.9648325Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:26.9755901Z Successfully performed evaluate transaction [getTransient] with transient data with result of [{"key0":"valueA","key1":"valueB"}]
2022-06-21T23:55:26.9757397Z     Then The gateway named myhsmgateway has a evaluate type response matching {"key0":"valueA","key1":"valueB"}
2022-06-21T23:55:26.9758852Z Comparing gatewayObj.result.response {"key0":"valueA","key1":"valueB"} to msg {"key0":"valueA","key1":"valueB"}
2022-06-21T23:55:26.9760531Z 
2022-06-21T23:55:26.9764462Z   @gateway_hsm @gateway @fabric_merge
2022-06-21T23:55:26.9766370Z   Scenario: Using a Gateway to evaluate transactions I can use different query handler strategies # test/ts-scenario/features/hsm-gateway.feature:56
2022-06-21T23:55:26.9768591Z     Given I place a scenario start message GATEWAY HSM FEATURE
2022-06-21T23:55:26.9770048Z 
2022-06-21T23:55:26.9770057Z 
2022-06-21T23:55:26.9770065Z 
2022-06-21T23:55:26.9770848Z **********************************************************************************
2022-06-21T23:55:26.9771484Z **********************************************************************************
2022-06-21T23:55:26.9771865Z ****** GATEWAY HSM FEATURE Scenario 4 ******
2022-06-21T23:55:26.9772279Z **********************************************************************************
2022-06-21T23:55:26.9772695Z **********************************************************************************
2022-06-21T23:55:26.9772863Z 
2022-06-21T23:55:26.9772872Z 
2022-06-21T23:55:26.9772880Z 
2022-06-21T23:55:26.9774986Z     Given I deploy a tls Fabric network at 2.1 version
2022-06-21T23:55:26.9775391Z  **** checking for a deployed fabric network of type tls version 2.1
2022-06-21T23:55:26.9775803Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:26.9776182Z  **** Using the deployed fabric network of type tls version 2.1
2022-06-21T23:55:26.9811654Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:26.9812225Z Attempting to get list of channels for organization org1 of type tls
2022-06-21T23:55:26.9813355Z  -- runShellCommand ==>docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:26.9814736Z SCENARIO CMD: docker exec org1_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:27.1633411Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:27.1633920Z discoverychannel
2022-06-21T23:55:27.1634255Z eventschannel
2022-06-21T23:55:27.1634573Z gatewaychannel
2022-06-21T23:55:27.1635163Z baseapichannel
2022-06-21T23:55:27.1635528Z basev2channel
2022-06-21T23:55:27.1635914Z <== have been joined by organization org1
2022-06-21T23:55:27.1636434Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:27.1636835Z discoverychannel
2022-06-21T23:55:27.1637117Z eventschannel
2022-06-21T23:55:27.1637409Z gatewaychannel
2022-06-21T23:55:27.1637696Z baseapichannel
2022-06-21T23:55:27.1637983Z basev2channel
2022-06-21T23:55:27.1638241Z <==
2022-06-21T23:55:27.1638686Z Attempting to get list of channels for organization org2 of type tls
2022-06-21T23:55:27.1639830Z  -- runShellCommand ==>docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:27.1641016Z SCENARIO CMD: docker exec org2_cli peer channel list --tls --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:27.3332297Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:27.3332614Z baseapichannel
2022-06-21T23:55:27.3332824Z basev2channel
2022-06-21T23:55:27.3333046Z discoverychannel
2022-06-21T23:55:27.3333266Z eventschannel
2022-06-21T23:55:27.3333464Z gatewaychannel
2022-06-21T23:55:27.3333772Z <== have been joined by organization org2
2022-06-21T23:55:27.3334206Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:55:27.3334506Z baseapichannel
2022-06-21T23:55:27.3334703Z basev2channel
2022-06-21T23:55:27.3334920Z discoverychannel
2022-06-21T23:55:27.3335138Z eventschannel
2022-06-21T23:55:27.3335348Z gatewaychannel
2022-06-21T23:55:27.3335531Z <==
2022-06-21T23:55:27.3336363Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:55:27.3336881Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:55:27.3337780Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:55:27.3338132Z 
2022-06-21T23:55:27.3338406Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:55:27.3338574Z 
2022-06-21T23:55:27.3338914Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:55:27.3339485Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:55:27.3340581Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem<==
2022-06-21T23:55:27.3342046Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json --tls true --cafile /etc/hyperledger/configtx/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
2022-06-21T23:55:27.5131716Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:55:27.5132977Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:55:27.5136459Z     And I have a HSM backed gateway named myhsmgateway with discovery set to false for user User2 using the connection profile named ccp-tls.json
2022-06-21T23:55:27.5138361Z Gateway named myhsmgateway already exists
2022-06-21T23:55:27.5191905Z Gateway contained an HSM Wallet, discard the old one and create a new Gateway, reusing the in memory wallet holding the HSM identities
2022-06-21T23:55:27.5193293Z Creating new Gateway named myhsmgateway
2022-06-21T23:55:27.5198810Z Reusing HSM Wallet. Should expect the user to be found
2022-06-21T23:55:27.5292682Z Identity User2@Org1 already exists in wallet and will be used
2022-06-21T23:55:27.5801549Z Gateway myhsmgateway connected
2022-06-21T23:55:27.5803353Z     When I modify myhsmgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_SINGLE
2022-06-21T23:55:27.6205654Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:27.6358407Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:27.6362626Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.6367860Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.6372957Z     When I modify myhsmgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ROUND_ROBIN
2022-06-21T23:55:27.6731221Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:27.6849058Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:27.6853832Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.6858070Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.6862562Z     When I modify myhsmgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:55:27.7282201Z Retrieving contract from channel gatewaychannel
2022-06-21T23:55:27.7406996Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:55:27.7412047Z     Then The gateway named myhsmgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.7416908Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:55:27.7420774Z 
2022-06-21T23:55:27.7425003Z @gateway_nontls @gateway @fabric_merge
2022-06-21T23:55:27.7429935Z Feature: Configure Fabric using CLI and submit/evaluate using a network Gateway without discovery # test/ts-scenario/features/nontls-gateway.feature:8
2022-06-21T23:55:27.7430443Z 
2022-06-21T23:55:27.7430824Z   @gateway_nontls @gateway @fabric_merge
2022-06-21T23:55:27.7434577Z   Scenario: Using a Gateway I can submit and evaluate transactions on instantiated node smart contract # test/ts-scenario/features/nontls-gateway.feature:18
2022-06-21T23:55:27.7437830Z     Given I place a scenario start message GATEWAY NON TLS FEATURE
2022-06-21T23:55:27.7440140Z 
2022-06-21T23:55:27.7440378Z 
2022-06-21T23:55:27.7440453Z 
2022-06-21T23:55:27.7440886Z **********************************************************************************
2022-06-21T23:55:27.7441296Z **********************************************************************************
2022-06-21T23:55:27.7441635Z ****** GATEWAY NON TLS FEATURE Scenario 0 ******
2022-06-21T23:55:27.7443151Z **********************************************************************************
2022-06-21T23:55:27.7444191Z **********************************************************************************
2022-06-21T23:55:27.7444605Z 
2022-06-21T23:55:27.7444805Z 
2022-06-21T23:55:27.7445005Z 
2022-06-21T23:55:27.7448040Z     Given I deploy a non-tls Fabric network at 2.1 version
2022-06-21T23:55:27.7451875Z  **** checking for a deployed fabric network of type non-tls version 2.1
2022-06-21T23:55:27.7452607Z  **** found a deployed fabric network of type tls version 2.1
2022-06-21T23:55:27.7453552Z  **** shutting down existing fabric network of type tls version 2.1
2022-06-21T23:55:27.7454641Z  -- runShellCommand ==>rm -rf ~/.hlf-checkpoint<==
2022-06-21T23:55:27.7455916Z SCENARIO CMD: rm -rf ~/.hlf-checkpoint
2022-06-21T23:55:27.7632014Z SCENARIO CMD - STDOUT:
2022-06-21T23:55:27.7632791Z  
2022-06-21T23:55:27.7633510Z SCENARIO CMD - STDERR:
2022-06-21T23:55:27.7633783Z  
2022-06-21T23:55:27.7634276Z  -- runShellCommand ==>docker kill $(docker ps -aq); docker rm $(docker ps -aq)<==
2022-06-21T23:55:27.7634890Z SCENARIO CMD: docker kill $(docker ps -aq); docker rm $(docker ps -aq)
2022-06-21T23:55:28.1728561Z Chaincode listener ERROR received for myFullChaincodeListener :: Error: 14 UNAVAILABLE: Connection dropped
2022-06-21T23:55:28.1873205Z Chaincode listener ERROR received for myFullChaincodeListener :: Error: 14 UNAVAILABLE: Connection dropped
2022-06-21T23:55:30.2503517Z SCENARIO CMD - STDOUT:
2022-06-21T23:55:30.2503852Z  ee87e89e2c35
2022-06-21T23:55:30.2504255Z 9742984f828a
2022-06-21T23:55:30.2504658Z bf02b5e11451
2022-06-21T23:55:30.2505161Z dd62d7cf730c
2022-06-21T23:55:30.2505515Z 49ea1819b4dc
2022-06-21T23:55:30.2505757Z a4829b67a969
2022-06-21T23:55:30.2505984Z cf085f377470
2022-06-21T23:55:30.2506210Z f9a72f49171b
2022-06-21T23:55:30.2506499Z 0aac63163f06
2022-06-21T23:55:30.2506740Z dc3ee05d5346
2022-06-21T23:55:30.2506974Z 3019e65d0794
2022-06-21T23:55:30.2507180Z f1a2b9288035
2022-06-21T23:55:30.2507407Z 156e1145b512
2022-06-21T23:55:30.2507626Z 99214e96bb0f
2022-06-21T23:55:30.2507849Z b0daf569cc3f
2022-06-21T23:55:30.2508082Z 9d4acc22cb85
2022-06-21T23:55:30.2508307Z 7d0a04bc6a33
2022-06-21T23:55:30.2508533Z 19981e262c7f
2022-06-21T23:55:30.2508757Z 28a2e5c0d14d
2022-06-21T23:55:30.2508968Z d6b417a83201
2022-06-21T23:55:30.2509196Z ee87e89e2c35
2022-06-21T23:55:30.2509416Z 9742984f828a
2022-06-21T23:55:30.2509638Z bf02b5e11451
2022-06-21T23:55:30.2509848Z dd62d7cf730c
2022-06-21T23:55:30.2510072Z 49ea1819b4dc
2022-06-21T23:55:30.2510289Z a4829b67a969
2022-06-21T23:55:30.2510493Z cf085f377470
2022-06-21T23:55:30.2510715Z f9a72f49171b
2022-06-21T23:55:30.2510937Z 0aac63163f06
2022-06-21T23:55:30.2511175Z dc3ee05d5346
2022-06-21T23:55:30.2511382Z 3019e65d0794
2022-06-21T23:55:30.2511607Z f1a2b9288035
2022-06-21T23:55:30.2511829Z 156e1145b512
2022-06-21T23:55:30.2512044Z 99214e96bb0f
2022-06-21T23:55:30.2512252Z b0daf569cc3f
2022-06-21T23:55:30.2512475Z 9d4acc22cb85
2022-06-21T23:55:30.2512699Z 7d0a04bc6a33
2022-06-21T23:55:30.2512915Z 19981e262c7f
2022-06-21T23:55:30.2513122Z 28a2e5c0d14d
2022-06-21T23:55:30.2513344Z d6b417a83201
2022-06-21T23:55:30.2513486Z 
2022-06-21T23:55:30.2513726Z SCENARIO CMD - STDERR:
2022-06-21T23:55:30.2513966Z  
2022-06-21T23:55:40.2507872Z  -- runShellCommand ==>docker-compose -f /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/docker-compose/docker-compose.yaml -p node up -d<==
2022-06-21T23:55:40.2509651Z SCENARIO CMD: docker-compose -f /home/runner/work/fabric-sdk-node/fabric-sdk-node/test/ts-fixtures/docker-compose/docker-compose.yaml -p node up -d
2022-06-21T23:55:46.4276278Z SCENARIO CMD - STDOUT:
2022-06-21T23:55:46.4286147Z  
2022-06-21T23:55:46.4287338Z SCENARIO CMD - STDERR:
2022-06-21T23:55:46.4287699Z  Creating ca2.example.com ... 
2022-06-21T23:55:46.4288422Z Creating couchdb.org2.example.com ... 
2022-06-21T23:55:46.4288855Z Creating couchdb.org1.example.com ... 
2022-06-21T23:55:46.4289234Z Creating ca0.example.com          ... 
2022-06-21T23:55:46.4289594Z Creating ca1.example.com          ... 
2022-06-21T23:55:46.4289944Z Creating orderer.example.com      ... 
2022-06-21T23:55:46.4290678Z Creating ca1.example.com          ... done
2022-06-21T23:55:46.4291437Z Creating ca2.example.com          ... done
2022-06-21T23:55:46.4291868Z Creating couchdb.org1.example.com ... done
2022-06-21T23:55:46.4292256Z Creating couchdb.org2.example.com ... done
2022-06-21T23:55:46.4292676Z Creating orderer.example.com      ... done
2022-06-21T23:55:46.4293055Z Creating ca0.example.com          ... done
2022-06-21T23:55:46.4293428Z Creating peer0.org2.example.com   ... 
2022-06-21T23:55:46.4293798Z Creating peer0.org1.example.com   ... 
2022-06-21T23:55:46.4294189Z Creating peer0.org2.example.com   ... done
2022-06-21T23:55:46.4294549Z Creating org2_cli                 ... 
2022-06-21T23:55:46.4294917Z Creating peer0.org1.example.com   ... done
2022-06-21T23:55:46.4295259Z Creating org1_cli                 ... 
2022-06-21T23:55:46.4295599Z Creating org2_cli                 ... done
2022-06-21T23:55:46.4295942Z Creating org1_cli                 ... done
2022-06-21T23:55:46.4296109Z 
2022-06-21T23:55:51.4271194Z  **** re-deployed a fabric network of type non-tls version 2.1 
2022-06-21T23:55:51.4274394Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:55:51.4276694Z Attempting to get list of channels for organization org1 of type non-tls
2022-06-21T23:55:51.4277320Z  -- runShellCommand ==>docker exec org1_cli peer channel list<==
2022-06-21T23:55:51.4277836Z SCENARIO CMD: docker exec org1_cli peer channel list
2022-06-21T23:55:51.6135440Z Channel names ==>Channels peers has joined: 
2022-06-21T23:55:51.6137338Z <== have been joined by organization org1
2022-06-21T23:55:51.6138467Z Attempting to create channel gatewaychannel of type non-tls
2022-06-21T23:55:51.6141571Z  -- runShellCommand ==>docker exec org1_cli peer channel create -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/gatewaychannel.block<==
2022-06-21T23:55:51.6155734Z SCENARIO CMD: docker exec org1_cli peer channel create -o orderer.example.com:7050 -c gatewaychannel -f /etc/hyperledger/configtx/channel-config/gatewaychannel.tx --outputBlock /etc/hyperledger/configtx/channel-config/gatewaychannel.block
2022-06-21T23:55:56.8002469Z Channel gatewaychannel has been created
2022-06-21T23:55:56.8008530Z Attempting to join organization org1 to channel gatewaychannel of type non-tls
2022-06-21T23:55:56.8009573Z  -- runShellCommand ==>docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block<==
2022-06-21T23:55:56.8010886Z SCENARIO CMD: docker exec org1_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block
2022-06-21T23:56:02.1625944Z Channel gatewaychannel has been joined by organization org1
2022-06-21T23:56:02.1627013Z Attempting to get list of channels for organization org2 of type non-tls
2022-06-21T23:56:02.1627535Z  -- runShellCommand ==>docker exec org2_cli peer channel list<==
2022-06-21T23:56:02.1627999Z SCENARIO CMD: docker exec org2_cli peer channel list
2022-06-21T23:56:02.3253886Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:02.3254576Z <== have been joined by organization org2
2022-06-21T23:56:02.3255851Z Attempting to join organization org2 to channel gatewaychannel of type non-tls
2022-06-21T23:56:02.3257103Z  -- runShellCommand ==>docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block<==
2022-06-21T23:56:02.3258228Z SCENARIO CMD: docker exec org2_cli peer channel join -b /etc/hyperledger/configtx/channel-config/gatewaychannel.block
2022-06-21T23:56:07.6258076Z Channel gatewaychannel has been joined by organization org2
2022-06-21T23:56:07.6266195Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:56:07.6271953Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:56:07.6276495Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:56:07.6280430Z 
2022-06-21T23:56:07.6280979Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:56:07.6281187Z 
2022-06-21T23:56:07.6281527Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:56:07.6282340Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:56:07.6287577Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json<==
2022-06-21T23:56:07.6288636Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json
2022-06-21T23:56:07.7972499Z Smart contract with name fabcar is not committed for organization org1 using the CLI
2022-06-21T23:56:07.7973727Z Smart contract fabcar at version 1.0.0 is not committed on channel gatewaychannel as fabcar 
2022-06-21T23:56:07.7974082Z 
2022-06-21T23:56:07.7974726Z  -- Lifecycle deploy step two - package Smart contract fabcar
2022-06-21T23:56:07.7975633Z Attempting lifecyle package of smart contract fabcar with label fabcar-gatewaychannel for organization org1 using the CLI
2022-06-21T23:56:07.7976726Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:56:07.7978092Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:56:12.9725354Z Smart contract fabcar with label fabcar-gatewaychannel has been packaged for organization org1 using the CLI
2022-06-21T23:56:12.9726565Z Attempting lifecyle package of smart contract fabcar with label fabcar-gatewaychannel for organization org2 using the CLI
2022-06-21T23:56:12.9727757Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar<==
2022-06-21T23:56:12.9729112Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode package fabcar.tar.gz --lang node --label fabcar-gatewaychannel --path /opt/gopath/src/github.com/chaincode/node/fabcar
2022-06-21T23:56:18.1369922Z Smart contract fabcar with label fabcar-gatewaychannel has been packaged for organization org2 using the CLI
2022-06-21T23:56:18.1371243Z 
2022-06-21T23:56:18.1372015Z  -- Lifecycle deploy step three - install Smart contract fabcar
2022-06-21T23:56:18.1373039Z Attempting lifecycle install of smart contract package fabcar for organization org1 using the CLI
2022-06-21T23:56:18.1375136Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:56:18.1376150Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:56:23.3029379Z Smart contract package fabcar has been installed for organization org1 using the CLI
2022-06-21T23:56:23.3030485Z Smart contract fabcar at version 1.0.0 has been installed on organization Org1 
2022-06-21T23:56:23.3031611Z Attempting lifecycle install of smart contract package fabcar for organization org2 using the CLI
2022-06-21T23:56:23.3033085Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s<==
2022-06-21T23:56:23.3034986Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode install fabcar.tar.gz --connTimeout 240s
2022-06-21T23:56:28.4662517Z Smart contract package fabcar has been installed for organization org2 using the CLI
2022-06-21T23:56:28.4663414Z Smart contract fabcar at version 1.0.0 has been installed on organization Org2 
2022-06-21T23:56:28.4725464Z 
2022-06-21T23:56:28.4726581Z  -- Lifecycle deploy step four - approve Smart contract fabcar
2022-06-21T23:56:28.4727443Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:56:28.4728028Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:56:28.6416952Z Attempting lifecycle approve of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:56:28.6419318Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json<==
2022-06-21T23:56:28.6422348Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json
2022-06-21T23:56:34.5683379Z Smart contract with reference fabcar has been approved for organization org1 using the CLI
2022-06-21T23:56:34.5684393Z Smart contract fabcar at version 1.0.0 has been approved on organization Org1 
2022-06-21T23:56:34.5685563Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode queryinstalled<==
2022-06-21T23:56:34.5686075Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode queryinstalled
2022-06-21T23:56:34.7319331Z Attempting lifecycle approve of smart contract with reference fabcar for organization org2 using the CLI
2022-06-21T23:56:34.7321580Z  -- runShellCommand ==>docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json<==
2022-06-21T23:56:34.7324032Z SCENARIO CMD: docker exec org2_cli peer lifecycle chaincode approveformyorg --channelID gatewaychannel --name fabcar --version 1.0.0 --package-id fabcar-gatewaychannel:56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732 --sequence 1 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json
2022-06-21T23:56:40.5971776Z Smart contract with reference fabcar has been approved for organization org2 using the CLI
2022-06-21T23:56:40.5972295Z Smart contract fabcar at version 1.0.0 has been approved on organization Org2 
2022-06-21T23:56:45.5986431Z 
2022-06-21T23:56:45.5987780Z  -- Lifecycle deploy step five (final) - commit Smart contract fabcar
2022-06-21T23:56:45.5988788Z Attempting lifecycle commit of smart contract with reference fabcar for organization org1 using the CLI
2022-06-21T23:56:45.5990830Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID gatewaychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json<==
2022-06-21T23:56:45.5992847Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID gatewaychannel --name fabcar --version 1.0.0 --sequence 1 --peerAddresses peer0.org1.example.com:7051 peer0.org2.example.com:8051 --waitForEvent --collections-config /opt/gopath/src/github.com/chaincode/node/fabcar/metadata/collections.json
2022-06-21T23:56:51.5781603Z Smart contract with reference fabcar has been committed for organization org1 using the CLI
2022-06-21T23:56:51.5786576Z     And I have a couchDB backed gateway named mynontlsgateway with discovery set to false for user User1 using the connection profile named ccp.json
2022-06-21T23:56:51.5789570Z Creating new Gateway named mynontlsgateway
2022-06-21T23:56:51.5806315Z Will build existing Identity User1@Org1
2022-06-21T23:56:51.5808631Z Adding identity for User1@Org1 to wallet
2022-06-21T23:56:51.7171621Z Gateway mynontlsgateway connected
2022-06-21T23:56:51.7173313Z     When I use the gateway named mynontlsgateway to submit a transaction with args [createCar,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:51.7174505Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:52.4858336Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:52.4860033Z     Then The gateway named mynontlsgateway has a submit type response
2022-06-21T23:56:52.4863689Z     When I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:52.4865464Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:52.5152596Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:56:52.5155263Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:52.5157677Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:52.5159036Z 
2022-06-21T23:56:52.5160515Z   @gateway_nontls @gateway @fabric_merge
2022-06-21T23:56:52.5162152Z   Scenario: Using a Gateway I recieve useful error messages when I submit or evaulate invalid transactions # test/ts-scenario/features/nontls-gateway.feature:24
2022-06-21T23:56:52.5164560Z     Given I place a scenario start message GATEWAY NON TLS FEATURE
2022-06-21T23:56:52.5165265Z 
2022-06-21T23:56:52.5166230Z 
2022-06-21T23:56:52.5166451Z 
2022-06-21T23:56:52.5167153Z **********************************************************************************
2022-06-21T23:56:52.5168170Z **********************************************************************************
2022-06-21T23:56:52.5169656Z ****** GATEWAY NON TLS FEATURE Scenario 1 ******
2022-06-21T23:56:52.5171464Z **********************************************************************************
2022-06-21T23:56:52.5172696Z **********************************************************************************
2022-06-21T23:56:52.5173079Z 
2022-06-21T23:56:52.5173448Z 
2022-06-21T23:56:52.5173607Z 
2022-06-21T23:56:52.5174395Z     Given I deploy a non-tls Fabric network at 2.1 version
2022-06-21T23:56:52.5175975Z  **** checking for a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:52.5177252Z  **** found a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:52.5178121Z  **** Using the deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:52.5179312Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:56:52.5180317Z Attempting to get list of channels for organization org1 of type non-tls
2022-06-21T23:56:52.5182079Z  -- runShellCommand ==>docker exec org1_cli peer channel list<==
2022-06-21T23:56:52.5182930Z SCENARIO CMD: docker exec org1_cli peer channel list
2022-06-21T23:56:52.6830088Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:52.6831184Z gatewaychannel
2022-06-21T23:56:52.6836071Z <== have been joined by organization org1
2022-06-21T23:56:52.6837278Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:52.6896601Z gatewaychannel
2022-06-21T23:56:52.6896838Z <==
2022-06-21T23:56:52.6897529Z Attempting to get list of channels for organization org2 of type non-tls
2022-06-21T23:56:52.6898339Z  -- runShellCommand ==>docker exec org2_cli peer channel list<==
2022-06-21T23:56:52.6898762Z SCENARIO CMD: docker exec org2_cli peer channel list
2022-06-21T23:56:52.8496156Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:52.8496570Z gatewaychannel
2022-06-21T23:56:52.8496905Z <== have been joined by organization org2
2022-06-21T23:56:52.8506556Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:52.8507159Z gatewaychannel
2022-06-21T23:56:52.8507398Z <==
2022-06-21T23:56:52.8513552Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:56:52.8514228Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:56:52.8515282Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:56:52.8516047Z 
2022-06-21T23:56:52.8516373Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:56:52.8516893Z 
2022-06-21T23:56:52.8517257Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:56:52.8518168Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:56:52.8518896Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json<==
2022-06-21T23:56:52.8519737Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json
2022-06-21T23:56:53.0533044Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:56:53.0535892Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:56:53.0537359Z     And I have a couchDB backed gateway named mynontlsgateway with discovery set to false for user User1 using the connection profile named ccp.json
2022-06-21T23:56:53.0542404Z Gateway named mynontlsgateway already exists
2022-06-21T23:56:53.0547956Z     When I use the gateway named mynontlsgateway to submit a transaction with args [noSuchSubmitTransaction,1001,Trabant,601 Estate,brown,Simon] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:53.0549224Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:53.0770718Z 
2022-06-21T23:56:53.0772405Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:56:53.0773676Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:56:53.0775027Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:56:53.0775691Z 
2022-06-21T23:56:53.0781323Z     Then The gateway named mynontlsgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:56:53.0782627Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:56:53.0783792Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:56:53.0870911Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchSubmitTransaction
2022-06-21T23:56:53.0872110Z     When I use the gateway named mynontlsgateway to submit a transaction with args [createCar,9,Ford] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:53.0872676Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:53.1010108Z 
2022-06-21T23:56:53.1011342Z  --- in gateway transaction: Error: No valid responses from any peers. Errors:
2022-06-21T23:56:53.1012054Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:56:53.1012806Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:56:53.1013409Z 
2022-06-21T23:56:53.1013818Z     Then The gateway named mynontlsgateway has a error type response containing Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:56:53.1014489Z Comparing gatewayObj.result.response Error: No valid responses from any peers. Errors:
2022-06-21T23:56:53.1015488Z     peer=peer0.org1.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:56:53.1016825Z     peer=peer0.org2.example.com, status=500, message=error in simulation: transaction returned with failure: Error: Expected 5 parameters, but 2 have been supplied to msg Error: Expected 5 parameters, but 2 have been supplied
2022-06-21T23:56:53.1017654Z     When I use the gateway named mynontlsgateway to evaluate a transaction with args [noSuchEvaluateTransaction,1001] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:53.1018207Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:53.1158721Z 
2022-06-21T23:56:53.1159594Z     Then The gateway named mynontlsgateway has a error type response containing Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:56:53.1161075Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:56:53.1161742Z 
2022-06-21T23:56:53.1164391Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction to msg Error: You've asked to invoke a function that does not exist: noSuchEvaluateTransaction
2022-06-21T23:56:53.1165820Z     When I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,because,I,said,so] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:53.1179159Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:53.1289907Z 
2022-06-21T23:56:53.1290920Z  --- in gateway transaction: Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:56:53.1291220Z 
2022-06-21T23:56:53.1291597Z     Then The gateway named mynontlsgateway has a error type response containing Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:56:53.1310227Z Comparing gatewayObj.result.response Error: error in simulation: transaction returned with failure: Error: Expected 1 parameters, but 4 have been supplied to msg Error: Expected 1 parameters, but 4 have been supplied
2022-06-21T23:56:53.1310667Z 
2022-06-21T23:56:53.1310844Z   @gateway_nontls @gateway @fabric_merge
2022-06-21T23:56:53.1311660Z   Scenario: Using a Gateway to submit transactions I can use different event handler strategies # test/ts-scenario/features/nontls-gateway.feature:34
2022-06-21T23:56:53.1312185Z     Given I place a scenario start message GATEWAY NON TLS FEATURE
2022-06-21T23:56:53.1312374Z 
2022-06-21T23:56:53.1312382Z 
2022-06-21T23:56:53.1312407Z 
2022-06-21T23:56:53.1312640Z **********************************************************************************
2022-06-21T23:56:53.1313041Z **********************************************************************************
2022-06-21T23:56:53.1313652Z ****** GATEWAY NON TLS FEATURE Scenario 2 ******
2022-06-21T23:56:53.1314090Z **********************************************************************************
2022-06-21T23:56:53.1314481Z **********************************************************************************
2022-06-21T23:56:53.1314630Z 
2022-06-21T23:56:53.1314654Z 
2022-06-21T23:56:53.1314662Z 
2022-06-21T23:56:53.1318351Z     Given I deploy a non-tls Fabric network at 2.1 version
2022-06-21T23:56:53.1318872Z  **** checking for a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:53.1319394Z  **** found a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:53.1319889Z  **** Using the deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:53.1320344Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:56:53.1320960Z Attempting to get list of channels for organization org1 of type non-tls
2022-06-21T23:56:53.1321697Z  -- runShellCommand ==>docker exec org1_cli peer channel list<==
2022-06-21T23:56:53.1322126Z SCENARIO CMD: docker exec org1_cli peer channel list
2022-06-21T23:56:53.2971910Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:53.2973039Z gatewaychannel
2022-06-21T23:56:53.2973788Z <== have been joined by organization org1
2022-06-21T23:56:53.2974332Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:53.2974675Z gatewaychannel
2022-06-21T23:56:53.2974910Z <==
2022-06-21T23:56:53.2975700Z Attempting to get list of channels for organization org2 of type non-tls
2022-06-21T23:56:53.2976246Z  -- runShellCommand ==>docker exec org2_cli peer channel list<==
2022-06-21T23:56:53.2976691Z SCENARIO CMD: docker exec org2_cli peer channel list
2022-06-21T23:56:53.4612105Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:53.4612943Z gatewaychannel
2022-06-21T23:56:53.4613368Z <== have been joined by organization org2
2022-06-21T23:56:53.4614527Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:53.4617224Z gatewaychannel
2022-06-21T23:56:53.4617582Z <==
2022-06-21T23:56:53.4618529Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:56:53.4622230Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:56:53.4625854Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:56:53.4628506Z 
2022-06-21T23:56:53.4629243Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:56:53.4631051Z 
2022-06-21T23:56:53.4631632Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:56:53.4633307Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:56:53.4637240Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json<==
2022-06-21T23:56:53.4641987Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json
2022-06-21T23:56:53.6304574Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:56:53.6305324Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:56:53.6307890Z     And I have a couchDB backed gateway named mynontlsgateway with discovery set to false for user User1 using the connection profile named ccp.json
2022-06-21T23:56:53.6311221Z Gateway named mynontlsgateway already exists
2022-06-21T23:56:53.6312982Z     When I modify mynontlsgateway to submit a transaction with args [createCar,1002,Ford,Mustang,Silver,Andy] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ALLFORTX
2022-06-21T23:56:53.7778719Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:54.3805280Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:54.3806819Z     And I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,1002] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:54.3808400Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:54.4074094Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}]
2022-06-21T23:56:54.4075552Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:56:54.4077367Z Comparing gatewayObj.result.response {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"} to msg {"color":"Silver","docType":"car","make":"Ford","model":"Mustang","owner":"Andy"}
2022-06-21T23:56:54.4079230Z     When I modify mynontlsgateway to submit a transaction with args [createCar,1003,Ford,Fiesta,Blue,Heather] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ANYFORTX
2022-06-21T23:56:54.5313328Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:55.1261649Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:55.1266269Z     And I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,1003] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:55.1272472Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:55.1443235Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}]
2022-06-21T23:56:55.1449883Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:56:55.1457449Z Comparing gatewayObj.result.response {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"} to msg {"color":"Blue","docType":"car","make":"Ford","model":"Fiesta","owner":"Heather"}
2022-06-21T23:56:55.1464605Z     When I modify mynontlsgateway to submit a transaction with args [createCar,1004,Vauxhall,Corsa,White,Mark] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ALLFORTX
2022-06-21T23:56:55.2779379Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:55.8995159Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:55.8998725Z     And I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,1004] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:55.9001109Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:55.9200129Z Successfully performed evaluate transaction [queryCar] with result [{"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}]
2022-06-21T23:56:55.9202048Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:56:55.9206257Z Comparing gatewayObj.result.response {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"} to msg {"color":"White","docType":"car","make":"Vauxhall","model":"Corsa","owner":"Mark"}
2022-06-21T23:56:55.9215593Z     When I modify mynontlsgateway to submit a transaction with args [createCar,1005,Bugatti,Veyron,Black,Bret] for contract fabcar instantiated on channel gatewaychannel using handler option NETWORK_SCOPE_ANYFORTX
2022-06-21T23:56:56.0581403Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:56.6774807Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:56.6777676Z     Then The gateway named mynontlsgateway has a submit type response
2022-06-21T23:56:56.6780842Z     When I modify mynontlsgateway to submit a transaction with args [createCar,1006,Lotus,Elise,Pink,Nick] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:56:56.8048983Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:57.3863898Z Successfully performed submit transaction [createCar] with result []
2022-06-21T23:56:57.3891731Z     And I use the gateway named mynontlsgateway to evaluate a transaction with args [queryCar,1006] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:57.3892671Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:57.4102020Z Successfully performed evaluate transaction [queryCar] with result [{"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}]
2022-06-21T23:56:57.4105171Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:56:57.4107754Z Comparing gatewayObj.result.response {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"} to msg {"color":"Pink","docType":"car","make":"Lotus","model":"Elise","owner":"Nick"}
2022-06-21T23:56:57.4110661Z 
2022-06-21T23:56:57.4115080Z   @gateway_nontls @gateway @fabric_merge
2022-06-21T23:56:57.4117093Z   Scenario: Using a Gateway I can use transient data # test/ts-scenario/features/nontls-gateway.feature:50
2022-06-21T23:56:57.4124243Z     Given I place a scenario start message GATEWAY NON TLS FEATURE
2022-06-21T23:56:57.4124720Z 
2022-06-21T23:56:57.4124902Z 
2022-06-21T23:56:57.4125153Z 
2022-06-21T23:56:57.4139093Z **********************************************************************************
2022-06-21T23:56:57.4141973Z **********************************************************************************
2022-06-21T23:56:57.4145970Z ****** GATEWAY NON TLS FEATURE Scenario 3 ******
2022-06-21T23:56:57.4148015Z **********************************************************************************
2022-06-21T23:56:57.4149211Z **********************************************************************************
2022-06-21T23:56:57.4151793Z 
2022-06-21T23:56:57.4151803Z 
2022-06-21T23:56:57.4151812Z 
2022-06-21T23:56:57.4152233Z     Given I deploy a non-tls Fabric network at 2.1 version
2022-06-21T23:56:57.4152766Z  **** checking for a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:57.4153263Z  **** found a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:57.4153764Z  **** Using the deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:57.4154236Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:56:57.4166380Z Attempting to get list of channels for organization org1 of type non-tls
2022-06-21T23:56:57.4167379Z  -- runShellCommand ==>docker exec org1_cli peer channel list<==
2022-06-21T23:56:57.4168191Z SCENARIO CMD: docker exec org1_cli peer channel list
2022-06-21T23:56:57.6012620Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:57.6013783Z gatewaychannel
2022-06-21T23:56:57.6015050Z <== have been joined by organization org1
2022-06-21T23:56:57.6022030Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:57.6022522Z gatewaychannel
2022-06-21T23:56:57.6022965Z <==
2022-06-21T23:56:57.6024062Z Attempting to get list of channels for organization org2 of type non-tls
2022-06-21T23:56:57.6025441Z  -- runShellCommand ==>docker exec org2_cli peer channel list<==
2022-06-21T23:56:57.6026255Z SCENARIO CMD: docker exec org2_cli peer channel list
2022-06-21T23:56:57.7733030Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:57.7771378Z gatewaychannel
2022-06-21T23:56:57.7771745Z <== have been joined by organization org2
2022-06-21T23:56:57.7772541Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:57.7773587Z gatewaychannel
2022-06-21T23:56:57.7773802Z <==
2022-06-21T23:56:57.7774637Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:56:57.7775200Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:56:57.7776086Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:56:57.7776450Z 
2022-06-21T23:56:57.7776710Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:56:57.7776902Z 
2022-06-21T23:56:57.7777251Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:56:57.7777822Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:56:57.7778805Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json<==
2022-06-21T23:56:57.7779675Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json
2022-06-21T23:56:57.9692810Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:56:57.9700223Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:56:57.9700879Z     And I have a couchDB backed gateway named mynontlsgateway with discovery set to false for user User1 using the connection profile named ccp.json
2022-06-21T23:56:57.9701399Z Gateway named mynontlsgateway already exists
2022-06-21T23:56:57.9702462Z     When I modify mynontlsgateway to submit a transaction with transient data using args [getTransient,value1,value2] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:57.9703069Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:58.5363555Z Successfully performed submit transaction [getTransient] with transient data with result of [{"key0":"value1","key1":"value2"}]
2022-06-21T23:56:58.5365159Z     Then The gateway named mynontlsgateway has a submit type response matching {"key0":"value1","key1":"value2"}
2022-06-21T23:56:58.5367932Z Comparing gatewayObj.result.response {"key0":"value1","key1":"value2"} to msg {"key0":"value1","key1":"value2"}
2022-06-21T23:56:58.5371651Z     When I modify mynontlsgateway to evaluate a transaction with transient data using args [getTransient,valueA,valueB] for contract fabcar instantiated on channel gatewaychannel
2022-06-21T23:56:58.5377651Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:58.5515989Z Successfully performed evaluate transaction [getTransient] with transient data with result of [{"key0":"valueA","key1":"valueB"}]
2022-06-21T23:56:58.5519278Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"key0":"valueA","key1":"valueB"}
2022-06-21T23:56:58.5521318Z Comparing gatewayObj.result.response {"key0":"valueA","key1":"valueB"} to msg {"key0":"valueA","key1":"valueB"}
2022-06-21T23:56:58.5527155Z 
2022-06-21T23:56:58.5527786Z   @gateway_nontls @gateway @fabric_merge
2022-06-21T23:56:58.5532073Z   Scenario: Using a Gateway to evaluate transactions I can use different query handler strategies # test/ts-scenario/features/nontls-gateway.feature:56
2022-06-21T23:56:58.5533010Z     Given I place a scenario start message GATEWAY NON TLS FEATURE
2022-06-21T23:56:58.5540638Z 
2022-06-21T23:56:58.5540816Z 
2022-06-21T23:56:58.5540970Z 
2022-06-21T23:56:58.5541603Z **********************************************************************************
2022-06-21T23:56:58.5542195Z **********************************************************************************
2022-06-21T23:56:58.5542690Z ****** GATEWAY NON TLS FEATURE Scenario 4 ******
2022-06-21T23:56:58.5543427Z **********************************************************************************
2022-06-21T23:56:58.5543971Z **********************************************************************************
2022-06-21T23:56:58.5544210Z 
2022-06-21T23:56:58.5544281Z 
2022-06-21T23:56:58.5544351Z 
2022-06-21T23:56:58.5544780Z     Given I deploy a non-tls Fabric network at 2.1 version
2022-06-21T23:56:58.5545778Z  **** checking for a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:58.5546424Z  **** found a deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:58.5547020Z  **** Using the deployed fabric network of type non-tls version 2.1
2022-06-21T23:56:58.5547639Z     And I use the cli to create and join the channel named gatewaychannel on the deployed network
2022-06-21T23:56:58.5548354Z Attempting to get list of channels for organization org1 of type non-tls
2022-06-21T23:56:58.5548967Z  -- runShellCommand ==>docker exec org1_cli peer channel list<==
2022-06-21T23:56:58.5549973Z SCENARIO CMD: docker exec org1_cli peer channel list
2022-06-21T23:56:58.7455819Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:58.7456196Z gatewaychannel
2022-06-21T23:56:58.7456556Z <== have been joined by organization org1
2022-06-21T23:56:58.7457038Z Organization Org1 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:58.7457536Z gatewaychannel
2022-06-21T23:56:58.7457763Z <==
2022-06-21T23:56:58.7458500Z Attempting to get list of channels for organization org2 of type non-tls
2022-06-21T23:56:58.7459028Z  -- runShellCommand ==>docker exec org2_cli peer channel list<==
2022-06-21T23:56:58.7459468Z SCENARIO CMD: docker exec org2_cli peer channel list
2022-06-21T23:56:58.9253393Z Channel names ==>Channels peers has joined: 
2022-06-21T23:56:58.9253752Z gatewaychannel
2022-06-21T23:56:58.9254089Z <== have been joined by organization org2
2022-06-21T23:56:58.9254595Z Organization Org2 has already joined channels ==>Channels peers has joined: 
2022-06-21T23:56:58.9255189Z gatewaychannel
2022-06-21T23:56:58.9255579Z <==
2022-06-21T23:56:58.9257129Z     And I use the cli to update the channel with name gatewaychannel with config file gatewaychannel-anchor.tx on the deployed network
2022-06-21T23:56:58.9257656Z Channel gatewaychannel has already been updated, skipping ...
2022-06-21T23:56:58.9258511Z     And I use the cli to lifecycle deploy a node smart contract named fabcar at version 1.0.0 as fabcar for all organizations on channel gatewaychannel with default endorsement policy and init-required false
2022-06-21T23:56:58.9259028Z 
2022-06-21T23:56:58.9259278Z  -- Lifecycle deploy start for Smart contract fabcar
2022-06-21T23:56:58.9259457Z 
2022-06-21T23:56:58.9259786Z  -- Lifecycle deploy step one - check if already committed for Smart contract fabcar
2022-06-21T23:56:58.9260326Z Attempting lifecycle query for committed smart contract with name fabcar for organization org1 using the CLI
2022-06-21T23:56:58.9261201Z  -- runShellCommand ==>docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json<==
2022-06-21T23:56:58.9262455Z SCENARIO CMD: docker exec org1_cli peer lifecycle chaincode querycommitted --channelID gatewaychannel --name fabcar --output json
2022-06-21T23:56:59.1175858Z Smart contract with name fabcar is committed for organization org1 using the CLI
2022-06-21T23:56:59.1176534Z Smart contract fabcar at version 1.0.0 has already been committed on channel gatewaychannel as fabcar 
2022-06-21T23:56:59.1177486Z     And I have a couchDB backed gateway named mynontlsgateway with discovery set to false for user User1 using the connection profile named ccp.json
2022-06-21T23:56:59.1178172Z Gateway named mynontlsgateway already exists
2022-06-21T23:56:59.1178960Z     When I modify mynontlsgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_SINGLE
2022-06-21T23:56:59.2601610Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:59.2745959Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:56:59.2751139Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.2753887Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.2756166Z     When I modify mynontlsgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option MSPID_SCOPE_ROUND_ROBIN
2022-06-21T23:56:59.3972398Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:59.4162999Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:56:59.4169519Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.4175457Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.4179926Z     When I modify mynontlsgateway to evaluate a transaction with args [queryCar,1001] for contract fabcar instantiated on channel gatewaychannel using handler option custom
2022-06-21T23:56:59.5414016Z Retrieving contract from channel gatewaychannel
2022-06-21T23:56:59.5547409Z Successfully performed evaluate transaction [queryCar] with result [{"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}]
2022-06-21T23:56:59.5551780Z     Then The gateway named mynontlsgateway has a evaluate type response matching {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.5553424Z Comparing gatewayObj.result.response {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"} to msg {"color":"brown","docType":"car","make":"Trabant","model":"601 Estate","owner":"Simon"}
2022-06-21T23:56:59.5557279Z 
2022-06-21T23:56:59.5557876Z Disconnecting from all gateways ... null
2022-06-21T23:56:59.5561433Z disconnecting from Gateway  myClientOnlyGateway
2022-06-21T23:56:59.5576965Z disconnecting from Gateway  myDiscoveryGateway
2022-06-21T23:56:59.5589120Z disconnecting from Gateway  event_gateway
2022-06-21T23:56:59.5619281Z disconnecting from Gateway  mycouchgateway
2022-06-21T23:56:59.5630930Z disconnecting from Gateway  myhsmgateway
2022-06-21T23:56:59.5655271Z disconnecting from Gateway  mynontlsgateway
2022-06-21T23:56:59.5676116Z Tearing down network ... null
2022-06-21T23:56:59.5676884Z  -- runShellCommand ==>docker kill $(docker ps -aq); docker rm $(docker ps -aq)<==
2022-06-21T23:56:59.5677476Z SCENARIO CMD: docker kill $(docker ps -aq); docker rm $(docker ps -aq)
2022-06-21T23:57:00.9813265Z SCENARIO CMD - STDOUT:
2022-06-21T23:57:00.9814105Z  ac263d37ac3d
2022-06-21T23:57:00.9814885Z c597bb339e72
2022-06-21T23:57:00.9815164Z 266c196f7ccc
2022-06-21T23:57:00.9815666Z 8cddf53093de
2022-06-21T23:57:00.9815899Z 1f976eff25c7
2022-06-21T23:57:00.9816178Z 6eec720aff81
2022-06-21T23:57:00.9816411Z e1e1cb7a3218
2022-06-21T23:57:00.9816647Z fd6db0a698b1
2022-06-21T23:57:00.9816967Z 88c46d7ee6fa
2022-06-21T23:57:00.9817298Z 3ec15354b42e
2022-06-21T23:57:00.9817550Z 5edf7677d8d2
2022-06-21T23:57:00.9817777Z 891cf280fbba
2022-06-21T23:57:00.9817985Z ac263d37ac3d
2022-06-21T23:57:00.9818208Z c597bb339e72
2022-06-21T23:57:00.9818429Z 266c196f7ccc
2022-06-21T23:57:00.9818655Z 8cddf53093de
2022-06-21T23:57:00.9818863Z 1f976eff25c7
2022-06-21T23:57:00.9819110Z 6eec720aff81
2022-06-21T23:57:00.9819633Z e1e1cb7a3218
2022-06-21T23:57:00.9819891Z fd6db0a698b1
2022-06-21T23:57:00.9820099Z 88c46d7ee6fa
2022-06-21T23:57:00.9820479Z 3ec15354b42e
2022-06-21T23:57:00.9820690Z 5edf7677d8d2
2022-06-21T23:57:00.9820883Z 891cf280fbba
2022-06-21T23:57:00.9821016Z 
2022-06-21T23:57:00.9821298Z SCENARIO CMD - STDERR:
2022-06-21T23:57:00.9821525Z  
2022-06-21T23:57:00.9821772Z Removing dev images ... null
2022-06-21T23:57:00.9822230Z  -- runShellCommand ==>docker rmi $(docker images dev-* -q)<==
2022-06-21T23:57:00.9822778Z SCENARIO CMD: docker rmi $(docker images dev-* -q)
2022-06-21T23:57:01.9959090Z SCENARIO CMD - STDOUT:
2022-06-21T23:57:01.9960334Z  Untagged: dev-peer0.org2.example.com-fabcar-gatewaychannel-56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732-c45194b7d7eb65c3599d12e77e257f30be446092655434db8440cc4bd251ddfb:latest
2022-06-21T23:57:01.9961280Z Deleted: sha256:1549a03697a0f5c5c2ed867a880fa8b5bc3cf9ef78859abeeca820eb9c7f20ef
2022-06-21T23:57:01.9962078Z Deleted: sha256:a39f7b8c1c6509106bd3478d73b8e56bc534cf86b988c8769ee93d3ddba4e661
2022-06-21T23:57:01.9962551Z Deleted: sha256:e3d9c187feddb3d83b7fe1d678aeeef39d97cf051731602f50f532a35fad563a
2022-06-21T23:57:01.9963023Z Deleted: sha256:6608510ac013b3b43de7ff28d43e9b8effed0c901145bab51a9583fc96ddd34b
2022-06-21T23:57:01.9964328Z Untagged: dev-peer0.org1.example.com-fabcar-gatewaychannel-56c2e7ede00ea8ed90f384bfff5d76da660bdfdd2649edde551454dcc537c732-594c05a8af20c34cf67a89fd6ffce24068ddd058735552fe6a2ea4b49fa6f766:latest
2022-06-21T23:57:01.9965637Z Deleted: sha256:642a169afaf5958e5cc0a9f80b7af7e39bda8eed1914d9aa59f02a150e3d6e8b
2022-06-21T23:57:01.9966310Z Deleted: sha256:8ad07f8925a7c489edd3114f27398777def81da516c922f2f263d62a671ff20e
2022-06-21T23:57:01.9966809Z Deleted: sha256:9de28c0a43c0c3935a804e76c0251edc42a7b0b933fac08d3588729d9d70087f
2022-06-21T23:57:01.9967326Z Deleted: sha256:bfcdbb43be58e75ebf38e22f7d404bf5895aaf2dfb12e27c91205d5313bf3296
2022-06-21T23:57:01.9968964Z Untagged: dev-peer0.org2.example.com-events-eventschannel-d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2-1059129a51a2b266b3bb4ce3460ac3ed0fb0279fded3ebfcdf4675a07de37526:latest
2022-06-21T23:57:01.9970714Z Deleted: sha256:cf7ee677175746819a46418b9e3cd3ad28a6ca5a06c0a794f62d9cf537aa0529
2022-06-21T23:57:01.9971261Z Deleted: sha256:5ff7e0e89ac2890e64ede340eb2710c521114893aa25c20293a9eff19fe9d2e7
2022-06-21T23:57:01.9971797Z Deleted: sha256:135919d8120a9195851da6bbe3cfcb3f0f10eeeb41d0e81c4c05d5851f01005e
2022-06-21T23:57:01.9972504Z Deleted: sha256:75f19834e14825a4fb324da0a89d1b5683b04bd546f8c5914a9f7d15833713b6
2022-06-21T23:57:01.9973987Z Untagged: dev-peer0.org1.example.com-events-eventschannel-d7cdba9e2dcf382073d7628ba7d2b195b944d233efec7413f79886846834d0b2-2eff07260db914012672419affd4d62de00bbc8220810f601ae45c7bc64d68ff:latest
2022-06-21T23:57:01.9975118Z Deleted: sha256:199d5c88275de0b6ee0b49af1bdb5f26826d091d5a6aae2a47f8a24add7d13da
2022-06-21T23:57:01.9975604Z Deleted: sha256:825a433e138fa20be9de8544de5ec9fdfc8112870ba70a9cd8834cf68502514c
2022-06-21T23:57:01.9976470Z Deleted: sha256:d3e031ca6b15d826d9c2d815ce1d9755dc970d45bb15ef3e809c59756f8d9cce
2022-06-21T23:57:01.9977220Z Deleted: sha256:6d655125b2c6c5ee05f5f35e65d91ce137ca9f7196c14aaf1909283b56ec66be
2022-06-21T23:57:01.9978763Z Untagged: dev-peer0.org2.example.com-fabcar-discoverychannel-e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8-5a9114db8f68a464e06d56b2ee83953a8974c9ab7335aaeee964f5fa2f1edf45:latest
2022-06-21T23:57:01.9980069Z Deleted: sha256:f9448bfec5f2eeb40d0dad88c31fd783d4fc8cb8ad847c1fafd0de3b0b56cab3
2022-06-21T23:57:01.9980761Z Deleted: sha256:4633ee2332e0555c1e9d3078392fa0a4834ac033e007149e69fd490adca2c2b2
2022-06-21T23:57:01.9981291Z Deleted: sha256:df9da2ffa7b12cf22f7ef680df435f053453d6c1293d1b1c4b5fff5bb0a6f28f
2022-06-21T23:57:01.9981832Z Deleted: sha256:cbaf4d271ffbe07415f4d6371fe7c9115880c77ccee797662fef4b123fccb924
2022-06-21T23:57:01.9983448Z Untagged: dev-peer0.org1.example.com-fabcar-discoverychannel-e0fed6e48857017f6052aac64d99075415ca09cec4edf71bfd11c396393e50f8-39f82690ed0ff2bb119e013b9b675882ef315a79079dbd09a2fd05ac897c9b48:latest
2022-06-21T23:57:01.9984535Z Deleted: sha256:742860631addcd1b55c8afaeed4877bb0abb72f9758849150b1de9fca5a350eb
2022-06-21T23:57:01.9985059Z Deleted: sha256:ac416216a068dcf0cb076b4b7a5ae3e82fcf1f367b21d186e05d778f34c3ef74
2022-06-21T23:57:01.9985587Z Deleted: sha256:7c23d09736bc8e0bf6950d0df09df6839171a044f8dcd600c30b33ff2280f7f5
2022-06-21T23:57:01.9986089Z Deleted: sha256:60cc4c3f9817f36050ce807044dc20b601d831c917445902f84f768d223349b3
2022-06-21T23:57:01.9987467Z Untagged: dev-peer0.org2.example.com-fabcar-basev2channel-c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0-d4106bad523326252e738146bad7c5d736811ccd5fd358cc62715a20540bb6dd:latest
2022-06-21T23:57:01.9988473Z Deleted: sha256:833a3bffd9578d673452cf8f87daa7d663a4167dff7a91b6fa34cce201e4ea02
2022-06-21T23:57:01.9989005Z Deleted: sha256:e4866fef0460bd5d58ec24fcd1d9b2abca7cc86eeb1b0381cb69ace520051fe0
2022-06-21T23:57:01.9989657Z Deleted: sha256:a50aaafbd8f950202617d7262343d431024b1344f4be0f3a41493ef2d1909f48
2022-06-21T23:57:01.9990182Z Deleted: sha256:5a8cb91e2c001d88c0b9fbf8412d9df47b236affd010e251358fdfbe4c633d86
2022-06-21T23:57:01.9991580Z Untagged: dev-peer0.org1.example.com-fabcar-basev2channel-c961b60eea56c211870a5154233b565f01413f323a15fe1ababb262eea67d7a0-6161272c3f3bfbcb6bafdc7403782747ac1e0d7497c26910004975a57b76643d:latest
2022-06-21T23:57:01.9992588Z Deleted: sha256:f192a07150e77d2e37a2470bbe0efc2e3feab9fa18ef2908334539ecfaeedc83
2022-06-21T23:57:01.9993113Z Deleted: sha256:43fde3c16797cd6e0c35e22e4bade94bc29adcae8ac191cc0647d6679fac5853
2022-06-21T23:57:01.9993636Z Deleted: sha256:6973a7b97b56ce61d6036b51b456d8816b2cbc371f5c402aeb9e37726657db1f
2022-06-21T23:57:01.9994127Z Deleted: sha256:26b3647782bf00a8758096128ceaf2e44520ab5e9115246428111f5e493a0542
2022-06-21T23:57:01.9995034Z Untagged: dev-peer0.org2.example.com-fabcar-1.0.0-9c643bb4e38aeea9cd6af41b54f7ad7f0f5923f8912175d6db45cefa0cb12b9e:latest
2022-06-21T23:57:01.9995750Z Deleted: sha256:da3cf636fd35882dd52e8ef958c4fefd7c87f81fe86bd4b330342fba835c71a2
2022-06-21T23:57:01.9996308Z Deleted: sha256:d5f4b42d2d03907421c5485a1a127ce396854077f3ad012fbba906002a0a99dd
2022-06-21T23:57:01.9996817Z Deleted: sha256:9643c379c4492b73dd2a0a408e77ecfa2d0bf153ff95295031c00e51af48ba29
2022-06-21T23:57:01.9997540Z Deleted: sha256:781b468e27c98ac7925f5ba9a9e1baee53e1623370dbb0616156410d461305db
2022-06-21T23:57:01.9998475Z Untagged: dev-peer0.org1.example.com-fabcar-1.0.0-6be6cbeed039331b8276f15bafc536e6706dc6d4d56742492cd608305efb5b43:latest
2022-06-21T23:57:01.9999185Z Deleted: sha256:63b27cb5413cd1ad69bc81887fecd4212f6c8a740cc276e7d2a850116be27eba
2022-06-21T23:57:01.9999743Z Deleted: sha256:ae48e1bb56da2930aec9a05f8b62bfd5e68c15aed81e98263e59baf64ead8357
2022-06-21T23:57:02.0000295Z Deleted: sha256:4669cd0ccec61b3701afef42a34ad82105e30550c96699646fddd8c68099ad05
2022-06-21T23:57:02.0000984Z Deleted: sha256:a5d95428a9d80da4e3172ee8cae5bd961daa1f1e0c5ff452e5d262c44c74d571
2022-06-21T23:57:02.0001593Z 
2022-06-21T23:57:02.0001765Z SCENARIO CMD - STDERR:
2022-06-21T23:57:02.0001956Z  
2022-06-21T23:57:02.0008304Z 45 scenarios (45 passed)
2022-06-21T23:57:02.0013332Z 602 steps (602 passed)
2022-06-21T23:57:02.0013817Z 11m00.729s (executing steps: 10m57.695s)
2022-06-21T23:57:02.0014587Z ┌──────────────────────────────────────────────────────────────────────────────┐
2022-06-21T23:57:02.0015210Z │ Share your Cucumber Report with your team at https://reports.cucumber.io     │
2022-06-21T23:57:02.0015953Z │                                                                              │
2022-06-21T23:57:02.0016633Z │ Command line option:    --publish                                            │
2022-06-21T23:57:02.0017181Z │ Environment variable:   CUCUMBER_PUBLISH_ENABLED=true                        │
2022-06-21T23:57:02.0017709Z │                                                                              │
2022-06-21T23:57:02.0018277Z │ More information at https://cucumber.io/docs/cucumber/environment-variables/ │
2022-06-21T23:57:02.0019038Z │                                                                              │
2022-06-21T23:57:02.0019800Z │ To disable this message, add this to your ./cucumber.js:                     │
2022-06-21T23:57:02.0020571Z │ module.exports = { default: '--publish-quiet' }                              │
2022-06-21T23:57:02.0021238Z └──────────────────────────────────────────────────────────────────────────────┘
2022-06-21T23:59:59.1041984Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:59:59.1043649Z File                               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     
2022-06-21T23:59:59.1044902Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:59:59.1058992Z All files                          |   73.48 |    49.59 |   69.64 |   73.41 |                       
2022-06-21T23:59:59.1061182Z  fabric-ca-client/lib              |   40.66 |    22.68 |   28.81 |   40.66 |                       
2022-06-21T23:59:59.1154112Z   AffiliationService.js            |    7.84 |        0 |       0 |    7.84 | 19-174                
2022-06-21T23:59:59.1154707Z   CertificateService.js            |   12.19 |        0 |       0 |   12.19 | 15-98                 
2022-06-21T23:59:59.1155259Z   FabricCAClient.js                |   62.06 |    49.35 |   46.15 |   62.06 | ...55-470,481,485,490 
2022-06-21T23:59:59.1156179Z   FabricCAServices.js              |   41.88 |       25 |   23.07 |   41.88 | ...00,221,227,250-426 
2022-06-21T23:59:59.1156929Z   IdentityService.js               |   22.38 |        0 |       0 |   22.38 | 67-239                
2022-06-21T23:59:59.1157602Z   helper.js                        |   68.96 |    61.11 |   66.66 |   68.96 | ...,25,29,38-40,66-70 
2022-06-21T23:59:59.1158124Z  fabric-common/lib                 |   76.31 |    53.28 |   70.54 |    76.3 |                       
2022-06-21T23:59:59.1158641Z   BaseClient.js                    |      20 |        0 |   21.42 |      20 | 31-182,221            
2022-06-21T23:59:59.1159330Z   BlockDecoder.js                  |   82.04 |    55.08 |   88.88 |   81.98 | ...605,1629-1636,1650 
2022-06-21T23:59:59.1159827Z   Channel.js                       |    66.5 |    34.17 |   71.42 |    66.5 | ...92,512-513,524-540 
2022-06-21T23:59:59.1160480Z   Client.js                        |   87.42 |       50 |   75.86 |   87.42 | ...52-457,476,486-523 
2022-06-21T23:59:59.1160960Z   Commit.js                        |   81.94 |    53.33 |      75 |   81.94 | ...98-202,206,211-220 
2022-06-21T23:59:59.1161447Z   Committer.js                     |   74.54 |    38.46 |   71.42 |   74.54 | ...37,149-150,161-169 
2022-06-21T23:59:59.1162087Z   Config.js                        |   85.71 |       75 |   83.33 |   85.71 | 63-67,80              
2022-06-21T23:59:59.1162635Z   CryptoAlgorithms.js              |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1164045Z   CryptoSuite.js                   |   14.28 |      100 |       0 |   14.28 | 30-165                
2022-06-21T23:59:59.1164637Z   Discoverer.js                    |   58.13 |    35.71 |      80 |   58.13 | ...,67-70,76-83,91-94 
2022-06-21T23:59:59.1165185Z   DiscoveryHandler.js              |   71.93 |    48.55 |   79.31 |   71.72 | ...57,762,771-773,781 
2022-06-21T23:59:59.1165757Z   DiscoveryService.js              |   83.93 |    61.59 |   86.36 |   83.93 | ...69,781-796,807,814 
2022-06-21T23:59:59.1166182Z   Endorsement.js                   |   92.85 |        0 |   66.66 |   92.85 | 54                    
2022-06-21T23:59:59.1166724Z   Endorser.js                      |   74.62 |    63.63 |   77.77 |   74.62 | ...54,162-167,174-176 
2022-06-21T23:59:59.1167245Z   Endpoint.js                      |   80.55 |    60.86 |   66.66 |   80.55 | 32,46,57-63,67,80     
2022-06-21T23:59:59.1167796Z   EventListener.js                 |   84.21 |    74.07 |     100 |   84.21 | 81,83,87,114-115,127  
2022-06-21T23:59:59.1168364Z   EventService.js                  |   79.69 |    63.88 |   87.87 |   79.62 | ...150-1151,1200-1202 
2022-06-21T23:59:59.1168905Z   Eventer.js                       |   90.16 |    75.86 |     100 |   90.16 | 69,91,120-121,125,143 
2022-06-21T23:59:59.1169324Z   Hash.js                          |   85.71 |      100 |      60 |   85.71 | 21                    
2022-06-21T23:59:59.1170044Z   HashPrimitives.js                |   85.71 |       50 |      50 |   85.71 | 18                    
2022-06-21T23:59:59.1170734Z   Identity.js                      |   54.54 |       25 |   42.85 |   54.54 | 32,36,63-106          
2022-06-21T23:59:59.1171106Z   IdentityContext.js               |      95 |       20 |   83.33 |      95 | 40,102                
2022-06-21T23:59:59.1171483Z   Key.js                           |     100 |      100 |       0 |     100 |                       
2022-06-21T23:59:59.1171861Z   KeyValueStore.js                 |     100 |      100 |       0 |     100 |                       
2022-06-21T23:59:59.1172559Z   Proposal.js                      |   75.15 |    55.55 |   69.23 |      75 | ...50,459-460,489-560 
2022-06-21T23:59:59.1172918Z   Query.js                         |   94.11 |     62.5 |      75 |   94.11 | 45                    
2022-06-21T23:59:59.1173426Z   ServiceAction.js                 |      80 |    33.33 |      70 |      80 | ...-74,85,128,131,158 
2022-06-21T23:59:59.1173950Z   ServiceEndpoint.js               |   85.47 |    67.79 |    92.3 |   85.47 | ...63,185,200,248-252 
2022-06-21T23:59:59.1174470Z   ServiceHandler.js                |      60 |      100 |      20 |      60 | 33-54                 
2022-06-21T23:59:59.1174834Z   Signer.js                        |   66.66 |       50 |   66.66 |   66.66 | 22,26,39              
2022-06-21T23:59:59.1175215Z   SigningIdentity.js               |   68.18 |    47.61 |   66.66 |   68.18 | 29,32,35,38,43,62,75  
2022-06-21T23:59:59.1175724Z   User.js                          |   51.57 |    26.22 |      55 |   51.57 | ...06,219-272,312-336 
2022-06-21T23:59:59.1176224Z   Utils.js                         |   59.09 |     50.7 |   58.13 |   59.38 | ...13-614,623,650-663 
2022-06-21T23:59:59.1176709Z  fabric-common/lib/hash            |      65 |        0 |      50 |      65 |                       
2022-06-21T23:59:59.1177090Z   hash_sha2_256.js                 |     100 |        0 |     100 |     100 | 19                    
2022-06-21T23:59:59.1177584Z   hash_sha2_384.js                 |      30 |        0 |       0 |      30 | 16-31                 
2022-06-21T23:59:59.1178086Z  fabric-common/lib/impl            |   58.49 |    40.37 |   56.25 |   58.49 |                       
2022-06-21T23:59:59.1178597Z   CryptoKeyStore.js                |   53.57 |     12.5 |      50 |   53.57 | 20,43-47,57-73        
2022-06-21T23:59:59.1179302Z   CryptoSuite_ECDSA_AES.js         |   57.98 |    37.68 |   52.94 |   57.98 | ...23-258,287,302-319 
2022-06-21T23:59:59.1179966Z   InMemoryKeyValueStore.js         |      75 |        0 |   66.66 |      75 | 26-27                 
2022-06-21T23:59:59.1180788Z   bccsp_pkcs11.js                  |   58.68 |    42.38 |   58.33 |   58.68 | ...073,1076,1087-1092 
2022-06-21T23:59:59.1181320Z  fabric-common/lib/impl/aes        |   10.71 |        0 |       0 |   10.71 |                       
2022-06-21T23:59:59.1181873Z   pkcs11_key.js                    |   10.71 |        0 |       0 |   10.71 | 15-66                 
2022-06-21T23:59:59.1182422Z  fabric-common/lib/impl/ecdsa      |   75.96 |    64.55 |   59.09 |   75.96 |                       
2022-06-21T23:59:59.1182879Z   key.js                           |   81.81 |       60 |      80 |   81.81 | ...95,103,124,149,186 
2022-06-21T23:59:59.1183411Z   pkcs11_key.js                    |   71.62 |    66.66 |   41.66 |   71.62 | ...42,156-164,172-187 
2022-06-21T23:59:59.1184033Z  fabric-network/src                |   78.89 |    65.07 |   73.61 |   79.08 |                       
2022-06-21T23:59:59.1184452Z   contract.ts                      |   67.67 |    54.54 |   63.63 |   67.01 | ...52,365,373,382,398 
2022-06-21T23:59:59.1185020Z   defaultcheckpointers.ts          |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1185430Z   gateway.ts                       |   78.57 |    59.52 |     100 |   78.35 | ...52,363,390,409,414 
2022-06-21T23:59:59.1186173Z   logger.ts                        |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1186527Z   network.ts                       |   94.87 |    82.35 |   94.73 |   95.57 | 212,280,316,320,381   
2022-06-21T23:59:59.1187002Z   transaction.ts                   |   72.97 |    60.71 |   52.38 |   73.79 | ...95,339-342,396-412 
2022-06-21T23:59:59.1187496Z  fabric-network/src/errors         |   31.25 |        0 |       0 |   31.25 |                       
2022-06-21T23:59:59.1187996Z   fabricerror.ts                   |    12.5 |        0 |       0 |    12.5 | 29-37                 
2022-06-21T23:59:59.1188590Z   timeouterror.ts                  |      50 |      100 |       0 |      50 | 16-17                 
2022-06-21T23:59:59.1189070Z   transactionerror.ts              |      50 |      100 |       0 |      50 | 30-31                 
2022-06-21T23:59:59.1189574Z  fabric-network/src/impl           |   91.66 |    71.42 |   95.45 |   91.52 |                       
2022-06-21T23:59:59.1190341Z   filecheckpointer.ts              |     100 |       75 |     100 |     100 | 70                    
2022-06-21T23:59:59.1190881Z   gatewayutils.ts                  |   83.87 |       70 |    90.9 |   83.33 | 17-18,50,84,92        
2022-06-21T23:59:59.1191644Z  fabric-network/src/impl/ccp       |   94.18 |    66.66 |     100 |   94.11 |                       
2022-06-21T23:59:59.1192243Z   networkconfig.ts                 |   94.18 |    66.66 |     100 |   94.11 | 87,97,117,136,186     
2022-06-21T23:59:59.1192807Z  fabric-network/src/impl/event     |    86.9 |    67.56 |   84.41 |   87.05 |                       
2022-06-21T23:59:59.1193254Z   allfortxstrategy.ts              |    92.3 |       75 |     100 |    92.3 | 32                    
2022-06-21T23:59:59.1194225Z   anyfortxstrategy.ts              |   76.92 |       25 |     100 |   76.92 | 30-33                 
2022-06-21T23:59:59.1196159Z   asyncnotifier.ts                 |     100 |       50 |     100 |     100 | 18                    
2022-06-21T23:59:59.1196585Z   blockeventsource.ts              |   97.72 |    81.48 |     100 |    97.7 | 176,186               
2022-06-21T23:59:59.1197857Z   commiteventfactory.ts            |   52.38 |       50 |   16.66 |   57.89 | 16,22-27,35-39        
2022-06-21T23:59:59.1198493Z   commitlistenersession.ts         |   85.71 |       50 |     100 |   85.36 | 48,64,79-81,108       
2022-06-21T23:59:59.1198956Z   contractlistenersession.ts       |   94.73 |      100 |     100 |   94.73 | 56                    
2022-06-21T23:59:59.1199571Z   defaulteventhandlerstrategies.ts |      85 |       50 |   58.33 |   81.81 | 88-93,110             
2022-06-21T23:59:59.1200181Z   eventservicemanager.ts           |   93.33 |    73.33 |   93.33 |   92.85 | 114,117,131           
2022-06-21T23:59:59.1200661Z   filteredblockeventfactory.ts     |   86.95 |    66.66 |   81.81 |   85.71 | 16,40,58              
2022-06-21T23:59:59.1201123Z   fullblockeventfactory.ts         |    90.9 |       50 |     100 |    90.9 | 17                    
2022-06-21T23:59:59.1201644Z   fullcontracteventfactory.ts      |   88.88 |       50 |      75 |   88.88 | 30                    
2022-06-21T23:59:59.1202495Z   fulltransactioneventfactory.ts   |   92.85 |    61.53 |   83.33 |   92.85 | 54,61                 
2022-06-21T23:59:59.1203115Z   isolatedblocklistenersession.ts  |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1204061Z   listeners.ts                     |   89.74 |    58.33 |   86.66 |    92.1 | 72,74-75              
2022-06-21T23:59:59.1204476Z   listenersession.ts               |     100 |       75 |     100 |     100 | 15                    
2022-06-21T23:59:59.1205099Z   orderedblockqueue.ts             |    91.3 |       80 |     100 |    91.3 | 21,33                 
2022-06-21T23:59:59.1205717Z   privateblockeventfactory.ts      |      85 |       50 |   71.42 |      85 | 21,52-53              
2022-06-21T23:59:59.1206196Z   sharedblocklistenersession.ts    |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1206858Z   transactioneventhandler.ts       |   71.42 |       70 |   66.66 |   71.42 | ...59,167-175,195-198 
2022-06-21T23:59:59.1207438Z   transactioneventstrategy.ts      |   64.28 |       80 |      75 |   64.28 | 41-43,78-79           
2022-06-21T23:59:59.1207892Z   transactionstatus.ts             |   85.71 |       50 |     100 |   85.71 | 14                    
2022-06-21T23:59:59.1208690Z  fabric-network/src/impl/query     |   80.46 |    61.29 |   93.33 |   79.16 |                       
2022-06-21T23:59:59.1209297Z   defaultqueryhandlerstrategies.ts |      84 |       50 |   83.33 |   80.95 | 55-59                 
2022-06-21T23:59:59.1210002Z   query.ts                         |   78.37 |    63.15 |     100 |   78.37 | 68-69,88-99           
2022-06-21T23:59:59.1211546Z   roundrobinqueryhandler.ts        |   75.75 |       50 |     100 |   74.19 | 44,50-60              
2022-06-21T23:59:59.1212199Z   singlequeryhandler.ts            |   84.84 |       75 |     100 |   83.87 | 44,57-60              
2022-06-21T23:59:59.1212759Z  fabric-network/src/impl/wallet    |   79.19 |    53.12 |   73.91 |   79.59 |                       
2022-06-21T23:59:59.1213336Z   couchdbwalletstore.ts            |   73.07 |       50 |    62.5 |      76 | 36-38,48-49,61        
2022-06-21T23:59:59.1214081Z   filesystemwalletstore.ts         |   71.42 |      100 |   55.55 |   71.42 | 15-20,39-40,53        
2022-06-21T23:59:59.1215135Z   hsmx509identity.ts               |   77.77 |    45.45 |     100 |   77.77 | 70,74-75,92,110,112   
2022-06-21T23:59:59.1215577Z   identityproviderregistry.ts      |   92.85 |       50 |     100 |    92.3 | 29                    
2022-06-21T23:59:59.1216178Z   inmemorywalletstore.ts           |    62.5 |      100 |      60 |    62.5 | 13-14,22              
2022-06-21T23:59:59.1216715Z   wallet.ts                        |   88.88 |      100 |   66.66 |   88.88 | 66-75                 
2022-06-21T23:59:59.1217100Z   wallets.ts                       |     100 |      100 |     100 |     100 |                       
2022-06-21T23:59:59.1217627Z   x509identity.ts                  |      75 |       50 |      80 |      75 | 36,41,55,74,76,78     
2022-06-21T23:59:59.1218282Z -----------------------------------|---------|----------|---------|---------|-----------------------
2022-06-21T23:59:59.2875232Z Post job cleanup.
2022-06-21T23:59:59.5055601Z Post job cleanup.
2022-06-21T23:59:59.6694435Z [command]/usr/bin/git version
2022-06-21T23:59:59.6799711Z git version 2.36.1
2022-06-21T23:59:59.6876541Z Temporarily overriding HOME='/home/runner/work/_temp/d9bef3b3-3681-4817-8199-39cb44be013e' before making global git config changes
2022-06-21T23:59:59.6882011Z Adding repository directory to the temporary git global config as a safe directory
2022-06-21T23:59:59.6891640Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/fabric-sdk-node/fabric-sdk-node
2022-06-21T23:59:59.7003397Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-21T23:59:59.7073324Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-21T23:59:59.7406124Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-21T23:59:59.7452373Z http.https://github.com/.extraheader
2022-06-21T23:59:59.7453475Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2022-06-21T23:59:59.7502423Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-21T23:59:59.8099204Z Cleaning up orphan processes