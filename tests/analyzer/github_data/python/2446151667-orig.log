2022-06-06T06:52:18.9945789Z Requested labels: ubuntu-latest
2022-06-06T06:52:18.9945836Z Job defined at: py-pdf/PyPDF2/.github/workflows/benchmark.yaml@refs/heads/main
2022-06-06T06:52:18.9945859Z Waiting for a runner to pick up this job...
2022-06-06T06:52:20.2718818Z Job is waiting for a hosted runner to come online.
2022-06-06T06:52:23.6514557Z Job is about to start running on the hosted runner: Hosted Agent (hosted)
2022-06-06T06:52:26.7378221Z Current runner version: '2.291.1'
2022-06-06T06:52:26.7409954Z ##[group]Operating System
2022-06-06T06:52:26.7410699Z Ubuntu
2022-06-06T06:52:26.7410993Z 20.04.4
2022-06-06T06:52:26.7411344Z LTS
2022-06-06T06:52:26.7411698Z ##[endgroup]
2022-06-06T06:52:26.7412040Z ##[group]Virtual Environment
2022-06-06T06:52:26.7412522Z Environment: ubuntu-20.04
2022-06-06T06:52:26.7412962Z Version: 20220529.1
2022-06-06T06:52:26.7413536Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu20/20220529.1/images/linux/Ubuntu2004-Readme.md
2022-06-06T06:52:26.7414345Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220529.1
2022-06-06T06:52:26.7414895Z ##[endgroup]
2022-06-06T06:52:26.7415300Z ##[group]Virtual Environment Provisioner
2022-06-06T06:52:26.7415756Z 1.0.0.0-main-20220531-1
2022-06-06T06:52:26.7416131Z ##[endgroup]
2022-06-06T06:52:26.7416896Z ##[group]GITHUB_TOKEN Permissions
2022-06-06T06:52:26.7417767Z Contents: write
2022-06-06T06:52:26.7418177Z Deployments: write
2022-06-06T06:52:26.7418566Z Metadata: read
2022-06-06T06:52:26.7418921Z ##[endgroup]
2022-06-06T06:52:26.7423188Z Secret source: Actions
2022-06-06T06:52:26.7423723Z Prepare workflow directory
2022-06-06T06:52:26.8392825Z Prepare all required actions
2022-06-06T06:52:26.8609620Z Getting action download info
2022-06-06T06:52:27.0632359Z Download action repository 'actions/checkout@v3' (SHA:2541b1294d2704b0964813337f33b291d3f8596b)
2022-06-06T06:52:27.4342043Z Download action repository 'actions/setup-python@v3' (SHA:98f2ad02fd48d057ee3b4d4f66525b231c3e52b6)
2022-06-06T06:52:27.6684549Z Download action repository 'benchmark-action/github-action-benchmark@v1' (SHA:3b3014adac5e456db8ad428ccc01bec75242487f)
2022-06-06T06:52:28.2385884Z ##[group]Run actions/checkout@v3
2022-06-06T06:52:28.2386266Z with:
2022-06-06T06:52:28.2386544Z   submodules: recursive
2022-06-06T06:52:28.2386842Z   repository: py-pdf/PyPDF2
2022-06-06T06:52:28.2387416Z   token: ***
2022-06-06T06:52:28.2387676Z   ssh-strict: true
2022-06-06T06:52:28.2387980Z   persist-credentials: true
2022-06-06T06:52:28.2388264Z   clean: true
2022-06-06T06:52:28.2388517Z   fetch-depth: 1
2022-06-06T06:52:28.2388751Z   lfs: false
2022-06-06T06:52:28.2389022Z   set-safe-directory: true
2022-06-06T06:52:28.2389303Z ##[endgroup]
2022-06-06T06:52:28.6036472Z Syncing repository: py-pdf/PyPDF2
2022-06-06T06:52:28.6038505Z ##[group]Getting Git version info
2022-06-06T06:52:28.6039296Z Working directory is '/home/runner/work/PyPDF2/PyPDF2'
2022-06-06T06:52:28.6039985Z [command]/usr/bin/git version
2022-06-06T06:52:28.6192831Z git version 2.36.1
2022-06-06T06:52:28.6197513Z ##[endgroup]
2022-06-06T06:52:28.6219892Z Temporarily overriding HOME='/home/runner/work/_temp/ca4a947e-571a-4419-9c49-4279d869f88e' before making global git config changes
2022-06-06T06:52:28.6221320Z Adding repository directory to the temporary git global config as a safe directory
2022-06-06T06:52:28.6228462Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/PyPDF2/PyPDF2
2022-06-06T06:52:28.6278971Z Deleting the contents of '/home/runner/work/PyPDF2/PyPDF2'
2022-06-06T06:52:28.6285053Z ##[group]Initializing the repository
2022-06-06T06:52:28.6289946Z [command]/usr/bin/git init /home/runner/work/PyPDF2/PyPDF2
2022-06-06T06:52:28.6374516Z hint: Using 'master' as the name for the initial branch. This default branch name
2022-06-06T06:52:28.6375500Z hint: is subject to change. To configure the initial branch name to use in all
2022-06-06T06:52:28.6376547Z hint: of your new repositories, which will suppress this warning, call:
2022-06-06T06:52:28.6377493Z hint: 
2022-06-06T06:52:28.6378182Z hint: 	git config --global init.defaultBranch <name>
2022-06-06T06:52:28.6378594Z hint: 
2022-06-06T06:52:28.6379086Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2022-06-06T06:52:28.6379716Z hint: 'development'. The just-created branch can be renamed via this command:
2022-06-06T06:52:28.6380098Z hint: 
2022-06-06T06:52:28.6380429Z hint: 	git branch -m <name>
2022-06-06T06:52:28.6387472Z Initialized empty Git repository in /home/runner/work/PyPDF2/PyPDF2/.git/
2022-06-06T06:52:28.6398460Z [command]/usr/bin/git remote add origin https://github.com/py-pdf/PyPDF2
2022-06-06T06:52:28.6449582Z ##[endgroup]
2022-06-06T06:52:28.6450578Z ##[group]Disabling automatic garbage collection
2022-06-06T06:52:28.6456748Z [command]/usr/bin/git config --local gc.auto 0
2022-06-06T06:52:28.6491835Z ##[endgroup]
2022-06-06T06:52:28.6492851Z ##[group]Setting up auth
2022-06-06T06:52:28.6501363Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-06T06:52:28.6540772Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-06T06:52:28.7070246Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-06T06:52:28.7109306Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-06T06:52:28.7374744Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2022-06-06T06:52:28.7423174Z ##[endgroup]
2022-06-06T06:52:28.7424382Z ##[group]Fetching the repository
2022-06-06T06:52:28.7435172Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +3a0bd5edeb5162f5f96484a5bc8bf252f789f8ce:refs/remotes/origin/main
2022-06-06T06:52:28.9655923Z remote: Enumerating objects: 156, done.        
2022-06-06T06:52:28.9657721Z remote: Counting objects:   0% (1/156)        
2022-06-06T06:52:28.9658792Z remote: Counting objects:   1% (2/156)        
2022-06-06T06:52:28.9659792Z remote: Counting objects:   2% (4/156)        
2022-06-06T06:52:28.9660678Z remote: Counting objects:   3% (5/156)        
2022-06-06T06:52:28.9661484Z remote: Counting objects:   4% (7/156)        
2022-06-06T06:52:28.9662194Z remote: Counting objects:   5% (8/156)        
2022-06-06T06:52:28.9662911Z remote: Counting objects:   6% (10/156)        
2022-06-06T06:52:28.9663642Z remote: Counting objects:   7% (11/156)        
2022-06-06T06:52:28.9664357Z remote: Counting objects:   8% (13/156)        
2022-06-06T06:52:28.9665052Z remote: Counting objects:   9% (15/156)        
2022-06-06T06:52:28.9665753Z remote: Counting objects:  10% (16/156)        
2022-06-06T06:52:28.9666476Z remote: Counting objects:  11% (18/156)        
2022-06-06T06:52:28.9667162Z remote: Counting objects:  12% (19/156)        
2022-06-06T06:52:28.9668033Z remote: Counting objects:  13% (21/156)        
2022-06-06T06:52:28.9668738Z remote: Counting objects:  14% (22/156)        
2022-06-06T06:52:28.9669419Z remote: Counting objects:  15% (24/156)        
2022-06-06T06:52:28.9670133Z remote: Counting objects:  16% (25/156)        
2022-06-06T06:52:28.9670830Z remote: Counting objects:  17% (27/156)        
2022-06-06T06:52:28.9671532Z remote: Counting objects:  18% (29/156)        
2022-06-06T06:52:28.9674164Z remote: Counting objects:  19% (30/156)        
2022-06-06T06:52:28.9674693Z remote: Counting objects:  20% (32/156)        
2022-06-06T06:52:28.9675221Z remote: Counting objects:  21% (33/156)        
2022-06-06T06:52:28.9675749Z remote: Counting objects:  22% (35/156)        
2022-06-06T06:52:28.9676299Z remote: Counting objects:  23% (36/156)        
2022-06-06T06:52:28.9676826Z remote: Counting objects:  24% (38/156)        
2022-06-06T06:52:28.9677367Z remote: Counting objects:  25% (39/156)        
2022-06-06T06:52:28.9677907Z remote: Counting objects:  26% (41/156)        
2022-06-06T06:52:28.9678429Z remote: Counting objects:  27% (43/156)        
2022-06-06T06:52:28.9678972Z remote: Counting objects:  28% (44/156)        
2022-06-06T06:52:28.9679507Z remote: Counting objects:  29% (46/156)        
2022-06-06T06:52:28.9679803Z remote: Counting objects:  30% (47/156)        
2022-06-06T06:52:28.9680280Z remote: Counting objects:  31% (49/156)        
2022-06-06T06:52:28.9680596Z remote: Counting objects:  32% (50/156)        
2022-06-06T06:52:28.9680887Z remote: Counting objects:  33% (52/156)        
2022-06-06T06:52:28.9681193Z remote: Counting objects:  34% (54/156)        
2022-06-06T06:52:28.9681499Z remote: Counting objects:  35% (55/156)        
2022-06-06T06:52:28.9681807Z remote: Counting objects:  36% (57/156)        
2022-06-06T06:52:28.9682101Z remote: Counting objects:  37% (58/156)        
2022-06-06T06:52:28.9682407Z remote: Counting objects:  38% (60/156)        
2022-06-06T06:52:28.9682716Z remote: Counting objects:  39% (61/156)        
2022-06-06T06:52:28.9683012Z remote: Counting objects:  40% (63/156)        
2022-06-06T06:52:28.9683316Z remote: Counting objects:  41% (64/156)        
2022-06-06T06:52:28.9683623Z remote: Counting objects:  42% (66/156)        
2022-06-06T06:52:28.9683917Z remote: Counting objects:  43% (68/156)        
2022-06-06T06:52:28.9684223Z remote: Counting objects:  44% (69/156)        
2022-06-06T06:52:28.9684532Z remote: Counting objects:  45% (71/156)        
2022-06-06T06:52:28.9684824Z remote: Counting objects:  46% (72/156)        
2022-06-06T06:52:28.9685132Z remote: Counting objects:  47% (74/156)        
2022-06-06T06:52:28.9685441Z remote: Counting objects:  48% (75/156)        
2022-06-06T06:52:28.9685746Z remote: Counting objects:  49% (77/156)        
2022-06-06T06:52:28.9686042Z remote: Counting objects:  50% (78/156)        
2022-06-06T06:52:28.9686354Z remote: Counting objects:  51% (80/156)        
2022-06-06T06:52:28.9686664Z remote: Counting objects:  52% (82/156)        
2022-06-06T06:52:28.9687038Z remote: Counting objects:  53% (83/156)        
2022-06-06T06:52:28.9687356Z remote: Counting objects:  54% (85/156)        
2022-06-06T06:52:28.9687667Z remote: Counting objects:  55% (86/156)        
2022-06-06T06:52:28.9687962Z remote: Counting objects:  56% (88/156)        
2022-06-06T06:52:28.9688267Z remote: Counting objects:  57% (89/156)        
2022-06-06T06:52:28.9688581Z remote: Counting objects:  58% (91/156)        
2022-06-06T06:52:28.9688890Z remote: Counting objects:  59% (93/156)        
2022-06-06T06:52:28.9689184Z remote: Counting objects:  60% (94/156)        
2022-06-06T06:52:28.9689491Z remote: Counting objects:  61% (96/156)        
2022-06-06T06:52:28.9689798Z remote: Counting objects:  62% (97/156)        
2022-06-06T06:52:28.9690092Z remote: Counting objects:  63% (99/156)        
2022-06-06T06:52:28.9690540Z remote: Counting objects:  64% (100/156)        
2022-06-06T06:52:28.9690870Z remote: Counting objects:  65% (102/156)        
2022-06-06T06:52:28.9691193Z remote: Counting objects:  66% (103/156)        
2022-06-06T06:52:28.9691495Z remote: Counting objects:  67% (105/156)        
2022-06-06T06:52:28.9691805Z remote: Counting objects:  68% (107/156)        
2022-06-06T06:52:28.9692230Z remote: Counting objects:  69% (108/156)        
2022-06-06T06:52:28.9692512Z remote: Counting objects:  70% (110/156)        
2022-06-06T06:52:28.9692803Z remote: Counting objects:  71% (111/156)        
2022-06-06T06:52:28.9693099Z remote: Counting objects:  72% (113/156)        
2022-06-06T06:52:28.9693374Z remote: Counting objects:  73% (114/156)        
2022-06-06T06:52:28.9694398Z remote: Counting objects:  74% (116/156)        
2022-06-06T06:52:28.9694781Z remote: Counting objects:  75% (117/156)        
2022-06-06T06:52:28.9695086Z remote: Counting objects:  76% (119/156)        
2022-06-06T06:52:28.9695388Z remote: Counting objects:  77% (121/156)        
2022-06-06T06:52:28.9695686Z remote: Counting objects:  78% (122/156)        
2022-06-06T06:52:28.9695968Z remote: Counting objects:  79% (124/156)        
2022-06-06T06:52:28.9696272Z remote: Counting objects:  80% (125/156)        
2022-06-06T06:52:28.9696565Z remote: Counting objects:  81% (127/156)        
2022-06-06T06:52:28.9696932Z remote: Counting objects:  82% (128/156)        
2022-06-06T06:52:28.9697186Z remote: Counting objects:  83% (130/156)        
2022-06-06T06:52:28.9697681Z remote: Counting objects:  84% (132/156)        
2022-06-06T06:52:28.9697925Z remote: Counting objects:  85% (133/156)        
2022-06-06T06:52:28.9698179Z remote: Counting objects:  86% (135/156)        
2022-06-06T06:52:28.9698435Z remote: Counting objects:  87% (136/156)        
2022-06-06T06:52:28.9698676Z remote: Counting objects:  88% (138/156)        
2022-06-06T06:52:28.9698928Z remote: Counting objects:  89% (139/156)        
2022-06-06T06:52:28.9699185Z remote: Counting objects:  90% (141/156)        
2022-06-06T06:52:28.9699439Z remote: Counting objects:  91% (142/156)        
2022-06-06T06:52:28.9699680Z remote: Counting objects:  92% (144/156)        
2022-06-06T06:52:28.9699936Z remote: Counting objects:  93% (146/156)        
2022-06-06T06:52:28.9700188Z remote: Counting objects:  94% (147/156)        
2022-06-06T06:52:28.9700634Z remote: Counting objects:  95% (149/156)        
2022-06-06T06:52:28.9701112Z remote: Counting objects:  96% (150/156)        
2022-06-06T06:52:28.9701423Z remote: Counting objects:  97% (152/156)        
2022-06-06T06:52:28.9701715Z remote: Counting objects:  98% (153/156)        
2022-06-06T06:52:28.9702022Z remote: Counting objects:  99% (155/156)        
2022-06-06T06:52:28.9702331Z remote: Counting objects: 100% (156/156)        
2022-06-06T06:52:28.9702751Z remote: Counting objects: 100% (156/156), done.        
2022-06-06T06:52:28.9703111Z remote: Compressing objects:   0% (1/143)        
2022-06-06T06:52:28.9703448Z remote: Compressing objects:   1% (2/143)        
2022-06-06T06:52:28.9703781Z remote: Compressing objects:   2% (3/143)        
2022-06-06T06:52:28.9704093Z remote: Compressing objects:   3% (5/143)        
2022-06-06T06:52:28.9704708Z remote: Compressing objects:   4% (6/143)        
2022-06-06T06:52:28.9705086Z remote: Compressing objects:   5% (8/143)        
2022-06-06T06:52:28.9705396Z remote: Compressing objects:   6% (9/143)        
2022-06-06T06:52:28.9705724Z remote: Compressing objects:   7% (11/143)        
2022-06-06T06:52:28.9706346Z remote: Compressing objects:   8% (12/143)        
2022-06-06T06:52:28.9706671Z remote: Compressing objects:   9% (13/143)        
2022-06-06T06:52:28.9708086Z remote: Compressing objects:  10% (15/143)        
2022-06-06T06:52:28.9709150Z remote: Compressing objects:  11% (16/143)        
2022-06-06T06:52:28.9709952Z remote: Compressing objects:  12% (18/143)        
2022-06-06T06:52:28.9710587Z remote: Compressing objects:  13% (19/143)        
2022-06-06T06:52:28.9711293Z remote: Compressing objects:  14% (21/143)        
2022-06-06T06:52:28.9712236Z remote: Compressing objects:  15% (22/143)        
2022-06-06T06:52:28.9754308Z remote: Compressing objects:  16% (23/143)        
2022-06-06T06:52:28.9756103Z remote: Compressing objects:  17% (25/143)        
2022-06-06T06:52:28.9773491Z remote: Compressing objects:  18% (26/143)        
2022-06-06T06:52:28.9799796Z remote: Compressing objects:  19% (28/143)        
2022-06-06T06:52:28.9800304Z remote: Compressing objects:  20% (29/143)        
2022-06-06T06:52:28.9801433Z remote: Compressing objects:  21% (31/143)        
2022-06-06T06:52:28.9801989Z remote: Compressing objects:  22% (32/143)        
2022-06-06T06:52:28.9808493Z remote: Compressing objects:  23% (33/143)        
2022-06-06T06:52:28.9820804Z remote: Compressing objects:  24% (35/143)        
2022-06-06T06:52:28.9830194Z remote: Compressing objects:  25% (36/143)        
2022-06-06T06:52:28.9857342Z remote: Compressing objects:  26% (38/143)        
2022-06-06T06:52:28.9857928Z remote: Compressing objects:  27% (39/143)        
2022-06-06T06:52:28.9858975Z remote: Compressing objects:  28% (41/143)        
2022-06-06T06:52:28.9860302Z remote: Compressing objects:  29% (42/143)        
2022-06-06T06:52:28.9861056Z remote: Compressing objects:  30% (43/143)        
2022-06-06T06:52:28.9861805Z remote: Compressing objects:  31% (45/143)        
2022-06-06T06:52:28.9862581Z remote: Compressing objects:  32% (46/143)        
2022-06-06T06:52:28.9863300Z remote: Compressing objects:  33% (48/143)        
2022-06-06T06:52:28.9864009Z remote: Compressing objects:  34% (49/143)        
2022-06-06T06:52:28.9864825Z remote: Compressing objects:  35% (51/143)        
2022-06-06T06:52:28.9865635Z remote: Compressing objects:  36% (52/143)        
2022-06-06T06:52:28.9866296Z remote: Compressing objects:  37% (53/143)        
2022-06-06T06:52:28.9867186Z remote: Compressing objects:  38% (55/143)        
2022-06-06T06:52:28.9868036Z remote: Compressing objects:  39% (56/143)        
2022-06-06T06:52:28.9868651Z remote: Compressing objects:  40% (58/143)        
2022-06-06T06:52:28.9869339Z remote: Compressing objects:  41% (59/143)        
2022-06-06T06:52:28.9869987Z remote: Compressing objects:  42% (61/143)        
2022-06-06T06:52:28.9879064Z remote: Compressing objects:  43% (62/143)        
2022-06-06T06:52:28.9879555Z remote: Compressing objects:  44% (63/143)        
2022-06-06T06:52:28.9881066Z remote: Compressing objects:  45% (65/143)        
2022-06-06T06:52:28.9881535Z remote: Compressing objects:  46% (66/143)        
2022-06-06T06:52:28.9882224Z remote: Compressing objects:  47% (68/143)        
2022-06-06T06:52:28.9882956Z remote: Compressing objects:  48% (69/143)        
2022-06-06T06:52:28.9883656Z remote: Compressing objects:  49% (71/143)        
2022-06-06T06:52:28.9884750Z remote: Compressing objects:  50% (72/143)        
2022-06-06T06:52:28.9885258Z remote: Compressing objects:  51% (73/143)        
2022-06-06T06:52:28.9886136Z remote: Compressing objects:  52% (75/143)        
2022-06-06T06:52:28.9886882Z remote: Compressing objects:  53% (76/143)        
2022-06-06T06:52:28.9887840Z remote: Compressing objects:  54% (78/143)        
2022-06-06T06:52:28.9888717Z remote: Compressing objects:  55% (79/143)        
2022-06-06T06:52:28.9889176Z remote: Compressing objects:  56% (81/143)        
2022-06-06T06:52:28.9889766Z remote: Compressing objects:  57% (82/143)        
2022-06-06T06:52:28.9890340Z remote: Compressing objects:  58% (83/143)        
2022-06-06T06:52:28.9891072Z remote: Compressing objects:  59% (85/143)        
2022-06-06T06:52:28.9891716Z remote: Compressing objects:  60% (86/143)        
2022-06-06T06:52:28.9892368Z remote: Compressing objects:  61% (88/143)        
2022-06-06T06:52:28.9893034Z remote: Compressing objects:  62% (89/143)        
2022-06-06T06:52:29.0000019Z remote: Compressing objects:  63% (91/143)        
2022-06-06T06:52:29.0039342Z remote: Compressing objects:  64% (92/143)        
2022-06-06T06:52:29.0062346Z remote: Compressing objects:  65% (93/143)        
2022-06-06T06:52:29.0062855Z remote: Compressing objects:  66% (95/143)        
2022-06-06T06:52:29.0109947Z remote: Compressing objects:  67% (96/143)        
2022-06-06T06:52:29.0133088Z remote: Compressing objects:  68% (98/143)        
2022-06-06T06:52:29.0156459Z remote: Compressing objects:  69% (99/143)        
2022-06-06T06:52:29.0157388Z remote: Compressing objects:  70% (101/143)        
2022-06-06T06:52:29.0158750Z remote: Compressing objects:  71% (102/143)        
2022-06-06T06:52:29.0159294Z remote: Compressing objects:  72% (103/143)        
2022-06-06T06:52:29.0160048Z remote: Compressing objects:  73% (105/143)        
2022-06-06T06:52:29.0161247Z remote: Compressing objects:  74% (106/143)        
2022-06-06T06:52:29.0162243Z remote: Compressing objects:  75% (108/143)        
2022-06-06T06:52:29.0162952Z remote: Compressing objects:  76% (109/143)        
2022-06-06T06:52:29.0163864Z remote: Compressing objects:  77% (111/143)        
2022-06-06T06:52:29.0164643Z remote: Compressing objects:  78% (112/143)        
2022-06-06T06:52:29.0165097Z remote: Compressing objects:  79% (113/143)        
2022-06-06T06:52:29.0165473Z remote: Compressing objects:  80% (115/143)        
2022-06-06T06:52:29.0165916Z remote: Compressing objects:  81% (116/143)        
2022-06-06T06:52:29.0167014Z remote: Compressing objects:  82% (118/143)        
2022-06-06T06:52:29.0167454Z remote: Compressing objects:  83% (119/143)        
2022-06-06T06:52:29.0167893Z remote: Compressing objects:  84% (121/143)        
2022-06-06T06:52:29.0168912Z remote: Compressing objects:  85% (122/143)        
2022-06-06T06:52:29.0169554Z remote: Compressing objects:  86% (123/143)        
2022-06-06T06:52:29.0170192Z remote: Compressing objects:  87% (125/143)        
2022-06-06T06:52:29.0171167Z remote: Compressing objects:  88% (126/143)        
2022-06-06T06:52:29.0171674Z remote: Compressing objects:  89% (128/143)        
2022-06-06T06:52:29.0172595Z remote: Compressing objects:  90% (129/143)        
2022-06-06T06:52:29.0173399Z remote: Compressing objects:  91% (131/143)        
2022-06-06T06:52:29.0174340Z remote: Compressing objects:  92% (132/143)        
2022-06-06T06:52:29.0174809Z remote: Compressing objects:  93% (133/143)        
2022-06-06T06:52:29.0175215Z remote: Compressing objects:  94% (135/143)        
2022-06-06T06:52:29.0175826Z remote: Compressing objects:  95% (136/143)        
2022-06-06T06:52:29.0176735Z remote: Compressing objects:  96% (138/143)        
2022-06-06T06:52:29.0177559Z remote: Compressing objects:  97% (139/143)        
2022-06-06T06:52:29.0178466Z remote: Compressing objects:  98% (141/143)        
2022-06-06T06:52:29.0179387Z remote: Compressing objects:  99% (142/143)        
2022-06-06T06:52:29.0180091Z remote: Compressing objects: 100% (143/143)        
2022-06-06T06:52:29.0180929Z remote: Compressing objects: 100% (143/143), done.        
2022-06-06T06:52:29.0236421Z Receiving objects:   0% (1/156)
2022-06-06T06:52:29.0237382Z Receiving objects:   1% (2/156)
2022-06-06T06:52:29.0237672Z Receiving objects:   2% (4/156)
2022-06-06T06:52:29.0237958Z Receiving objects:   3% (5/156)
2022-06-06T06:52:29.0238225Z Receiving objects:   4% (7/156)
2022-06-06T06:52:29.0238688Z Receiving objects:   5% (8/156)
2022-06-06T06:52:29.0238987Z Receiving objects:   6% (10/156)
2022-06-06T06:52:29.0239263Z Receiving objects:   7% (11/156)
2022-06-06T06:52:29.0240006Z Receiving objects:   8% (13/156)
2022-06-06T06:52:29.0240288Z Receiving objects:   9% (15/156)
2022-06-06T06:52:29.0247982Z Receiving objects:  10% (16/156)
2022-06-06T06:52:29.0249155Z Receiving objects:  11% (18/156)
2022-06-06T06:52:29.0249636Z Receiving objects:  12% (19/156)
2022-06-06T06:52:29.0453312Z Receiving objects:  13% (21/156)
2022-06-06T06:52:29.1011192Z Receiving objects:  14% (22/156)
2022-06-06T06:52:29.1011513Z Receiving objects:  15% (24/156)
2022-06-06T06:52:29.1314305Z Receiving objects:  16% (25/156)
2022-06-06T06:52:29.1433864Z Receiving objects:  17% (27/156)
2022-06-06T06:52:29.1434197Z Receiving objects:  18% (29/156)
2022-06-06T06:52:29.1517393Z Receiving objects:  19% (30/156)
2022-06-06T06:52:29.1526189Z Receiving objects:  20% (32/156)
2022-06-06T06:52:29.1562830Z Receiving objects:  21% (33/156)
2022-06-06T06:52:29.1563483Z Receiving objects:  22% (35/156)
2022-06-06T06:52:29.1569796Z Receiving objects:  23% (36/156)
2022-06-06T06:52:29.1571253Z Receiving objects:  24% (38/156)
2022-06-06T06:52:29.1574213Z Receiving objects:  25% (39/156)
2022-06-06T06:52:29.1583236Z Receiving objects:  26% (41/156)
2022-06-06T06:52:29.1583820Z Receiving objects:  27% (43/156)
2022-06-06T06:52:29.1586369Z Receiving objects:  28% (44/156)
2022-06-06T06:52:29.1587005Z Receiving objects:  29% (46/156)
2022-06-06T06:52:29.1587978Z Receiving objects:  30% (47/156)
2022-06-06T06:52:29.1589235Z Receiving objects:  31% (49/156)
2022-06-06T06:52:29.1620292Z Receiving objects:  32% (50/156)
2022-06-06T06:52:29.1620999Z Receiving objects:  33% (52/156)
2022-06-06T06:52:29.1623493Z Receiving objects:  34% (54/156)
2022-06-06T06:52:29.1626483Z Receiving objects:  35% (55/156)
2022-06-06T06:52:29.1627120Z Receiving objects:  36% (57/156)
2022-06-06T06:52:29.1627622Z Receiving objects:  37% (58/156)
2022-06-06T06:52:29.1628430Z Receiving objects:  38% (60/156)
2022-06-06T06:52:29.1631321Z Receiving objects:  39% (61/156)
2022-06-06T06:52:29.1632275Z Receiving objects:  40% (63/156)
2022-06-06T06:52:29.1636646Z Receiving objects:  41% (64/156)
2022-06-06T06:52:29.1637105Z Receiving objects:  42% (66/156)
2022-06-06T06:52:29.1637767Z Receiving objects:  43% (68/156)
2022-06-06T06:52:29.1638329Z Receiving objects:  44% (69/156)
2022-06-06T06:52:29.1638797Z Receiving objects:  45% (71/156)
2022-06-06T06:52:29.1639513Z Receiving objects:  46% (72/156)
2022-06-06T06:52:29.1640010Z Receiving objects:  47% (74/156)
2022-06-06T06:52:29.1640475Z Receiving objects:  48% (75/156)
2022-06-06T06:52:29.1640944Z Receiving objects:  49% (77/156)
2022-06-06T06:52:29.1641683Z Receiving objects:  50% (78/156)
2022-06-06T06:52:29.1642380Z Receiving objects:  51% (80/156)
2022-06-06T06:52:29.1642744Z Receiving objects:  52% (82/156)
2022-06-06T06:52:29.1645468Z Receiving objects:  53% (83/156)
2022-06-06T06:52:29.1646050Z Receiving objects:  54% (85/156)
2022-06-06T06:52:29.1926100Z Receiving objects:  55% (86/156)
2022-06-06T06:52:29.2078012Z Receiving objects:  56% (88/156)
2022-06-06T06:52:29.2078537Z Receiving objects:  57% (89/156)
2022-06-06T06:52:29.2175035Z Receiving objects:  58% (91/156)
2022-06-06T06:52:29.2175639Z Receiving objects:  59% (93/156)
2022-06-06T06:52:29.2176359Z Receiving objects:  60% (94/156)
2022-06-06T06:52:29.2176821Z Receiving objects:  61% (96/156)
2022-06-06T06:52:29.2177275Z Receiving objects:  62% (97/156)
2022-06-06T06:52:29.2177735Z Receiving objects:  63% (99/156)
2022-06-06T06:52:29.2178463Z Receiving objects:  64% (100/156)
2022-06-06T06:52:29.2178918Z Receiving objects:  65% (102/156)
2022-06-06T06:52:29.2179681Z Receiving objects:  66% (103/156)
2022-06-06T06:52:29.2180089Z Receiving objects:  67% (105/156)
2022-06-06T06:52:29.2231189Z Receiving objects:  68% (107/156)
2022-06-06T06:52:29.2232085Z Receiving objects:  69% (108/156)
2022-06-06T06:52:29.2232973Z Receiving objects:  70% (110/156)
2022-06-06T06:52:29.2239219Z Receiving objects:  71% (111/156)
2022-06-06T06:52:29.2239886Z Receiving objects:  72% (113/156)
2022-06-06T06:52:29.2244406Z Receiving objects:  73% (114/156)
2022-06-06T06:52:29.2276539Z Receiving objects:  74% (116/156)
2022-06-06T06:52:29.2277170Z Receiving objects:  75% (117/156)
2022-06-06T06:52:29.2291542Z Receiving objects:  76% (119/156)
2022-06-06T06:52:29.2292113Z Receiving objects:  77% (121/156)
2022-06-06T06:52:29.2294806Z Receiving objects:  78% (122/156)
2022-06-06T06:52:29.2295292Z Receiving objects:  79% (124/156)
2022-06-06T06:52:29.3130720Z Receiving objects:  80% (125/156)
2022-06-06T06:52:29.3157196Z Receiving objects:  81% (127/156)
2022-06-06T06:52:29.3191938Z Receiving objects:  82% (128/156)
2022-06-06T06:52:29.3198422Z Receiving objects:  83% (130/156)
2022-06-06T06:52:29.3206828Z Receiving objects:  84% (132/156)
2022-06-06T06:52:29.3218680Z Receiving objects:  85% (133/156)
2022-06-06T06:52:29.3223319Z Receiving objects:  86% (135/156)
2022-06-06T06:52:29.3376704Z Receiving objects:  87% (136/156)
2022-06-06T06:52:29.3377915Z remote: Total 156 (delta 10), reused 80 (delta 7), pack-reused 0        
2022-06-06T06:52:29.3385913Z Receiving objects:  88% (138/156)
2022-06-06T06:52:29.3390571Z Receiving objects:  89% (139/156)
2022-06-06T06:52:29.3394294Z Receiving objects:  90% (141/156)
2022-06-06T06:52:29.3398802Z Receiving objects:  91% (142/156)
2022-06-06T06:52:29.3403127Z Receiving objects:  92% (144/156)
2022-06-06T06:52:29.3406710Z Receiving objects:  93% (146/156)
2022-06-06T06:52:29.3411126Z Receiving objects:  94% (147/156)
2022-06-06T06:52:29.3414562Z Receiving objects:  95% (149/156)
2022-06-06T06:52:29.3420986Z Receiving objects:  96% (150/156)
2022-06-06T06:52:29.3424969Z Receiving objects:  97% (152/156)
2022-06-06T06:52:29.3430257Z Receiving objects:  98% (153/156)
2022-06-06T06:52:29.3433508Z Receiving objects:  99% (155/156)
2022-06-06T06:52:29.3436631Z Receiving objects: 100% (156/156)
2022-06-06T06:52:29.3437299Z Receiving objects: 100% (156/156), 4.41 MiB | 13.76 MiB/s, done.
2022-06-06T06:52:29.3442445Z Resolving deltas:   0% (0/10)
2022-06-06T06:52:29.3445479Z Resolving deltas:  10% (1/10)
2022-06-06T06:52:29.3448627Z Resolving deltas:  20% (2/10)
2022-06-06T06:52:29.3457578Z Resolving deltas:  30% (3/10)
2022-06-06T06:52:29.3462775Z Resolving deltas:  40% (4/10)
2022-06-06T06:52:29.3470121Z Resolving deltas:  50% (5/10)
2022-06-06T06:52:29.3474736Z Resolving deltas:  60% (6/10)
2022-06-06T06:52:29.3484242Z Resolving deltas:  70% (7/10)
2022-06-06T06:52:29.3488344Z Resolving deltas:  80% (8/10)
2022-06-06T06:52:29.3491686Z Resolving deltas:  90% (9/10)
2022-06-06T06:52:29.3497627Z Resolving deltas: 100% (10/10)
2022-06-06T06:52:29.3498281Z Resolving deltas: 100% (10/10), done.
2022-06-06T06:52:29.3714333Z From https://github.com/py-pdf/PyPDF2
2022-06-06T06:52:29.3725050Z  * [new ref]         3a0bd5edeb5162f5f96484a5bc8bf252f789f8ce -> origin/main
2022-06-06T06:52:29.3752788Z ##[endgroup]
2022-06-06T06:52:29.3753787Z ##[group]Determining the checkout info
2022-06-06T06:52:29.3754879Z ##[endgroup]
2022-06-06T06:52:29.3755774Z ##[group]Checking out the ref
2022-06-06T06:52:29.3759545Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2022-06-06T06:52:29.4409136Z Switched to a new branch 'main'
2022-06-06T06:52:29.4410413Z branch 'main' set up to track 'origin/main'.
2022-06-06T06:52:29.4421093Z ##[endgroup]
2022-06-06T06:52:29.4421977Z ##[group]Setting up auth for fetching submodules
2022-06-06T06:52:29.4435015Z [command]/usr/bin/git config --global http.https://github.com/.extraheader AUTHORIZATION: basic ***
2022-06-06T06:52:29.4492145Z [command]/usr/bin/git config --global --unset-all url.https://github.com/.insteadOf
2022-06-06T06:52:29.4563226Z [command]/usr/bin/git config --global --add url.https://github.com/.insteadOf git@github.com:
2022-06-06T06:52:29.4599003Z [command]/usr/bin/git config --global --add url.https://github.com/.insteadOf org-102914013@github.com:
2022-06-06T06:52:29.4635414Z ##[endgroup]
2022-06-06T06:52:29.4636517Z ##[group]Fetching submodules
2022-06-06T06:52:29.4641468Z [command]/usr/bin/git submodule sync --recursive
2022-06-06T06:52:29.4909454Z [command]/usr/bin/git -c protocol.version=2 submodule update --init --force --depth=1 --recursive
2022-06-06T06:52:29.5143933Z Submodule 'sample-files' (https://github.com/py-pdf/sample-files) registered for path 'sample-files'
2022-06-06T06:52:29.5175252Z Cloning into '/home/runner/work/PyPDF2/PyPDF2/sample-files'...
2022-06-06T06:52:30.0135726Z Submodule path 'sample-files': checked out 'd7ce88b71820fccaaa4738aa37cbace51f3ed3d9'
2022-06-06T06:52:30.0168709Z [command]/usr/bin/git submodule foreach --recursive git config --local gc.auto 0
2022-06-06T06:52:30.0426067Z Entering 'sample-files'
2022-06-06T06:52:30.0469866Z ##[endgroup]
2022-06-06T06:52:30.0470899Z ##[group]Persisting credentials for submodules
2022-06-06T06:52:30.0477074Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'url\.https\:\/\/github\.com\/\.insteadOf' && git config --local --unset-all 'url.https://github.com/.insteadOf' || :
2022-06-06T06:52:30.0736060Z Entering 'sample-files'
2022-06-06T06:52:30.0794511Z [command]/usr/bin/git submodule foreach --recursive git config --local 'http.https://github.com/.extraheader' 'AUTHORIZATION: basic ***' && git config --local --show-origin --name-only --get-regexp remote.origin.url
2022-06-06T06:52:30.1028193Z Entering 'sample-files'
2022-06-06T06:52:30.1066400Z file:/home/runner/work/PyPDF2/PyPDF2/.git/modules/sample-files/config	remote.origin.url
2022-06-06T06:52:30.1119355Z [command]/usr/bin/git submodule foreach --recursive git config --local --add 'url.https://github.com/.insteadOf' 'git@github.com:'
2022-06-06T06:52:30.1342368Z Entering 'sample-files'
2022-06-06T06:52:30.1405365Z [command]/usr/bin/git submodule foreach --recursive git config --local --add 'url.https://github.com/.insteadOf' 'org-102914013@github.com:'
2022-06-06T06:52:30.1624791Z Entering 'sample-files'
2022-06-06T06:52:30.1687672Z ##[endgroup]
2022-06-06T06:52:30.1721282Z [command]/usr/bin/git log -1 --format='%H'
2022-06-06T06:52:30.1751986Z '3a0bd5edeb5162f5f96484a5bc8bf252f789f8ce'
2022-06-06T06:52:30.2118185Z ##[group]Run actions/setup-python@v3
2022-06-06T06:52:30.2118580Z with:
2022-06-06T06:52:30.2118915Z   python-version: 3.10
2022-06-06T06:52:30.2119630Z   token: ***
2022-06-06T06:52:30.2119945Z ##[endgroup]
2022-06-06T06:52:30.3906439Z Successfully setup CPython (3.10.4)
2022-06-06T06:52:30.4010174Z ##[group]Run pip install -r requirements/ci.txt
2022-06-06T06:52:30.4010626Z [36;1mpip install -r requirements/ci.txt[0m
2022-06-06T06:52:30.4083156Z shell: /usr/bin/bash -e {0}
2022-06-06T06:52:30.4083432Z env:
2022-06-06T06:52:30.4083761Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.4/x64
2022-06-06T06:52:30.4084168Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.4/x64/lib
2022-06-06T06:52:30.4084473Z ##[endgroup]
2022-06-06T06:52:31.6393197Z Collecting attrs==20.3.0
2022-06-06T06:52:31.6765494Z   Downloading attrs-20.3.0-py2.py3-none-any.whl (49 kB)
2022-06-06T06:52:31.6873275Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 49.3/49.3 kB 5.5 MB/s eta 0:00:00
2022-06-06T06:52:32.1432187Z Collecting coverage==6.2
2022-06-06T06:52:32.1534284Z   Downloading coverage-6.2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (215 kB)
2022-06-06T06:52:32.1693077Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 215.5/215.5 kB 16.3 MB/s eta 0:00:00
2022-06-06T06:52:32.2294005Z Collecting flake8==4.0.1
2022-06-06T06:52:32.2379166Z   Downloading flake8-4.0.1-py2.py3-none-any.whl (64 kB)
2022-06-06T06:52:32.2445423Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 64.1/64.1 kB 15.5 MB/s eta 0:00:00
2022-06-06T06:52:32.2822507Z Collecting flake8-bugbear==22.4.25
2022-06-06T06:52:32.2908632Z   Downloading flake8_bugbear-22.4.25-py3-none-any.whl (19 kB)
2022-06-06T06:52:32.3169349Z Collecting flake8-implicit-str-concat==0.2.0
2022-06-06T06:52:32.3263257Z   Downloading flake8_implicit_str_concat-0.2.0-py2.py3-none-any.whl (4.0 kB)
2022-06-06T06:52:32.4113877Z Collecting importlib-metadata==4.2.0
2022-06-06T06:52:32.4200509Z   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)
2022-06-06T06:52:32.4462150Z Collecting iniconfig==1.1.1
2022-06-06T06:52:32.4547845Z   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)
2022-06-06T06:52:32.4817144Z Collecting mccabe==0.6.1
2022-06-06T06:52:32.4897059Z   Downloading mccabe-0.6.1-py2.py3-none-any.whl (8.6 kB)
2022-06-06T06:52:32.5276174Z Collecting more-itertools==8.12.0
2022-06-06T06:52:32.5353839Z   Downloading more_itertools-8.12.0-py3-none-any.whl (54 kB)
2022-06-06T06:52:32.5410329Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 54.3/54.3 kB 16.9 MB/s eta 0:00:00
2022-06-06T06:52:32.6943344Z Collecting mypy==0.950
2022-06-06T06:52:32.7213436Z   Downloading mypy-0.950-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (17.9 MB)
2022-06-06T06:52:32.8914470Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 17.9/17.9 MB 84.3 MB/s eta 0:00:00
2022-06-06T06:52:32.9872665Z Collecting mypy-extensions==0.4.3
2022-06-06T06:52:32.9956850Z   Downloading mypy_extensions-0.4.3-py2.py3-none-any.whl (4.5 kB)
2022-06-06T06:52:33.0413809Z Collecting packaging==21.3
2022-06-06T06:52:33.0500131Z   Downloading packaging-21.3-py3-none-any.whl (40 kB)
2022-06-06T06:52:33.0558574Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 40.8/40.8 kB 11.0 MB/s eta 0:00:00
2022-06-06T06:52:33.4290332Z Collecting pillow==8.4.0
2022-06-06T06:52:33.4467402Z   Downloading Pillow-8.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)
2022-06-06T06:52:33.4809076Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.1/3.1 MB 99.6 MB/s eta 0:00:00
2022-06-06T06:52:33.5260076Z Collecting pluggy==1.0.0
2022-06-06T06:52:33.5342206Z   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)
2022-06-06T06:52:33.5704901Z Collecting py==1.11.0
2022-06-06T06:52:33.5788864Z   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)
2022-06-06T06:52:33.5849916Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.7/98.7 kB 26.7 MB/s eta 0:00:00
2022-06-06T06:52:33.6082442Z Collecting py-cpuinfo==8.0.0
2022-06-06T06:52:33.6167602Z   Downloading py-cpuinfo-8.0.0.tar.gz (99 kB)
2022-06-06T06:52:33.6228262Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 99.8/99.8 kB 25.8 MB/s eta 0:00:00
2022-06-06T06:52:33.6445988Z   Preparing metadata (setup.py): started
2022-06-06T06:52:34.0873314Z   Preparing metadata (setup.py): finished with status 'done'
2022-06-06T06:52:34.1155994Z Collecting pycodestyle==2.8.0
2022-06-06T06:52:34.1238818Z   Downloading pycodestyle-2.8.0-py2.py3-none-any.whl (42 kB)
2022-06-06T06:52:34.1292394Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 42.1/42.1 kB 13.0 MB/s eta 0:00:00
2022-06-06T06:52:34.1608998Z Collecting pyflakes==2.4.0
2022-06-06T06:52:34.1690741Z   Downloading pyflakes-2.4.0-py2.py3-none-any.whl (69 kB)
2022-06-06T06:52:34.1747067Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 69.7/69.7 kB 20.7 MB/s eta 0:00:00
2022-06-06T06:52:34.2342035Z Collecting pyparsing==3.0.8
2022-06-06T06:52:34.2445115Z   Downloading pyparsing-3.0.8-py3-none-any.whl (98 kB)
2022-06-06T06:52:34.2508892Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.5/98.5 kB 24.8 MB/s eta 0:00:00
2022-06-06T06:52:34.3491897Z Collecting pytest==7.0.1
2022-06-06T06:52:34.3601141Z   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)
2022-06-06T06:52:34.3726006Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 297.0/297.0 kB 49.4 MB/s eta 0:00:00
2022-06-06T06:52:34.4118858Z Collecting pytest-benchmark==3.4.1
2022-06-06T06:52:34.4201055Z   Downloading pytest_benchmark-3.4.1-py2.py3-none-any.whl (50 kB)
2022-06-06T06:52:34.4259191Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 50.1/50.1 kB 13.1 MB/s eta 0:00:00
2022-06-06T06:52:34.4588429Z Collecting tomli==1.2.3
2022-06-06T06:52:34.4735518Z   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)
2022-06-06T06:52:34.5827003Z Collecting typed-ast==1.5.3
2022-06-06T06:52:34.5941735Z   Downloading typed_ast-1.5.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (877 kB)
2022-06-06T06:52:34.6098357Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 877.7/877.7 kB 70.3 MB/s eta 0:00:00
2022-06-06T06:52:34.6512463Z Collecting typeguard==2.13.3
2022-06-06T06:52:34.6593168Z   Downloading typeguard-2.13.3-py3-none-any.whl (17 kB)
2022-06-06T06:52:34.6954669Z Collecting types-pillow==9.0.14
2022-06-06T06:52:34.7103785Z   Downloading types_Pillow-9.0.14-py3-none-any.whl (43 kB)
2022-06-06T06:52:34.7159450Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 44.0/44.0 kB 11.6 MB/s eta 0:00:00
2022-06-06T06:52:34.7663592Z Collecting typing-extensions==4.1.1
2022-06-06T06:52:34.7748069Z   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)
2022-06-06T06:52:34.8160158Z Collecting zipp==3.6.0
2022-06-06T06:52:34.8244145Z   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)
2022-06-06T06:52:35.1329769Z Using legacy 'setup.py install' for py-cpuinfo, since package 'wheel' is not installed.
2022-06-06T06:52:35.3073682Z Installing collected packages: types-pillow, py-cpuinfo, mypy-extensions, mccabe, iniconfig, zipp, typing-extensions, typeguard, typed-ast, tomli, pyparsing, pyflakes, pycodestyle, py, pluggy, pillow, more-itertools, coverage, attrs, packaging, mypy, importlib-metadata, flake8-implicit-str-concat, flake8, pytest, flake8-bugbear, pytest-benchmark
2022-06-06T06:52:35.3331991Z   Running setup.py install for py-cpuinfo: started
2022-06-06T06:52:35.6553117Z   Running setup.py install for py-cpuinfo: finished with status 'done'
2022-06-06T06:52:38.4515101Z Successfully installed attrs-20.3.0 coverage-6.2 flake8-4.0.1 flake8-bugbear-22.4.25 flake8-implicit-str-concat-0.2.0 importlib-metadata-4.2.0 iniconfig-1.1.1 mccabe-0.6.1 more-itertools-8.12.0 mypy-0.950 mypy-extensions-0.4.3 packaging-21.3 pillow-8.4.0 pluggy-1.0.0 py-1.11.0 py-cpuinfo-8.0.0 pycodestyle-2.8.0 pyflakes-2.4.0 pyparsing-3.0.8 pytest-7.0.1 pytest-benchmark-3.4.1 tomli-1.2.3 typed-ast-1.5.3 typeguard-2.13.3 types-pillow-9.0.14 typing-extensions-4.1.1 zipp-3.6.0
2022-06-06T06:52:38.6630541Z WARNING: There was an error checking the latest version of pip.
2022-06-06T06:52:38.8051989Z ##[group]Run pip install .
2022-06-06T06:52:38.8052305Z [36;1mpip install .[0m
2022-06-06T06:52:38.8114048Z shell: /usr/bin/bash -e {0}
2022-06-06T06:52:38.8114312Z env:
2022-06-06T06:52:38.8114645Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.4/x64
2022-06-06T06:52:38.8115028Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.4/x64/lib
2022-06-06T06:52:38.8115342Z ##[endgroup]
2022-06-06T06:52:39.4400592Z Processing /home/runner/work/PyPDF2/PyPDF2
2022-06-06T06:52:39.4409468Z   Preparing metadata (setup.py): started
2022-06-06T06:52:39.6763155Z   Preparing metadata (setup.py): finished with status 'done'
2022-06-06T06:52:39.6810050Z Using legacy 'setup.py install' for PyPDF2, since package 'wheel' is not installed.
2022-06-06T06:52:39.8239931Z Installing collected packages: PyPDF2
2022-06-06T06:52:39.8240306Z   Running setup.py install for PyPDF2: started
2022-06-06T06:52:40.2631406Z   Running setup.py install for PyPDF2: finished with status 'done'
2022-06-06T06:52:40.2736051Z Successfully installed PyPDF2-2.0.0
2022-06-06T06:52:40.3922283Z WARNING: There was an error checking the latest version of pip.
2022-06-06T06:52:40.4699539Z ##[group]Run pytest tests/bench.py --benchmark-json output.json
2022-06-06T06:52:40.4699993Z [36;1mpytest tests/bench.py --benchmark-json output.json[0m
2022-06-06T06:52:40.4760657Z shell: /usr/bin/bash -e {0}
2022-06-06T06:52:40.4760923Z env:
2022-06-06T06:52:40.4761225Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.4/x64
2022-06-06T06:52:40.4761628Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.4/x64/lib
2022-06-06T06:52:40.4761937Z ##[endgroup]
2022-06-06T06:52:41.5849634Z ============================= test session starts ==============================
2022-06-06T06:52:41.5850409Z platform linux -- Python 3.10.4, pytest-7.0.1, pluggy-1.0.0
2022-06-06T06:52:41.5850996Z benchmark: 3.4.1 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
2022-06-06T06:52:41.5851570Z rootdir: /home/runner/work/PyPDF2/PyPDF2, configfile: pytest.ini
2022-06-06T06:52:41.5852112Z plugins: typeguard-2.13.3, benchmark-3.4.1
2022-06-06T06:52:41.5852415Z collected 3 items
2022-06-06T06:52:41.5852575Z 
2022-06-06T06:53:00.5622002Z 
2022-06-06T06:53:00.5623470Z Wrote benchmark data in: <_io.BufferedWriter name='output.json'>
2022-06-06T06:53:00.5642608Z tests/bench.py ..F                                                       [100%]
2022-06-06T06:53:00.5643056Z 
2022-06-06T06:53:00.5643747Z =================================== FAILURES ===================================
2022-06-06T06:53:00.5644121Z _____________________________ test_text_extraction _____________________________
2022-06-06T06:53:00.5644320Z 
2022-06-06T06:53:00.5644985Z self = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.5645996Z obj = {'/Type': '/XObject', '/Subtype': '/Form', '/FormType': 1, '/PTEX.FileName': './figures/spherical-coordinates.pdf', '/...ect(858, 0)}, '/XObject': {'/Fm17': IndirectObject(859, 0)}, '/ProcSet': ['/PDF', '/Text']}, '/Filter': '/FlateDecode'}
2022-06-06T06:53:00.5646886Z pdf = <PyPDF2._reader.PdfReader object at 0x7f40f2a81240>, space_width = 200.0
2022-06-06T06:53:00.5647200Z content_key = None
2022-06-06T06:53:00.5647348Z 
2022-06-06T06:53:00.5647453Z     def _extract_text(
2022-06-06T06:53:00.5647685Z         self,
2022-06-06T06:53:00.5647887Z         obj: Any,
2022-06-06T06:53:00.5648106Z         pdf: Any,
2022-06-06T06:53:00.5648352Z         space_width: float = 200.0,
2022-06-06T06:53:00.5648638Z         content_key: Optional[str] = PG.CONTENTS,
2022-06-06T06:53:00.5648953Z     ) -> str:
2022-06-06T06:53:00.5649164Z         """
2022-06-06T06:53:00.5649467Z         Locate all text drawing commands, in the order they are provided in the
2022-06-06T06:53:00.5649877Z         content stream, and extract the text.  This works well for some PDF
2022-06-06T06:53:00.5650279Z         files, but poorly for others, depending on the generator used.  This will
2022-06-06T06:53:00.5650684Z         be refined in the future.  Do not rely on the order of text coming out of
2022-06-06T06:53:00.5651058Z         this function, as it will change if this function is made more
2022-06-06T06:53:00.5651359Z         sophisticated.
2022-06-06T06:53:00.5651582Z     
2022-06-06T06:53:00.5651845Z         :param float space_width: force default space width
2022-06-06T06:53:00.5652186Z                     (if not extracted from font (default 200)
2022-06-06T06:53:00.5652569Z         :param Optional[str] content_key: indicate the default key where to extract data
2022-06-06T06:53:00.5652975Z             None = the opbject; this allow to reuse the function on XObject
2022-06-06T06:53:00.5653272Z             default = "/Content"
2022-06-06T06:53:00.5653528Z         :return: a string object.
2022-06-06T06:53:00.5653760Z         """
2022-06-06T06:53:00.5654014Z         # code freely inspired from @twiggy ; see #711
2022-06-06T06:53:00.5654605Z         def buildCharMap(font_name: str) -> Tuple[str, float, Dict, Dict]:
2022-06-06T06:53:00.5654932Z             map_dict: Any = {}
2022-06-06T06:53:00.5655181Z             process_rg: bool = False
2022-06-06T06:53:00.5655456Z             process_char: bool = False
2022-06-06T06:53:00.5655731Z             encoding: List[str] = []
2022-06-06T06:53:00.5656066Z             ft: DictionaryObject = obj["/Resources"]["/Font"][font_name]  # type: ignore
2022-06-06T06:53:00.5656429Z             font_type: str = cast(str, ft["/Subtype"])
2022-06-06T06:53:00.5656842Z             sp_width: float = space_width * 2  # default value
2022-06-06T06:53:00.5657112Z             w = []
2022-06-06T06:53:00.5657334Z             # encoding
2022-06-06T06:53:00.5657551Z             space_code = 32
2022-06-06T06:53:00.5657806Z             if "/Encoding" in ft:
2022-06-06T06:53:00.5658159Z                 enc: Union(str, DictionaryObject) = ft["/Encoding"].get_object()  # type: ignore
2022-06-06T06:53:00.5658511Z                 if isinstance(enc, str):
2022-06-06T06:53:00.5658749Z                     try:
2022-06-06T06:53:00.5659137Z                         if enc in ("/Identity-H", "/Identity-V"):
2022-06-06T06:53:00.5659437Z                             encoding = []
2022-06-06T06:53:00.5659667Z                         else:
2022-06-06T06:53:00.5659957Z                             encoding = charset_encoding[enc].copy()
2022-06-06T06:53:00.5660256Z                     except Exception:
2022-06-06T06:53:00.5660504Z                         warnings.warn(
2022-06-06T06:53:00.5660832Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.5661166Z                             PdfReadWarning,
2022-06-06T06:53:00.5661401Z                         )
2022-06-06T06:53:00.5661709Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5662110Z                 elif isinstance(enc, DictionaryObject) and "/BaseEncoding" in enc:
2022-06-06T06:53:00.5662421Z                     try:
2022-06-06T06:53:00.5662675Z                         encoding = charset_encoding[
2022-06-06T06:53:00.5663059Z                             cast(str, enc["/BaseEncoding"])
2022-06-06T06:53:00.5663606Z                         ].copy()
2022-06-06T06:53:00.5663865Z                     except Exception:
2022-06-06T06:53:00.5664150Z                         warnings.warn(
2022-06-06T06:53:00.5664504Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.5664841Z                             PdfReadWarning,
2022-06-06T06:53:00.5665108Z                         )
2022-06-06T06:53:00.5665440Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5665756Z                 else:
2022-06-06T06:53:00.5666064Z                     encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5666413Z                 if "/Differences" in enc:
2022-06-06T06:53:00.5666680Z                     x = 0
2022-06-06T06:53:00.5666916Z                     for o in cast(
2022-06-06T06:53:00.5667284Z                         DictionaryObject, cast(DictionaryObject, enc)["/Differences"]
2022-06-06T06:53:00.5667625Z                     ):
2022-06-06T06:53:00.5667882Z                         if isinstance(o, int):
2022-06-06T06:53:00.5668156Z                             x = o
2022-06-06T06:53:00.5668404Z                         else:
2022-06-06T06:53:00.5668640Z                             try:
2022-06-06T06:53:00.5668936Z                                 encoding[x] = adobe_glyphs[o]
2022-06-06T06:53:00.5669250Z                             except Exception:
2022-06-06T06:53:00.5669534Z                                 encoding[x] = o
2022-06-06T06:53:00.5669820Z                                 if o == " ":
2022-06-06T06:53:00.5670106Z                                     space_code = x
2022-06-06T06:53:00.5670378Z                             x += 1
2022-06-06T06:53:00.5670633Z             if "/ToUnicode" in ft:
2022-06-06T06:53:00.5670894Z                 cm: str = (
2022-06-06T06:53:00.5671292Z                     cast(DecodedStreamObject, ft["/ToUnicode"])
2022-06-06T06:53:00.5671777Z                     .get_data()
2022-06-06T06:53:00.5672151Z                     .decode("utf-8")
2022-06-06T06:53:00.5672403Z                 )
2022-06-06T06:53:00.5672628Z                 for l in (
2022-06-06T06:53:00.5672884Z                     cm.strip()
2022-06-06T06:53:00.5673150Z                     .replace("<", " ")
2022-06-06T06:53:00.5673408Z                     .replace(">", "")
2022-06-06T06:53:00.5673689Z                     .replace("[", " [ ")
2022-06-06T06:53:00.5673969Z                     .replace("]", " ] ")
2022-06-06T06:53:00.5674333Z                     .split("\n")
2022-06-06T06:53:00.5674560Z                 ):
2022-06-06T06:53:00.5674785Z                     if l == "":
2022-06-06T06:53:00.5675008Z                         continue
2022-06-06T06:53:00.5675273Z                     if "beginbfrange" in l:
2022-06-06T06:53:00.5675550Z                         process_rg = True
2022-06-06T06:53:00.5675827Z                     elif "endbfrange" in l:
2022-06-06T06:53:00.5676094Z                         process_rg = False
2022-06-06T06:53:00.5676373Z                     elif "beginbfchar" in l:
2022-06-06T06:53:00.5676656Z                         process_char = True
2022-06-06T06:53:00.5677081Z                     elif "endbfchar" in l:
2022-06-06T06:53:00.5677380Z                         process_char = False
2022-06-06T06:53:00.5677666Z                     elif process_rg:
2022-06-06T06:53:00.5677965Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.5678270Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.5678552Z                         b = int(lst[1], 16)
2022-06-06T06:53:00.5678806Z                         if lst[2] == "[":
2022-06-06T06:53:00.5679219Z                             # lst = lst[3:].trim(' []').split(' ')
2022-06-06T06:53:00.5679531Z                             for sq in lst[3:]:
2022-06-06T06:53:00.5679805Z                                 if "]":
2022-06-06T06:53:00.5680054Z                                     break
2022-06-06T06:53:00.5680616Z                                 map_dict[a] = unhexlify(sq).decode("utf-16-be")
2022-06-06T06:53:00.5680941Z                                 a += 1
2022-06-06T06:53:00.5681202Z                                 assert a > b
2022-06-06T06:53:00.5681467Z                         else:
2022-06-06T06:53:00.5681743Z                             c = int(lst[2], 16)
2022-06-06T06:53:00.5682026Z                             fmt = b"%%0%dX" % len(lst[2])
2022-06-06T06:53:00.5682319Z                             while a <= b:
2022-06-06T06:53:00.5682779Z                                 map_dict[a] = unhexlify(fmt % c).decode("utf-16-be")
2022-06-06T06:53:00.5683108Z                                 a += 1
2022-06-06T06:53:00.5683352Z                                 c += 1
2022-06-06T06:53:00.5683621Z                     elif process_char:
2022-06-06T06:53:00.5683936Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.5684225Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.5684556Z                         map_dict[a] = unhexlify("".join(lst[1:])).decode(
2022-06-06T06:53:00.5684940Z                             "utf-16-be"
2022-06-06T06:53:00.5685268Z                         )  # join is here as some cases where the code was split
2022-06-06T06:53:00.5685563Z     
2022-06-06T06:53:00.5685783Z                 # get
2022-06-06T06:53:00.5686025Z                 for a in map_dict:
2022-06-06T06:53:00.5686308Z                     if map_dict[a] == " ":
2022-06-06T06:53:00.5686585Z                         space_code = a
2022-06-06T06:53:00.5686809Z     
2022-06-06T06:53:00.5687153Z             # compute space width
2022-06-06T06:53:00.5687438Z             st: int = 0  # declaration for mypy
2022-06-06T06:53:00.5687701Z             if "/W" in ft:
2022-06-06T06:53:00.5688093Z                 if "/DW" in ft:
2022-06-06T06:53:00.5688454Z                     sp_width = cast(float, ft["/DW"])
2022-06-06T06:53:00.5688787Z                 w = [x for x in ft["/W"]]  # type: ignore
2022-06-06T06:53:00.5689065Z                 while len(w) > 0:
2022-06-06T06:53:00.5689324Z                     st = w[0]
2022-06-06T06:53:00.5689687Z                     second = w[1]
2022-06-06T06:53:00.5689943Z                     if isinstance(int, second):
2022-06-06T06:53:00.5690263Z                         if st <= space_code and space_code <= second:
2022-06-06T06:53:00.5690565Z                             sp_width = w[2]
2022-06-06T06:53:00.5690797Z                             break
2022-06-06T06:53:00.5691025Z                         w = w[3:]
2022-06-06T06:53:00.5691290Z                     if isinstance(list, second):
2022-06-06T06:53:00.5691740Z                         if st <= space_code and space_code <= st + len(second) - 1:
2022-06-06T06:53:00.5692163Z                             sp_width = second[space_code - st]
2022-06-06T06:53:00.5692435Z                         w = w[2:]
2022-06-06T06:53:00.5692666Z                     else:
2022-06-06T06:53:00.5692899Z                         warnings.warn(
2022-06-06T06:53:00.5693205Z                             "unknown widths : \n" + (ft["/W"]).__repr__(),
2022-06-06T06:53:00.5693514Z                             PdfReadWarning,
2022-06-06T06:53:00.5693751Z                         )
2022-06-06T06:53:00.5693974Z                         break
2022-06-06T06:53:00.5694213Z             if "/Widths" in ft:
2022-06-06T06:53:00.5694488Z                 w = [x for x in ft["/Widths"]]  # type: ignore
2022-06-06T06:53:00.5694750Z                 try:
2022-06-06T06:53:00.5695013Z                     st = cast(int, ft["/FirstChar"])
2022-06-06T06:53:00.5695317Z                     en: int = cast(int, ft["/LastChar"])
2022-06-06T06:53:00.5695615Z                     if st > space_code or en < space_code:
2022-06-06T06:53:00.5695923Z                         raise Exception("Not in range")
2022-06-06T06:53:00.5698111Z                     if w[space_code - st] == 0:
2022-06-06T06:53:00.5698463Z                         raise Exception("null width")
2022-06-06T06:53:00.5699103Z                     sp_width = w[space_code - st]
2022-06-06T06:53:00.5699793Z                 except Exception:
2022-06-06T06:53:00.5700650Z                     if "/FontDescriptor" in ft and "/MissingWidth" in cast(
2022-06-06T06:53:00.5702249Z                         DictionaryObject, ft["/FontDescriptor"]
2022-06-06T06:53:00.5702562Z                     ):
2022-06-06T06:53:00.5702906Z                         sp_width = ft["/FontDescriptor"]["/MissingWidth"]  # type: ignore
2022-06-06T06:53:00.5703220Z                     else:
2022-06-06T06:53:00.5703527Z                         # will consider width of char as avg(width)/2
2022-06-06T06:53:00.5703829Z                         m = 0
2022-06-06T06:53:00.5704081Z                         cpt = 0
2022-06-06T06:53:00.5704321Z                         for x in w:
2022-06-06T06:53:00.5704580Z                             if x > 0:
2022-06-06T06:53:00.5704852Z                                 m += x
2022-06-06T06:53:00.5705106Z                                 cpt += 1
2022-06-06T06:53:00.5705398Z                         sp_width = m / max(1, cpt) / 2
2022-06-06T06:53:00.5705658Z     
2022-06-06T06:53:00.5705862Z             return (
2022-06-06T06:53:00.5706106Z                 font_type,
2022-06-06T06:53:00.5706371Z                 float(sp_width / 2),
2022-06-06T06:53:00.5706654Z                 dict(zip(range(256), encoding)),
2022-06-06T06:53:00.5706952Z                 "".maketrans(map_dict),
2022-06-06T06:53:00.5707206Z             )
2022-06-06T06:53:00.5707404Z     
2022-06-06T06:53:00.5707625Z         text: str = ""
2022-06-06T06:53:00.5707876Z         output: str = ""
2022-06-06T06:53:00.5708206Z         cmaps: Dict[str, Tuple[str, float, Dict[int, str], Dict[int, str]]] = {}
2022-06-06T06:53:00.5708623Z         resources_dict = cast(DictionaryObject, obj["/Resources"])
2022-06-06T06:53:00.5708975Z         if "/Font" in resources_dict:
2022-06-06T06:53:00.5709512Z             for f in cast(DictionaryObject, resources_dict["/Font"]):
2022-06-06T06:53:00.5709865Z                 cmaps[f] = buildCharMap(f)
2022-06-06T06:53:00.5710183Z         cmap: Union[str, Dict[int, str]] = {}
2022-06-06T06:53:00.5710577Z         content = obj[content_key].get_object() if isinstance(content_key, str) else obj
2022-06-06T06:53:00.5710961Z         if not isinstance(content, ContentStream):
2022-06-06T06:53:00.5711336Z             content = ContentStream(content, pdf, "charmap")
2022-06-06T06:53:00.5712686Z         # Note: we check all strings are TextStringObjects.  ByteStringObjects
2022-06-06T06:53:00.5713316Z         # are strings where the byte->string encoding was unknown, so adding
2022-06-06T06:53:00.5713711Z         # them to the text here would be gibberish.
2022-06-06T06:53:00.5713986Z     
2022-06-06T06:53:00.5714260Z         tm_matrix: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5714576Z         tm_prev: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5714860Z         char_scale = 1.0
2022-06-06T06:53:00.5715125Z         space_scale = 1.0
2022-06-06T06:53:00.5715443Z         _space_width: float = 500.0  # will be set correctly at first Tf
2022-06-06T06:53:00.5715749Z         TL = 0.0
2022-06-06T06:53:00.5716028Z         font_size = 12.0  # init just in case of
2022-06-06T06:53:00.5716377Z     
2022-06-06T06:53:00.5716670Z         # tm_matrix: Tuple = tm_matrix, output: str = output, text: str = text,
2022-06-06T06:53:00.5717107Z         # char_scale: float = char_scale,space_scale : float = space_scale, _space_width: float = _space_width,
2022-06-06T06:53:00.5717505Z         # TL: float = TL, font_size: float = font_size, cmap = cmap
2022-06-06T06:53:00.5717947Z     
2022-06-06T06:53:00.5718374Z         def process_operation(operator: bytes, operands: List) -> None:
2022-06-06T06:53:00.5718851Z             nonlocal tm_matrix, tm_prev, output, text, char_scale, space_scale, _space_width, TL, font_size, cmap
2022-06-06T06:53:00.5719276Z             if tm_matrix[4] != 0 and tm_matrix[5] != 0:  # o reuse of the
2022-06-06T06:53:00.5719731Z                 tm_prev = list(tm_matrix)
2022-06-06T06:53:00.5720009Z             # Table 5.4 page 405
2022-06-06T06:53:00.5720268Z             if operator == b"BT":
2022-06-06T06:53:00.5720568Z                 tm_matrix = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5720855Z                 # tm_prev = tm_matrix
2022-06-06T06:53:00.5721112Z                 output += text
2022-06-06T06:53:00.5721366Z                 # based
2022-06-06T06:53:00.5721753Z                 # if output != "" and output[-1]!="\n":
2022-06-06T06:53:00.5722050Z                 #    output += "\n"
2022-06-06T06:53:00.5722291Z                 text = ""
2022-06-06T06:53:00.5722539Z                 return None
2022-06-06T06:53:00.5722809Z             elif operator == b"ET":
2022-06-06T06:53:00.5723065Z                 output += text
2022-06-06T06:53:00.5723316Z                 text = ""
2022-06-06T06:53:00.5723584Z             # Table 5.2 page 398
2022-06-06T06:53:00.5723849Z             elif operator == b"Tz":
2022-06-06T06:53:00.5724166Z                 char_scale = float(operands[0]) / 100.0
2022-06-06T06:53:00.5724471Z             elif operator == b"Tw":
2022-06-06T06:53:00.5724767Z                 space_scale = 1.0 + float(operands[0])
2022-06-06T06:53:00.5725069Z             elif operator == b"TL":
2022-06-06T06:53:00.5725352Z                 TL = float(operands[0])
2022-06-06T06:53:00.5725619Z             elif operator == b"Tf":
2022-06-06T06:53:00.5725882Z                 if text != "":
2022-06-06T06:53:00.5726181Z                     output += text  # .translate(cmap)
2022-06-06T06:53:00.5726446Z                 text = ""
2022-06-06T06:53:00.5726741Z                 _space_width = cmaps[operands[0]][1]
2022-06-06T06:53:00.5727026Z                 cmap = (
2022-06-06T06:53:00.5727298Z                     cmaps[operands[0]][2]
2022-06-06T06:53:00.5727593Z                     if len(cmaps[operands[0]][2]) > 0
2022-06-06T06:53:00.5727988Z                     else cmaps[operands[0]][3]
2022-06-06T06:53:00.5728284Z                 )  # type:ignore
2022-06-06T06:53:00.5728516Z                 try:
2022-06-06T06:53:00.5728942Z                     font_size = float(operands[1])
2022-06-06T06:53:00.5729258Z                 except Exception:
2022-06-06T06:53:00.5729545Z                     pass  # keep previous size
2022-06-06T06:53:00.5729846Z             # Table 5.5 page 406
2022-06-06T06:53:00.5730121Z             elif operator == b"Td":
2022-06-06T06:53:00.5730410Z                 tm_matrix[5] += float(operands[1])
2022-06-06T06:53:00.5730725Z                 tm_matrix[4] += float(operands[0])
2022-06-06T06:53:00.5731024Z             elif operator == b"Tm":
2022-06-06T06:53:00.5731293Z                 tm_matrix = [
2022-06-06T06:53:00.5731550Z                     float(operands[0]),
2022-06-06T06:53:00.5731836Z                     float(operands[1]),
2022-06-06T06:53:00.5732118Z                     float(operands[2]),
2022-06-06T06:53:00.5732387Z                     float(operands[3]),
2022-06-06T06:53:00.5732669Z                     float(operands[4]),
2022-06-06T06:53:00.5732944Z                     float(operands[5]),
2022-06-06T06:53:00.5733178Z                 ]
2022-06-06T06:53:00.5733432Z             elif operator == b"T*":
2022-06-06T06:53:00.5733797Z                 tm_matrix[5] -= TL
2022-06-06T06:53:00.5734065Z             elif operator == b"Tj":
2022-06-06T06:53:00.5734373Z                 text += operands[0].translate(cmap)
2022-06-06T06:53:00.5734646Z             else:
2022-06-06T06:53:00.5734869Z                 return None
2022-06-06T06:53:00.5735196Z             # process text changes due to positionchange: " "
2022-06-06T06:53:00.5735519Z             if tm_matrix[5] <= (
2022-06-06T06:53:00.5735979Z                 tm_prev[5] - font_size * sqrt(tm_matrix[2] ** 2 + tm_matrix[3] ** 2)
2022-06-06T06:53:00.5736347Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.5737628Z                 output += text + "\n"  # .translate(cmap) + "\n"
2022-06-06T06:53:00.5738136Z                 text = ""
2022-06-06T06:53:00.5738385Z             elif tm_matrix[4] >= (
2022-06-06T06:53:00.5739081Z                 tm_prev[4] + space_scale * _space_width * char_scale
2022-06-06T06:53:00.5739491Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.5739776Z                 text += " "
2022-06-06T06:53:00.5740028Z             return None
2022-06-06T06:53:00.5740345Z             # for clarity Operator in (b"g",b"G") : nothing to do
2022-06-06T06:53:00.5740988Z             # end of process_operation ######
2022-06-06T06:53:00.5741980Z     
2022-06-06T06:53:00.5742301Z         for operands, operator in content.operations:
2022-06-06T06:53:00.5743004Z             # multiple operators are defined in here ####
2022-06-06T06:53:00.5743723Z             if operator == b"'":
2022-06-06T06:53:00.5744054Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.5744393Z                 process_operation(b"Tj", operands)
2022-06-06T06:53:00.5745135Z             elif operator == b'"':
2022-06-06T06:53:00.5745742Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.5747112Z                 process_operation(b"TJ", operands)
2022-06-06T06:53:00.5747416Z             elif operator == b"TJ":
2022-06-06T06:53:00.5747705Z                 for op in operands[0]:
2022-06-06T06:53:00.5748005Z                     if isinstance(op, str):
2022-06-06T06:53:00.5748310Z                         process_operation(b"Tj", [op])
2022-06-06T06:53:00.5748695Z                     if isinstance(op, (int, float, NumberObject, FloatObject)):
2022-06-06T06:53:00.5749205Z                         process_operation(b"Td", [-op, 0.0])
2022-06-06T06:53:00.5749515Z             elif operator == b"Do":
2022-06-06T06:53:00.5749771Z                 output += text
2022-06-06T06:53:00.5750037Z                 if output != "":
2022-06-06T06:53:00.5750335Z                     output += "\n"
2022-06-06T06:53:00.5751063Z                 try:
2022-06-06T06:53:00.5751426Z                     xobj = self["/Resources"]["/XObject"]  # type: ignore
2022-06-06T06:53:00.5752087Z >                   if xobj[operands[0]]["/Subtype"] != "/Image":
2022-06-06T06:53:00.5752291Z 
2022-06-06T06:53:00.5752506Z PyPDF2/_page.py:1402: 
2022-06-06T06:53:00.5752811Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2022-06-06T06:53:00.5752997Z 
2022-06-06T06:53:00.5753350Z self = {'/Im11': IndirectObject(828, 0), '/Im12': IndirectObject(829, 0)}
2022-06-06T06:53:00.5753707Z key = '/Fm17'
2022-06-06T06:53:00.5753839Z 
2022-06-06T06:53:00.5754073Z     def __getitem__(self, key: Any) -> PdfObject:
2022-06-06T06:53:00.5754423Z >       return dict.__getitem__(self, key).get_object()
2022-06-06T06:53:00.5754784Z E       KeyError: '/Fm17'
2022-06-06T06:53:00.5754946Z 
2022-06-06T06:53:00.5755059Z PyPDF2/generic.py:620: KeyError
2022-06-06T06:53:00.5755244Z 
2022-06-06T06:53:00.5755447Z During handling of the above exception, another exception occurred:
2022-06-06T06:53:00.5755686Z 
2022-06-06T06:53:00.5756225Z self = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.5757072Z obj = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.5757591Z pdf = <PyPDF2._reader.PdfReader object at 0x7f40f2a81240>, space_width = 200.0
2022-06-06T06:53:00.5758007Z content_key = '/Contents'
2022-06-06T06:53:00.5758174Z 
2022-06-06T06:53:00.5758281Z     def _extract_text(
2022-06-06T06:53:00.5758521Z         self,
2022-06-06T06:53:00.5758738Z         obj: Any,
2022-06-06T06:53:00.5758975Z         pdf: Any,
2022-06-06T06:53:00.5759239Z         space_width: float = 200.0,
2022-06-06T06:53:00.5759544Z         content_key: Optional[str] = PG.CONTENTS,
2022-06-06T06:53:00.5759870Z     ) -> str:
2022-06-06T06:53:00.5760096Z         """
2022-06-06T06:53:00.5760558Z         Locate all text drawing commands, in the order they are provided in the
2022-06-06T06:53:00.5760996Z         content stream, and extract the text.  This works well for some PDF
2022-06-06T06:53:00.5761442Z         files, but poorly for others, depending on the generator used.  This will
2022-06-06T06:53:00.5761868Z         be refined in the future.  Do not rely on the order of text coming out of
2022-06-06T06:53:00.5762291Z         this function, as it will change if this function is made more
2022-06-06T06:53:00.5762616Z         sophisticated.
2022-06-06T06:53:00.5762854Z     
2022-06-06T06:53:00.5763135Z         :param float space_width: force default space width
2022-06-06T06:53:00.5763499Z                     (if not extracted from font (default 200)
2022-06-06T06:53:00.5763908Z         :param Optional[str] content_key: indicate the default key where to extract data
2022-06-06T06:53:00.5764421Z             None = the opbject; this allow to reuse the function on XObject
2022-06-06T06:53:00.5764732Z             default = "/Content"
2022-06-06T06:53:00.5764992Z         :return: a string object.
2022-06-06T06:53:00.5765212Z         """
2022-06-06T06:53:00.5765482Z         # code freely inspired from @twiggy ; see #711
2022-06-06T06:53:00.5765949Z         def buildCharMap(font_name: str) -> Tuple[str, float, Dict, Dict]:
2022-06-06T06:53:00.5766261Z             map_dict: Any = {}
2022-06-06T06:53:00.5766506Z             process_rg: bool = False
2022-06-06T06:53:00.5766780Z             process_char: bool = False
2022-06-06T06:53:00.5767054Z             encoding: List[str] = []
2022-06-06T06:53:00.5767593Z             ft: DictionaryObject = obj["/Resources"]["/Font"][font_name]  # type: ignore
2022-06-06T06:53:00.5767979Z             font_type: str = cast(str, ft["/Subtype"])
2022-06-06T06:53:00.5768333Z             sp_width: float = space_width * 2  # default value
2022-06-06T06:53:00.5768607Z             w = []
2022-06-06T06:53:00.5768917Z             # encoding
2022-06-06T06:53:00.5769175Z             space_code = 32
2022-06-06T06:53:00.5769439Z             if "/Encoding" in ft:
2022-06-06T06:53:00.5769820Z                 enc: Union(str, DictionaryObject) = ft["/Encoding"].get_object()  # type: ignore
2022-06-06T06:53:00.5770218Z                 if isinstance(enc, str):
2022-06-06T06:53:00.5770469Z                     try:
2022-06-06T06:53:00.5770885Z                         if enc in ("/Identity-H", "/Identity-V"):
2022-06-06T06:53:00.5771738Z                             encoding = []
2022-06-06T06:53:00.5772008Z                         else:
2022-06-06T06:53:00.5772310Z                             encoding = charset_encoding[enc].copy()
2022-06-06T06:53:00.5772631Z                     except Exception:
2022-06-06T06:53:00.5772914Z                         warnings.warn(
2022-06-06T06:53:00.5773675Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.5774044Z                             PdfReadWarning,
2022-06-06T06:53:00.5774710Z                         )
2022-06-06T06:53:00.5775044Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5775477Z                 elif isinstance(enc, DictionaryObject) and "/BaseEncoding" in enc:
2022-06-06T06:53:00.5775817Z                     try:
2022-06-06T06:53:00.5776102Z                         encoding = charset_encoding[
2022-06-06T06:53:00.5776419Z                             cast(str, enc["/BaseEncoding"])
2022-06-06T06:53:00.5776712Z                         ].copy()
2022-06-06T06:53:00.5776982Z                     except Exception:
2022-06-06T06:53:00.5777249Z                         warnings.warn(
2022-06-06T06:53:00.5777607Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.5777959Z                             PdfReadWarning,
2022-06-06T06:53:00.5778209Z                         )
2022-06-06T06:53:00.5778543Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5778862Z                 else:
2022-06-06T06:53:00.5779325Z                     encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5779671Z                 if "/Differences" in enc:
2022-06-06T06:53:00.5779941Z                     x = 0
2022-06-06T06:53:00.5780201Z                     for o in cast(
2022-06-06T06:53:00.5780566Z                         DictionaryObject, cast(DictionaryObject, enc)["/Differences"]
2022-06-06T06:53:00.5780909Z                     ):
2022-06-06T06:53:00.5781185Z                         if isinstance(o, int):
2022-06-06T06:53:00.5781445Z                             x = o
2022-06-06T06:53:00.5781698Z                         else:
2022-06-06T06:53:00.5781954Z                             try:
2022-06-06T06:53:00.5782237Z                                 encoding[x] = adobe_glyphs[o]
2022-06-06T06:53:00.5782550Z                             except Exception:
2022-06-06T06:53:00.5782852Z                                 encoding[x] = o
2022-06-06T06:53:00.5783128Z                                 if o == " ":
2022-06-06T06:53:00.5783419Z                                     space_code = x
2022-06-06T06:53:00.5783693Z                             x += 1
2022-06-06T06:53:00.5783963Z             if "/ToUnicode" in ft:
2022-06-06T06:53:00.5784211Z                 cm: str = (
2022-06-06T06:53:00.5784544Z                     cast(DecodedStreamObject, ft["/ToUnicode"])
2022-06-06T06:53:00.5784860Z                     .get_data()
2022-06-06T06:53:00.5785247Z                     .decode("utf-8")
2022-06-06T06:53:00.5785499Z                 )
2022-06-06T06:53:00.5785740Z                 for l in (
2022-06-06T06:53:00.5785983Z                     cm.strip()
2022-06-06T06:53:00.5786246Z                     .replace("<", " ")
2022-06-06T06:53:00.5786520Z                     .replace(">", "")
2022-06-06T06:53:00.5786783Z                     .replace("[", " [ ")
2022-06-06T06:53:00.5787060Z                     .replace("]", " ] ")
2022-06-06T06:53:00.5787405Z                     .split("\n")
2022-06-06T06:53:00.5787646Z                 ):
2022-06-06T06:53:00.5787888Z                     if l == "":
2022-06-06T06:53:00.5788141Z                         continue
2022-06-06T06:53:00.5788408Z                     if "beginbfrange" in l:
2022-06-06T06:53:00.5788708Z                         process_rg = True
2022-06-06T06:53:00.5789005Z                     elif "endbfrange" in l:
2022-06-06T06:53:00.5789296Z                         process_rg = False
2022-06-06T06:53:00.5789580Z                     elif "beginbfchar" in l:
2022-06-06T06:53:00.5789988Z                         process_char = True
2022-06-06T06:53:00.5790262Z                     elif "endbfchar" in l:
2022-06-06T06:53:00.5790521Z                         process_char = False
2022-06-06T06:53:00.5790786Z                     elif process_rg:
2022-06-06T06:53:00.5791076Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.5791348Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.5792092Z                         b = int(lst[1], 16)
2022-06-06T06:53:00.5792369Z                         if lst[2] == "[":
2022-06-06T06:53:00.5792786Z                             # lst = lst[3:].trim(' []').split(' ')
2022-06-06T06:53:00.5793097Z                             for sq in lst[3:]:
2022-06-06T06:53:00.5793372Z                                 if "]":
2022-06-06T06:53:00.5793639Z                                     break
2022-06-06T06:53:00.5794075Z                                 map_dict[a] = unhexlify(sq).decode("utf-16-be")
2022-06-06T06:53:00.5794403Z                                 a += 1
2022-06-06T06:53:00.5794676Z                                 assert a > b
2022-06-06T06:53:00.5794925Z                         else:
2022-06-06T06:53:00.5795197Z                             c = int(lst[2], 16)
2022-06-06T06:53:00.5795503Z                             fmt = b"%%0%dX" % len(lst[2])
2022-06-06T06:53:00.5795778Z                             while a <= b:
2022-06-06T06:53:00.5796345Z                                 map_dict[a] = unhexlify(fmt % c).decode("utf-16-be")
2022-06-06T06:53:00.5796754Z                                 a += 1
2022-06-06T06:53:00.5796982Z                                 c += 1
2022-06-06T06:53:00.5797235Z                     elif process_char:
2022-06-06T06:53:00.5797533Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.5797826Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.5798789Z                         map_dict[a] = unhexlify("".join(lst[1:])).decode(
2022-06-06T06:53:00.5799247Z                             "utf-16-be"
2022-06-06T06:53:00.5799591Z                         )  # join is here as some cases where the code was split
2022-06-06T06:53:00.5799873Z     
2022-06-06T06:53:00.5800094Z                 # get
2022-06-06T06:53:00.5800351Z                 for a in map_dict:
2022-06-06T06:53:00.5800618Z                     if map_dict[a] == " ":
2022-06-06T06:53:00.5800903Z                         space_code = a
2022-06-06T06:53:00.5801150Z     
2022-06-06T06:53:00.5801384Z             # compute space width
2022-06-06T06:53:00.5801693Z             st: int = 0  # declaration for mypy
2022-06-06T06:53:00.5801979Z             if "/W" in ft:
2022-06-06T06:53:00.5802221Z                 if "/DW" in ft:
2022-06-06T06:53:00.5802525Z                     sp_width = cast(float, ft["/DW"])
2022-06-06T06:53:00.5802858Z                 w = [x for x in ft["/W"]]  # type: ignore
2022-06-06T06:53:00.5803151Z                 while len(w) > 0:
2022-06-06T06:53:00.5803393Z                     st = w[0]
2022-06-06T06:53:00.5803651Z                     second = w[1]
2022-06-06T06:53:00.5803947Z                     if isinstance(int, second):
2022-06-06T06:53:00.5804277Z                         if st <= space_code and space_code <= second:
2022-06-06T06:53:00.5804601Z                             sp_width = w[2]
2022-06-06T06:53:00.5804866Z                             break
2022-06-06T06:53:00.5805233Z                         w = w[3:]
2022-06-06T06:53:00.5805531Z                     if isinstance(list, second):
2022-06-06T06:53:00.5806029Z                         if st <= space_code and space_code <= st + len(second) - 1:
2022-06-06T06:53:00.5806491Z                             sp_width = second[space_code - st]
2022-06-06T06:53:00.5806791Z                         w = w[2:]
2022-06-06T06:53:00.5807038Z                     else:
2022-06-06T06:53:00.5807307Z                         warnings.warn(
2022-06-06T06:53:00.5807625Z                             "unknown widths : \n" + (ft["/W"]).__repr__(),
2022-06-06T06:53:00.5807957Z                             PdfReadWarning,
2022-06-06T06:53:00.5808224Z                         )
2022-06-06T06:53:00.5808453Z                         break
2022-06-06T06:53:00.5808712Z             if "/Widths" in ft:
2022-06-06T06:53:00.5809022Z                 w = [x for x in ft["/Widths"]]  # type: ignore
2022-06-06T06:53:00.5809289Z                 try:
2022-06-06T06:53:00.5809574Z                     st = cast(int, ft["/FirstChar"])
2022-06-06T06:53:00.5809912Z                     en: int = cast(int, ft["/LastChar"])
2022-06-06T06:53:00.5810231Z                     if st > space_code or en < space_code:
2022-06-06T06:53:00.5810570Z                         raise Exception("Not in range")
2022-06-06T06:53:00.5810970Z                     if w[space_code - st] == 0:
2022-06-06T06:53:00.5811289Z                         raise Exception("null width")
2022-06-06T06:53:00.5811674Z                     sp_width = w[space_code - st]
2022-06-06T06:53:00.5811970Z                 except Exception:
2022-06-06T06:53:00.5812427Z                     if "/FontDescriptor" in ft and "/MissingWidth" in cast(
2022-06-06T06:53:00.5812782Z                         DictionaryObject, ft["/FontDescriptor"]
2022-06-06T06:53:00.5813061Z                     ):
2022-06-06T06:53:00.5813439Z                         sp_width = ft["/FontDescriptor"]["/MissingWidth"]  # type: ignore
2022-06-06T06:53:00.5813733Z                     else:
2022-06-06T06:53:00.5814263Z                         # will consider width of char as avg(width)/2
2022-06-06T06:53:00.5814647Z                         m = 0
2022-06-06T06:53:00.5814897Z                         cpt = 0
2022-06-06T06:53:00.5815139Z                         for x in w:
2022-06-06T06:53:00.5815403Z                             if x > 0:
2022-06-06T06:53:00.5815663Z                                 m += x
2022-06-06T06:53:00.5815913Z                                 cpt += 1
2022-06-06T06:53:00.5816216Z                         sp_width = m / max(1, cpt) / 2
2022-06-06T06:53:00.5816475Z     
2022-06-06T06:53:00.5816681Z             return (
2022-06-06T06:53:00.5816934Z                 font_type,
2022-06-06T06:53:00.5817200Z                 float(sp_width / 2),
2022-06-06T06:53:00.5817487Z                 dict(zip(range(256), encoding)),
2022-06-06T06:53:00.5817789Z                 "".maketrans(map_dict),
2022-06-06T06:53:00.5818046Z             )
2022-06-06T06:53:00.5818247Z     
2022-06-06T06:53:00.5818476Z         text: str = ""
2022-06-06T06:53:00.5818728Z         output: str = ""
2022-06-06T06:53:00.5819064Z         cmaps: Dict[str, Tuple[str, float, Dict[int, str], Dict[int, str]]] = {}
2022-06-06T06:53:00.5819479Z         resources_dict = cast(DictionaryObject, obj["/Resources"])
2022-06-06T06:53:00.5819826Z         if "/Font" in resources_dict:
2022-06-06T06:53:00.5820178Z             for f in cast(DictionaryObject, resources_dict["/Font"]):
2022-06-06T06:53:00.5820518Z                 cmaps[f] = buildCharMap(f)
2022-06-06T06:53:00.5820836Z         cmap: Union[str, Dict[int, str]] = {}
2022-06-06T06:53:00.5821222Z         content = obj[content_key].get_object() if isinstance(content_key, str) else obj
2022-06-06T06:53:00.5821606Z         if not isinstance(content, ContentStream):
2022-06-06T06:53:00.5821982Z             content = ContentStream(content, pdf, "charmap")
2022-06-06T06:53:00.5822400Z         # Note: we check all strings are TextStringObjects.  ByteStringObjects
2022-06-06T06:53:00.5823029Z         # are strings where the byte->string encoding was unknown, so adding
2022-06-06T06:53:00.5823422Z         # them to the text here would be gibberish.
2022-06-06T06:53:00.5823697Z     
2022-06-06T06:53:00.5823971Z         tm_matrix: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5824286Z         tm_prev: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5824569Z         char_scale = 1.0
2022-06-06T06:53:00.5824827Z         space_scale = 1.0
2022-06-06T06:53:00.5825145Z         _space_width: float = 500.0  # will be set correctly at first Tf
2022-06-06T06:53:00.5825451Z         TL = 0.0
2022-06-06T06:53:00.5825727Z         font_size = 12.0  # init just in case of
2022-06-06T06:53:00.5825970Z     
2022-06-06T06:53:00.5826292Z         # tm_matrix: Tuple = tm_matrix, output: str = output, text: str = text,
2022-06-06T06:53:00.5826759Z         # char_scale: float = char_scale,space_scale : float = space_scale, _space_width: float = _space_width,
2022-06-06T06:53:00.5827188Z         # TL: float = TL, font_size: float = font_size, cmap = cmap
2022-06-06T06:53:00.5827478Z     
2022-06-06T06:53:00.5827911Z         def process_operation(operator: bytes, operands: List) -> None:
2022-06-06T06:53:00.5828390Z             nonlocal tm_matrix, tm_prev, output, text, char_scale, space_scale, _space_width, TL, font_size, cmap
2022-06-06T06:53:00.5828815Z             if tm_matrix[4] != 0 and tm_matrix[5] != 0:  # o reuse of the
2022-06-06T06:53:00.5829143Z                 tm_prev = list(tm_matrix)
2022-06-06T06:53:00.5829426Z             # Table 5.4 page 405
2022-06-06T06:53:00.5829686Z             if operator == b"BT":
2022-06-06T06:53:00.5829982Z                 tm_matrix = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.5830276Z                 # tm_prev = tm_matrix
2022-06-06T06:53:00.5830529Z                 output += text
2022-06-06T06:53:00.5830782Z                 # based
2022-06-06T06:53:00.5831160Z                 # if output != "" and output[-1]!="\n":
2022-06-06T06:53:00.5831459Z                 #    output += "\n"
2022-06-06T06:53:00.5831957Z                 text = ""
2022-06-06T06:53:00.5832202Z                 return None
2022-06-06T06:53:00.5832473Z             elif operator == b"ET":
2022-06-06T06:53:00.5832730Z                 output += text
2022-06-06T06:53:00.5832982Z                 text = ""
2022-06-06T06:53:00.5833240Z             # Table 5.2 page 398
2022-06-06T06:53:00.5833501Z             elif operator == b"Tz":
2022-06-06T06:53:00.5833821Z                 char_scale = float(operands[0]) / 100.0
2022-06-06T06:53:00.5834124Z             elif operator == b"Tw":
2022-06-06T06:53:00.5834423Z                 space_scale = 1.0 + float(operands[0])
2022-06-06T06:53:00.5834724Z             elif operator == b"TL":
2022-06-06T06:53:00.5835008Z                 TL = float(operands[0])
2022-06-06T06:53:00.5835275Z             elif operator == b"Tf":
2022-06-06T06:53:00.5835544Z                 if text != "":
2022-06-06T06:53:00.5835847Z                     output += text  # .translate(cmap)
2022-06-06T06:53:00.5836119Z                 text = ""
2022-06-06T06:53:00.5836425Z                 _space_width = cmaps[operands[0]][1]
2022-06-06T06:53:00.5836712Z                 cmap = (
2022-06-06T06:53:00.5836990Z                     cmaps[operands[0]][2]
2022-06-06T06:53:00.5837286Z                     if len(cmaps[operands[0]][2]) > 0
2022-06-06T06:53:00.5837603Z                     else cmaps[operands[0]][3]
2022-06-06T06:53:00.5837888Z                 )  # type:ignore
2022-06-06T06:53:00.5838118Z                 try:
2022-06-06T06:53:00.5838401Z                     font_size = float(operands[1])
2022-06-06T06:53:00.5838696Z                 except Exception:
2022-06-06T06:53:00.5838980Z                     pass  # keep previous size
2022-06-06T06:53:00.5839267Z             # Table 5.5 page 406
2022-06-06T06:53:00.5839542Z             elif operator == b"Td":
2022-06-06T06:53:00.5839829Z                 tm_matrix[5] += float(operands[1])
2022-06-06T06:53:00.5840221Z                 tm_matrix[4] += float(operands[0])
2022-06-06T06:53:00.5840524Z             elif operator == b"Tm":
2022-06-06T06:53:00.5840780Z                 tm_matrix = [
2022-06-06T06:53:00.5841054Z                     float(operands[0]),
2022-06-06T06:53:00.5841342Z                     float(operands[1]),
2022-06-06T06:53:00.5841628Z                     float(operands[2]),
2022-06-06T06:53:00.5841894Z                     float(operands[3]),
2022-06-06T06:53:00.5842174Z                     float(operands[4]),
2022-06-06T06:53:00.5842518Z                     float(operands[5]),
2022-06-06T06:53:00.5842756Z                 ]
2022-06-06T06:53:00.5843011Z             elif operator == b"T*":
2022-06-06T06:53:00.5843387Z                 tm_matrix[5] -= TL
2022-06-06T06:53:00.5843648Z             elif operator == b"Tj":
2022-06-06T06:53:00.5843960Z                 text += operands[0].translate(cmap)
2022-06-06T06:53:00.5844235Z             else:
2022-06-06T06:53:00.5844462Z                 return None
2022-06-06T06:53:00.5844891Z             # process text changes due to positionchange: " "
2022-06-06T06:53:00.5845201Z             if tm_matrix[5] <= (
2022-06-06T06:53:00.5845619Z                 tm_prev[5] - font_size * sqrt(tm_matrix[2] ** 2 + tm_matrix[3] ** 2)
2022-06-06T06:53:00.5845979Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.5846320Z                 output += text + "\n"  # .translate(cmap) + "\n"
2022-06-06T06:53:00.5846604Z                 text = ""
2022-06-06T06:53:00.5846836Z             elif tm_matrix[4] >= (
2022-06-06T06:53:00.5847150Z                 tm_prev[4] + space_scale * _space_width * char_scale
2022-06-06T06:53:00.5847491Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.5847752Z                 text += " "
2022-06-06T06:53:00.5847992Z             return None
2022-06-06T06:53:00.5848286Z             # for clarity Operator in (b"g",b"G") : nothing to do
2022-06-06T06:53:00.5848595Z             # end of process_operation ######
2022-06-06T06:53:00.5848842Z     
2022-06-06T06:53:00.5849164Z         for operands, operator in content.operations:
2022-06-06T06:53:00.5849590Z             # multiple operators are defined in here ####
2022-06-06T06:53:00.5849948Z             if operator == b"'":
2022-06-06T06:53:00.5850229Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.5850534Z                 process_operation(b"Tj", operands)
2022-06-06T06:53:00.5850867Z             elif operator == b'"':
2022-06-06T06:53:00.5851148Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.5851448Z                 process_operation(b"TJ", operands)
2022-06-06T06:53:00.5851719Z             elif operator == b"TJ":
2022-06-06T06:53:00.5851987Z                 for op in operands[0]:
2022-06-06T06:53:00.5852266Z                     if isinstance(op, str):
2022-06-06T06:53:00.5852551Z                         process_operation(b"Tj", [op])
2022-06-06T06:53:00.5853089Z                     if isinstance(op, (int, float, NumberObject, FloatObject)):
2022-06-06T06:53:00.5853585Z                         process_operation(b"Td", [-op, 0.0])
2022-06-06T06:53:00.5853886Z             elif operator == b"Do":
2022-06-06T06:53:00.5854162Z                 output += text
2022-06-06T06:53:00.5854426Z                 if output != "":
2022-06-06T06:53:00.5854694Z                     output += "\n"
2022-06-06T06:53:00.5854930Z                 try:
2022-06-06T06:53:00.5855243Z                     xobj = self["/Resources"]["/XObject"]  # type: ignore
2022-06-06T06:53:00.5855607Z                     if xobj[operands[0]]["/Subtype"] != "/Image":
2022-06-06T06:53:00.5855982Z >                       text = self.extract_xform_text(xobj[operands[0]], space_width)
2022-06-06T06:53:00.5856221Z 
2022-06-06T06:53:00.5856339Z PyPDF2/_page.py:1403: 
2022-06-06T06:53:00.5856651Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2022-06-06T06:53:00.5856833Z 
2022-06-06T06:53:00.5857426Z self = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.5858490Z xform = {'/Type': '/XObject', '/Subtype': '/Form', '/FormType': 1, '/PTEX.FileName': './figures/spherical-coordinates.pdf', '/...ect(858, 0)}, '/XObject': {'/Fm17': IndirectObject(859, 0)}, '/ProcSet': ['/PDF', '/Text']}, '/Filter': '/FlateDecode'}
2022-06-06T06:53:00.5859069Z space_width = 200.0
2022-06-06T06:53:00.5859232Z 
2022-06-06T06:53:00.5859350Z     def extract_xform_text(
2022-06-06T06:53:00.5859691Z         self, xform: EncodedStreamObject, space_width: float = 200.0
2022-06-06T06:53:00.5860063Z     ) -> str:
2022-06-06T06:53:00.5860294Z         """
2022-06-06T06:53:00.5860651Z         Extraction tet from an XObject.
2022-06-06T06:53:00.5861092Z         space_width : float = force default space width (if not extracted from font (default 200)
2022-06-06T06:53:00.5861525Z     
2022-06-06T06:53:00.5861849Z         :return: a string object.
2022-06-06T06:53:00.5862292Z         """
2022-06-06T06:53:00.5862703Z >       return self._extract_text(xform, self.pdf, space_width, None)
2022-06-06T06:53:00.5862975Z 
2022-06-06T06:53:00.5863133Z PyPDF2/_page.py:1442: 
2022-06-06T06:53:00.5863462Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2022-06-06T06:53:00.5863698Z 
2022-06-06T06:53:00.5864273Z self = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.5865449Z obj = {'/Type': '/XObject', '/Subtype': '/Form', '/FormType': 1, '/PTEX.FileName': './figures/spherical-coordinates.pdf', '/...ect(858, 0)}, '/XObject': {'/Fm17': IndirectObject(859, 0)}, '/ProcSet': ['/PDF', '/Text']}, '/Filter': '/FlateDecode'}
2022-06-06T06:53:00.5866186Z pdf = <PyPDF2._reader.PdfReader object at 0x7f40f2a81240>, space_width = 200.0
2022-06-06T06:53:00.5866644Z content_key = None
2022-06-06T06:53:00.5866789Z 
2022-06-06T06:53:00.5866943Z     def _extract_text(
2022-06-06T06:53:00.5867301Z         self,
2022-06-06T06:53:00.5867694Z         obj: Any,
2022-06-06T06:53:00.5867955Z         pdf: Any,
2022-06-06T06:53:00.5868314Z         space_width: float = 200.0,
2022-06-06T06:53:00.5868723Z         content_key: Optional[str] = PG.CONTENTS,
2022-06-06T06:53:00.5869133Z     ) -> str:
2022-06-06T06:53:00.5869442Z         """
2022-06-06T06:53:00.5869880Z         Locate all text drawing commands, in the order they are provided in the
2022-06-06T06:53:00.5870343Z         content stream, and extract the text.  This works well for some PDF
2022-06-06T06:53:00.5870862Z         files, but poorly for others, depending on the generator used.  This will
2022-06-06T06:53:00.5871410Z         be refined in the future.  Do not rely on the order of text coming out of
2022-06-06T06:53:00.5872191Z         this function, as it will change if this function is made more
2022-06-06T06:53:00.5872554Z         sophisticated.
2022-06-06T06:53:00.5872872Z     
2022-06-06T06:53:00.5873295Z         :param float space_width: force default space width
2022-06-06T06:53:00.5873694Z                     (if not extracted from font (default 200)
2022-06-06T06:53:00.5874204Z         :param Optional[str] content_key: indicate the default key where to extract data
2022-06-06T06:53:00.5874720Z             None = the opbject; this allow to reuse the function on XObject
2022-06-06T06:53:00.5875082Z             default = "/Content"
2022-06-06T06:53:00.5875468Z         :return: a string object.
2022-06-06T06:53:00.5875815Z         """
2022-06-06T06:53:00.5876132Z         # code freely inspired from @twiggy ; see #711
2022-06-06T06:53:00.5876735Z         def buildCharMap(font_name: str) -> Tuple[str, float, Dict, Dict]:
2022-06-06T06:53:00.5877155Z             map_dict: Any = {}
2022-06-06T06:53:00.5877554Z             process_rg: bool = False
2022-06-06T06:53:00.5877890Z             process_char: bool = False
2022-06-06T06:53:00.5878267Z             encoding: List[str] = []
2022-06-06T06:53:00.5878844Z             ft: DictionaryObject = obj["/Resources"]["/Font"][font_name]  # type: ignore
2022-06-06T06:53:00.5879273Z             font_type: str = cast(str, ft["/Subtype"])
2022-06-06T06:53:00.5879784Z             sp_width: float = space_width * 2  # default value
2022-06-06T06:53:00.5880154Z             w = []
2022-06-06T06:53:00.5880422Z             # encoding
2022-06-06T06:53:00.5880752Z             space_code = 32
2022-06-06T06:53:00.5881149Z             if "/Encoding" in ft:
2022-06-06T06:53:00.5881556Z                 enc: Union(str, DictionaryObject) = ft["/Encoding"].get_object()  # type: ignore
2022-06-06T06:53:00.5882022Z                 if isinstance(enc, str):
2022-06-06T06:53:00.5882368Z                     try:
2022-06-06T06:53:00.5882874Z                         if enc in ("/Identity-H", "/Identity-V"):
2022-06-06T06:53:00.5883271Z                             encoding = []
2022-06-06T06:53:00.5883613Z                         else:
2022-06-06T06:53:00.5884015Z                             encoding = charset_encoding[enc].copy()
2022-06-06T06:53:00.5884371Z                     except Exception:
2022-06-06T06:53:00.5884758Z                         warnings.warn(
2022-06-06T06:53:00.5885234Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.5885617Z                             PdfReadWarning,
2022-06-06T06:53:00.5885964Z                         )
2022-06-06T06:53:00.5886378Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.5886850Z                 elif isinstance(enc, DictionaryObject) and "/BaseEncoding" in enc:
2022-06-06T06:53:00.5887848Z                     try:
2022-06-06T06:53:00.5888215Z                         encoding = charset_encoding[
2022-06-06T06:53:00.5888620Z                             cast(str, enc["/BaseEncoding"])
2022-06-06T06:53:00.5888970Z                         ].copy()
2022-06-06T06:53:00.5889324Z                     except Exception:
2022-06-06T06:53:00.6079364Z                         warnings.warn(
2022-06-06T06:53:00.6080112Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.6080517Z                             PdfReadWarning,
2022-06-06T06:53:00.6080767Z                         )
2022-06-06T06:53:00.6081101Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.6081423Z                 else:
2022-06-06T06:53:00.6081730Z                     encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.6082074Z                 if "/Differences" in enc:
2022-06-06T06:53:00.6082337Z                     x = 0
2022-06-06T06:53:00.6082574Z                     for o in cast(
2022-06-06T06:53:00.6082934Z                         DictionaryObject, cast(DictionaryObject, enc)["/Differences"]
2022-06-06T06:53:00.6083271Z                     ):
2022-06-06T06:53:00.6083572Z                         if isinstance(o, int):
2022-06-06T06:53:00.6083850Z                             x = o
2022-06-06T06:53:00.6084097Z                         else:
2022-06-06T06:53:00.6084777Z                             try:
2022-06-06T06:53:00.6085070Z                                 encoding[x] = adobe_glyphs[o]
2022-06-06T06:53:00.6085386Z                             except Exception:
2022-06-06T06:53:00.6085680Z                                 encoding[x] = o
2022-06-06T06:53:00.6085944Z                                 if o == " ":
2022-06-06T06:53:00.6086227Z                                     space_code = x
2022-06-06T06:53:00.6086500Z                             x += 1
2022-06-06T06:53:00.6086782Z             if "/ToUnicode" in ft:
2022-06-06T06:53:00.6087042Z                 cm: str = (
2022-06-06T06:53:00.6087357Z                     cast(DecodedStreamObject, ft["/ToUnicode"])
2022-06-06T06:53:00.6087654Z                     .get_data()
2022-06-06T06:53:00.6088178Z                     .decode("utf-8")
2022-06-06T06:53:00.6088427Z                 )
2022-06-06T06:53:00.6088809Z                 for l in (
2022-06-06T06:53:00.6089065Z                     cm.strip()
2022-06-06T06:53:00.6089328Z                     .replace("<", " ")
2022-06-06T06:53:00.6089599Z                     .replace(">", "")
2022-06-06T06:53:00.6089857Z                     .replace("[", " [ ")
2022-06-06T06:53:00.6090134Z                     .replace("]", " ] ")
2022-06-06T06:53:00.6090397Z                     .split("\n")
2022-06-06T06:53:00.6090622Z                 ):
2022-06-06T06:53:00.6090859Z                     if l == "":
2022-06-06T06:53:00.6091107Z                         continue
2022-06-06T06:53:00.6091371Z                     if "beginbfrange" in l:
2022-06-06T06:53:00.6091666Z                         process_rg = True
2022-06-06T06:53:00.6091954Z                     elif "endbfrange" in l:
2022-06-06T06:53:00.6092233Z                         process_rg = False
2022-06-06T06:53:00.6092528Z                     elif "beginbfchar" in l:
2022-06-06T06:53:00.6092826Z                         process_char = True
2022-06-06T06:53:00.6093105Z                     elif "endbfchar" in l:
2022-06-06T06:53:00.6093407Z                         process_char = False
2022-06-06T06:53:00.6093691Z                     elif process_rg:
2022-06-06T06:53:00.6093985Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.6094289Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.6094563Z                         b = int(lst[1], 16)
2022-06-06T06:53:00.6094826Z                         if lst[2] == "[":
2022-06-06T06:53:00.6095232Z                             # lst = lst[3:].trim(' []').split(' ')
2022-06-06T06:53:00.6095542Z                             for sq in lst[3:]:
2022-06-06T06:53:00.6095812Z                                 if "]":
2022-06-06T06:53:00.6096060Z                                     break
2022-06-06T06:53:00.6096501Z                                 map_dict[a] = unhexlify(sq).decode("utf-16-be")
2022-06-06T06:53:00.6096819Z                                 a += 1
2022-06-06T06:53:00.6097646Z                                 assert a > b
2022-06-06T06:53:00.6098083Z                         else:
2022-06-06T06:53:00.6098356Z                             c = int(lst[2], 16)
2022-06-06T06:53:00.6098718Z                             fmt = b"%%0%dX" % len(lst[2])
2022-06-06T06:53:00.6098990Z                             while a <= b:
2022-06-06T06:53:00.6099492Z                                 map_dict[a] = unhexlify(fmt % c).decode("utf-16-be")
2022-06-06T06:53:00.6099814Z                                 a += 1
2022-06-06T06:53:00.6100057Z                                 c += 1
2022-06-06T06:53:00.6100326Z                     elif process_char:
2022-06-06T06:53:00.6100638Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.6100924Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.6101248Z                         map_dict[a] = unhexlify("".join(lst[1:])).decode(
2022-06-06T06:53:00.6105780Z                             "utf-16-be"
2022-06-06T06:53:00.6106174Z                         )  # join is here as some cases where the code was split
2022-06-06T06:53:00.6106461Z     
2022-06-06T06:53:00.6106679Z                 # get
2022-06-06T06:53:00.6106936Z                 for a in map_dict:
2022-06-06T06:53:00.6107212Z                     if map_dict[a] == " ":
2022-06-06T06:53:00.6107485Z                         space_code = a
2022-06-06T06:53:00.6107718Z     
2022-06-06T06:53:00.6108393Z             # compute space width
2022-06-06T06:53:00.6108699Z             st: int = 0  # declaration for mypy
2022-06-06T06:53:00.6108968Z             if "/W" in ft:
2022-06-06T06:53:00.6109198Z                 if "/DW" in ft:
2022-06-06T06:53:00.6109484Z                     sp_width = cast(float, ft["/DW"])
2022-06-06T06:53:00.6109800Z                 w = [x for x in ft["/W"]]  # type: ignore
2022-06-06T06:53:00.6110069Z                 while len(w) > 0:
2022-06-06T06:53:00.6110310Z                     st = w[0]
2022-06-06T06:53:00.6110554Z                     second = w[1]
2022-06-06T06:53:00.6112019Z                     if isinstance(int, second):
2022-06-06T06:53:00.6112375Z                         if st <= space_code and space_code <= second:
2022-06-06T06:53:00.6112700Z                             sp_width = w[2]
2022-06-06T06:53:00.6112964Z                             break
2022-06-06T06:53:00.6113197Z                         w = w[3:]
2022-06-06T06:53:00.6113479Z                     if isinstance(list, second):
2022-06-06T06:53:00.6114072Z                         if st <= space_code and space_code <= st + len(second) - 1:
2022-06-06T06:53:00.6114529Z                             sp_width = second[space_code - st]
2022-06-06T06:53:00.6114826Z                         w = w[2:]
2022-06-06T06:53:00.6115068Z                     else:
2022-06-06T06:53:00.6115315Z                         warnings.warn(
2022-06-06T06:53:00.6115646Z                             "unknown widths : \n" + (ft["/W"]).__repr__(),
2022-06-06T06:53:00.6115977Z                             PdfReadWarning,
2022-06-06T06:53:00.6116230Z                         )
2022-06-06T06:53:00.6116474Z                         break
2022-06-06T06:53:00.6116726Z             if "/Widths" in ft:
2022-06-06T06:53:00.6117030Z                 w = [x for x in ft["/Widths"]]  # type: ignore
2022-06-06T06:53:00.6117294Z                 try:
2022-06-06T06:53:00.6117569Z                     st = cast(int, ft["/FirstChar"])
2022-06-06T06:53:00.6117885Z                     en: int = cast(int, ft["/LastChar"])
2022-06-06T06:53:00.6118197Z                     if st > space_code or en < space_code:
2022-06-06T06:53:00.6118520Z                         raise Exception("Not in range")
2022-06-06T06:53:00.6118918Z                     if w[space_code - st] == 0:
2022-06-06T06:53:00.6119220Z                         raise Exception("null width")
2022-06-06T06:53:00.6119613Z                     sp_width = w[space_code - st]
2022-06-06T06:53:00.6119906Z                 except Exception:
2022-06-06T06:53:00.6120239Z                     if "/FontDescriptor" in ft and "/MissingWidth" in cast(
2022-06-06T06:53:00.6120622Z                         DictionaryObject, ft["/FontDescriptor"]
2022-06-06T06:53:00.6121029Z                     ):
2022-06-06T06:53:00.6121359Z                         sp_width = ft["/FontDescriptor"]["/MissingWidth"]  # type: ignore
2022-06-06T06:53:00.6121674Z                     else:
2022-06-06T06:53:00.6121982Z                         # will consider width of char as avg(width)/2
2022-06-06T06:53:00.6122280Z                         m = 0
2022-06-06T06:53:00.6122513Z                         cpt = 0
2022-06-06T06:53:00.6122767Z                         for x in w:
2022-06-06T06:53:00.6123026Z                             if x > 0:
2022-06-06T06:53:00.6123265Z                                 m += x
2022-06-06T06:53:00.6123524Z                                 cpt += 1
2022-06-06T06:53:00.6123817Z                         sp_width = m / max(1, cpt) / 2
2022-06-06T06:53:00.6124062Z     
2022-06-06T06:53:00.6124276Z             return (
2022-06-06T06:53:00.6124521Z                 font_type,
2022-06-06T06:53:00.6124788Z                 float(sp_width / 2),
2022-06-06T06:53:00.6125071Z                 dict(zip(range(256), encoding)),
2022-06-06T06:53:00.6125363Z                 "".maketrans(map_dict),
2022-06-06T06:53:00.6125613Z             )
2022-06-06T06:53:00.6125812Z     
2022-06-06T06:53:00.6126029Z         text: str = ""
2022-06-06T06:53:00.6126276Z         output: str = ""
2022-06-06T06:53:00.6126606Z         cmaps: Dict[str, Tuple[str, float, Dict[int, str], Dict[int, str]]] = {}
2022-06-06T06:53:00.6127016Z         resources_dict = cast(DictionaryObject, obj["/Resources"])
2022-06-06T06:53:00.6127360Z         if "/Font" in resources_dict:
2022-06-06T06:53:00.6127696Z             for f in cast(DictionaryObject, resources_dict["/Font"]):
2022-06-06T06:53:00.6128044Z                 cmaps[f] = buildCharMap(f)
2022-06-06T06:53:00.6128354Z         cmap: Union[str, Dict[int, str]] = {}
2022-06-06T06:53:00.6128789Z         content = obj[content_key].get_object() if isinstance(content_key, str) else obj
2022-06-06T06:53:00.6129192Z         if not isinstance(content, ContentStream):
2022-06-06T06:53:00.6129559Z             content = ContentStream(content, pdf, "charmap")
2022-06-06T06:53:00.6129960Z         # Note: we check all strings are TextStringObjects.  ByteStringObjects
2022-06-06T06:53:00.6130492Z         # are strings where the byte->string encoding was unknown, so adding
2022-06-06T06:53:00.6130862Z         # them to the text here would be gibberish.
2022-06-06T06:53:00.6132569Z     
2022-06-06T06:53:00.6132847Z         tm_matrix: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6133178Z         tm_prev: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6133465Z         char_scale = 1.0
2022-06-06T06:53:00.6133709Z         space_scale = 1.0
2022-06-06T06:53:00.6134037Z         _space_width: float = 500.0  # will be set correctly at first Tf
2022-06-06T06:53:00.6134341Z         TL = 0.0
2022-06-06T06:53:00.6134619Z         font_size = 12.0  # init just in case of
2022-06-06T06:53:00.6134866Z     
2022-06-06T06:53:00.6135172Z         # tm_matrix: Tuple = tm_matrix, output: str = output, text: str = text,
2022-06-06T06:53:00.6135637Z         # char_scale: float = char_scale,space_scale : float = space_scale, _space_width: float = _space_width,
2022-06-06T06:53:00.6136066Z         # TL: float = TL, font_size: float = font_size, cmap = cmap
2022-06-06T06:53:00.6136349Z     
2022-06-06T06:53:00.6136828Z         def process_operation(operator: bytes, operands: List) -> None:
2022-06-06T06:53:00.6137286Z             nonlocal tm_matrix, tm_prev, output, text, char_scale, space_scale, _space_width, TL, font_size, cmap
2022-06-06T06:53:00.6137729Z             if tm_matrix[4] != 0 and tm_matrix[5] != 0:  # o reuse of the
2022-06-06T06:53:00.6138058Z                 tm_prev = list(tm_matrix)
2022-06-06T06:53:00.6138335Z             # Table 5.4 page 405
2022-06-06T06:53:00.6138592Z             if operator == b"BT":
2022-06-06T06:53:00.6138893Z                 tm_matrix = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6139403Z                 # tm_prev = tm_matrix
2022-06-06T06:53:00.6139657Z                 output += text
2022-06-06T06:53:00.6140646Z                 # based
2022-06-06T06:53:00.6141075Z                 # if output != "" and output[-1]!="\n":
2022-06-06T06:53:00.6141357Z                 #    output += "\n"
2022-06-06T06:53:00.6141613Z                 text = ""
2022-06-06T06:53:00.6141860Z                 return None
2022-06-06T06:53:00.6142115Z             elif operator == b"ET":
2022-06-06T06:53:00.6142383Z                 output += text
2022-06-06T06:53:00.6143049Z                 text = ""
2022-06-06T06:53:00.6143297Z             # Table 5.2 page 398
2022-06-06T06:53:00.6143572Z             elif operator == b"Tz":
2022-06-06T06:53:00.6143873Z                 char_scale = float(operands[0]) / 100.0
2022-06-06T06:53:00.6144172Z             elif operator == b"Tw":
2022-06-06T06:53:00.6144473Z                 space_scale = 1.0 + float(operands[0])
2022-06-06T06:53:00.6145079Z             elif operator == b"TL":
2022-06-06T06:53:00.6145370Z                 TL = float(operands[0])
2022-06-06T06:53:00.6146112Z             elif operator == b"Tf":
2022-06-06T06:53:00.6146381Z                 if text != "":
2022-06-06T06:53:00.6146678Z                     output += text  # .translate(cmap)
2022-06-06T06:53:00.6146945Z                 text = ""
2022-06-06T06:53:00.6147244Z                 _space_width = cmaps[operands[0]][1]
2022-06-06T06:53:00.6147528Z                 cmap = (
2022-06-06T06:53:00.6147786Z                     cmaps[operands[0]][2]
2022-06-06T06:53:00.6148094Z                     if len(cmaps[operands[0]][2]) > 0
2022-06-06T06:53:00.6148413Z                     else cmaps[operands[0]][3]
2022-06-06T06:53:00.6149036Z                 )  # type:ignore
2022-06-06T06:53:00.6149300Z                 try:
2022-06-06T06:53:00.6149581Z                     font_size = float(operands[1])
2022-06-06T06:53:00.6150050Z                 except Exception:
2022-06-06T06:53:00.6151041Z                     pass  # keep previous size
2022-06-06T06:53:00.6151341Z             # Table 5.5 page 406
2022-06-06T06:53:00.6157565Z             elif operator == b"Td":
2022-06-06T06:53:00.6157954Z                 tm_matrix[5] += float(operands[1])
2022-06-06T06:53:00.6158276Z                 tm_matrix[4] += float(operands[0])
2022-06-06T06:53:00.6158573Z             elif operator == b"Tm":
2022-06-06T06:53:00.6158826Z                 tm_matrix = [
2022-06-06T06:53:00.6159095Z                     float(operands[0]),
2022-06-06T06:53:00.6159377Z                     float(operands[1]),
2022-06-06T06:53:00.6159644Z                     float(operands[2]),
2022-06-06T06:53:00.6159921Z                     float(operands[3]),
2022-06-06T06:53:00.6160195Z                     float(operands[4]),
2022-06-06T06:53:00.6160453Z                     float(operands[5]),
2022-06-06T06:53:00.6160703Z                 ]
2022-06-06T06:53:00.6160962Z             elif operator == b"T*":
2022-06-06T06:53:00.6161399Z                 tm_matrix[5] -= TL
2022-06-06T06:53:00.6161671Z             elif operator == b"Tj":
2022-06-06T06:53:00.6161977Z                 text += operands[0].translate(cmap)
2022-06-06T06:53:00.6162249Z             else:
2022-06-06T06:53:00.6162473Z                 return None
2022-06-06T06:53:00.6162797Z             # process text changes due to positionchange: " "
2022-06-06T06:53:00.6163116Z             if tm_matrix[5] <= (
2022-06-06T06:53:00.6163564Z                 tm_prev[5] - font_size * sqrt(tm_matrix[2] ** 2 + tm_matrix[3] ** 2)
2022-06-06T06:53:00.6163943Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.6164294Z                 output += text + "\n"  # .translate(cmap) + "\n"
2022-06-06T06:53:00.6164579Z                 text = ""
2022-06-06T06:53:00.6164837Z             elif tm_matrix[4] >= (
2022-06-06T06:53:00.6165163Z                 tm_prev[4] + space_scale * _space_width * char_scale
2022-06-06T06:53:00.6165525Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.6165994Z                 text += " "
2022-06-06T06:53:00.6166243Z             return None
2022-06-06T06:53:00.6166554Z             # for clarity Operator in (b"g",b"G") : nothing to do
2022-06-06T06:53:00.6166883Z             # end of process_operation ######
2022-06-06T06:53:00.6167146Z     
2022-06-06T06:53:00.6167439Z         for operands, operator in content.operations:
2022-06-06T06:53:00.6167792Z             # multiple operators are defined in here ####
2022-06-06T06:53:00.6168174Z             if operator == b"'":
2022-06-06T06:53:00.6168470Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.6168777Z                 process_operation(b"Tj", operands)
2022-06-06T06:53:00.6169141Z             elif operator == b'"':
2022-06-06T06:53:00.6169437Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.6169744Z                 process_operation(b"TJ", operands)
2022-06-06T06:53:00.6170050Z             elif operator == b"TJ":
2022-06-06T06:53:00.6170334Z                 for op in operands[0]:
2022-06-06T06:53:00.6170632Z                     if isinstance(op, str):
2022-06-06T06:53:00.6170938Z                         process_operation(b"Tj", [op])
2022-06-06T06:53:00.6171312Z                     if isinstance(op, (int, float, NumberObject, FloatObject)):
2022-06-06T06:53:00.6171792Z                         process_operation(b"Td", [-op, 0.0])
2022-06-06T06:53:00.6172090Z             elif operator == b"Do":
2022-06-06T06:53:00.6172362Z                 output += text
2022-06-06T06:53:00.6172625Z                 if output != "":
2022-06-06T06:53:00.6172874Z                     output += "\n"
2022-06-06T06:53:00.6173120Z                 try:
2022-06-06T06:53:00.6173426Z                     xobj = self["/Resources"]["/XObject"]  # type: ignore
2022-06-06T06:53:00.6173773Z                     if xobj[operands[0]]["/Subtype"] != "/Image":
2022-06-06T06:53:00.6174239Z                         text = self.extract_xform_text(xobj[operands[0]], space_width)
2022-06-06T06:53:00.6174587Z                         output += text
2022-06-06T06:53:00.6174863Z                 except Exception:
2022-06-06T06:53:00.6175122Z >                   warnings.warn(
2022-06-06T06:53:00.6175466Z                         f" impossible to decode XFormObject {operands[0]}",
2022-06-06T06:53:00.6175804Z                         PdfReadWarning,
2022-06-06T06:53:00.6176048Z                     )
2022-06-06T06:53:00.6176420Z E                   PyPDF2.errors.PdfReadWarning:  impossible to decode XFormObject /Fm17
2022-06-06T06:53:00.6176699Z 
2022-06-06T06:53:00.6176837Z PyPDF2/_page.py:1406: PdfReadWarning
2022-06-06T06:53:00.6177024Z 
2022-06-06T06:53:00.6177219Z During handling of the above exception, another exception occurred:
2022-06-06T06:53:00.6177438Z 
2022-06-06T06:53:00.6177683Z benchmark = <pytest_benchmark.fixture.BenchmarkFixture object at 0x7f40f2a830d0>
2022-06-06T06:53:00.6177958Z 
2022-06-06T06:53:00.6178101Z     def test_text_extraction(benchmark):
2022-06-06T06:53:00.6178614Z         file = os.path.join(SAMPLE_ROOT, "009-pdflatex-geotopo/GeoTopo.pdf")
2022-06-06T06:53:00.6178983Z >       benchmark(text_extraction, file)
2022-06-06T06:53:00.6179163Z 
2022-06-06T06:53:00.6179270Z tests/bench.py:130: 
2022-06-06T06:53:00.6179560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2022-06-06T06:53:00.6180161Z /opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pytest_benchmark/fixture.py:127: in __call__
2022-06-06T06:53:00.6180605Z     return self._raw(function_to_benchmark, *args, **kwargs)
2022-06-06T06:53:00.6181205Z /opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pytest_benchmark/fixture.py:149: in _raw
2022-06-06T06:53:00.6181682Z     duration, iterations, loops_range = self._calibrate_timer(runner)
2022-06-06T06:53:00.6182323Z /opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pytest_benchmark/fixture.py:277: in _calibrate_timer
2022-06-06T06:53:00.6182752Z     duration = runner(loops_range)
2022-06-06T06:53:00.6183397Z /opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pytest_benchmark/fixture.py:92: in runner
2022-06-06T06:53:00.6183816Z     function_to_benchmark(*args, **kwargs)
2022-06-06T06:53:00.6184110Z tests/bench.py:124: in text_extraction
2022-06-06T06:53:00.6184404Z     text += page.extract_text()
2022-06-06T06:53:00.6184701Z PyPDF2/_page.py:1431: in extract_text
2022-06-06T06:53:00.6185061Z     return self._extract_text(self, self.pdf, space_width, PG.CONTENTS)
2022-06-06T06:53:00.6185416Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2022-06-06T06:53:00.6185598Z 
2022-06-06T06:53:00.6186129Z self = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.6186977Z obj = {'/Type': '/Page', '/Contents': IndirectObject(846, 0), '/Resources': IndirectObject(844, 0), '/MediaBox': [0, 0, 595.276, 841.89], '/Parent': IndirectObject(785, 0)}
2022-06-06T06:53:00.6187500Z pdf = <PyPDF2._reader.PdfReader object at 0x7f40f2a81240>, space_width = 200.0
2022-06-06T06:53:00.6187904Z content_key = '/Contents'
2022-06-06T06:53:00.6188067Z 
2022-06-06T06:53:00.6188174Z     def _extract_text(
2022-06-06T06:53:00.6188410Z         self,
2022-06-06T06:53:00.6188618Z         obj: Any,
2022-06-06T06:53:00.6188848Z         pdf: Any,
2022-06-06T06:53:00.6189108Z         space_width: float = 200.0,
2022-06-06T06:53:00.6189409Z         content_key: Optional[str] = PG.CONTENTS,
2022-06-06T06:53:00.6189730Z     ) -> str:
2022-06-06T06:53:00.6189951Z         """
2022-06-06T06:53:00.6190271Z         Locate all text drawing commands, in the order they are provided in the
2022-06-06T06:53:00.6190703Z         content stream, and extract the text.  This works well for some PDF
2022-06-06T06:53:00.6191132Z         files, but poorly for others, depending on the generator used.  This will
2022-06-06T06:53:00.6191930Z         be refined in the future.  Do not rely on the order of text coming out of
2022-06-06T06:53:00.6192362Z         this function, as it will change if this function is made more
2022-06-06T06:53:00.6192686Z         sophisticated.
2022-06-06T06:53:00.6192918Z     
2022-06-06T06:53:00.6193200Z         :param float space_width: force default space width
2022-06-06T06:53:00.6194627Z                     (if not extracted from font (default 200)
2022-06-06T06:53:00.6195246Z         :param Optional[str] content_key: indicate the default key where to extract data
2022-06-06T06:53:00.6195843Z             None = the opbject; this allow to reuse the function on XObject
2022-06-06T06:53:00.6196307Z             default = "/Content"
2022-06-06T06:53:00.6196685Z         :return: a string object.
2022-06-06T06:53:00.6197011Z         """
2022-06-06T06:53:00.6197407Z         # code freely inspired from @twiggy ; see #711
2022-06-06T06:53:00.6198255Z         def buildCharMap(font_name: str) -> Tuple[str, float, Dict, Dict]:
2022-06-06T06:53:00.6198711Z             map_dict: Any = {}
2022-06-06T06:53:00.6199099Z             process_rg: bool = False
2022-06-06T06:53:00.6199500Z             process_char: bool = False
2022-06-06T06:53:00.6199890Z             encoding: List[str] = []
2022-06-06T06:53:00.6200383Z             ft: DictionaryObject = obj["/Resources"]["/Font"][font_name]  # type: ignore
2022-06-06T06:53:00.6200917Z             font_type: str = cast(str, ft["/Subtype"])
2022-06-06T06:53:00.6201395Z             sp_width: float = space_width * 2  # default value
2022-06-06T06:53:00.6201518Z             w = []
2022-06-06T06:53:00.6201636Z             # encoding
2022-06-06T06:53:00.6201779Z             space_code = 32
2022-06-06T06:53:00.6201934Z             if "/Encoding" in ft:
2022-06-06T06:53:00.6202232Z                 enc: Union(str, DictionaryObject) = ft["/Encoding"].get_object()  # type: ignore
2022-06-06T06:53:00.6202409Z                 if isinstance(enc, str):
2022-06-06T06:53:00.6202549Z                     try:
2022-06-06T06:53:00.6202922Z                         if enc in ("/Identity-H", "/Identity-V"):
2022-06-06T06:53:00.6203454Z                             encoding = []
2022-06-06T06:53:00.6203594Z                         else:
2022-06-06T06:53:00.6203849Z                             encoding = charset_encoding[enc].copy()
2022-06-06T06:53:00.6204014Z                     except Exception:
2022-06-06T06:53:00.6204176Z                         warnings.warn(
2022-06-06T06:53:00.6204438Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.6204623Z                             PdfReadWarning,
2022-06-06T06:53:00.6204741Z                         )
2022-06-06T06:53:00.6205008Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.6205291Z                 elif isinstance(enc, DictionaryObject) and "/BaseEncoding" in enc:
2022-06-06T06:53:00.6205424Z                     try:
2022-06-06T06:53:00.6205625Z                         encoding = charset_encoding[
2022-06-06T06:53:00.6205835Z                             cast(str, enc["/BaseEncoding"])
2022-06-06T06:53:00.6205982Z                         ].copy()
2022-06-06T06:53:00.6206144Z                     except Exception:
2022-06-06T06:53:00.6206289Z                         warnings.warn(
2022-06-06T06:53:00.6206548Z                             f"Advanced encoding {encoding} not implemented yet",
2022-06-06T06:53:00.6206726Z                             PdfReadWarning,
2022-06-06T06:53:00.6206859Z                         )
2022-06-06T06:53:00.6207122Z                         encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.6207250Z                 else:
2022-06-06T06:53:00.6207507Z                     encoding = charset_encoding["/StandardCoding"].copy()
2022-06-06T06:53:00.6207667Z                 if "/Differences" in enc:
2022-06-06T06:53:00.6207798Z                     x = 0
2022-06-06T06:53:00.6207946Z                     for o in cast(
2022-06-06T06:53:00.6208340Z                         DictionaryObject, cast(DictionaryObject, enc)["/Differences"]
2022-06-06T06:53:00.6208485Z                     ):
2022-06-06T06:53:00.6208673Z                         if isinstance(o, int):
2022-06-06T06:53:00.6208815Z                             x = o
2022-06-06T06:53:00.6208952Z                         else:
2022-06-06T06:53:00.6209080Z                             try:
2022-06-06T06:53:00.6209290Z                                 encoding[x] = adobe_glyphs[o]
2022-06-06T06:53:00.6209467Z                             except Exception:
2022-06-06T06:53:00.6209643Z                                 encoding[x] = o
2022-06-06T06:53:00.6209806Z                                 if o == " ":
2022-06-06T06:53:00.6209982Z                                     space_code = x
2022-06-06T06:53:00.6210127Z                             x += 1
2022-06-06T06:53:00.6210269Z             if "/ToUnicode" in ft:
2022-06-06T06:53:00.6210405Z                 cm: str = (
2022-06-06T06:53:00.6210653Z                     cast(DecodedStreamObject, ft["/ToUnicode"])
2022-06-06T06:53:00.6210802Z                     .get_data()
2022-06-06T06:53:00.6211089Z                     .decode("utf-8")
2022-06-06T06:53:00.6211211Z                 )
2022-06-06T06:53:00.6211349Z                 for l in (
2022-06-06T06:53:00.6211477Z                     cm.strip()
2022-06-06T06:53:00.6211637Z                     .replace("<", " ")
2022-06-06T06:53:00.6211793Z                     .replace(">", "")
2022-06-06T06:53:00.6211955Z                     .replace("[", " [ ")
2022-06-06T06:53:00.6212115Z                     .replace("]", " ] ")
2022-06-06T06:53:00.6212260Z                     .split("\n")
2022-06-06T06:53:00.6212383Z                 ):
2022-06-06T06:53:00.6212510Z                     if l == "":
2022-06-06T06:53:00.6212651Z                         continue
2022-06-06T06:53:00.6212831Z                     if "beginbfrange" in l:
2022-06-06T06:53:00.6213002Z                         process_rg = True
2022-06-06T06:53:00.6213183Z                     elif "endbfrange" in l:
2022-06-06T06:53:00.6213443Z                         process_rg = False
2022-06-06T06:53:00.6213622Z                     elif "beginbfchar" in l:
2022-06-06T06:53:00.6213783Z                         process_char = True
2022-06-06T06:53:00.6213958Z                     elif "endbfchar" in l:
2022-06-06T06:53:00.6214133Z                         process_char = False
2022-06-06T06:53:00.6214292Z                     elif process_rg:
2022-06-06T06:53:00.6214499Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.6214664Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.6214827Z                         b = int(lst[1], 16)
2022-06-06T06:53:00.6214984Z                         if lst[2] == "[":
2022-06-06T06:53:00.6215322Z                             # lst = lst[3:].trim(' []').split(' ')
2022-06-06T06:53:00.6215496Z                             for sq in lst[3:]:
2022-06-06T06:53:00.6215653Z                                 if "]":
2022-06-06T06:53:00.6215807Z                                     break
2022-06-06T06:53:00.6216218Z                                 map_dict[a] = unhexlify(sq).decode("utf-16-be")
2022-06-06T06:53:00.6216364Z                                 a += 1
2022-06-06T06:53:00.6216530Z                                 assert a > b
2022-06-06T06:53:00.6216652Z                         else:
2022-06-06T06:53:00.6216825Z                             c = int(lst[2], 16)
2022-06-06T06:53:00.6217012Z                             fmt = b"%%0%dX" % len(lst[2])
2022-06-06T06:53:00.6217171Z                             while a <= b:
2022-06-06T06:53:00.6217583Z                                 map_dict[a] = unhexlify(fmt % c).decode("utf-16-be")
2022-06-06T06:53:00.6217727Z                                 a += 1
2022-06-06T06:53:00.6217968Z                                 c += 1
2022-06-06T06:53:00.6218074Z                     elif process_char:
2022-06-06T06:53:00.6218285Z                         lst = [x for x in l.split(" ") if x]
2022-06-06T06:53:00.6218416Z                         a = int(lst[0], 16)
2022-06-06T06:53:00.6218591Z                         map_dict[a] = unhexlify("".join(lst[1:])).decode(
2022-06-06T06:53:00.6218783Z                             "utf-16-be"
2022-06-06T06:53:00.6218964Z                         )  # join is here as some cases where the code was split
2022-06-06T06:53:00.6219047Z     
2022-06-06T06:53:00.6219143Z                 # get
2022-06-06T06:53:00.6219244Z                 for a in map_dict:
2022-06-06T06:53:00.6219369Z                     if map_dict[a] == " ":
2022-06-06T06:53:00.6219485Z                         space_code = a
2022-06-06T06:53:00.6219568Z     
2022-06-06T06:53:00.6219685Z             # compute space width
2022-06-06T06:53:00.6219824Z             st: int = 0  # declaration for mypy
2022-06-06T06:53:00.6219927Z             if "/W" in ft:
2022-06-06T06:53:00.6220019Z                 if "/DW" in ft:
2022-06-06T06:53:00.6220167Z                     sp_width = cast(float, ft["/DW"])
2022-06-06T06:53:00.6220319Z                 w = [x for x in ft["/W"]]  # type: ignore
2022-06-06T06:53:00.6220433Z                 while len(w) > 0:
2022-06-06T06:53:00.6220536Z                     st = w[0]
2022-06-06T06:53:00.6220648Z                     second = w[1]
2022-06-06T06:53:00.6220789Z                     if isinstance(int, second):
2022-06-06T06:53:00.6220940Z                         if st <= space_code and space_code <= second:
2022-06-06T06:53:00.6221064Z                             sp_width = w[2]
2022-06-06T06:53:00.6221166Z                             break
2022-06-06T06:53:00.6221269Z                         w = w[3:]
2022-06-06T06:53:00.6221411Z                     if isinstance(list, second):
2022-06-06T06:53:00.6221716Z                         if st <= space_code and space_code <= st + len(second) - 1:
2022-06-06T06:53:00.6221969Z                             sp_width = second[space_code - st]
2022-06-06T06:53:00.6222073Z                         w = w[2:]
2022-06-06T06:53:00.6222160Z                     else:
2022-06-06T06:53:00.6222280Z                         warnings.warn(
2022-06-06T06:53:00.6222518Z                             "unknown widths : \n" + (ft["/W"]).__repr__(),
2022-06-06T06:53:00.6222650Z                             PdfReadWarning,
2022-06-06T06:53:00.6222746Z                         )
2022-06-06T06:53:00.6222847Z                         break
2022-06-06T06:53:00.6222958Z             if "/Widths" in ft:
2022-06-06T06:53:00.6223098Z                 w = [x for x in ft["/Widths"]]  # type: ignore
2022-06-06T06:53:00.6223194Z                 try:
2022-06-06T06:53:00.6223340Z                     st = cast(int, ft["/FirstChar"])
2022-06-06T06:53:00.6223491Z                     en: int = cast(int, ft["/LastChar"])
2022-06-06T06:53:00.6223645Z                     if st > space_code or en < space_code:
2022-06-06T06:53:00.6223793Z                         raise Exception("Not in range")
2022-06-06T06:53:00.6224017Z                     if w[space_code - st] == 0:
2022-06-06T06:53:00.6224152Z                         raise Exception("null width")
2022-06-06T06:53:00.6224376Z                     sp_width = w[space_code - st]
2022-06-06T06:53:00.6224493Z                 except Exception:
2022-06-06T06:53:00.6224680Z                     if "/FontDescriptor" in ft and "/MissingWidth" in cast(
2022-06-06T06:53:00.6224854Z                         DictionaryObject, ft["/FontDescriptor"]
2022-06-06T06:53:00.6224949Z                     ):
2022-06-06T06:53:00.6225149Z                         sp_width = ft["/FontDescriptor"]["/MissingWidth"]  # type: ignore
2022-06-06T06:53:00.6225248Z                     else:
2022-06-06T06:53:00.6225401Z                         # will consider width of char as avg(width)/2
2022-06-06T06:53:00.6225504Z                         m = 0
2022-06-06T06:53:00.6225610Z                         cpt = 0
2022-06-06T06:53:00.6225720Z                         for x in w:
2022-06-06T06:53:00.6225829Z                             if x > 0:
2022-06-06T06:53:00.6225998Z                                 m += x
2022-06-06T06:53:00.6226119Z                                 cpt += 1
2022-06-06T06:53:00.6226253Z                         sp_width = m / max(1, cpt) / 2
2022-06-06T06:53:00.6226338Z     
2022-06-06T06:53:00.6226433Z             return (
2022-06-06T06:53:00.6226539Z                 font_type,
2022-06-06T06:53:00.6226659Z                 float(sp_width / 2),
2022-06-06T06:53:00.6226800Z                 dict(zip(range(256), encoding)),
2022-06-06T06:53:00.6226920Z                 "".maketrans(map_dict),
2022-06-06T06:53:00.6226994Z             )
2022-06-06T06:53:00.6227076Z     
2022-06-06T06:53:00.6227181Z         text: str = ""
2022-06-06T06:53:00.6227291Z         output: str = ""
2022-06-06T06:53:00.6227496Z         cmaps: Dict[str, Tuple[str, float, Dict[int, str], Dict[int, str]]] = {}
2022-06-06T06:53:00.6227685Z         resources_dict = cast(DictionaryObject, obj["/Resources"])
2022-06-06T06:53:00.6227815Z         if "/Font" in resources_dict:
2022-06-06T06:53:00.6227990Z             for f in cast(DictionaryObject, resources_dict["/Font"]):
2022-06-06T06:53:00.6228128Z                 cmaps[f] = buildCharMap(f)
2022-06-06T06:53:00.6228271Z         cmap: Union[str, Dict[int, str]] = {}
2022-06-06T06:53:00.6228480Z         content = obj[content_key].get_object() if isinstance(content_key, str) else obj
2022-06-06T06:53:00.6228639Z         if not isinstance(content, ContentStream):
2022-06-06T06:53:00.6228813Z             content = ContentStream(content, pdf, "charmap")
2022-06-06T06:53:00.6229023Z         # Note: we check all strings are TextStringObjects.  ByteStringObjects
2022-06-06T06:53:00.6229333Z         # are strings where the byte->string encoding was unknown, so adding
2022-06-06T06:53:00.6229472Z         # them to the text here would be gibberish.
2022-06-06T06:53:00.6229557Z     
2022-06-06T06:53:00.6229714Z         tm_matrix: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6229865Z         tm_prev: List[float] = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6229974Z         char_scale = 1.0
2022-06-06T06:53:00.6230163Z         space_scale = 1.0
2022-06-06T06:53:00.6230342Z         _space_width: float = 500.0  # will be set correctly at first Tf
2022-06-06T06:53:00.6230420Z         TL = 0.0
2022-06-06T06:53:00.6230560Z         font_size = 12.0  # init just in case of
2022-06-06T06:53:00.6230643Z     
2022-06-06T06:53:00.6230839Z         # tm_matrix: Tuple = tm_matrix, output: str = output, text: str = text,
2022-06-06T06:53:00.6231089Z         # char_scale: float = char_scale,space_scale : float = space_scale, _space_width: float = _space_width,
2022-06-06T06:53:00.6231264Z         # TL: float = TL, font_size: float = font_size, cmap = cmap
2022-06-06T06:53:00.6231348Z     
2022-06-06T06:53:00.6231889Z         def process_operation(operator: bytes, operands: List) -> None:
2022-06-06T06:53:00.6232129Z             nonlocal tm_matrix, tm_prev, output, text, char_scale, space_scale, _space_width, TL, font_size, cmap
2022-06-06T06:53:00.6232306Z             if tm_matrix[4] != 0 and tm_matrix[5] != 0:  # o reuse of the
2022-06-06T06:53:00.6232441Z                 tm_prev = list(tm_matrix)
2022-06-06T06:53:00.6232558Z             # Table 5.4 page 405
2022-06-06T06:53:00.6232681Z             if operator == b"BT":
2022-06-06T06:53:00.6232823Z                 tm_matrix = [1.0, 0.0, 0.0, 1.0, 0.0, 0.0]
2022-06-06T06:53:00.6232943Z                 # tm_prev = tm_matrix
2022-06-06T06:53:00.6233040Z                 output += text
2022-06-06T06:53:00.6233140Z                 # based
2022-06-06T06:53:00.6233383Z                 # if output != "" and output[-1]!="\n":
2022-06-06T06:53:00.6233496Z                 #    output += "\n"
2022-06-06T06:53:00.6233598Z                 text = ""
2022-06-06T06:53:00.6233702Z                 return None
2022-06-06T06:53:00.6233822Z             elif operator == b"ET":
2022-06-06T06:53:00.6233932Z                 output += text
2022-06-06T06:53:00.6234020Z                 text = ""
2022-06-06T06:53:00.6234135Z             # Table 5.2 page 398
2022-06-06T06:53:00.6234357Z             elif operator == b"Tz":
2022-06-06T06:53:00.6234521Z                 char_scale = float(operands[0]) / 100.0
2022-06-06T06:53:00.6234641Z             elif operator == b"Tw":
2022-06-06T06:53:00.6234791Z                 space_scale = 1.0 + float(operands[0])
2022-06-06T06:53:00.6234911Z             elif operator == b"TL":
2022-06-06T06:53:00.6235018Z                 TL = float(operands[0])
2022-06-06T06:53:00.6235138Z             elif operator == b"Tf":
2022-06-06T06:53:00.6235245Z                 if text != "":
2022-06-06T06:53:00.6235394Z                     output += text  # .translate(cmap)
2022-06-06T06:53:00.6235498Z                 text = ""
2022-06-06T06:53:00.6235653Z                 _space_width = cmaps[operands[0]][1]
2022-06-06T06:53:00.6235757Z                 cmap = (
2022-06-06T06:53:00.6235872Z                     cmaps[operands[0]][2]
2022-06-06T06:53:00.6236020Z                     if len(cmaps[operands[0]][2]) > 0
2022-06-06T06:53:00.6236199Z                     else cmaps[operands[0]][3]
2022-06-06T06:53:00.6236312Z                 )  # type:ignore
2022-06-06T06:53:00.6236405Z                 try:
2022-06-06T06:53:00.6236548Z                     font_size = float(operands[1])
2022-06-06T06:53:00.6236668Z                 except Exception:
2022-06-06T06:53:00.6236794Z                     pass  # keep previous size
2022-06-06T06:53:00.6236905Z             # Table 5.5 page 406
2022-06-06T06:53:00.6237020Z             elif operator == b"Td":
2022-06-06T06:53:00.6237162Z                 tm_matrix[5] += float(operands[1])
2022-06-06T06:53:00.6237302Z                 tm_matrix[4] += float(operands[0])
2022-06-06T06:53:00.6237419Z             elif operator == b"Tm":
2022-06-06T06:53:00.6237525Z                 tm_matrix = [
2022-06-06T06:53:00.6237637Z                     float(operands[0]),
2022-06-06T06:53:00.6237761Z                     float(operands[1]),
2022-06-06T06:53:00.6237882Z                     float(operands[2]),
2022-06-06T06:53:00.6238003Z                     float(operands[3]),
2022-06-06T06:53:00.6238222Z                     float(operands[4]),
2022-06-06T06:53:00.6238335Z                     float(operands[5]),
2022-06-06T06:53:00.6238424Z                 ]
2022-06-06T06:53:00.6238529Z             elif operator == b"T*":
2022-06-06T06:53:00.6238730Z                 tm_matrix[5] -= TL
2022-06-06T06:53:00.6238850Z             elif operator == b"Tj":
2022-06-06T06:53:00.6239002Z                 text += operands[0].translate(cmap)
2022-06-06T06:53:00.6239093Z             else:
2022-06-06T06:53:00.6239199Z                 return None
2022-06-06T06:53:00.6239377Z             # process text changes due to positionchange: " "
2022-06-06T06:53:00.6239495Z             if tm_matrix[5] <= (
2022-06-06T06:53:00.6239789Z                 tm_prev[5] - font_size * sqrt(tm_matrix[2] ** 2 + tm_matrix[3] ** 2)
2022-06-06T06:53:00.6239951Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.6240119Z                 output += text + "\n"  # .translate(cmap) + "\n"
2022-06-06T06:53:00.6240221Z                 text = ""
2022-06-06T06:53:00.6240341Z             elif tm_matrix[4] >= (
2022-06-06T06:53:00.6240511Z                 tm_prev[4] + space_scale * _space_width * char_scale
2022-06-06T06:53:00.6240676Z             ):  # it means that we are moving down by one line
2022-06-06T06:53:00.6240763Z                 text += " "
2022-06-06T06:53:00.6240863Z             return None
2022-06-06T06:53:00.6241031Z             # for clarity Operator in (b"g",b"G") : nothing to do
2022-06-06T06:53:00.6241175Z             # end of process_operation ######
2022-06-06T06:53:00.6241257Z     
2022-06-06T06:53:00.6241429Z         for operands, operator in content.operations:
2022-06-06T06:53:00.6241594Z             # multiple operators are defined in here ####
2022-06-06T06:53:00.6241762Z             if operator == b"'":
2022-06-06T06:53:00.6241904Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.6242160Z                 process_operation(b"Tj", operands)
2022-06-06T06:53:00.6242356Z             elif operator == b'"':
2022-06-06T06:53:00.6242500Z                 process_operation(b"T*", [])
2022-06-06T06:53:00.6242651Z                 process_operation(b"TJ", operands)
2022-06-06T06:53:00.6242774Z             elif operator == b"TJ":
2022-06-06T06:53:00.6242896Z                 for op in operands[0]:
2022-06-06T06:53:00.6243018Z                     if isinstance(op, str):
2022-06-06T06:53:00.6243172Z                         process_operation(b"Tj", [op])
2022-06-06T06:53:00.6243371Z                     if isinstance(op, (int, float, NumberObject, FloatObject)):
2022-06-06T06:53:00.6243629Z                         process_operation(b"Td", [-op, 0.0])
2022-06-06T06:53:00.6243749Z             elif operator == b"Do":
2022-06-06T06:53:00.6243858Z                 output += text
2022-06-06T06:53:00.6243970Z                 if output != "":
2022-06-06T06:53:00.6244069Z                     output += "\n"
2022-06-06T06:53:00.6244166Z                 try:
2022-06-06T06:53:00.6244343Z                     xobj = self["/Resources"]["/XObject"]  # type: ignore
2022-06-06T06:53:00.6244509Z                     if xobj[operands[0]]["/Subtype"] != "/Image":
2022-06-06T06:53:00.6244704Z                         text = self.extract_xform_text(xobj[operands[0]], space_width)
2022-06-06T06:53:00.6244822Z                         output += text
2022-06-06T06:53:00.6244937Z                 except Exception:
2022-06-06T06:53:00.6245051Z >                   warnings.warn(
2022-06-06T06:53:00.6245226Z                         f" impossible to decode XFormObject {operands[0]}",
2022-06-06T06:53:00.6245350Z                         PdfReadWarning,
2022-06-06T06:53:00.6245444Z                     )
2022-06-06T06:53:00.6245684Z E                   PyPDF2.errors.PdfReadWarning:  impossible to decode XFormObject /Im11
2022-06-06T06:53:00.6245698Z 
2022-06-06T06:53:00.6245836Z PyPDF2/_page.py:1406: PdfReadWarning
2022-06-06T06:53:00.6245846Z 
2022-06-06T06:53:00.6246527Z ----------------------------------------------------------------------------------------- benchmark: 2 tests ----------------------------------------------------------------------------------------
2022-06-06T06:53:00.6246875Z Name (time in ms)               Min                   Max                  Mean             StdDev                Median                IQR            Outliers     OPS            Rounds  Iterations
2022-06-06T06:53:00.6247535Z -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022-06-06T06:53:00.6247746Z test_merge                 112.5091 (1.0)        137.9169 (1.0)        117.4017 (1.0)       7.8434 (1.0)        115.8344 (1.0)       2.7261 (1.0)           1;1  8.5178 (1.0)           9           1
2022-06-06T06:53:00.6247979Z test_page_operations     1,834.3776 (16.30)    1,874.4596 (13.59)    1,860.7465 (15.85)    15.8130 (2.02)     1,864.0031 (16.09)    18.3762 (6.74)          1;0  0.5374 (0.06)          5           1
2022-06-06T06:53:00.6248639Z -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022-06-06T06:53:00.6248650Z 
2022-06-06T06:53:00.6248722Z Legend:
2022-06-06T06:53:00.6248976Z   Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
2022-06-06T06:53:00.6249140Z   OPS: Operations Per Second, computed as 1 / Mean
2022-06-06T06:53:00.6249306Z =========================== short test summary info ============================
2022-06-06T06:53:00.6249695Z FAILED tests/bench.py::test_text_extraction - PyPDF2.errors.PdfReadWarning:  ...
2022-06-06T06:53:00.6249854Z ========================= 1 failed, 2 passed in 19.26s =========================
2022-06-06T06:53:00.6794397Z ##[error]Process completed with exit code 1.
2022-06-06T06:53:00.6861229Z Post job cleanup.
2022-06-06T06:53:00.8315870Z [command]/usr/bin/git version
2022-06-06T06:53:00.8410198Z git version 2.36.1
2022-06-06T06:53:00.8483616Z Temporarily overriding HOME='/home/runner/work/_temp/b284eda0-7c40-4833-8531-30acf4bff35d' before making global git config changes
2022-06-06T06:53:00.8487998Z Adding repository directory to the temporary git global config as a safe directory
2022-06-06T06:53:00.8495754Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/PyPDF2/PyPDF2
2022-06-06T06:53:00.8587253Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-06T06:53:00.8638590Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-06T06:53:00.8957639Z Entering 'sample-files'
2022-06-06T06:53:00.9013518Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-06T06:53:00.9050109Z http.https://github.com/.extraheader
2022-06-06T06:53:00.9063839Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2022-06-06T06:53:00.9114995Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-06T06:53:00.9427089Z Entering 'sample-files'
2022-06-06T06:53:00.9427627Z http.https://github.com/.extraheader
2022-06-06T06:53:00.9713026Z Cleaning up orphan processes