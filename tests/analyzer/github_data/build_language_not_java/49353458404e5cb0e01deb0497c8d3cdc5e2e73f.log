2022-06-16T11:20:43.3043331Z Requested labels: ubuntu-latest
2022-06-16T11:20:43.3043378Z Job defined at: geekcomputers/Python/.github/workflows/lint_python.yml@refs/heads/master
2022-06-16T11:20:43.3043403Z Waiting for a runner to pick up this job...
2022-06-16T11:20:43.9435306Z Job is waiting for a hosted runner to come online.
2022-06-16T11:20:48.8688124Z Job is about to start running on the hosted runner: GitHub Actions 3 (hosted)
2022-06-16T11:20:53.1749755Z Current runner version: '2.293.0'
2022-06-16T11:20:53.1776168Z ##[group]Operating System
2022-06-16T11:20:53.1777350Z Ubuntu
2022-06-16T11:20:53.1777900Z 20.04.4
2022-06-16T11:20:53.1778259Z LTS
2022-06-16T11:20:53.1778554Z ##[endgroup]
2022-06-16T11:20:53.1778920Z ##[group]Virtual Environment
2022-06-16T11:20:53.1779672Z Environment: ubuntu-20.04
2022-06-16T11:20:53.1780128Z Version: 20220614.0
2022-06-16T11:20:53.1780759Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu20/20220614.0/images/linux/Ubuntu2004-Readme.md
2022-06-16T11:20:53.1781409Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu20%2F20220614.0
2022-06-16T11:20:53.1781859Z ##[endgroup]
2022-06-16T11:20:53.1782159Z ##[group]Virtual Environment Provisioner
2022-06-16T11:20:53.1782579Z 1.0.0.0-main-20220531-1
2022-06-16T11:20:53.1782883Z ##[endgroup]
2022-06-16T11:20:53.1783943Z ##[group]GITHUB_TOKEN Permissions
2022-06-16T11:20:53.1784733Z Actions: write
2022-06-16T11:20:53.1785231Z Checks: write
2022-06-16T11:20:53.1785586Z Contents: write
2022-06-16T11:20:53.1785919Z Deployments: write
2022-06-16T11:20:53.1786302Z Discussions: write
2022-06-16T11:20:53.1786759Z Issues: write
2022-06-16T11:20:53.1787017Z Metadata: read
2022-06-16T11:20:53.1787323Z Packages: write
2022-06-16T11:20:53.1787627Z Pages: write
2022-06-16T11:20:53.1787945Z PullRequests: write
2022-06-16T11:20:53.1788292Z RepositoryProjects: write
2022-06-16T11:20:53.1788642Z SecurityEvents: write
2022-06-16T11:20:53.1788917Z Statuses: write
2022-06-16T11:20:53.1789241Z ##[endgroup]
2022-06-16T11:20:53.1793048Z Secret source: Actions
2022-06-16T11:20:53.1793649Z Prepare workflow directory
2022-06-16T11:20:53.2752384Z Prepare all required actions
2022-06-16T11:20:53.2965830Z Getting action download info
2022-06-16T11:20:53.5468328Z Download action repository 'actions/checkout@v2' (SHA:7884fcad6b5d53d10323aee724dc68d8b9096a2e)
2022-06-16T11:20:54.8582817Z Download action repository 'actions/setup-python@v2' (SHA:7f80679172b057fc5e90d70d197929d454754a5a)
2022-06-16T11:20:56.3332331Z ##[group]Run actions/checkout@v2
2022-06-16T11:20:56.3332639Z with:
2022-06-16T11:20:56.3332865Z   repository: geekcomputers/Python
2022-06-16T11:20:56.3333274Z   token: ***
2022-06-16T11:20:56.3333479Z   ssh-strict: true
2022-06-16T11:20:56.3333704Z   persist-credentials: true
2022-06-16T11:20:56.3333905Z   clean: true
2022-06-16T11:20:56.3334109Z   fetch-depth: 1
2022-06-16T11:20:56.3334299Z   lfs: false
2022-06-16T11:20:56.3334485Z   submodules: false
2022-06-16T11:20:56.3334702Z   set-safe-directory: true
2022-06-16T11:20:56.3334925Z ##[endgroup]
2022-06-16T11:20:56.6506716Z Syncing repository: geekcomputers/Python
2022-06-16T11:20:56.6509361Z ##[group]Getting Git version info
2022-06-16T11:20:56.6509918Z Working directory is '/home/runner/work/Python/Python'
2022-06-16T11:20:56.6510615Z [command]/usr/bin/git version
2022-06-16T11:20:56.6655656Z git version 2.36.1
2022-06-16T11:20:56.6680717Z ##[endgroup]
2022-06-16T11:20:56.6702162Z Temporarily overriding HOME='/home/runner/work/_temp/276b62f6-d967-4a82-ab8c-19caa803d6fb' before making global git config changes
2022-06-16T11:20:56.6702714Z Adding repository directory to the temporary git global config as a safe directory
2022-06-16T11:20:56.6708790Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/Python/Python
2022-06-16T11:20:56.6761044Z Deleting the contents of '/home/runner/work/Python/Python'
2022-06-16T11:20:56.6767783Z ##[group]Initializing the repository
2022-06-16T11:20:56.6772741Z [command]/usr/bin/git init /home/runner/work/Python/Python
2022-06-16T11:20:56.6853468Z hint: Using 'master' as the name for the initial branch. This default branch name
2022-06-16T11:20:56.6854582Z hint: is subject to change. To configure the initial branch name to use in all
2022-06-16T11:20:56.6856246Z hint: of your new repositories, which will suppress this warning, call:
2022-06-16T11:20:56.6857339Z hint: 
2022-06-16T11:20:56.6858418Z hint: 	git config --global init.defaultBranch <name>
2022-06-16T11:20:56.6860201Z hint: 
2022-06-16T11:20:56.6860643Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2022-06-16T11:20:56.6861144Z hint: 'development'. The just-created branch can be renamed via this command:
2022-06-16T11:20:56.6861442Z hint: 
2022-06-16T11:20:56.6861712Z hint: 	git branch -m <name>
2022-06-16T11:20:56.6880896Z Initialized empty Git repository in /home/runner/work/Python/Python/.git/
2022-06-16T11:20:56.6892253Z [command]/usr/bin/git remote add origin https://github.com/geekcomputers/Python
2022-06-16T11:20:56.6996131Z ##[endgroup]
2022-06-16T11:20:56.6997209Z ##[group]Disabling automatic garbage collection
2022-06-16T11:20:56.7001252Z [command]/usr/bin/git config --local gc.auto 0
2022-06-16T11:20:56.7035150Z ##[endgroup]
2022-06-16T11:20:56.7036095Z ##[group]Setting up auth
2022-06-16T11:20:56.7044247Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-16T11:20:56.7087203Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-16T11:20:56.7541461Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-16T11:20:56.7577164Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-16T11:20:56.7851767Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2022-06-16T11:20:56.7894765Z ##[endgroup]
2022-06-16T11:20:56.7896072Z ##[group]Fetching the repository
2022-06-16T11:20:56.7905832Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +49353458404e5cb0e01deb0497c8d3cdc5e2e73f:refs/remotes/origin/master
2022-06-16T11:20:57.3745745Z remote: Enumerating objects: 867, done.        
2022-06-16T11:20:57.3817501Z remote: Counting objects:   0% (1/867)        
2022-06-16T11:20:57.3818063Z remote: Counting objects:   1% (9/867)        
2022-06-16T11:20:57.3820338Z remote: Counting objects:   2% (18/867)        
2022-06-16T11:20:57.3820747Z remote: Counting objects:   3% (27/867)        
2022-06-16T11:20:57.3821048Z remote: Counting objects:   4% (35/867)        
2022-06-16T11:20:57.3821325Z remote: Counting objects:   5% (44/867)        
2022-06-16T11:20:57.3821612Z remote: Counting objects:   6% (53/867)        
2022-06-16T11:20:57.3821981Z remote: Counting objects:   7% (61/867)        
2022-06-16T11:20:57.3822254Z remote: Counting objects:   8% (70/867)        
2022-06-16T11:20:57.3822543Z remote: Counting objects:   9% (79/867)        
2022-06-16T11:20:57.3822826Z remote: Counting objects:  10% (87/867)        
2022-06-16T11:20:57.3823108Z remote: Counting objects:  11% (96/867)        
2022-06-16T11:20:57.3823388Z remote: Counting objects:  12% (105/867)        
2022-06-16T11:20:57.3823718Z remote: Counting objects:  13% (113/867)        
2022-06-16T11:20:57.3824009Z remote: Counting objects:  14% (122/867)        
2022-06-16T11:20:57.3824286Z remote: Counting objects:  15% (131/867)        
2022-06-16T11:20:57.3824572Z remote: Counting objects:  16% (139/867)        
2022-06-16T11:20:57.3824859Z remote: Counting objects:  17% (148/867)        
2022-06-16T11:20:57.3825131Z remote: Counting objects:  18% (157/867)        
2022-06-16T11:20:57.3825415Z remote: Counting objects:  19% (165/867)        
2022-06-16T11:20:57.3825700Z remote: Counting objects:  20% (174/867)        
2022-06-16T11:20:57.3825972Z remote: Counting objects:  21% (183/867)        
2022-06-16T11:20:57.3826260Z remote: Counting objects:  22% (191/867)        
2022-06-16T11:20:57.3826544Z remote: Counting objects:  23% (200/867)        
2022-06-16T11:20:57.3826826Z remote: Counting objects:  24% (209/867)        
2022-06-16T11:20:57.3827095Z remote: Counting objects:  25% (217/867)        
2022-06-16T11:20:57.3827593Z remote: Counting objects:  26% (226/867)        
2022-06-16T11:20:57.3827881Z remote: Counting objects:  27% (235/867)        
2022-06-16T11:20:57.3828165Z remote: Counting objects:  28% (243/867)        
2022-06-16T11:20:57.3828449Z remote: Counting objects:  29% (252/867)        
2022-06-16T11:20:57.3828736Z remote: Counting objects:  30% (261/867)        
2022-06-16T11:20:57.3829006Z remote: Counting objects:  31% (269/867)        
2022-06-16T11:20:57.3829290Z remote: Counting objects:  32% (278/867)        
2022-06-16T11:20:57.3829572Z remote: Counting objects:  33% (287/867)        
2022-06-16T11:20:57.3829854Z remote: Counting objects:  34% (295/867)        
2022-06-16T11:20:57.3830127Z remote: Counting objects:  35% (304/867)        
2022-06-16T11:20:57.3830408Z remote: Counting objects:  36% (313/867)        
2022-06-16T11:20:57.3830689Z remote: Counting objects:  37% (321/867)        
2022-06-16T11:20:57.3830960Z remote: Counting objects:  38% (330/867)        
2022-06-16T11:20:57.3831247Z remote: Counting objects:  39% (339/867)        
2022-06-16T11:20:57.3831534Z remote: Counting objects:  40% (347/867)        
2022-06-16T11:20:57.3831802Z remote: Counting objects:  41% (356/867)        
2022-06-16T11:20:57.3832083Z remote: Counting objects:  42% (365/867)        
2022-06-16T11:20:57.3832366Z remote: Counting objects:  43% (373/867)        
2022-06-16T11:20:57.3832635Z remote: Counting objects:  44% (382/867)        
2022-06-16T11:20:57.3832919Z remote: Counting objects:  45% (391/867)        
2022-06-16T11:20:57.3833200Z remote: Counting objects:  46% (399/867)        
2022-06-16T11:20:57.3833485Z remote: Counting objects:  47% (408/867)        
2022-06-16T11:20:57.3833757Z remote: Counting objects:  48% (417/867)        
2022-06-16T11:20:57.3834037Z remote: Counting objects:  49% (425/867)        
2022-06-16T11:20:57.3834317Z remote: Counting objects:  50% (434/867)        
2022-06-16T11:20:57.3834589Z remote: Counting objects:  51% (443/867)        
2022-06-16T11:20:57.3834991Z remote: Counting objects:  52% (451/867)        
2022-06-16T11:20:57.3835301Z remote: Counting objects:  53% (460/867)        
2022-06-16T11:20:57.3835568Z remote: Counting objects:  54% (469/867)        
2022-06-16T11:20:57.3835849Z remote: Counting objects:  55% (477/867)        
2022-06-16T11:20:57.3836138Z remote: Counting objects:  56% (486/867)        
2022-06-16T11:20:57.3836408Z remote: Counting objects:  57% (495/867)        
2022-06-16T11:20:57.3836693Z remote: Counting objects:  58% (503/867)        
2022-06-16T11:20:57.3836977Z remote: Counting objects:  59% (512/867)        
2022-06-16T11:20:57.3837258Z remote: Counting objects:  60% (521/867)        
2022-06-16T11:20:57.3837526Z remote: Counting objects:  61% (529/867)        
2022-06-16T11:20:57.3837806Z remote: Counting objects:  62% (538/867)        
2022-06-16T11:20:57.3838086Z remote: Counting objects:  63% (547/867)        
2022-06-16T11:20:57.3838355Z remote: Counting objects:  64% (555/867)        
2022-06-16T11:20:57.3838664Z remote: Counting objects:  65% (564/867)        
2022-06-16T11:20:57.3838954Z remote: Counting objects:  66% (573/867)        
2022-06-16T11:20:57.3839240Z remote: Counting objects:  67% (581/867)        
2022-06-16T11:20:57.3839510Z remote: Counting objects:  68% (590/867)        
2022-06-16T11:20:57.3839792Z remote: Counting objects:  69% (599/867)        
2022-06-16T11:20:57.3840075Z remote: Counting objects:  70% (607/867)        
2022-06-16T11:20:57.3840343Z remote: Counting objects:  71% (616/867)        
2022-06-16T11:20:57.3840626Z remote: Counting objects:  72% (625/867)        
2022-06-16T11:20:57.3840906Z remote: Counting objects:  73% (633/867)        
2022-06-16T11:20:57.3841186Z remote: Counting objects:  74% (642/867)        
2022-06-16T11:20:57.3841456Z remote: Counting objects:  75% (651/867)        
2022-06-16T11:20:57.3841737Z remote: Counting objects:  76% (659/867)        
2022-06-16T11:20:57.3842018Z remote: Counting objects:  77% (668/867)        
2022-06-16T11:20:57.3842286Z remote: Counting objects:  78% (677/867)        
2022-06-16T11:20:57.3842672Z remote: Counting objects:  79% (685/867)        
2022-06-16T11:20:57.3842957Z remote: Counting objects:  80% (694/867)        
2022-06-16T11:20:57.3843226Z remote: Counting objects:  81% (703/867)        
2022-06-16T11:20:57.3843509Z remote: Counting objects:  82% (711/867)        
2022-06-16T11:20:57.3843794Z remote: Counting objects:  83% (720/867)        
2022-06-16T11:20:57.3844062Z remote: Counting objects:  84% (729/867)        
2022-06-16T11:20:57.3844346Z remote: Counting objects:  85% (737/867)        
2022-06-16T11:20:57.3844625Z remote: Counting objects:  86% (746/867)        
2022-06-16T11:20:57.3844907Z remote: Counting objects:  87% (755/867)        
2022-06-16T11:20:57.3845173Z remote: Counting objects:  88% (763/867)        
2022-06-16T11:20:57.3845454Z remote: Counting objects:  89% (772/867)        
2022-06-16T11:20:57.3845735Z remote: Counting objects:  90% (781/867)        
2022-06-16T11:20:57.3846056Z remote: Counting objects:  91% (789/867)        
2022-06-16T11:20:57.3846350Z remote: Counting objects:  92% (798/867)        
2022-06-16T11:20:57.3846636Z remote: Counting objects:  93% (807/867)        
2022-06-16T11:20:57.3846904Z remote: Counting objects:  94% (815/867)        
2022-06-16T11:20:57.3847186Z remote: Counting objects:  95% (824/867)        
2022-06-16T11:20:57.3847471Z remote: Counting objects:  96% (833/867)        
2022-06-16T11:20:57.3847740Z remote: Counting objects:  97% (841/867)        
2022-06-16T11:20:57.3848026Z remote: Counting objects:  98% (850/867)        
2022-06-16T11:20:57.3848311Z remote: Counting objects:  99% (859/867)        
2022-06-16T11:20:57.3849023Z remote: Counting objects: 100% (867/867)        
2022-06-16T11:20:57.3849774Z remote: Counting objects: 100% (867/867), done.        
2022-06-16T11:20:57.3850374Z remote: Compressing objects:   0% (1/800)        
2022-06-16T11:20:57.3851160Z remote: Compressing objects:   1% (8/800)        
2022-06-16T11:20:57.3851805Z remote: Compressing objects:   2% (16/800)        
2022-06-16T11:20:57.3852676Z remote: Compressing objects:   3% (24/800)        
2022-06-16T11:20:57.3853277Z remote: Compressing objects:   4% (32/800)        
2022-06-16T11:20:57.3854306Z remote: Compressing objects:   5% (40/800)        
2022-06-16T11:20:57.3855097Z remote: Compressing objects:   6% (48/800)        
2022-06-16T11:20:57.3855702Z remote: Compressing objects:   7% (56/800)        
2022-06-16T11:20:57.3856449Z remote: Compressing objects:   8% (64/800)        
2022-06-16T11:20:57.3857309Z remote: Compressing objects:   9% (72/800)        
2022-06-16T11:20:57.3858047Z remote: Compressing objects:  10% (80/800)        
2022-06-16T11:20:57.4353950Z remote: Compressing objects:  11% (88/800)        
2022-06-16T11:20:57.4354515Z remote: Compressing objects:  12% (96/800)        
2022-06-16T11:20:57.4355073Z remote: Compressing objects:  13% (104/800)        
2022-06-16T11:20:57.4357083Z remote: Compressing objects:  14% (112/800)        
2022-06-16T11:20:57.4357631Z remote: Compressing objects:  15% (120/800)        
2022-06-16T11:20:57.4358097Z remote: Compressing objects:  16% (128/800)        
2022-06-16T11:20:57.4358572Z remote: Compressing objects:  17% (136/800)        
2022-06-16T11:20:57.4359073Z remote: Compressing objects:  18% (144/800)        
2022-06-16T11:20:57.4359845Z remote: Compressing objects:  19% (152/800)        
2022-06-16T11:20:57.4360312Z remote: Compressing objects:  20% (160/800)        
2022-06-16T11:20:57.4360784Z remote: Compressing objects:  21% (168/800)        
2022-06-16T11:20:57.4362257Z remote: Compressing objects:  22% (176/800)        
2022-06-16T11:20:57.4363263Z remote: Compressing objects:  23% (184/800)        
2022-06-16T11:20:57.4363763Z remote: Compressing objects:  24% (192/800)        
2022-06-16T11:20:57.4364319Z remote: Compressing objects:  25% (200/800)        
2022-06-16T11:20:57.4364764Z remote: Compressing objects:  26% (208/800)        
2022-06-16T11:20:57.4365560Z remote: Compressing objects:  27% (216/800)        
2022-06-16T11:20:57.4366461Z remote: Compressing objects:  28% (224/800)        
2022-06-16T11:20:57.4366978Z remote: Compressing objects:  29% (232/800)        
2022-06-16T11:20:57.4367926Z remote: Compressing objects:  30% (240/800)        
2022-06-16T11:20:57.4368448Z remote: Compressing objects:  31% (248/800)        
2022-06-16T11:20:57.4369042Z remote: Compressing objects:  32% (256/800)        
2022-06-16T11:20:57.4369563Z remote: Compressing objects:  33% (264/800)        
2022-06-16T11:20:57.4370206Z remote: Compressing objects:  34% (272/800)        
2022-06-16T11:20:57.4370880Z remote: Compressing objects:  35% (280/800)        
2022-06-16T11:20:57.4371432Z remote: Compressing objects:  36% (288/800)        
2022-06-16T11:20:57.4371939Z remote: Compressing objects:  37% (296/800)        
2022-06-16T11:20:57.4372744Z remote: Compressing objects:  38% (304/800)        
2022-06-16T11:20:57.4373240Z remote: Compressing objects:  39% (312/800)        
2022-06-16T11:20:57.4374648Z remote: Compressing objects:  40% (320/800)        
2022-06-16T11:20:57.4375294Z remote: Compressing objects:  41% (328/800)        
2022-06-16T11:20:57.4376010Z remote: Compressing objects:  42% (336/800)        
2022-06-16T11:20:57.4376650Z remote: Compressing objects:  43% (344/800)        
2022-06-16T11:20:57.4377191Z remote: Compressing objects:  44% (352/800)        
2022-06-16T11:20:57.4377811Z remote: Compressing objects:  45% (360/800)        
2022-06-16T11:20:57.4378258Z remote: Compressing objects:  46% (368/800)        
2022-06-16T11:20:57.4378748Z remote: Compressing objects:  47% (376/800)        
2022-06-16T11:20:57.4379415Z remote: Compressing objects:  48% (384/800)        
2022-06-16T11:20:57.4402638Z remote: Compressing objects:  49% (392/800)        
2022-06-16T11:20:57.4403400Z remote: Compressing objects:  50% (400/800)        
2022-06-16T11:20:57.4404743Z remote: Compressing objects:  51% (408/800)        
2022-06-16T11:20:57.4405251Z remote: Compressing objects:  52% (416/800)        
2022-06-16T11:20:57.4405932Z remote: Compressing objects:  53% (424/800)        
2022-06-16T11:20:57.4407708Z remote: Compressing objects:  54% (432/800)        
2022-06-16T11:20:57.4408261Z remote: Compressing objects:  55% (440/800)        
2022-06-16T11:20:57.4409459Z remote: Compressing objects:  56% (448/800)        
2022-06-16T11:20:57.4409995Z remote: Compressing objects:  57% (456/800)        
2022-06-16T11:20:57.4410509Z remote: Compressing objects:  58% (464/800)        
2022-06-16T11:20:57.4411173Z remote: Compressing objects:  59% (472/800)        
2022-06-16T11:20:57.4411675Z remote: Compressing objects:  60% (480/800)        
2022-06-16T11:20:57.4412578Z remote: Compressing objects:  61% (488/800)        
2022-06-16T11:20:57.4413658Z remote: Compressing objects:  62% (496/800)        
2022-06-16T11:20:57.4414330Z remote: Compressing objects:  63% (504/800)        
2022-06-16T11:20:57.4414863Z remote: Compressing objects:  64% (512/800)        
2022-06-16T11:20:57.4415602Z remote: Compressing objects:  65% (520/800)        
2022-06-16T11:20:57.4416353Z remote: Compressing objects:  66% (528/800)        
2022-06-16T11:20:57.4417282Z remote: Compressing objects:  67% (536/800)        
2022-06-16T11:20:57.4417751Z remote: Compressing objects:  68% (544/800)        
2022-06-16T11:20:57.4418954Z remote: Compressing objects:  69% (552/800)        
2022-06-16T11:20:57.4419548Z remote: Compressing objects:  70% (560/800)        
2022-06-16T11:20:57.4420177Z remote: Compressing objects:  71% (568/800)        
2022-06-16T11:20:57.4420649Z remote: Compressing objects:  72% (576/800)        
2022-06-16T11:20:57.4421820Z remote: Compressing objects:  73% (584/800)        
2022-06-16T11:20:57.4422358Z remote: Compressing objects:  74% (592/800)        
2022-06-16T11:20:57.4423268Z remote: Compressing objects:  75% (600/800)        
2022-06-16T11:20:57.4423838Z remote: Compressing objects:  76% (608/800)        
2022-06-16T11:20:57.4424630Z remote: Compressing objects:  77% (616/800)        
2022-06-16T11:20:57.4425298Z remote: Compressing objects:  78% (624/800)        
2022-06-16T11:20:57.4426018Z remote: Compressing objects:  79% (632/800)        
2022-06-16T11:20:57.4426369Z remote: Compressing objects:  80% (640/800)        
2022-06-16T11:20:57.4426953Z remote: Compressing objects:  81% (648/800)        
2022-06-16T11:20:57.4427642Z remote: Compressing objects:  82% (656/800)        
2022-06-16T11:20:57.4428106Z remote: Compressing objects:  83% (664/800)        
2022-06-16T11:20:57.4428505Z remote: Compressing objects:  84% (672/800)        
2022-06-16T11:20:57.4429285Z remote: Compressing objects:  85% (680/800)        
2022-06-16T11:20:57.4429932Z remote: Compressing objects:  86% (688/800)        
2022-06-16T11:20:57.4430606Z remote: Compressing objects:  87% (696/800)        
2022-06-16T11:20:57.4431021Z remote: Compressing objects:  88% (704/800)        
2022-06-16T11:20:57.4431691Z remote: Compressing objects:  89% (712/800)        
2022-06-16T11:20:57.4432853Z remote: Compressing objects:  90% (720/800)        
2022-06-16T11:20:57.4433382Z remote: Compressing objects:  91% (728/800)        
2022-06-16T11:20:57.4433846Z remote: Compressing objects:  92% (736/800)        
2022-06-16T11:20:57.4434395Z remote: Compressing objects:  93% (744/800)        
2022-06-16T11:20:57.4435215Z remote: Compressing objects:  94% (752/800)        
2022-06-16T11:20:57.4435740Z remote: Compressing objects:  95% (760/800)        
2022-06-16T11:20:57.4436410Z remote: Compressing objects:  96% (768/800)        
2022-06-16T11:20:57.4436848Z remote: Compressing objects:  97% (776/800)        
2022-06-16T11:20:57.4437506Z remote: Compressing objects:  98% (784/800)        
2022-06-16T11:20:57.4438025Z remote: Compressing objects:  99% (792/800)        
2022-06-16T11:20:57.4438745Z remote: Compressing objects: 100% (800/800)        
2022-06-16T11:20:57.4439258Z remote: Compressing objects: 100% (800/800), done.        
2022-06-16T11:20:57.4552513Z Receiving objects:   0% (1/867)
2022-06-16T11:20:57.4554940Z Receiving objects:   1% (9/867)
2022-06-16T11:20:57.4556017Z Receiving objects:   2% (18/867)
2022-06-16T11:20:57.5247303Z Receiving objects:   3% (27/867)
2022-06-16T11:20:57.5249021Z Receiving objects:   4% (35/867)
2022-06-16T11:20:57.5249550Z Receiving objects:   5% (44/867)
2022-06-16T11:20:57.5250446Z Receiving objects:   6% (53/867)
2022-06-16T11:20:57.5276540Z Receiving objects:   7% (61/867)
2022-06-16T11:20:57.5278101Z Receiving objects:   8% (70/867)
2022-06-16T11:20:57.5279122Z Receiving objects:   9% (79/867)
2022-06-16T11:20:57.5279751Z Receiving objects:  10% (87/867)
2022-06-16T11:20:57.5937563Z Receiving objects:  11% (96/867)
2022-06-16T11:20:57.6676725Z Receiving objects:  12% (105/867)
2022-06-16T11:20:57.6678253Z Receiving objects:  13% (113/867)
2022-06-16T11:20:57.6699235Z Receiving objects:  14% (122/867)
2022-06-16T11:20:57.6701864Z Receiving objects:  15% (131/867)
2022-06-16T11:20:57.7636301Z Receiving objects:  16% (139/867)
2022-06-16T11:20:57.7652967Z Receiving objects:  17% (148/867)
2022-06-16T11:20:58.0036535Z Receiving objects:  18% (157/867)
2022-06-16T11:20:58.0099319Z Receiving objects:  19% (165/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.0889911Z Receiving objects:  20% (174/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.0890536Z Receiving objects:  21% (183/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.0915507Z Receiving objects:  22% (191/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.0926156Z Receiving objects:  23% (200/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.0931959Z Receiving objects:  24% (209/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1411569Z Receiving objects:  25% (217/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1416024Z Receiving objects:  26% (226/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1419571Z Receiving objects:  27% (235/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1567541Z Receiving objects:  28% (243/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1571954Z Receiving objects:  29% (252/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1580212Z Receiving objects:  30% (261/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1584187Z Receiving objects:  31% (269/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1586854Z Receiving objects:  32% (278/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1631630Z Receiving objects:  33% (287/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1634839Z Receiving objects:  34% (295/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1637626Z Receiving objects:  35% (304/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1641022Z Receiving objects:  36% (313/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1755633Z Receiving objects:  37% (321/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1758311Z Receiving objects:  38% (330/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1761595Z Receiving objects:  39% (339/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1765227Z Receiving objects:  40% (347/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1769433Z Receiving objects:  41% (356/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1772579Z Receiving objects:  42% (365/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1775486Z Receiving objects:  43% (373/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.1781799Z Receiving objects:  44% (382/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2037100Z Receiving objects:  45% (391/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2042713Z Receiving objects:  46% (399/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2051536Z Receiving objects:  47% (408/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2062323Z Receiving objects:  48% (417/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2068253Z Receiving objects:  49% (425/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.2311189Z Receiving objects:  50% (434/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3112139Z Receiving objects:  51% (443/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3218349Z Receiving objects:  52% (451/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3253875Z Receiving objects:  53% (460/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3256560Z Receiving objects:  54% (469/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3264894Z Receiving objects:  55% (477/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3270981Z Receiving objects:  56% (486/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3276644Z Receiving objects:  57% (495/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3281055Z Receiving objects:  58% (503/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3285737Z Receiving objects:  59% (512/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.3293075Z Receiving objects:  60% (521/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4006093Z Receiving objects:  61% (529/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4006881Z Receiving objects:  62% (538/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4008659Z Receiving objects:  63% (547/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4018675Z Receiving objects:  64% (555/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4021161Z Receiving objects:  65% (564/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4024061Z Receiving objects:  66% (573/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4031010Z Receiving objects:  67% (581/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4067614Z Receiving objects:  68% (590/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4105850Z Receiving objects:  69% (599/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4108329Z Receiving objects:  70% (607/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4115562Z Receiving objects:  71% (616/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4120702Z Receiving objects:  72% (625/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.4701753Z Receiving objects:  73% (633/867), 3.72 MiB | 7.20 MiB/s
2022-06-16T11:20:58.5328679Z Receiving objects:  73% (635/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5332133Z Receiving objects:  74% (642/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5333063Z Receiving objects:  75% (651/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5369928Z Receiving objects:  76% (659/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5372208Z Receiving objects:  77% (668/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5375288Z Receiving objects:  78% (677/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5375879Z Receiving objects:  79% (685/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5381631Z Receiving objects:  80% (694/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5383992Z Receiving objects:  81% (703/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5387535Z Receiving objects:  82% (711/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5390822Z Receiving objects:  83% (720/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5391551Z Receiving objects:  84% (729/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5396492Z Receiving objects:  85% (737/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5397281Z Receiving objects:  86% (746/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5402183Z Receiving objects:  87% (755/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5402781Z Receiving objects:  88% (763/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5415954Z Receiving objects:  89% (772/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5429433Z Receiving objects:  90% (781/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5432488Z Receiving objects:  91% (789/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5433187Z Receiving objects:  92% (798/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5610851Z Receiving objects:  93% (807/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5611137Z Receiving objects:  94% (815/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5722474Z Receiving objects:  95% (824/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5723230Z remote: Total 867 (delta 23), reused 515 (delta 18), pack-reused 0        
2022-06-16T11:20:58.5723710Z Receiving objects:  96% (833/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5724134Z Receiving objects:  97% (841/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5724421Z Receiving objects:  98% (850/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5725082Z Receiving objects:  99% (859/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5725417Z Receiving objects: 100% (867/867), 17.15 MiB | 16.87 MiB/s
2022-06-16T11:20:58.5725714Z Receiving objects: 100% (867/867), 19.84 MiB | 17.76 MiB/s, done.
2022-06-16T11:20:58.5726001Z Resolving deltas:   0% (0/23)
2022-06-16T11:20:58.5726374Z Resolving deltas:   4% (1/23)
2022-06-16T11:20:58.5726604Z Resolving deltas:   8% (2/23)
2022-06-16T11:20:58.5726849Z Resolving deltas:  13% (3/23)
2022-06-16T11:20:58.5727089Z Resolving deltas:  17% (4/23)
2022-06-16T11:20:58.5727536Z Resolving deltas:  21% (5/23)
2022-06-16T11:20:58.5727757Z Resolving deltas:  26% (6/23)
2022-06-16T11:20:58.5727972Z Resolving deltas:  30% (7/23)
2022-06-16T11:20:58.5728179Z Resolving deltas:  34% (8/23)
2022-06-16T11:20:58.5728395Z Resolving deltas:  39% (9/23)
2022-06-16T11:20:58.5728614Z Resolving deltas:  43% (10/23)
2022-06-16T11:20:58.5728838Z Resolving deltas:  47% (11/23)
2022-06-16T11:20:58.5741881Z Resolving deltas:  52% (12/23)
2022-06-16T11:20:58.5746228Z Resolving deltas:  56% (13/23)
2022-06-16T11:20:58.5806573Z Resolving deltas:  60% (14/23)
2022-06-16T11:20:58.5810090Z Resolving deltas:  65% (15/23)
2022-06-16T11:20:58.5813621Z Resolving deltas:  69% (16/23)
2022-06-16T11:20:58.5817060Z Resolving deltas:  73% (17/23)
2022-06-16T11:20:58.5820956Z Resolving deltas:  78% (18/23)
2022-06-16T11:20:58.5825338Z Resolving deltas:  82% (19/23)
2022-06-16T11:20:58.5825882Z Resolving deltas:  86% (20/23)
2022-06-16T11:20:58.5828003Z Resolving deltas:  91% (21/23)
2022-06-16T11:20:58.6033864Z Resolving deltas:  95% (22/23)
2022-06-16T11:20:58.6034380Z Resolving deltas: 100% (23/23)
2022-06-16T11:20:58.6035038Z Resolving deltas: 100% (23/23), done.
2022-06-16T11:20:58.6524423Z From https://github.com/geekcomputers/Python
2022-06-16T11:20:58.6525315Z  * [new ref]         49353458404e5cb0e01deb0497c8d3cdc5e2e73f -> origin/master
2022-06-16T11:20:58.6568902Z ##[endgroup]
2022-06-16T11:20:58.6569511Z ##[group]Determining the checkout info
2022-06-16T11:20:58.6570007Z ##[endgroup]
2022-06-16T11:20:58.6570815Z ##[group]Checking out the ref
2022-06-16T11:20:58.6571421Z [command]/usr/bin/git checkout --progress --force -B master refs/remotes/origin/master
2022-06-16T11:20:58.9069466Z Reset branch 'master'
2022-06-16T11:20:58.9077483Z branch 'master' set up to track 'origin/master'.
2022-06-16T11:20:58.9102773Z ##[endgroup]
2022-06-16T11:20:58.9163573Z [command]/usr/bin/git log -1 --format='%H'
2022-06-16T11:20:58.9194787Z '49353458404e5cb0e01deb0497c8d3cdc5e2e73f'
2022-06-16T11:20:58.9514415Z ##[group]Run actions/setup-python@v2
2022-06-16T11:20:58.9514818Z with:
2022-06-16T11:20:58.9515026Z   python-version: 3.x
2022-06-16T11:20:58.9515410Z   token: ***
2022-06-16T11:20:58.9515617Z ##[endgroup]
2022-06-16T11:20:59.1277676Z Successfully setup CPython (3.10.5)
2022-06-16T11:20:59.1455648Z ##[group]Run pip install --upgrade pip wheel
2022-06-16T11:20:59.1456047Z [36;1mpip install --upgrade pip wheel[0m
2022-06-16T11:20:59.1519180Z shell: /usr/bin/bash -e {0}
2022-06-16T11:20:59.1519551Z env:
2022-06-16T11:20:59.1519862Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:20:59.1520230Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:20:59.1520512Z ##[endgroup]
2022-06-16T11:21:03.1722564Z Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages (22.1.2)
2022-06-16T11:21:03.3801230Z Collecting wheel
2022-06-16T11:21:03.4013792Z   Downloading wheel-0.37.1-py2.py3-none-any.whl (35 kB)
2022-06-16T11:21:03.5008161Z Installing collected packages: wheel
2022-06-16T11:21:03.5392534Z Successfully installed wheel-0.37.1
2022-06-16T11:21:04.0035181Z ##[group]Run pip install bandit black codespell flake8 flake8-2020 flake8-bugbear flake8-comprehensions isort mypy pytest pyupgrade safety
2022-06-16T11:21:04.0035933Z [36;1mpip install bandit black codespell flake8 flake8-2020 flake8-bugbear flake8-comprehensions isort mypy pytest pyupgrade safety[0m
2022-06-16T11:21:04.0090502Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:04.0090726Z env:
2022-06-16T11:21:04.0090984Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:04.0091294Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:04.0091548Z ##[endgroup]
2022-06-16T11:21:04.6881651Z Collecting bandit
2022-06-16T11:21:04.7071804Z   Downloading bandit-1.7.4-py3-none-any.whl (118 kB)
2022-06-16T11:21:04.7192305Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 118.3/118.3 kB 14.5 MB/s eta 0:00:00
2022-06-16T11:21:04.7683007Z Collecting black
2022-06-16T11:21:04.7754192Z   Downloading black-22.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.5 MB)
2022-06-16T11:21:04.8107569Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.5/1.5 MB 46.4 MB/s eta 0:00:00
2022-06-16T11:21:04.8373847Z Collecting codespell
2022-06-16T11:21:04.8429240Z   Downloading codespell-2.1.0-py3-none-any.whl (177 kB)
2022-06-16T11:21:04.8519803Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 177.5/177.5 kB 33.6 MB/s eta 0:00:00
2022-06-16T11:21:04.9120702Z Collecting flake8
2022-06-16T11:21:04.9170222Z   Downloading flake8-4.0.1-py2.py3-none-any.whl (64 kB)
2022-06-16T11:21:04.9240081Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 64.1/64.1 kB 13.7 MB/s eta 0:00:00
2022-06-16T11:21:04.9490015Z Collecting flake8-2020
2022-06-16T11:21:04.9537279Z   Downloading flake8_2020-1.6.1-py2.py3-none-any.whl (5.1 kB)
2022-06-16T11:21:04.9923543Z Collecting flake8-bugbear
2022-06-16T11:21:04.9973638Z   Downloading flake8_bugbear-22.4.25-py3-none-any.whl (19 kB)
2022-06-16T11:21:05.0372094Z Collecting flake8-comprehensions
2022-06-16T11:21:05.0429142Z   Downloading flake8_comprehensions-3.10.0-py3-none-any.whl (7.3 kB)
2022-06-16T11:21:05.1428889Z Collecting isort
2022-06-16T11:21:05.1479239Z   Downloading isort-5.10.1-py3-none-any.whl (103 kB)
2022-06-16T11:21:05.1549033Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 103.4/103.4 kB 26.1 MB/s eta 0:00:00
2022-06-16T11:21:05.3148586Z Collecting mypy
2022-06-16T11:21:05.3217324Z   Downloading mypy-0.961-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (18.1 MB)
2022-06-16T11:21:05.5515488Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 18.1/18.1 MB 66.9 MB/s eta 0:00:00
2022-06-16T11:21:05.7405378Z Collecting pytest
2022-06-16T11:21:05.7457718Z   Downloading pytest-7.1.2-py3-none-any.whl (297 kB)
2022-06-16T11:21:05.7554333Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 297.0/297.0 kB 47.9 MB/s eta 0:00:00
2022-06-16T11:21:05.8653414Z Collecting pyupgrade
2022-06-16T11:21:05.8711298Z   Downloading pyupgrade-2.34.0-py2.py3-none-any.whl (56 kB)
2022-06-16T11:21:05.8772536Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 56.0/56.0 kB 15.1 MB/s eta 0:00:00
2022-06-16T11:21:05.9189474Z Collecting safety
2022-06-16T11:21:05.9235846Z   Downloading safety-1.10.3-py2.py3-none-any.whl (18 kB)
2022-06-16T11:21:06.0079557Z Collecting GitPython>=1.0.1
2022-06-16T11:21:06.0137477Z   Downloading GitPython-3.1.27-py3-none-any.whl (181 kB)
2022-06-16T11:21:06.0226320Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 181.2/181.2 kB 32.2 MB/s eta 0:00:00
2022-06-16T11:21:06.0702022Z Collecting stevedore>=1.20.0
2022-06-16T11:21:06.0752110Z   Downloading stevedore-3.5.0-py3-none-any.whl (49 kB)
2022-06-16T11:21:06.0814493Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 49.7/49.7 kB 12.8 MB/s eta 0:00:00
2022-06-16T11:21:06.1601446Z Collecting PyYAML>=5.3.1
2022-06-16T11:21:06.1654977Z   Downloading PyYAML-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (682 kB)
2022-06-16T11:21:06.1791695Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 682.2/682.2 kB 67.1 MB/s eta 0:00:00
2022-06-16T11:21:06.2184691Z Collecting mypy-extensions>=0.4.3
2022-06-16T11:21:06.2231007Z   Downloading mypy_extensions-0.4.3-py2.py3-none-any.whl (4.5 kB)
2022-06-16T11:21:06.2500260Z Collecting platformdirs>=2
2022-06-16T11:21:06.2546972Z   Downloading platformdirs-2.5.2-py3-none-any.whl (14 kB)
2022-06-16T11:21:06.2986440Z Collecting click>=8.0.0
2022-06-16T11:21:06.3043666Z   Downloading click-8.1.3-py3-none-any.whl (96 kB)
2022-06-16T11:21:06.3113689Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 96.6/96.6 kB 24.9 MB/s eta 0:00:00
2022-06-16T11:21:06.3320046Z Collecting pathspec>=0.9.0
2022-06-16T11:21:06.3368574Z   Downloading pathspec-0.9.0-py2.py3-none-any.whl (31 kB)
2022-06-16T11:21:06.3698529Z Collecting tomli>=1.1.0
2022-06-16T11:21:06.3748358Z   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)
2022-06-16T11:21:06.4131518Z Collecting pycodestyle<2.9.0,>=2.8.0
2022-06-16T11:21:06.4192167Z   Downloading pycodestyle-2.8.0-py2.py3-none-any.whl (42 kB)
2022-06-16T11:21:06.4248109Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 42.1/42.1 kB 11.6 MB/s eta 0:00:00
2022-06-16T11:21:06.4466076Z Collecting mccabe<0.7.0,>=0.6.0
2022-06-16T11:21:06.4512489Z   Downloading mccabe-0.6.1-py2.py3-none-any.whl (8.6 kB)
2022-06-16T11:21:06.4820465Z Collecting pyflakes<2.5.0,>=2.4.0
2022-06-16T11:21:06.4867745Z   Downloading pyflakes-2.4.0-py2.py3-none-any.whl (69 kB)
2022-06-16T11:21:06.4924242Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 69.7/69.7 kB 20.3 MB/s eta 0:00:00
2022-06-16T11:21:06.5568532Z Collecting attrs>=19.2.0
2022-06-16T11:21:06.5617968Z   Downloading attrs-21.4.0-py2.py3-none-any.whl (60 kB)
2022-06-16T11:21:06.5677995Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.6/60.6 kB 17.3 MB/s eta 0:00:00
2022-06-16T11:21:06.6303979Z Collecting typing-extensions>=3.10
2022-06-16T11:21:06.6353021Z   Downloading typing_extensions-4.2.0-py3-none-any.whl (24 kB)
2022-06-16T11:21:06.6854910Z Collecting pluggy<2.0,>=0.12
2022-06-16T11:21:06.6931565Z   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)
2022-06-16T11:21:06.7370147Z Collecting py>=1.8.2
2022-06-16T11:21:06.7418153Z   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)
2022-06-16T11:21:06.7483691Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.7/98.7 kB 25.1 MB/s eta 0:00:00
2022-06-16T11:21:06.7896007Z Collecting packaging
2022-06-16T11:21:06.7945096Z   Downloading packaging-21.3-py3-none-any.whl (40 kB)
2022-06-16T11:21:06.8000102Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 40.8/40.8 kB 10.8 MB/s eta 0:00:00
2022-06-16T11:21:06.8157380Z Collecting iniconfig
2022-06-16T11:21:06.8288800Z   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)
2022-06-16T11:21:06.8585211Z Collecting tokenize-rt>=3.2.0
2022-06-16T11:21:06.8641773Z   Downloading tokenize_rt-4.2.1-py2.py3-none-any.whl (6.1 kB)
2022-06-16T11:21:06.9487932Z Collecting requests
2022-06-16T11:21:06.9571348Z   Downloading requests-2.28.0-py3-none-any.whl (62 kB)
2022-06-16T11:21:06.9639674Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.8/62.8 kB 15.1 MB/s eta 0:00:00
2022-06-16T11:21:06.9871003Z Collecting dparse>=0.5.1
2022-06-16T11:21:07.0047843Z   Downloading dparse-0.5.1-py3-none-any.whl (12 kB)
2022-06-16T11:21:07.0096228Z Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages (from safety) (58.1.0)
2022-06-16T11:21:07.1066849Z Collecting toml
2022-06-16T11:21:07.1123406Z   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)
2022-06-16T11:21:07.1507496Z Collecting gitdb<5,>=4.0.1
2022-06-16T11:21:07.1562255Z   Downloading gitdb-4.0.9-py3-none-any.whl (63 kB)
2022-06-16T11:21:07.1625986Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 63.1/63.1 kB 17.3 MB/s eta 0:00:00
2022-06-16T11:21:07.2885464Z Collecting pbr!=2.1.0,>=2.0.0
2022-06-16T11:21:07.2938905Z   Downloading pbr-5.9.0-py2.py3-none-any.whl (112 kB)
2022-06-16T11:21:07.3008925Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 112.3/112.3 kB 28.8 MB/s eta 0:00:00
2022-06-16T11:21:07.4061708Z Collecting pyparsing!=3.0.5,>=2.0.2
2022-06-16T11:21:07.4111826Z   Downloading pyparsing-3.0.9-py3-none-any.whl (98 kB)
2022-06-16T11:21:07.4184239Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.3/98.3 kB 21.2 MB/s eta 0:00:00
2022-06-16T11:21:07.4708747Z Collecting certifi>=2017.4.17
2022-06-16T11:21:07.4770230Z   Downloading certifi-2022.6.15-py3-none-any.whl (160 kB)
2022-06-16T11:21:07.4851959Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 160.2/160.2 kB 32.3 MB/s eta 0:00:00
2022-06-16T11:21:07.5260004Z Collecting charset-normalizer~=2.0.0
2022-06-16T11:21:07.5318401Z   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)
2022-06-16T11:21:07.5666184Z Collecting idna<4,>=2.5
2022-06-16T11:21:07.5716966Z   Downloading idna-3.3-py3-none-any.whl (61 kB)
2022-06-16T11:21:07.5814928Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 61.2/61.2 kB 7.8 MB/s eta 0:00:00
2022-06-16T11:21:07.6500533Z Collecting urllib3<1.27,>=1.21.1
2022-06-16T11:21:07.6649882Z   Downloading urllib3-1.26.9-py2.py3-none-any.whl (138 kB)
2022-06-16T11:21:07.6730663Z      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 139.0/139.0 kB 29.8 MB/s eta 0:00:00
2022-06-16T11:21:07.7233699Z Collecting smmap<6,>=3.0.1
2022-06-16T11:21:07.7290864Z   Downloading smmap-5.0.0-py3-none-any.whl (24 kB)
2022-06-16T11:21:08.0931272Z Installing collected packages: mypy-extensions, mccabe, iniconfig, urllib3, typing-extensions, tomli, toml, tokenize-rt, smmap, PyYAML, pyparsing, pyflakes, pycodestyle, py, pluggy, platformdirs, pbr, pathspec, isort, idna, codespell, click, charset-normalizer, certifi, attrs, stevedore, requests, pyupgrade, packaging, mypy, gitdb, flake8, black, pytest, GitPython, flake8-comprehensions, flake8-bugbear, flake8-2020, dparse, safety, bandit
2022-06-16T11:21:11.8984290Z Successfully installed GitPython-3.1.27 PyYAML-6.0 attrs-21.4.0 bandit-1.7.4 black-22.3.0 certifi-2022.6.15 charset-normalizer-2.0.12 click-8.1.3 codespell-2.1.0 dparse-0.5.1 flake8-4.0.1 flake8-2020-1.6.1 flake8-bugbear-22.4.25 flake8-comprehensions-3.10.0 gitdb-4.0.9 idna-3.3 iniconfig-1.1.1 isort-5.10.1 mccabe-0.6.1 mypy-0.961 mypy-extensions-0.4.3 packaging-21.3 pathspec-0.9.0 pbr-5.9.0 platformdirs-2.5.2 pluggy-1.0.0 py-1.11.0 pycodestyle-2.8.0 pyflakes-2.4.0 pyparsing-3.0.9 pytest-7.1.2 pyupgrade-2.34.0 requests-2.28.0 safety-1.10.3 smmap-5.0.0 stevedore-3.5.0 tokenize-rt-4.2.1 toml-0.10.2 tomli-2.0.1 typing-extensions-4.2.0 urllib3-1.26.9
2022-06-16T11:21:12.1561629Z ##[group]Run bandit --recursive --skip B101 . || true
2022-06-16T11:21:12.1561975Z [36;1mbandit --recursive --skip B101 . || true[0m
2022-06-16T11:21:12.1619453Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:12.1619680Z env:
2022-06-16T11:21:12.1619944Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:12.1620253Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:12.1620502Z ##[endgroup]
2022-06-16T11:21:12.6909026Z [main]	INFO	profile include tests: None
2022-06-16T11:21:12.6925374Z [main]	INFO	profile exclude tests: None
2022-06-16T11:21:12.6925996Z [main]	INFO	cli include tests: None
2022-06-16T11:21:12.6926747Z [main]	INFO	cli exclude tests: B101
2022-06-16T11:21:12.6933639Z [main]	INFO	running on Python 3.10.5
2022-06-16T11:21:20.1228162Z 468 [0.. 50.. 100.. 150.. 200.. 250.. 300.. 350.. 400.. 450.. ]
2022-06-16T11:21:20.1440170Z Run started:2022-06-16 11:21:20.125319
2022-06-16T11:21:20.1440383Z 
2022-06-16T11:21:20.1440555Z Test results:
2022-06-16T11:21:20.1442000Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1442663Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1443523Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1444153Z    Location: ./1 File handle/File handle binary/Deleting record in a binary file.py:1:0
2022-06-16T11:21:20.1444856Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1445235Z 1	import pickle
2022-06-16T11:21:20.1445450Z 2	
2022-06-16T11:21:20.1445622Z 3	
2022-06-16T11:21:20.1445824Z 4	def bdelete():
2022-06-16T11:21:20.1446077Z 5	    # Opening a file & loading it
2022-06-16T11:21:20.1446243Z 
2022-06-16T11:21:20.1446602Z --------------------------------------------------
2022-06-16T11:21:20.1447049Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1447459Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1448025Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1448795Z    Location: ./1 File handle/File handle binary/Deleting record in a binary file.py:7:15
2022-06-16T11:21:20.1449390Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1449773Z 6	    with open("studrec.dat") as F:
2022-06-16T11:21:20.1450042Z 7	        stud = pickle.load(F)
2022-06-16T11:21:20.1450269Z 8	        print(stud)
2022-06-16T11:21:20.1450410Z 
2022-06-16T11:21:20.1451117Z --------------------------------------------------
2022-06-16T11:21:20.1451525Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1451880Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1452309Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1452755Z    Location: ./1 File handle/File handle binary/File handle binary read (record in non list form).py:1:0
2022-06-16T11:21:20.1453710Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1454063Z 1	import pickle
2022-06-16T11:21:20.1454275Z 2	
2022-06-16T11:21:20.1454469Z 3	
2022-06-16T11:21:20.1454662Z 4	def binary_read():
2022-06-16T11:21:20.1454922Z 5	    with open("studrec.dat") as b:
2022-06-16T11:21:20.1455092Z 
2022-06-16T11:21:20.1455317Z --------------------------------------------------
2022-06-16T11:21:20.1455761Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1456185Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1456631Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1457246Z    Location: ./1 File handle/File handle binary/File handle binary read (record in non list form).py:6:15
2022-06-16T11:21:20.1457874Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1458262Z 5	    with open("studrec.dat") as b:
2022-06-16T11:21:20.1458532Z 6	        stud = pickle.load(b)
2022-06-16T11:21:20.1458759Z 7	        print(stud)
2022-06-16T11:21:20.1458898Z 
2022-06-16T11:21:20.1459388Z --------------------------------------------------
2022-06-16T11:21:20.1459805Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1460170Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1460601Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1460996Z    Location: ./1 File handle/File handle binary/Update a binary file.py:3:0
2022-06-16T11:21:20.1461593Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1461931Z 2	
2022-06-16T11:21:20.1462143Z 3	import pickle
2022-06-16T11:21:20.1462354Z 4	
2022-06-16T11:21:20.1462526Z 5	
2022-06-16T11:21:20.1462724Z 6	def update():
2022-06-16T11:21:20.1462861Z 
2022-06-16T11:21:20.1463086Z --------------------------------------------------
2022-06-16T11:21:20.1463547Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1463952Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1464390Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1464791Z    Location: ./1 File handle/File handle binary/Update a binary file.py:8:8
2022-06-16T11:21:20.1465347Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1465719Z 7	    F = open("class.dat", "rb+")
2022-06-16T11:21:20.1465972Z 8	    S = pickle.load(F)
2022-06-16T11:21:20.1466199Z 9	    found = 0
2022-06-16T11:21:20.1466319Z 
2022-06-16T11:21:20.1466541Z --------------------------------------------------
2022-06-16T11:21:20.1467005Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1467421Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1467842Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1468238Z    Location: ./1 File handle/File handle binary/Update a binary file.py:31:6
2022-06-16T11:21:20.1468928Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1469287Z 30	F = open("class.dat", "rb")
2022-06-16T11:21:20.1469519Z 31	val = pickle.load(F)
2022-06-16T11:21:20.1469745Z 32	print(val)
2022-06-16T11:21:20.1469877Z 
2022-06-16T11:21:20.1470251Z --------------------------------------------------
2022-06-16T11:21:20.1470640Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1471011Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1471589Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1471972Z    Location: ./1 File handle/File handle binary/Update a binary file2.py:3:0
2022-06-16T11:21:20.1472569Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1472921Z 2	
2022-06-16T11:21:20.1473126Z 3	import pickle
2022-06-16T11:21:20.1473319Z 4	
2022-06-16T11:21:20.1473499Z 5	
2022-06-16T11:21:20.1473694Z 6	def update():
2022-06-16T11:21:20.1473815Z 
2022-06-16T11:21:20.1474035Z --------------------------------------------------
2022-06-16T11:21:20.1474608Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1475139Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1475557Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1476053Z    Location: ./1 File handle/File handle binary/Update a binary file2.py:8:12
2022-06-16T11:21:20.1476645Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1477026Z 7	    F = open("studrec.dat", "rb+")
2022-06-16T11:21:20.1477280Z 8	    value = pickle.load(F)
2022-06-16T11:21:20.1477513Z 9	    found = 0
2022-06-16T11:21:20.1477647Z 
2022-06-16T11:21:20.1477868Z --------------------------------------------------
2022-06-16T11:21:20.1478308Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1478720Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1479266Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1479652Z    Location: ./1 File handle/File handle binary/Update a binary file2.py:25:17
2022-06-16T11:21:20.1480303Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1480631Z 24	        F.seek(0)
2022-06-16T11:21:20.1481097Z 25	        newval = pickle.load(F)
2022-06-16T11:21:20.1481331Z 26	        print(newval)
2022-06-16T11:21:20.1481473Z 
2022-06-16T11:21:20.1481694Z --------------------------------------------------
2022-06-16T11:21:20.1482096Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1482448Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1482877Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1483308Z    Location: ./1 File handle/File handle binary/question 1 (elegible for remedial, top marks).py:13:0
2022-06-16T11:21:20.1483935Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1484274Z 12	
2022-06-16T11:21:20.1484479Z 13	import pickle
2022-06-16T11:21:20.1484689Z 14	
2022-06-16T11:21:20.1485023Z 15	F = open("class.dat", "ab")
2022-06-16T11:21:20.1485293Z 
2022-06-16T11:21:20.1485500Z --------------------------------------------------
2022-06-16T11:21:20.1485926Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1486305Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1487486Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1487933Z    Location: ./1 File handle/File handle binary/question 1 (elegible for remedial, top marks).py:34:10
2022-06-16T11:21:20.1488539Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1488898Z 33	    F = open("class.dat", "rb")
2022-06-16T11:21:20.1489157Z 34	    val = pickle.load(F)
2022-06-16T11:21:20.1489390Z 35	    count = 0
2022-06-16T11:21:20.1489525Z 
2022-06-16T11:21:20.1489733Z --------------------------------------------------
2022-06-16T11:21:20.1490193Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1490780Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1491232Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1491649Z    Location: ./1 File handle/File handle binary/question 1 (elegible for remedial, top marks).py:50:10
2022-06-16T11:21:20.1492251Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1492624Z 49	    F = open("class.dat", "rb")
2022-06-16T11:21:20.1492868Z 50	    val = pickle.load(F)
2022-06-16T11:21:20.1493108Z 51	    main = []
2022-06-16T11:21:20.1493244Z 
2022-06-16T11:21:20.1493462Z --------------------------------------------------
2022-06-16T11:21:20.1493919Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1494400Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1494863Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1495291Z    Location: ./1 File handle/File handle binary/question 1 (elegible for remedial, top marks).py:75:6
2022-06-16T11:21:20.1495876Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1496292Z 74	F = open("class.dat", "rb")
2022-06-16T11:21:20.1496545Z 75	val = pickle.load(F)
2022-06-16T11:21:20.1496761Z 76	print(val)
2022-06-16T11:21:20.1496897Z 
2022-06-16T11:21:20.1497117Z --------------------------------------------------
2022-06-16T11:21:20.1497516Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1497884Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1498300Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1498710Z    Location: ./1 File handle/File handle binary/search record in binary file.py:3:0
2022-06-16T11:21:20.1499604Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1499956Z 2	
2022-06-16T11:21:20.1500160Z 3	import pickle
2022-06-16T11:21:20.1500368Z 4	
2022-06-16T11:21:20.1500537Z 5	
2022-06-16T11:21:20.1500742Z 6	def binary_search():
2022-06-16T11:21:20.1500892Z 
2022-06-16T11:21:20.1501130Z --------------------------------------------------
2022-06-16T11:21:20.1501594Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.1501997Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1502432Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1502847Z    Location: ./1 File handle/File handle binary/search record in binary file.py:9:12
2022-06-16T11:21:20.1503414Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.1503800Z 8	    # your file path will be different
2022-06-16T11:21:20.1504075Z 9	    value = pickle.load(F)
2022-06-16T11:21:20.1504312Z 10	    search = 0
2022-06-16T11:21:20.1504434Z 
2022-06-16T11:21:20.1504656Z --------------------------------------------------
2022-06-16T11:21:20.1505083Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1505428Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1505844Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1506190Z    Location: ./Assembler/assembler.py:68:12
2022-06-16T11:21:20.1506597Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1506932Z 67	    global tokens
2022-06-16T11:21:20.1507153Z 68	    token = ""
2022-06-16T11:21:20.1507380Z 69	    state = 0  # init state
2022-06-16T11:21:20.1507529Z 
2022-06-16T11:21:20.1507752Z --------------------------------------------------
2022-06-16T11:21:20.1508160Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1508646Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1510127Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1510473Z    Location: ./Assembler/assembler.py:167:24
2022-06-16T11:21:20.1510880Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1511230Z 166	                state = 0
2022-06-16T11:21:20.1511448Z 167	                token = ""
2022-06-16T11:21:20.1511660Z 168	
2022-06-16T11:21:20.1511781Z 
2022-06-16T11:21:20.1512005Z --------------------------------------------------
2022-06-16T11:21:20.1512430Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1512755Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1513186Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1513704Z    Location: ./Assembler/assembler.py:184:24
2022-06-16T11:21:20.1514125Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1514479Z 183	                state = 0
2022-06-16T11:21:20.1514710Z 184	                token = ""
2022-06-16T11:21:20.1514953Z 185	                raise InvalidSyntax()
2022-06-16T11:21:20.1515117Z 
2022-06-16T11:21:20.1515348Z --------------------------------------------------
2022-06-16T11:21:20.1515769Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1516109Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1516525Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1516875Z    Location: ./Assembler/assembler.py:196:24
2022-06-16T11:21:20.1517286Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1517634Z 195	                state = 0
2022-06-16T11:21:20.1517866Z 196	                token = ""
2022-06-16T11:21:20.1518124Z 197	                raise InvalidSyntax()
2022-06-16T11:21:20.1518288Z 
2022-06-16T11:21:20.1518495Z --------------------------------------------------
2022-06-16T11:21:20.1518915Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1519252Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1519678Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1520010Z    Location: ./Assembler/assembler.py:205:24
2022-06-16T11:21:20.1520414Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1520817Z 204	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1521078Z 205	                token = ""
2022-06-16T11:21:20.1521291Z 206	
2022-06-16T11:21:20.1521409Z 
2022-06-16T11:21:20.1521625Z --------------------------------------------------
2022-06-16T11:21:20.1522035Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1522379Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1522809Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1523156Z    Location: ./Assembler/assembler.py:210:24
2022-06-16T11:21:20.1523548Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1523899Z 209	                state = 0
2022-06-16T11:21:20.1524130Z 210	                token = ""
2022-06-16T11:21:20.1524371Z 211	                raise InvalidSyntax()
2022-06-16T11:21:20.1524534Z 
2022-06-16T11:21:20.1524753Z --------------------------------------------------
2022-06-16T11:21:20.1525173Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1525511Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1525928Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1526281Z    Location: ./Assembler/assembler.py:222:24
2022-06-16T11:21:20.1526788Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1527123Z 221	                state = 0
2022-06-16T11:21:20.1527355Z 222	                token = ""
2022-06-16T11:21:20.1527611Z 223	                raise InvalidSyntax()
2022-06-16T11:21:20.1527775Z 
2022-06-16T11:21:20.1527990Z --------------------------------------------------
2022-06-16T11:21:20.1528409Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1528745Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1529177Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1529513Z    Location: ./Assembler/assembler.py:233:24
2022-06-16T11:21:20.1529919Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1530267Z 232	                state = 0
2022-06-16T11:21:20.1530560Z 233	                token = ""
2022-06-16T11:21:20.1530827Z 234	                raise InvalidSyntax()
2022-06-16T11:21:20.1530993Z 
2022-06-16T11:21:20.1531218Z --------------------------------------------------
2022-06-16T11:21:20.1531624Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1531968Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1532399Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1532746Z    Location: ./Assembler/assembler.py:247:24
2022-06-16T11:21:20.1533138Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1533537Z 246	                tokens.append(Token(token, "value"))
2022-06-16T11:21:20.1533811Z 247	                token = ""
2022-06-16T11:21:20.1534008Z 248	
2022-06-16T11:21:20.1534128Z 
2022-06-16T11:21:20.1534346Z --------------------------------------------------
2022-06-16T11:21:20.1534772Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1535104Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1535536Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1535884Z    Location: ./Assembler/assembler.py:252:24
2022-06-16T11:21:20.1536289Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1536626Z 251	                state = 0
2022-06-16T11:21:20.1536857Z 252	                token = ""
2022-06-16T11:21:20.1537115Z 253	                raise InvalidSyntax()
2022-06-16T11:21:20.1537279Z 
2022-06-16T11:21:20.1537482Z --------------------------------------------------
2022-06-16T11:21:20.1537898Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1538240Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1538653Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1539005Z    Location: ./Assembler/assembler.py:265:24
2022-06-16T11:21:20.1539845Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1540206Z 264	                state = 0
2022-06-16T11:21:20.1540421Z 265	                token = ""
2022-06-16T11:21:20.1540675Z 266	                raise InvalidSyntax()
2022-06-16T11:21:20.1540840Z 
2022-06-16T11:21:20.1541075Z --------------------------------------------------
2022-06-16T11:21:20.1541654Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1541995Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1542430Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1542779Z    Location: ./Assembler/assembler.py:278:24
2022-06-16T11:21:20.1543172Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1543521Z 277	                state = 0
2022-06-16T11:21:20.1543757Z 278	                token = ""
2022-06-16T11:21:20.1543998Z 279	                raise InvalidSyntax()
2022-06-16T11:21:20.1544361Z 
2022-06-16T11:21:20.1544600Z --------------------------------------------------
2022-06-16T11:21:20.1545021Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1545347Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1545776Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1546122Z    Location: ./Assembler/assembler.py:287:24
2022-06-16T11:21:20.1546529Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1546924Z 286	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1547199Z 287	                token = ""
2022-06-16T11:21:20.1547412Z 288	
2022-06-16T11:21:20.1547531Z 
2022-06-16T11:21:20.1547735Z --------------------------------------------------
2022-06-16T11:21:20.1548272Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1548624Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1549049Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1549398Z    Location: ./Assembler/assembler.py:292:24
2022-06-16T11:21:20.1549806Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1550153Z 291	                state = 0
2022-06-16T11:21:20.1550370Z 292	                token = ""
2022-06-16T11:21:20.1550621Z 293	                raise InvalidSyntax()
2022-06-16T11:21:20.1550788Z 
2022-06-16T11:21:20.1551011Z --------------------------------------------------
2022-06-16T11:21:20.1551417Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1551756Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1552184Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1552520Z    Location: ./Assembler/assembler.py:305:24
2022-06-16T11:21:20.1552927Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1553282Z 304	                state = 0
2022-06-16T11:21:20.1553513Z 305	                token = ""
2022-06-16T11:21:20.1553752Z 306	                raise InvalidSyntax()
2022-06-16T11:21:20.1553913Z 
2022-06-16T11:21:20.1554722Z --------------------------------------------------
2022-06-16T11:21:20.1555276Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1555609Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1556048Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1556399Z    Location: ./Assembler/assembler.py:318:24
2022-06-16T11:21:20.1556808Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1557145Z 317	                state = 0
2022-06-16T11:21:20.1557379Z 318	                token = ""
2022-06-16T11:21:20.1557634Z 319	                raise InvalidSyntax()
2022-06-16T11:21:20.1557786Z 
2022-06-16T11:21:20.1558007Z --------------------------------------------------
2022-06-16T11:21:20.1558430Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1558769Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1559184Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1559531Z    Location: ./Assembler/assembler.py:327:24
2022-06-16T11:21:20.1559936Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1560341Z 326	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1560600Z 327	                token = ""
2022-06-16T11:21:20.1560811Z 328	
2022-06-16T11:21:20.1560929Z 
2022-06-16T11:21:20.1561146Z --------------------------------------------------
2022-06-16T11:21:20.1561551Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1562235Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1562940Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1563381Z    Location: ./Assembler/assembler.py:332:24
2022-06-16T11:21:20.1563814Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1564262Z 331	                state = 0
2022-06-16T11:21:20.1564639Z 332	                token = ""
2022-06-16T11:21:20.1564920Z 333	                raise InvalidSyntax()
2022-06-16T11:21:20.1565120Z 
2022-06-16T11:21:20.1565388Z --------------------------------------------------
2022-06-16T11:21:20.1565910Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1566374Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1566847Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1567368Z    Location: ./Assembler/assembler.py:341:24
2022-06-16T11:21:20.1567891Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1568333Z 340	                tokens.append(Token(token, "register"))
2022-06-16T11:21:20.1568748Z 341	                token = ""
2022-06-16T11:21:20.1569041Z 342	
2022-06-16T11:21:20.1569201Z 
2022-06-16T11:21:20.1569422Z --------------------------------------------------
2022-06-16T11:21:20.1569944Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1570484Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1571394Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1571893Z    Location: ./Assembler/assembler.py:346:24
2022-06-16T11:21:20.1572385Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1572804Z 345	                state = 0
2022-06-16T11:21:20.1573053Z 346	                token = ""
2022-06-16T11:21:20.1573424Z 347	                raise InvalidSyntax()
2022-06-16T11:21:20.1573629Z 
2022-06-16T11:21:20.1573907Z --------------------------------------------------
2022-06-16T11:21:20.1574345Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1574967Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1575460Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1575847Z    Location: ./Assembler/assembler.py:359:24
2022-06-16T11:21:20.1576229Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1576601Z 358	                state = 0
2022-06-16T11:21:20.1576877Z 359	                token = ""
2022-06-16T11:21:20.1577159Z 360	                raise InvalidSyntax()
2022-06-16T11:21:20.1577336Z 
2022-06-16T11:21:20.1577582Z --------------------------------------------------
2022-06-16T11:21:20.1578029Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1578481Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1579413Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1580087Z    Location: ./Assembler/assembler.py:372:24
2022-06-16T11:21:20.1580580Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1580960Z 371	                state = 0
2022-06-16T11:21:20.1581294Z 372	                token = ""
2022-06-16T11:21:20.1581668Z 373	                raise InvalidSyntax()
2022-06-16T11:21:20.1581888Z 
2022-06-16T11:21:20.1582123Z --------------------------------------------------
2022-06-16T11:21:20.1582628Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1583043Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1583497Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1583992Z    Location: ./Assembler/assembler.py:381:24
2022-06-16T11:21:20.1584484Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1585122Z 380	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1585422Z 381	                token = ""
2022-06-16T11:21:20.1585723Z 382	
2022-06-16T11:21:20.1585932Z 
2022-06-16T11:21:20.1586216Z --------------------------------------------------
2022-06-16T11:21:20.1586664Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1587080Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1587586Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1588063Z    Location: ./Assembler/assembler.py:386:24
2022-06-16T11:21:20.1588503Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1588935Z 385	                state = 0
2022-06-16T11:21:20.1589263Z 386	                token = ""
2022-06-16T11:21:20.1589656Z 387	                raise InvalidSyntax()
2022-06-16T11:21:20.1589872Z 
2022-06-16T11:21:20.1590210Z --------------------------------------------------
2022-06-16T11:21:20.1590721Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1591089Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1591611Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1592087Z    Location: ./Assembler/assembler.py:400:24
2022-06-16T11:21:20.1592628Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1593066Z 399	                tokens.append(Token(token, "value"))
2022-06-16T11:21:20.1593412Z 400	                token = ""
2022-06-16T11:21:20.1593714Z 401	
2022-06-16T11:21:20.1593822Z 
2022-06-16T11:21:20.1594088Z --------------------------------------------------
2022-06-16T11:21:20.1594643Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1595066Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1595545Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1595977Z    Location: ./Assembler/assembler.py:405:24
2022-06-16T11:21:20.1596501Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1596910Z 404	                state = 0
2022-06-16T11:21:20.1633300Z 405	                token = ""
2022-06-16T11:21:20.1633586Z 406	                raise InvalidSyntax()
2022-06-16T11:21:20.1633756Z 
2022-06-16T11:21:20.1634057Z --------------------------------------------------
2022-06-16T11:21:20.1634610Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1634936Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1635356Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1635677Z    Location: ./Assembler/assembler.py:419:24
2022-06-16T11:21:20.1636072Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1636456Z 418	                tokens.append(Token(token, "value"))
2022-06-16T11:21:20.1636699Z 419	                token = ""
2022-06-16T11:21:20.1636899Z 420	
2022-06-16T11:21:20.1637013Z 
2022-06-16T11:21:20.1637219Z --------------------------------------------------
2022-06-16T11:21:20.1637603Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1637922Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1638327Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1638657Z    Location: ./Assembler/assembler.py:424:24
2022-06-16T11:21:20.1639026Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1639358Z 423	                state = 0
2022-06-16T11:21:20.1639575Z 424	                token = ""
2022-06-16T11:21:20.1639802Z 425	                raise InvalidSyntax()
2022-06-16T11:21:20.1640003Z 
2022-06-16T11:21:20.1640318Z --------------------------------------------------
2022-06-16T11:21:20.1641067Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1641501Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1641922Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1642261Z    Location: ./Assembler/assembler.py:442:24
2022-06-16T11:21:20.1642659Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1642986Z 441	                state = 0
2022-06-16T11:21:20.1643208Z 442	                token = ""
2022-06-16T11:21:20.1643453Z 443	                raise InvalidSyntax()
2022-06-16T11:21:20.1643733Z 
2022-06-16T11:21:20.1643939Z --------------------------------------------------
2022-06-16T11:21:20.1644592Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1645002Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1645414Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1645745Z    Location: ./Assembler/assembler.py:455:24
2022-06-16T11:21:20.1646641Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1647004Z 454	                state = 0
2022-06-16T11:21:20.1647312Z 455	                token = ""
2022-06-16T11:21:20.1647532Z 456	                raise InvalidSyntax()
2022-06-16T11:21:20.1647676Z 
2022-06-16T11:21:20.1647909Z --------------------------------------------------
2022-06-16T11:21:20.1648269Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1648566Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1648945Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1649255Z    Location: ./Assembler/assembler.py:468:24
2022-06-16T11:21:20.1649607Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1649918Z 467	                state = 0
2022-06-16T11:21:20.1650119Z 468	                token = ""
2022-06-16T11:21:20.1650328Z 469	                raise InvalidSyntax()
2022-06-16T11:21:20.1650470Z 
2022-06-16T11:21:20.1650664Z --------------------------------------------------
2022-06-16T11:21:20.1651291Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1651607Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1652018Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1652355Z    Location: ./Assembler/assembler.py:477:24
2022-06-16T11:21:20.1652741Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1653119Z 476	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1653382Z 477	                token = ""
2022-06-16T11:21:20.1653703Z 478	
2022-06-16T11:21:20.1653814Z 
2022-06-16T11:21:20.1654035Z --------------------------------------------------
2022-06-16T11:21:20.1654581Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1655033Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1655424Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1655748Z    Location: ./Assembler/assembler.py:482:24
2022-06-16T11:21:20.1656254Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1656591Z 481	                state = 0
2022-06-16T11:21:20.1656799Z 482	                token = ""
2022-06-16T11:21:20.1657043Z 483	                raise InvalidSyntax()
2022-06-16T11:21:20.1657203Z 
2022-06-16T11:21:20.1657416Z --------------------------------------------------
2022-06-16T11:21:20.1657807Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1658139Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1658552Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1659207Z    Location: ./Assembler/assembler.py:495:24
2022-06-16T11:21:20.1659619Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1660079Z 494	                state = 0
2022-06-16T11:21:20.1660290Z 495	                token = ""
2022-06-16T11:21:20.1660608Z 496	                raise InvalidSyntax()
2022-06-16T11:21:20.1660748Z 
2022-06-16T11:21:20.1660961Z --------------------------------------------------
2022-06-16T11:21:20.1661330Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1661616Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1661992Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1662295Z    Location: ./Assembler/assembler.py:504:24
2022-06-16T11:21:20.1662929Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1663324Z 503	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1663583Z 504	                token = ""
2022-06-16T11:21:20.1663780Z 505	
2022-06-16T11:21:20.1663878Z 
2022-06-16T11:21:20.1664092Z --------------------------------------------------
2022-06-16T11:21:20.1664488Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1664804Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1665190Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1665517Z    Location: ./Assembler/assembler.py:509:24
2022-06-16T11:21:20.1665995Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1666301Z 508	                state = 0
2022-06-16T11:21:20.1666490Z 509	                token = ""
2022-06-16T11:21:20.1666713Z 510	                raise InvalidSyntax()
2022-06-16T11:21:20.1666861Z 
2022-06-16T11:21:20.1667056Z --------------------------------------------------
2022-06-16T11:21:20.1667415Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1667717Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1668091Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1668382Z    Location: ./Assembler/assembler.py:523:24
2022-06-16T11:21:20.1668739Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1669091Z 522	                tokens.append(Token(token, "label"))
2022-06-16T11:21:20.1669328Z 523	                token = ""
2022-06-16T11:21:20.1669501Z 524	
2022-06-16T11:21:20.1669605Z 
2022-06-16T11:21:20.1669797Z --------------------------------------------------
2022-06-16T11:21:20.1670300Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1670606Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1671006Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1671333Z    Location: ./Assembler/assembler.py:528:24
2022-06-16T11:21:20.1671698Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1672026Z 527	                state = 0
2022-06-16T11:21:20.1672241Z 528	                token = ""
2022-06-16T11:21:20.1672479Z 529	                raise InvalidSyntax()
2022-06-16T11:21:20.1672618Z 
2022-06-16T11:21:20.1672825Z --------------------------------------------------
2022-06-16T11:21:20.1673217Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1673537Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1673925Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1674249Z    Location: ./Assembler/assembler.py:546:24
2022-06-16T11:21:20.1674718Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1675010Z 545	                state = 0
2022-06-16T11:21:20.1675310Z 546	                token = ""
2022-06-16T11:21:20.1675534Z 547	                raise InvalidSyntax()
2022-06-16T11:21:20.1675674Z 
2022-06-16T11:21:20.1675870Z --------------------------------------------------
2022-06-16T11:21:20.1676226Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1676524Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1676899Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1677193Z    Location: ./Assembler/assembler.py:559:24
2022-06-16T11:21:20.1677549Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1677850Z 558	                state = 0
2022-06-16T11:21:20.1678038Z 559	                token = ""
2022-06-16T11:21:20.1678257Z 560	                raise InvalidSyntax()
2022-06-16T11:21:20.1678398Z 
2022-06-16T11:21:20.1678659Z --------------------------------------------------
2022-06-16T11:21:20.1679048Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1679336Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1679709Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1680013Z    Location: ./Assembler/assembler.py:568:24
2022-06-16T11:21:20.1680354Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1680704Z 567	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1680943Z 568	                token = ""
2022-06-16T11:21:20.1681116Z 569	
2022-06-16T11:21:20.1681222Z 
2022-06-16T11:21:20.1681413Z --------------------------------------------------
2022-06-16T11:21:20.1681784Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1682081Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1682451Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1682759Z    Location: ./Assembler/assembler.py:573:24
2022-06-16T11:21:20.1683246Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1683684Z 572	                state = 0
2022-06-16T11:21:20.1683908Z 573	                token = ""
2022-06-16T11:21:20.1684153Z 574	                raise InvalidSyntax()
2022-06-16T11:21:20.1684308Z 
2022-06-16T11:21:20.1684519Z --------------------------------------------------
2022-06-16T11:21:20.1684910Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1685233Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1685636Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1685947Z    Location: ./Assembler/assembler.py:591:24
2022-06-16T11:21:20.1686447Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1686774Z 590	                state = 0
2022-06-16T11:21:20.1686976Z 591	                token = ""
2022-06-16T11:21:20.1687315Z 592	                raise InvalidSyntax()
2022-06-16T11:21:20.1687447Z 
2022-06-16T11:21:20.1687640Z --------------------------------------------------
2022-06-16T11:21:20.1688056Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1688343Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1688720Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1689025Z    Location: ./Assembler/assembler.py:604:24
2022-06-16T11:21:20.1689369Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1689799Z 603	                state = 0
2022-06-16T11:21:20.1690015Z 604	                token = ""
2022-06-16T11:21:20.1690236Z 605	                raise InvalidSyntax()
2022-06-16T11:21:20.1690383Z 
2022-06-16T11:21:20.1690589Z --------------------------------------------------
2022-06-16T11:21:20.1691076Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1691380Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1691760Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1692078Z    Location: ./Assembler/assembler.py:613:24
2022-06-16T11:21:20.1692461Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1692825Z 612	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1693321Z 613	                token = ""
2022-06-16T11:21:20.1693533Z 614	
2022-06-16T11:21:20.1693652Z 
2022-06-16T11:21:20.1693857Z --------------------------------------------------
2022-06-16T11:21:20.1694267Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1694594Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1695086Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1695428Z    Location: ./Assembler/assembler.py:618:24
2022-06-16T11:21:20.1695823Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1696412Z 617	                state = 0
2022-06-16T11:21:20.1696603Z 618	                token = ""
2022-06-16T11:21:20.1696827Z 619	                raise InvalidSyntax()
2022-06-16T11:21:20.1696968Z 
2022-06-16T11:21:20.1697166Z --------------------------------------------------
2022-06-16T11:21:20.1697534Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1697949Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1698353Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1698684Z    Location: ./Assembler/assembler.py:627:24
2022-06-16T11:21:20.1699966Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1700657Z 626	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1706264Z 627	                token = ""
2022-06-16T11:21:20.1706453Z 628	
2022-06-16T11:21:20.1706560Z 
2022-06-16T11:21:20.1706823Z --------------------------------------------------
2022-06-16T11:21:20.1707212Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1707515Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1707888Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1708194Z    Location: ./Assembler/assembler.py:632:24
2022-06-16T11:21:20.1708560Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1708860Z 631	                state = 0
2022-06-16T11:21:20.1709064Z 632	                token = ""
2022-06-16T11:21:20.1709287Z 633	                raise InvalidSyntax()
2022-06-16T11:21:20.1709432Z 
2022-06-16T11:21:20.1709622Z --------------------------------------------------
2022-06-16T11:21:20.1710706Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1711886Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1712378Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1712716Z    Location: ./Assembler/assembler.py:653:24
2022-06-16T11:21:20.1713126Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1713479Z 652	                state = 0
2022-06-16T11:21:20.1713695Z 653	                token = ""
2022-06-16T11:21:20.1713945Z 654	                raise InvalidSyntax()
2022-06-16T11:21:20.1714110Z 
2022-06-16T11:21:20.1714578Z --------------------------------------------------
2022-06-16T11:21:20.1714963Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1715286Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1715693Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1716112Z    Location: ./Assembler/assembler.py:667:24
2022-06-16T11:21:20.1716658Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1717014Z 666	                tokens.append(Token(token, "string"))
2022-06-16T11:21:20.1717251Z 667	                token = ""
2022-06-16T11:21:20.1717428Z 668	
2022-06-16T11:21:20.1717533Z 
2022-06-16T11:21:20.1717735Z --------------------------------------------------
2022-06-16T11:21:20.1718107Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1718390Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1718764Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1719072Z    Location: ./Assembler/assembler.py:672:24
2022-06-16T11:21:20.1719431Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1719807Z 671	                state = 0
2022-06-16T11:21:20.1720025Z 672	                token = ""
2022-06-16T11:21:20.1720256Z 673	                raise InvalidSyntax()
2022-06-16T11:21:20.1720400Z 
2022-06-16T11:21:20.1720589Z --------------------------------------------------
2022-06-16T11:21:20.1720962Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1721264Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1721639Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1721934Z    Location: ./Assembler/assembler.py:686:24
2022-06-16T11:21:20.1722289Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1722651Z 685	                tokens.append(Token(token, "identifier"))
2022-06-16T11:21:20.1722885Z 686	                token = ""
2022-06-16T11:21:20.1723072Z 687	
2022-06-16T11:21:20.1723180Z 
2022-06-16T11:21:20.1723380Z --------------------------------------------------
2022-06-16T11:21:20.1723741Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1724043Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1724415Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1724721Z    Location: ./Assembler/assembler.py:691:24
2022-06-16T11:21:20.1725067Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1725379Z 690	                state = 0
2022-06-16T11:21:20.1725579Z 691	                token = ""
2022-06-16T11:21:20.1725790Z 692	                raise InvalidSyntax()
2022-06-16T11:21:20.1725933Z 
2022-06-16T11:21:20.1726124Z --------------------------------------------------
2022-06-16T11:21:20.1726496Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1726781Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1727307Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1727637Z    Location: ./Assembler/assembler.py:709:24
2022-06-16T11:21:20.1728022Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1728337Z 708	                state = 0
2022-06-16T11:21:20.1728551Z 709	                token = ""
2022-06-16T11:21:20.1728790Z 710	                raise InvalidSyntax()
2022-06-16T11:21:20.1728938Z 
2022-06-16T11:21:20.1729131Z --------------------------------------------------
2022-06-16T11:21:20.1729526Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1729844Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1730320Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1730626Z    Location: ./Assembler/assembler.py:718:24
2022-06-16T11:21:20.1730981Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1731337Z 717	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1731563Z 718	                token = ""
2022-06-16T11:21:20.1731959Z 719	
2022-06-16T11:21:20.1732071Z 
2022-06-16T11:21:20.1732283Z --------------------------------------------------
2022-06-16T11:21:20.1732666Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1732985Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1733385Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1733695Z    Location: ./Assembler/assembler.py:723:24
2022-06-16T11:21:20.1734072Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1734402Z 722	                state = 0
2022-06-16T11:21:20.1734617Z 723	                token = ""
2022-06-16T11:21:20.1734841Z 724	                raise InvalidSyntax()
2022-06-16T11:21:20.1734993Z 
2022-06-16T11:21:20.1735408Z --------------------------------------------------
2022-06-16T11:21:20.1735874Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1736246Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1736786Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1737122Z    Location: ./Assembler/assembler.py:736:24
2022-06-16T11:21:20.1737516Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1737841Z 735	                state = 0
2022-06-16T11:21:20.1738063Z 736	                token = ""
2022-06-16T11:21:20.1738425Z 737	                raise InvalidSyntax()
2022-06-16T11:21:20.1738574Z 
2022-06-16T11:21:20.1738793Z --------------------------------------------------
2022-06-16T11:21:20.1739461Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1739932Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1740488Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1740836Z    Location: ./Assembler/assembler.py:750:24
2022-06-16T11:21:20.1741246Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1741654Z 749	                tokens.append(Token(token, "identifier"))
2022-06-16T11:21:20.1741916Z 750	                token = ""
2022-06-16T11:21:20.1742117Z 751	
2022-06-16T11:21:20.1742233Z 
2022-06-16T11:21:20.1742453Z --------------------------------------------------
2022-06-16T11:21:20.1742859Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1743196Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1743865Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1744199Z    Location: ./Assembler/assembler.py:755:24
2022-06-16T11:21:20.1744720Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1745063Z 754	                state = 0
2022-06-16T11:21:20.1745286Z 755	                token = ""
2022-06-16T11:21:20.1745522Z 756	                raise InvalidSyntax()
2022-06-16T11:21:20.1745679Z 
2022-06-16T11:21:20.1745892Z --------------------------------------------------
2022-06-16T11:21:20.1746296Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1746615Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1747145Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1747558Z    Location: ./Assembler/assembler.py:773:24
2022-06-16T11:21:20.1747902Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1748262Z 772	                tokens.append(Token(token, "subprogram"))
2022-06-16T11:21:20.1748509Z 773	                token = ""
2022-06-16T11:21:20.1748699Z 774	
2022-06-16T11:21:20.1748790Z 
2022-06-16T11:21:20.1748988Z --------------------------------------------------
2022-06-16T11:21:20.1749362Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1750018Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1750445Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1750793Z    Location: ./Assembler/assembler.py:778:24
2022-06-16T11:21:20.1751197Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1751535Z 777	                state = 0
2022-06-16T11:21:20.1751765Z 778	                token = ""
2022-06-16T11:21:20.1752019Z 779	                raise InvalidSyntax()
2022-06-16T11:21:20.1752182Z 
2022-06-16T11:21:20.1752403Z --------------------------------------------------
2022-06-16T11:21:20.1752809Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1753150Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1753578Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1753996Z    Location: ./Assembler/assembler.py:791:24
2022-06-16T11:21:20.1754422Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1754776Z 790	                state = 0
2022-06-16T11:21:20.1754994Z 791	                token = ""
2022-06-16T11:21:20.1755246Z 792	                raise InvalidSyntax()
2022-06-16T11:21:20.1755409Z 
2022-06-16T11:21:20.1755637Z --------------------------------------------------
2022-06-16T11:21:20.1756055Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1756381Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1756809Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1757158Z    Location: ./Assembler/assembler.py:804:24
2022-06-16T11:21:20.1757552Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1757900Z 803	                state = 0
2022-06-16T11:21:20.1758136Z 804	                token = ""
2022-06-16T11:21:20.1758389Z 805	                raise InvalidSyntax()
2022-06-16T11:21:20.1758541Z 
2022-06-16T11:21:20.1758761Z --------------------------------------------------
2022-06-16T11:21:20.1759179Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1759524Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1759937Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1760283Z    Location: ./Assembler/assembler.py:813:24
2022-06-16T11:21:20.1760690Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1761080Z 812	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1761358Z 813	                token = ""
2022-06-16T11:21:20.1761571Z 814	
2022-06-16T11:21:20.1761691Z 
2022-06-16T11:21:20.1761908Z --------------------------------------------------
2022-06-16T11:21:20.1762316Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1762659Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1763087Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1763418Z    Location: ./Assembler/assembler.py:818:24
2022-06-16T11:21:20.1763822Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1764173Z 817	                state = 0
2022-06-16T11:21:20.1764390Z 818	                token = ""
2022-06-16T11:21:20.1764644Z 819	                raise InvalidSyntax()
2022-06-16T11:21:20.1764928Z 
2022-06-16T11:21:20.1765139Z --------------------------------------------------
2022-06-16T11:21:20.1765663Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1766110Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1766524Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1766861Z    Location: ./Assembler/assembler.py:831:24
2022-06-16T11:21:20.1767242Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1767670Z 830	                state = 0
2022-06-16T11:21:20.1767895Z 831	                token = ""
2022-06-16T11:21:20.1768126Z 832	                raise InvalidSyntax()
2022-06-16T11:21:20.1768282Z 
2022-06-16T11:21:20.1768499Z --------------------------------------------------
2022-06-16T11:21:20.1768905Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1769351Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1770004Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1770353Z    Location: ./Assembler/assembler.py:844:24
2022-06-16T11:21:20.1770756Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1771089Z 843	                state = 0
2022-06-16T11:21:20.1771389Z 844	                token = ""
2022-06-16T11:21:20.1771655Z 845	                raise InvalidSyntax()
2022-06-16T11:21:20.1771821Z 
2022-06-16T11:21:20.1772046Z --------------------------------------------------
2022-06-16T11:21:20.1772457Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1772922Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1773335Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1773774Z    Location: ./Assembler/assembler.py:853:24
2022-06-16T11:21:20.1774152Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1774530Z 852	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1774771Z 853	                token = ""
2022-06-16T11:21:20.1774969Z 854	
2022-06-16T11:21:20.1775144Z 
2022-06-16T11:21:20.1775353Z --------------------------------------------------
2022-06-16T11:21:20.1775751Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1776056Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1776460Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1776784Z    Location: ./Assembler/assembler.py:858:24
2022-06-16T11:21:20.1777151Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1777477Z 857	                state = 0
2022-06-16T11:21:20.1777692Z 858	                token = ""
2022-06-16T11:21:20.1777916Z 859	                raise InvalidSyntax()
2022-06-16T11:21:20.1778069Z 
2022-06-16T11:21:20.1778277Z --------------------------------------------------
2022-06-16T11:21:20.1778667Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1778988Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1779543Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1779874Z    Location: ./Assembler/assembler.py:871:24
2022-06-16T11:21:20.1780254Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1780575Z 870	                state = 0
2022-06-16T11:21:20.1780788Z 871	                token = ""
2022-06-16T11:21:20.1781026Z 872	                raise InvalidSyntax()
2022-06-16T11:21:20.1781179Z 
2022-06-16T11:21:20.1781383Z --------------------------------------------------
2022-06-16T11:21:20.1781764Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1782080Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1782478Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1782792Z    Location: ./Assembler/assembler.py:880:24
2022-06-16T11:21:20.1783169Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1783550Z 879	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1783796Z 880	                token = ""
2022-06-16T11:21:20.1783994Z 881	
2022-06-16T11:21:20.1784220Z 
2022-06-16T11:21:20.1784433Z --------------------------------------------------
2022-06-16T11:21:20.1784829Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1785133Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1785532Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1785858Z    Location: ./Assembler/assembler.py:885:24
2022-06-16T11:21:20.1786222Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1786550Z 884	                state = 0
2022-06-16T11:21:20.1786763Z 885	                token = ""
2022-06-16T11:21:20.1786988Z 886	                raise InvalidSyntax()
2022-06-16T11:21:20.1787138Z 
2022-06-16T11:21:20.1787342Z --------------------------------------------------
2022-06-16T11:21:20.1787811Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1788137Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1788535Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1788859Z    Location: ./Assembler/assembler.py:898:24
2022-06-16T11:21:20.1789238Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1789550Z 897	                state = 0
2022-06-16T11:21:20.1789767Z 898	                token = ""
2022-06-16T11:21:20.1790002Z 899	                raise InvalidSyntax()
2022-06-16T11:21:20.1790151Z 
2022-06-16T11:21:20.1790341Z --------------------------------------------------
2022-06-16T11:21:20.1790732Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1791049Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1791451Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1791767Z    Location: ./Assembler/assembler.py:907:24
2022-06-16T11:21:20.1792146Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1792525Z 906	                tokens.append(Token(token, "command"))
2022-06-16T11:21:20.1792768Z 907	                token = ""
2022-06-16T11:21:20.1792966Z 908	
2022-06-16T11:21:20.1793077Z 
2022-06-16T11:21:20.1793282Z --------------------------------------------------
2022-06-16T11:21:20.1793663Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1793975Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1794374Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1794698Z    Location: ./Assembler/assembler.py:912:24
2022-06-16T11:21:20.1795064Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1795387Z 911	                state = 0
2022-06-16T11:21:20.1795603Z 912	                token = ""
2022-06-16T11:21:20.1795833Z 913	                raise InvalidSyntax()
2022-06-16T11:21:20.1795987Z 
2022-06-16T11:21:20.1796197Z --------------------------------------------------
2022-06-16T11:21:20.1796638Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'mov'
2022-06-16T11:21:20.1796960Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1797347Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1797674Z    Location: ./Assembler/assembler.py:947:26
2022-06-16T11:21:20.1798050Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1798344Z 946	
2022-06-16T11:21:20.1798573Z 947	        if token.token == "mov":  # mov commando
2022-06-16T11:21:20.1798798Z 948	
2022-06-16T11:21:20.1798907Z 
2022-06-16T11:21:20.1799097Z --------------------------------------------------
2022-06-16T11:21:20.1799536Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1799863Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1800250Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1800769Z    Location: ./Assembler/assembler.py:990:38
2022-06-16T11:21:20.1801125Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1801487Z 989	                elif token.t == "register":  # loads out of register
2022-06-16T11:21:20.1801745Z 990	                    if token.token == "eax":
2022-06-16T11:21:20.1801984Z 991	                        token.token = eax
2022-06-16T11:21:20.1802123Z 
2022-06-16T11:21:20.1802319Z --------------------------------------------------
2022-06-16T11:21:20.1802724Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1803029Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1803403Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1803776Z    Location: ./Assembler/assembler.py:992:40
2022-06-16T11:21:20.1804129Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1804459Z 991	                        token.token = eax
2022-06-16T11:21:20.1804704Z 992	                    elif token.token == "ebx":
2022-06-16T11:21:20.1804933Z 993	                        token.token = ebx
2022-06-16T11:21:20.1805072Z 
2022-06-16T11:21:20.1805269Z --------------------------------------------------
2022-06-16T11:21:20.1805683Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1805986Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1806345Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1806778Z    Location: ./Assembler/assembler.py:994:40
2022-06-16T11:21:20.1807279Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1807628Z 993	                        token.token = ebx
2022-06-16T11:21:20.1807896Z 994	                    elif token.token == "ecx":
2022-06-16T11:21:20.1808162Z 995	                        token.token = ecx
2022-06-16T11:21:20.1808312Z 
2022-06-16T11:21:20.1808626Z --------------------------------------------------
2022-06-16T11:21:20.1809099Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1809444Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1809990Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1810311Z    Location: ./Assembler/assembler.py:996:40
2022-06-16T11:21:20.1810817Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1811277Z 995	                        token.token = ecx
2022-06-16T11:21:20.1811531Z 996	                    elif token.token == "edx":
2022-06-16T11:21:20.1812448Z 997	                        token.token = edx
2022-06-16T11:21:20.1812615Z 
2022-06-16T11:21:20.1812886Z --------------------------------------------------
2022-06-16T11:21:20.1813375Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1813707Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1814141Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1814491Z    Location: ./Assembler/assembler.py:999:37
2022-06-16T11:21:20.1814887Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1815343Z 998	
2022-06-16T11:21:20.1815696Z 999	                if tmpToken.token == "eax":
2022-06-16T11:21:20.1816061Z 1000	                    eax = token.token
2022-06-16T11:21:20.1816209Z 
2022-06-16T11:21:20.1816425Z --------------------------------------------------
2022-06-16T11:21:20.1817304Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1817691Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1818156Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1818690Z    Location: ./Assembler/assembler.py:1001:39
2022-06-16T11:21:20.1819328Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1819700Z 1000	                    eax = token.token
2022-06-16T11:21:20.1820099Z 1001	                elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1820474Z 1002	                    ebx = token.token
2022-06-16T11:21:20.1820611Z 
2022-06-16T11:21:20.1820820Z --------------------------------------------------
2022-06-16T11:21:20.1821246Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1821544Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1821922Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1822493Z    Location: ./Assembler/assembler.py:1003:39
2022-06-16T11:21:20.1823022Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1823395Z 1002	                    ebx = token.token
2022-06-16T11:21:20.1823679Z 1003	                elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1823958Z 1004	                    ecx = token.token
2022-06-16T11:21:20.1824113Z 
2022-06-16T11:21:20.1824327Z --------------------------------------------------
2022-06-16T11:21:20.1824805Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1825151Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1825815Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1826127Z    Location: ./Assembler/assembler.py:1005:39
2022-06-16T11:21:20.1826634Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1827114Z 1004	                    ecx = token.token
2022-06-16T11:21:20.1827361Z 1005	                elif tmpToken.token == "edx":
2022-06-16T11:21:20.1827625Z 1006	                    edx = token.token
2022-06-16T11:21:20.1827774Z 
2022-06-16T11:21:20.1827979Z --------------------------------------------------
2022-06-16T11:21:20.1828660Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'add'
2022-06-16T11:21:20.1829003Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1829431Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1829783Z    Location: ./Assembler/assembler.py:1013:28
2022-06-16T11:21:20.1830175Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1830507Z 1012	
2022-06-16T11:21:20.1830755Z 1013	        elif token.token == "add":  # add commando
2022-06-16T11:21:20.1830987Z 1014	
2022-06-16T11:21:20.1831105Z 
2022-06-16T11:21:20.1831322Z --------------------------------------------------
2022-06-16T11:21:20.1831797Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1832370Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1832771Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1833103Z    Location: ./Assembler/assembler.py:1033:38
2022-06-16T11:21:20.1833483Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1833935Z 1032	                    # for the case that token is register
2022-06-16T11:21:20.1834304Z 1033	                    if token.token == "eax":
2022-06-16T11:21:20.1834691Z 1034	                        token.token = eax
2022-06-16T11:21:20.1834853Z 
2022-06-16T11:21:20.1835058Z --------------------------------------------------
2022-06-16T11:21:20.1835534Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1835877Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1836305Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1836643Z    Location: ./Assembler/assembler.py:1035:40
2022-06-16T11:21:20.1837050Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1837535Z 1034	                        token.token = eax
2022-06-16T11:21:20.1837801Z 1035	                    elif token.token == "ebx":
2022-06-16T11:21:20.1838085Z 1036	                        token.token = ebx
2022-06-16T11:21:20.1838244Z 
2022-06-16T11:21:20.1838470Z --------------------------------------------------
2022-06-16T11:21:20.1838943Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1839779Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1840273Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1840624Z    Location: ./Assembler/assembler.py:1037:40
2022-06-16T11:21:20.1841017Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1841547Z 1036	                        token.token = ebx
2022-06-16T11:21:20.1841846Z 1037	                    elif token.token == "ecx":
2022-06-16T11:21:20.1842115Z 1038	                        token.token = ecx
2022-06-16T11:21:20.1842275Z 
2022-06-16T11:21:20.1842507Z --------------------------------------------------
2022-06-16T11:21:20.1842987Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1843331Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1843747Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1844096Z    Location: ./Assembler/assembler.py:1039:40
2022-06-16T11:21:20.1844502Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1844859Z 1038	                        token.token = ecx
2022-06-16T11:21:20.1845138Z 1039	                    elif token.token == "edx":
2022-06-16T11:21:20.1845413Z 1040	                        token.token = edx
2022-06-16T11:21:20.1845570Z 
2022-06-16T11:21:20.1845791Z --------------------------------------------------
2022-06-16T11:21:20.1846255Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1846597Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1847025Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1847356Z    Location: ./Assembler/assembler.py:1051:37
2022-06-16T11:21:20.1847757Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1848088Z 1050	
2022-06-16T11:21:20.1848316Z 1051	                if tmpToken.token == "eax":
2022-06-16T11:21:20.1848587Z 1052	                    eax += token.token
2022-06-16T11:21:20.1848742Z 
2022-06-16T11:21:20.1848959Z --------------------------------------------------
2022-06-16T11:21:20.1849433Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1849763Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1850194Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1850545Z    Location: ./Assembler/assembler.py:1059:39
2022-06-16T11:21:20.1850935Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1851302Z 1058	                        zeroFlag = False
2022-06-16T11:21:20.1851580Z 1059	                elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1851843Z 1060	                    ebx += token.token
2022-06-16T11:21:20.1851999Z 
2022-06-16T11:21:20.1852218Z --------------------------------------------------
2022-06-16T11:21:20.1852692Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1853032Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1853446Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1853792Z    Location: ./Assembler/assembler.py:1067:39
2022-06-16T11:21:20.1854200Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1854658Z 1066	                        zeroFlag = False
2022-06-16T11:21:20.1854935Z 1067	                elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1855212Z 1068	                    ecx += token.token
2022-06-16T11:21:20.1855367Z 
2022-06-16T11:21:20.1855594Z --------------------------------------------------
2022-06-16T11:21:20.1856051Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1856394Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1856825Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1857161Z    Location: ./Assembler/assembler.py:1075:39
2022-06-16T11:21:20.1857564Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1857934Z 1074	                        zeroFlag = False
2022-06-16T11:21:20.1858280Z 1075	                elif tmpToken.token == "edx":
2022-06-16T11:21:20.1858576Z 1076	                    edx += token.token
2022-06-16T11:21:20.1858733Z 
2022-06-16T11:21:20.1858959Z --------------------------------------------------
2022-06-16T11:21:20.1859642Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'sub'
2022-06-16T11:21:20.1860010Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1860448Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1860800Z    Location: ./Assembler/assembler.py:1089:28
2022-06-16T11:21:20.1861193Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1861526Z 1088	
2022-06-16T11:21:20.1861777Z 1089	        elif token.token == "sub":  # sub commando
2022-06-16T11:21:20.1862010Z 1090	
2022-06-16T11:21:20.1862131Z 
2022-06-16T11:21:20.1862351Z --------------------------------------------------
2022-06-16T11:21:20.1862829Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1863170Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1863589Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1863939Z    Location: ./Assembler/assembler.py:1109:38
2022-06-16T11:21:20.1864344Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1864727Z 1108	                    # for the case that token is register
2022-06-16T11:21:20.1865019Z 1109	                    if token.token == "eax":
2022-06-16T11:21:20.1865290Z 1110	                        token.token = eax
2022-06-16T11:21:20.1865450Z 
2022-06-16T11:21:20.1865667Z --------------------------------------------------
2022-06-16T11:21:20.1866124Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1866471Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1866898Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1867984Z    Location: ./Assembler/assembler.py:1111:40
2022-06-16T11:21:20.1868409Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1868793Z 1110	                        token.token = eax
2022-06-16T11:21:20.1870098Z 1111	                    elif token.token == "ebx":
2022-06-16T11:21:20.1870384Z 1112	                        token.token = ebx
2022-06-16T11:21:20.1870547Z 
2022-06-16T11:21:20.1870814Z --------------------------------------------------
2022-06-16T11:21:20.1871297Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1871629Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1872059Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1872202Z    Location: ./Assembler/assembler.py:1113:40
2022-06-16T11:21:20.1872437Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1872563Z 1112	                        token.token = ebx
2022-06-16T11:21:20.1872688Z 1113	                    elif token.token == "ecx":
2022-06-16T11:21:20.1872997Z 1114	                        token.token = ecx
2022-06-16T11:21:20.1873006Z 
2022-06-16T11:21:20.1873241Z --------------------------------------------------
2022-06-16T11:21:20.1873537Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1873660Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1873926Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1874065Z    Location: ./Assembler/assembler.py:1115:40
2022-06-16T11:21:20.1874299Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1874422Z 1114	                        token.token = ecx
2022-06-16T11:21:20.1874535Z 1115	                    elif token.token == "edx":
2022-06-16T11:21:20.1874652Z 1116	                        token.token = edx
2022-06-16T11:21:20.1874739Z 
2022-06-16T11:21:20.1874977Z --------------------------------------------------
2022-06-16T11:21:20.1875280Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1875402Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1875669Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1875809Z    Location: ./Assembler/assembler.py:1129:37
2022-06-16T11:21:20.1876040Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1876106Z 1128	
2022-06-16T11:21:20.1876237Z 1129	                if tmpToken.token == "eax":
2022-06-16T11:21:20.1876431Z 1130	                    eax -= token.token
2022-06-16T11:21:20.1876440Z 
2022-06-16T11:21:20.1876652Z --------------------------------------------------
2022-06-16T11:21:20.1876944Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1877069Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1877338Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1877483Z    Location: ./Assembler/assembler.py:1137:39
2022-06-16T11:21:20.1877705Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1877820Z 1136	                        zeroFlag = False
2022-06-16T11:21:20.1877954Z 1137	                elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1878139Z 1138	                    ebx -= token.token
2022-06-16T11:21:20.1878148Z 
2022-06-16T11:21:20.1878363Z --------------------------------------------------
2022-06-16T11:21:20.1878655Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1878776Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1879041Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1879169Z    Location: ./Assembler/assembler.py:1145:39
2022-06-16T11:21:20.1879405Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1879523Z 1144	                        zeroFlag = False
2022-06-16T11:21:20.1879654Z 1145	                elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1879841Z 1146	                    ecx -= token.token
2022-06-16T11:21:20.1879850Z 
2022-06-16T11:21:20.1880062Z --------------------------------------------------
2022-06-16T11:21:20.1880355Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1880476Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1880727Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1880867Z    Location: ./Assembler/assembler.py:1153:39
2022-06-16T11:21:20.1881101Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1881215Z 1152	                        zeroFlag = False
2022-06-16T11:21:20.1881349Z 1153	                elif tmpToken.token == "edx":
2022-06-16T11:21:20.1881536Z 1154	                    edx -= token.token
2022-06-16T11:21:20.1881627Z 
2022-06-16T11:21:20.1881856Z --------------------------------------------------
2022-06-16T11:21:20.1882147Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'int'
2022-06-16T11:21:20.1882254Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1882521Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1882662Z    Location: ./Assembler/assembler.py:1167:28
2022-06-16T11:21:20.1882892Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1882970Z 1166	
2022-06-16T11:21:20.1883109Z 1167	        elif token.token == "int":  # int commando
2022-06-16T11:21:20.1883186Z 1168	
2022-06-16T11:21:20.1883193Z 
2022-06-16T11:21:20.1883395Z --------------------------------------------------
2022-06-16T11:21:20.1883763Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: '0x80'
2022-06-16T11:21:20.1883894Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1884170Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1884309Z    Location: ./Assembler/assembler.py:1178:30
2022-06-16T11:21:20.1884542Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1884619Z 1177	
2022-06-16T11:21:20.1884772Z 1178	            if token.token == "0x80":  # system interrupt 0x80
2022-06-16T11:21:20.1884834Z 1179	
2022-06-16T11:21:20.1884843Z 
2022-06-16T11:21:20.1885058Z --------------------------------------------------
2022-06-16T11:21:20.1885357Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'push'
2022-06-16T11:21:20.1885478Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1885741Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1885881Z    Location: ./Assembler/assembler.py:1197:28
2022-06-16T11:21:20.1886118Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1886198Z 1196	
2022-06-16T11:21:20.1886330Z 1197	        elif token.token == "push":  # push commando
2022-06-16T11:21:20.1886408Z 1198	
2022-06-16T11:21:20.1886416Z 
2022-06-16T11:21:20.1886631Z --------------------------------------------------
2022-06-16T11:21:20.1886927Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1887049Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1887315Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1887456Z    Location: ./Assembler/assembler.py:1210:30
2022-06-16T11:21:20.1887686Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1887804Z 1209	            # pushing register on the stack
2022-06-16T11:21:20.1887922Z 1210	            if token.token == "eax":
2022-06-16T11:21:20.1888001Z 1211	
2022-06-16T11:21:20.1888010Z 
2022-06-16T11:21:20.1888226Z --------------------------------------------------
2022-06-16T11:21:20.1888526Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1888647Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1888911Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1889053Z    Location: ./Assembler/assembler.py:1214:32
2022-06-16T11:21:20.1889273Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1889351Z 1213	
2022-06-16T11:21:20.1889473Z 1214	            elif token.token == "ebx":
2022-06-16T11:21:20.1889548Z 1215	
2022-06-16T11:21:20.1889555Z 
2022-06-16T11:21:20.1889770Z --------------------------------------------------
2022-06-16T11:21:20.1890063Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1890189Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1890439Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1890672Z    Location: ./Assembler/assembler.py:1218:32
2022-06-16T11:21:20.1890902Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1890980Z 1217	
2022-06-16T11:21:20.1891104Z 1218	            elif token.token == "ecx":
2022-06-16T11:21:20.1891181Z 1219	
2022-06-16T11:21:20.1891189Z 
2022-06-16T11:21:20.1891411Z --------------------------------------------------
2022-06-16T11:21:20.1891707Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1891814Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1892078Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1892220Z    Location: ./Assembler/assembler.py:1222:32
2022-06-16T11:21:20.1892453Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1892597Z 1221	
2022-06-16T11:21:20.1892727Z 1222	            elif token.token == "edx":
2022-06-16T11:21:20.1892806Z 1223	
2022-06-16T11:21:20.1892814Z 
2022-06-16T11:21:20.1893032Z --------------------------------------------------
2022-06-16T11:21:20.1893315Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'pop'
2022-06-16T11:21:20.1893433Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1893697Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1893838Z    Location: ./Assembler/assembler.py:1226:28
2022-06-16T11:21:20.1894070Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1894147Z 1225	
2022-06-16T11:21:20.1894293Z 1226	        elif token.token == "pop":  # pop commando
2022-06-16T11:21:20.1894355Z 1227	
2022-06-16T11:21:20.1894378Z 
2022-06-16T11:21:20.1894580Z --------------------------------------------------
2022-06-16T11:21:20.1894876Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1894998Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1895259Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1895400Z    Location: ./Assembler/assembler.py:1239:30
2022-06-16T11:21:20.1895630Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1895753Z 1238	            # pop register from stack
2022-06-16T11:21:20.1895855Z 1239	            if token.token == "eax":
2022-06-16T11:21:20.1895931Z 1240	
2022-06-16T11:21:20.1895938Z 
2022-06-16T11:21:20.1896154Z --------------------------------------------------
2022-06-16T11:21:20.1896445Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1896565Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1896826Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1896966Z    Location: ./Assembler/assembler.py:1243:32
2022-06-16T11:21:20.1897196Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1897263Z 1242	
2022-06-16T11:21:20.1897385Z 1243	            elif token.token == "ebx":
2022-06-16T11:21:20.1897464Z 1244	
2022-06-16T11:21:20.1897472Z 
2022-06-16T11:21:20.1897689Z --------------------------------------------------
2022-06-16T11:21:20.1897982Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1898102Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1898367Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1898508Z    Location: ./Assembler/assembler.py:1247:32
2022-06-16T11:21:20.1898723Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1898801Z 1246	
2022-06-16T11:21:20.1898919Z 1247	            elif token.token == "ecx":
2022-06-16T11:21:20.1898999Z 1248	
2022-06-16T11:21:20.1899007Z 
2022-06-16T11:21:20.1899488Z --------------------------------------------------
2022-06-16T11:21:20.1899930Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1900052Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1900320Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1900446Z    Location: ./Assembler/assembler.py:1251:32
2022-06-16T11:21:20.1900678Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1900756Z 1250	
2022-06-16T11:21:20.1900878Z 1251	            elif token.token == "edx":
2022-06-16T11:21:20.1900954Z 1252	
2022-06-16T11:21:20.1900963Z 
2022-06-16T11:21:20.1901177Z --------------------------------------------------
2022-06-16T11:21:20.1901472Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'jmp'
2022-06-16T11:21:20.1901579Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1901941Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1902101Z    Location: ./Assembler/assembler.py:1259:28
2022-06-16T11:21:20.1902331Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1902408Z 1258	
2022-06-16T11:21:20.1902562Z 1259	        elif token.token == "jmp":  # capture jmp command
2022-06-16T11:21:20.1902639Z 1260	
2022-06-16T11:21:20.1902648Z 
2022-06-16T11:21:20.1902865Z --------------------------------------------------
2022-06-16T11:21:20.1903146Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'cmp'
2022-06-16T11:21:20.1903268Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1903532Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1903672Z    Location: ./Assembler/assembler.py:1276:28
2022-06-16T11:21:20.1903904Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1903982Z 1275	
2022-06-16T11:21:20.1904099Z 1276	        elif token.token == "cmp":
2022-06-16T11:21:20.1904193Z 1277	            # TODO
2022-06-16T11:21:20.1904201Z 
2022-06-16T11:21:20.1904405Z --------------------------------------------------
2022-06-16T11:21:20.1904698Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1904820Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1905085Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1905223Z    Location: ./Assembler/assembler.py:1298:34
2022-06-16T11:21:20.1905453Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1905563Z 1297	                # actual comparing
2022-06-16T11:21:20.1905684Z 1298	                if token.token == "eax":
2022-06-16T11:21:20.1905747Z 1299	
2022-06-16T11:21:20.1905755Z 
2022-06-16T11:21:20.1905972Z --------------------------------------------------
2022-06-16T11:21:20.1906266Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1906391Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1906656Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1906794Z    Location: ./Assembler/assembler.py:1300:41
2022-06-16T11:21:20.1907025Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1907104Z 1299	
2022-06-16T11:21:20.1907225Z 1300	                    if tmpToken.token == "eax":
2022-06-16T11:21:20.1907302Z 1301	
2022-06-16T11:21:20.1907309Z 
2022-06-16T11:21:20.1907524Z --------------------------------------------------
2022-06-16T11:21:20.1907816Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1907938Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1908201Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1908345Z    Location: ./Assembler/assembler.py:1307:43
2022-06-16T11:21:20.1908657Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1908775Z 1306	
2022-06-16T11:21:20.1908916Z 1307	                    elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1908992Z 1308	
2022-06-16T11:21:20.1909001Z 
2022-06-16T11:21:20.1909224Z --------------------------------------------------
2022-06-16T11:21:20.1909524Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1909646Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1909910Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1910037Z    Location: ./Assembler/assembler.py:1314:43
2022-06-16T11:21:20.1910268Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1910347Z 1313	
2022-06-16T11:21:20.1910559Z 1314	                    elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1910648Z 1315	
2022-06-16T11:21:20.1910656Z 
2022-06-16T11:21:20.1910884Z --------------------------------------------------
2022-06-16T11:21:20.1911177Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1911299Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1911548Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1911690Z    Location: ./Assembler/assembler.py:1321:43
2022-06-16T11:21:20.1911919Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1911996Z 1320	
2022-06-16T11:21:20.1912133Z 1321	                    elif tmpToken.token == "edx":
2022-06-16T11:21:20.1912210Z 1322	
2022-06-16T11:21:20.1912218Z 
2022-06-16T11:21:20.1912883Z --------------------------------------------------
2022-06-16T11:21:20.1913910Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1914037Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1914349Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1914496Z    Location: ./Assembler/assembler.py:1328:36
2022-06-16T11:21:20.1914731Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1914807Z 1327	
2022-06-16T11:21:20.1914933Z 1328	                elif token.token == "ebx":
2022-06-16T11:21:20.1915007Z 1329	
2022-06-16T11:21:20.1915017Z 
2022-06-16T11:21:20.1915218Z --------------------------------------------------
2022-06-16T11:21:20.1915508Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1915629Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1915898Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1916040Z    Location: ./Assembler/assembler.py:1330:41
2022-06-16T11:21:20.1916271Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1916347Z 1329	
2022-06-16T11:21:20.1916484Z 1330	                    if tmpToken.token == "eax":
2022-06-16T11:21:20.1916548Z 1331	
2022-06-16T11:21:20.1916556Z 
2022-06-16T11:21:20.1916771Z --------------------------------------------------
2022-06-16T11:21:20.1917063Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1917186Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1917451Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1917591Z    Location: ./Assembler/assembler.py:1337:43
2022-06-16T11:21:20.1917821Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1917894Z 1336	
2022-06-16T11:21:20.1918016Z 1337	                    elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1918093Z 1338	
2022-06-16T11:21:20.1918101Z 
2022-06-16T11:21:20.1918318Z --------------------------------------------------
2022-06-16T11:21:20.1918612Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1918923Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1919205Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1919348Z    Location: ./Assembler/assembler.py:1344:43
2022-06-16T11:21:20.1919581Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1919644Z 1343	
2022-06-16T11:21:20.1919781Z 1344	                    elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1919858Z 1345	
2022-06-16T11:21:20.1919866Z 
2022-06-16T11:21:20.1920080Z --------------------------------------------------
2022-06-16T11:21:20.1920370Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1920491Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1920759Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1920959Z    Location: ./Assembler/assembler.py:1351:43
2022-06-16T11:21:20.1921206Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1921283Z 1350	
2022-06-16T11:21:20.1921420Z 1351	                    elif tmpToken.token == "edx":
2022-06-16T11:21:20.1921497Z 1352	
2022-06-16T11:21:20.1921505Z 
2022-06-16T11:21:20.1921726Z --------------------------------------------------
2022-06-16T11:21:20.1922023Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1922146Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1922396Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1922536Z    Location: ./Assembler/assembler.py:1358:36
2022-06-16T11:21:20.1922770Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1922847Z 1357	
2022-06-16T11:21:20.1922975Z 1358	                elif token.token == "ecx":
2022-06-16T11:21:20.1923053Z 1359	
2022-06-16T11:21:20.1923060Z 
2022-06-16T11:21:20.1923277Z --------------------------------------------------
2022-06-16T11:21:20.1923569Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1923676Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1923940Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1924081Z    Location: ./Assembler/assembler.py:1360:41
2022-06-16T11:21:20.1924309Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1924386Z 1359	
2022-06-16T11:21:20.1924521Z 1360	                    if tmpToken.token == "eax":
2022-06-16T11:21:20.1924598Z 1361	
2022-06-16T11:21:20.1924606Z 
2022-06-16T11:21:20.1924819Z --------------------------------------------------
2022-06-16T11:21:20.1925096Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1925224Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1925489Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1927206Z    Location: ./Assembler/assembler.py:1367:43
2022-06-16T11:21:20.1927441Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1927518Z 1366	
2022-06-16T11:21:20.1927654Z 1367	                    elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1927730Z 1368	
2022-06-16T11:21:20.1927738Z 
2022-06-16T11:21:20.1927945Z --------------------------------------------------
2022-06-16T11:21:20.1928238Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1928365Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1928630Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1928773Z    Location: ./Assembler/assembler.py:1374:43
2022-06-16T11:21:20.1929008Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1929083Z 1373	
2022-06-16T11:21:20.1929326Z 1374	                    elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1929388Z 1375	
2022-06-16T11:21:20.1929397Z 
2022-06-16T11:21:20.1929624Z --------------------------------------------------
2022-06-16T11:21:20.1929917Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1930038Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1930303Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1930445Z    Location: ./Assembler/assembler.py:1381:43
2022-06-16T11:21:20.1930676Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1930738Z 1380	
2022-06-16T11:21:20.1930874Z 1381	                    elif tmpToken.token == "edx":
2022-06-16T11:21:20.1930951Z 1382	
2022-06-16T11:21:20.1930959Z 
2022-06-16T11:21:20.1931239Z --------------------------------------------------
2022-06-16T11:21:20.1931549Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1931674Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1931935Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1932077Z    Location: ./Assembler/assembler.py:1388:36
2022-06-16T11:21:20.1932295Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1932371Z 1387	
2022-06-16T11:21:20.1932496Z 1388	                elif token.token == "edx":
2022-06-16T11:21:20.1932572Z 1389	
2022-06-16T11:21:20.1932580Z 
2022-06-16T11:21:20.1932794Z --------------------------------------------------
2022-06-16T11:21:20.1933086Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1933206Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1933468Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1933599Z    Location: ./Assembler/assembler.py:1390:41
2022-06-16T11:21:20.1933833Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1933909Z 1389	
2022-06-16T11:21:20.1934043Z 1390	                    if tmpToken.token == "eax":
2022-06-16T11:21:20.1934119Z 1391	
2022-06-16T11:21:20.1934127Z 
2022-06-16T11:21:20.1934340Z --------------------------------------------------
2022-06-16T11:21:20.1934633Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1934754Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1935003Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1935143Z    Location: ./Assembler/assembler.py:1397:43
2022-06-16T11:21:20.1935376Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1935452Z 1396	
2022-06-16T11:21:20.1935592Z 1397	                    elif tmpToken.token == "ebx":
2022-06-16T11:21:20.1935666Z 1398	
2022-06-16T11:21:20.1935677Z 
2022-06-16T11:21:20.1935894Z --------------------------------------------------
2022-06-16T11:21:20.1936171Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1936292Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1936558Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1936697Z    Location: ./Assembler/assembler.py:1404:43
2022-06-16T11:21:20.1936929Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1937004Z 1403	
2022-06-16T11:21:20.1937143Z 1404	                    elif tmpToken.token == "ecx":
2022-06-16T11:21:20.1937219Z 1405	
2022-06-16T11:21:20.1937227Z 
2022-06-16T11:21:20.1937425Z --------------------------------------------------
2022-06-16T11:21:20.1937715Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1937840Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1938103Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1938339Z    Location: ./Assembler/assembler.py:1411:43
2022-06-16T11:21:20.1938571Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1938645Z 1410	
2022-06-16T11:21:20.1938780Z 1411	                    elif tmpToken.token == "edx":
2022-06-16T11:21:20.1938842Z 1412	
2022-06-16T11:21:20.1938851Z 
2022-06-16T11:21:20.1939236Z --------------------------------------------------
2022-06-16T11:21:20.1939551Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'je'
2022-06-16T11:21:20.1939672Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1939934Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1940073Z    Location: ./Assembler/assembler.py:1422:28
2022-06-16T11:21:20.1940409Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1940498Z 1421	
2022-06-16T11:21:20.1940601Z 1422	        elif token.token == "je":
2022-06-16T11:21:20.1940677Z 1423	
2022-06-16T11:21:20.1940685Z 
2022-06-16T11:21:20.1940906Z --------------------------------------------------
2022-06-16T11:21:20.1941204Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'db'
2022-06-16T11:21:20.1941325Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1941589Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1941728Z    Location: ./Assembler/assembler.py:1457:65
2022-06-16T11:21:20.1941943Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1942022Z 1456	
2022-06-16T11:21:20.1942194Z 1457	                if tmpToken.t == "command" and tmpToken.token == "db":
2022-06-16T11:21:20.1942271Z 1458	
2022-06-16T11:21:20.1942279Z 
2022-06-16T11:21:20.1942496Z --------------------------------------------------
2022-06-16T11:21:20.1942792Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'call'
2022-06-16T11:21:20.1942916Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1943178Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1943304Z    Location: ./Assembler/assembler.py:1479:28
2022-06-16T11:21:20.1943534Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1943611Z 1478	
2022-06-16T11:21:20.1943864Z 1479	        elif token.token == "call":  # catch the call-command
2022-06-16T11:21:20.1943939Z 1480	
2022-06-16T11:21:20.1943947Z 
2022-06-16T11:21:20.1944160Z --------------------------------------------------
2022-06-16T11:21:20.1944451Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ret'
2022-06-16T11:21:20.1944573Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1944826Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1944965Z    Location: ./Assembler/assembler.py:1508:28
2022-06-16T11:21:20.1945200Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1945276Z 1507	
2022-06-16T11:21:20.1945525Z 1508	        elif token.token == "ret":  # catch the ret-command
2022-06-16T11:21:20.1945601Z 1509	
2022-06-16T11:21:20.1945608Z 
2022-06-16T11:21:20.1945819Z --------------------------------------------------
2022-06-16T11:21:20.1946113Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'mul'
2022-06-16T11:21:20.1946220Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1946483Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1946622Z    Location: ./Assembler/assembler.py:1523:28
2022-06-16T11:21:20.1946849Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1946927Z 1522	
2022-06-16T11:21:20.1947170Z 1523	        elif token.token == "mul":  # catch mul-command
2022-06-16T11:21:20.1947332Z 1524	
2022-06-16T11:21:20.1947340Z 
2022-06-16T11:21:20.1947558Z --------------------------------------------------
2022-06-16T11:21:20.1947839Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1947962Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1948228Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1948369Z    Location: ./Assembler/assembler.py:1535:34
2022-06-16T11:21:20.1948600Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1948677Z 1534	
2022-06-16T11:21:20.1948797Z 1535	                if token.token == "eax":
2022-06-16T11:21:20.1948860Z 1536	
2022-06-16T11:21:20.1948883Z 
2022-06-16T11:21:20.1949084Z --------------------------------------------------
2022-06-16T11:21:20.1949458Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1949592Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1949868Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1950009Z    Location: ./Assembler/assembler.py:1539:36
2022-06-16T11:21:20.1950243Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1950321Z 1538	
2022-06-16T11:21:20.1950434Z 1539	                elif token.token == "ebx":
2022-06-16T11:21:20.1950510Z 1540	
2022-06-16T11:21:20.1950518Z 
2022-06-16T11:21:20.1950733Z --------------------------------------------------
2022-06-16T11:21:20.1951025Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1951145Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1951409Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1951551Z    Location: ./Assembler/assembler.py:1543:36
2022-06-16T11:21:20.1951788Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1951855Z 1542	
2022-06-16T11:21:20.1951982Z 1543	                elif token.token == "ecx":
2022-06-16T11:21:20.1952059Z 1544	
2022-06-16T11:21:20.1952067Z 
2022-06-16T11:21:20.1952283Z --------------------------------------------------
2022-06-16T11:21:20.1952578Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1952699Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1952966Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1953107Z    Location: ./Assembler/assembler.py:1547:36
2022-06-16T11:21:20.1953325Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1953402Z 1546	
2022-06-16T11:21:20.1953528Z 1547	                elif token.token == "edx":
2022-06-16T11:21:20.1953604Z 1548	
2022-06-16T11:21:20.1953611Z 
2022-06-16T11:21:20.1953829Z --------------------------------------------------
2022-06-16T11:21:20.1954120Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'div'
2022-06-16T11:21:20.1954244Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1954494Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1954636Z    Location: ./Assembler/assembler.py:1556:28
2022-06-16T11:21:20.1954866Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1954943Z 1555	
2022-06-16T11:21:20.1955063Z 1556	        elif token.token == "div":
2022-06-16T11:21:20.1955140Z 1557	
2022-06-16T11:21:20.1955147Z 
2022-06-16T11:21:20.1955361Z --------------------------------------------------
2022-06-16T11:21:20.1955655Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'eax'
2022-06-16T11:21:20.1955763Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1956030Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1956168Z    Location: ./Assembler/assembler.py:1568:34
2022-06-16T11:21:20.1956485Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1956560Z 1567	
2022-06-16T11:21:20.1956681Z 1568	                if token.token == "eax":
2022-06-16T11:21:20.1956757Z 1569	
2022-06-16T11:21:20.1956765Z 
2022-06-16T11:21:20.1957028Z --------------------------------------------------
2022-06-16T11:21:20.1957317Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ebx'
2022-06-16T11:21:20.1957437Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1957703Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1957842Z    Location: ./Assembler/assembler.py:1572:36
2022-06-16T11:21:20.1958077Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1958153Z 1571	
2022-06-16T11:21:20.1958356Z 1572	                elif token.token == "ebx":
2022-06-16T11:21:20.1958429Z 1573	
2022-06-16T11:21:20.1958454Z 
2022-06-16T11:21:20.1958661Z --------------------------------------------------
2022-06-16T11:21:20.1958951Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'ecx'
2022-06-16T11:21:20.1959075Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1959338Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1959479Z    Location: ./Assembler/assembler.py:1576:36
2022-06-16T11:21:20.1959709Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1960238Z 1575	
2022-06-16T11:21:20.1960393Z 1576	                elif token.token == "ecx":
2022-06-16T11:21:20.1960468Z 1577	
2022-06-16T11:21:20.1960477Z 
2022-06-16T11:21:20.1960735Z --------------------------------------------------
2022-06-16T11:21:20.1961034Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'edx'
2022-06-16T11:21:20.1961163Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1961434Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1961580Z    Location: ./Assembler/assembler.py:1580:36
2022-06-16T11:21:20.1961809Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1961871Z 1579	
2022-06-16T11:21:20.1961996Z 1580	                elif token.token == "edx":
2022-06-16T11:21:20.1962073Z 1581	
2022-06-16T11:21:20.1962080Z 
2022-06-16T11:21:20.1962299Z --------------------------------------------------
2022-06-16T11:21:20.1962539Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.1962661Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1962925Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1963102Z    Location: ./Automated Scheduled Call Reminders/caller.py:14:13
2022-06-16T11:21:20.1963321Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1963412Z 13	acc_sid = ""
2022-06-16T11:21:20.1963505Z 14	auth_token = ""
2022-06-16T11:21:20.1963628Z 15	client = Client(acc_sid, auth_token)
2022-06-16T11:21:20.1963637Z 
2022-06-16T11:21:20.1963854Z --------------------------------------------------
2022-06-16T11:21:20.1964197Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1964324Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1964591Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1964700Z    Location: ./Binary_search.py:33:8
2022-06-16T11:21:20.1965049Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1965263Z 32	    # map function returns a list of results after applying the given function to each item
2022-06-16T11:21:20.1965448Z 33	    x = eval(input("Enter the element you want to search in given array"))
2022-06-16T11:21:20.1965526Z 34	
2022-06-16T11:21:20.1965691Z 
2022-06-16T11:21:20.1965933Z --------------------------------------------------
2022-06-16T11:21:20.1966331Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.1966453Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1966707Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.1966869Z    Location: ./BlackJack_game/blackjack_simulate.py:94:20
2022-06-16T11:21:20.1967221Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.1967359Z 93	            for index in range(len(self.cards)):
2022-06-16T11:21:20.1967482Z 94	                i = random.randint(0, 51)
2022-06-16T11:21:20.1967668Z 95	                self.cards[index], self.cards[i] = self.cards[i], self.cards[index]
2022-06-16T11:21:20.1967676Z 
2022-06-16T11:21:20.1967967Z --------------------------------------------------
2022-06-16T11:21:20.1968327Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1968443Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1968711Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1968877Z    Location: ./BlackJack_game/blackjack_simulate.py:253:15
2022-06-16T11:21:20.1969227Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1969312Z 252	        )
2022-06-16T11:21:20.1969428Z 253	        return eval(compare_fmt)
2022-06-16T11:21:20.1969506Z 254	
2022-06-16T11:21:20.1969514Z 
2022-06-16T11:21:20.1969729Z --------------------------------------------------
2022-06-16T11:21:20.1970101Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.1970220Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1970492Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.1970659Z    Location: ./BlackJack_game/blackjack_simulate.py:290:28
2022-06-16T11:21:20.1971011Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.1971098Z 289	        else:
2022-06-16T11:21:20.1971239Z 290	            self.trigger += random.randint(0, 5)
2022-06-16T11:21:20.1971357Z 291	            if self.trigger % 5 == 0:
2022-06-16T11:21:20.1971365Z 
2022-06-16T11:21:20.1971565Z --------------------------------------------------
2022-06-16T11:21:20.1971859Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.1971980Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1972244Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1972409Z    Location: ./BlackJack_game/blackjack_simulate.py:365:8
2022-06-16T11:21:20.1972645Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.1972726Z 364	
2022-06-16T11:21:20.1972832Z 365	        os.system("clear")
2022-06-16T11:21:20.1972918Z 366	        print(base_bar)
2022-06-16T11:21:20.1972926Z 
2022-06-16T11:21:20.1973143Z --------------------------------------------------
2022-06-16T11:21:20.1973368Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.1973488Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1973751Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1973913Z    Location: ./BlackJack_game/blackjack_simulate.py:365:8
2022-06-16T11:21:20.1974154Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.1974231Z 364	
2022-06-16T11:21:20.1974320Z 365	        os.system("clear")
2022-06-16T11:21:20.1974425Z 366	        print(base_bar)
2022-06-16T11:21:20.1974433Z 
2022-06-16T11:21:20.1974761Z --------------------------------------------------
2022-06-16T11:21:20.1975058Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.1975181Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1975445Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1975611Z    Location: ./BlackJack_game/blackjack_simulate.py:433:12
2022-06-16T11:21:20.1975845Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.1975968Z 432	            self.res = "Winner is " + self.winner
2022-06-16T11:21:20.1976076Z 433	            os.system("clear")
2022-06-16T11:21:20.1976191Z 434	            self.calculate_chips()
2022-06-16T11:21:20.1976200Z 
2022-06-16T11:21:20.1976413Z --------------------------------------------------
2022-06-16T11:21:20.1976705Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.1976835Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1977106Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1977274Z    Location: ./BlackJack_game/blackjack_simulate.py:433:12
2022-06-16T11:21:20.1977501Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.1977636Z 432	            self.res = "Winner is " + self.winner
2022-06-16T11:21:20.1977742Z 433	            os.system("clear")
2022-06-16T11:21:20.1977859Z 434	            self.calculate_chips()
2022-06-16T11:21:20.1977867Z 
2022-06-16T11:21:20.1978086Z --------------------------------------------------
2022-06-16T11:21:20.1978471Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.1978594Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1978862Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.1979241Z    Location: ./BoardGame-CLI/snakeLadder.py:36:11
2022-06-16T11:21:20.1979614Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.1979715Z 35	    # print(players)
2022-06-16T11:21:20.1979841Z 36	    return random.randrange(1, 7)
2022-06-16T11:21:20.1979920Z 37	
2022-06-16T11:21:20.1979929Z 
2022-06-16T11:21:20.1980141Z --------------------------------------------------
2022-06-16T11:21:20.1980526Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.1980648Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1980901Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.1981108Z    Location: ./BoardGame-CLI/uno.py:39:18
2022-06-16T11:21:20.1981462Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.1985299Z 38	    for cardPos in range(len(deck)):
2022-06-16T11:21:20.1985513Z 39	        randPos = random.randint(0, 107)
2022-06-16T11:21:20.1985691Z 40	        deck[cardPos], deck[randPos] = deck[randPos], deck[cardPos]
2022-06-16T11:21:20.1985702Z 
2022-06-16T11:21:20.1986001Z --------------------------------------------------
2022-06-16T11:21:20.1987238Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.1987374Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.1987694Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.1987850Z    Location: ./Classification_human_or_horse.py:1:0
2022-06-16T11:21:20.1988245Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.1988343Z 1	import pickle
2022-06-16T11:21:20.1988420Z 2	
2022-06-16T11:21:20.1988537Z 3	import tensorflow as tf
2022-06-16T11:21:20.1988615Z 4	
2022-06-16T11:21:20.1988625Z 
2022-06-16T11:21:20.1989036Z --------------------------------------------------
2022-06-16T11:21:20.1989386Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1989515Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1989781Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1989927Z    Location: ./Credit_Card_Validator.py:54:33
2022-06-16T11:21:20.1990275Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1990401Z 53	                if len(str(double_it)) == 2:
2022-06-16T11:21:20.1990553Z 54	                    sum_ += sum([eval(i) for i in str(double_it)])
2022-06-16T11:21:20.1990615Z 55	
2022-06-16T11:21:20.1990624Z 
2022-06-16T11:21:20.1990837Z --------------------------------------------------
2022-06-16T11:21:20.1991178Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.1991316Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1991590Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.1991712Z    Location: ./Cricket_score.py:14:8
2022-06-16T11:21:20.1992089Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.1992166Z 13	
2022-06-16T11:21:20.1992278Z 14	sauce = request.urlopen(url).read()
2022-06-16T11:21:20.1992413Z 15	soup = bs4.BeautifulSoup(sauce, "lxml")
2022-06-16T11:21:20.1992422Z 
2022-06-16T11:21:20.1992639Z --------------------------------------------------
2022-06-16T11:21:20.1992981Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1993105Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1993373Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1993557Z    Location: ./Dictionary opperations (input,update a dict).py:12:4
2022-06-16T11:21:20.1993908Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1993972Z 11	
2022-06-16T11:21:20.1994101Z 12	d = eval(input("Enter the dictionary"))
2022-06-16T11:21:20.1994217Z 13	print("Dictionary", d, "\n")
2022-06-16T11:21:20.1994225Z 
2022-06-16T11:21:20.1994437Z --------------------------------------------------
2022-06-16T11:21:20.1994734Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ' '
2022-06-16T11:21:20.1994859Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.1995128Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.1995338Z    Location: ./Email-Automation.py:18:11
2022-06-16T11:21:20.1995561Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.1995649Z 17	email = " "
2022-06-16T11:21:20.1995745Z 18	password = " "
2022-06-16T11:21:20.1995820Z 19	
2022-06-16T11:21:20.1995970Z 20	mail = smtplib.SMTP("smtp.gmail.com", 587)
2022-06-16T11:21:20.1995979Z 
2022-06-16T11:21:20.1996193Z --------------------------------------------------
2022-06-16T11:21:20.1996536Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1996647Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1996910Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1997065Z    Location: ./Exception_Handling_in_Python.py:44:4
2022-06-16T11:21:20.1997417Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1997852Z 43	    # eval is a built-in-function used in python, eval function parses the expression argument and evaluates it as a python expression.
2022-06-16T11:21:20.1997948Z 44	    eval("x === x")
2022-06-16T11:21:20.1998022Z 45	
2022-06-16T11:21:20.1998034Z 
2022-06-16T11:21:20.1998250Z --------------------------------------------------
2022-06-16T11:21:20.1998695Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.1998806Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.1999071Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.1999227Z    Location: ./Exception_Handling_in_Python.py:101:4
2022-06-16T11:21:20.1999574Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.1999668Z 100	    c = int("abc")
2022-06-16T11:21:20.1999761Z 101	    eval("x===x")
2022-06-16T11:21:20.1999838Z 102	
2022-06-16T11:21:20.1999847Z 
2022-06-16T11:21:20.2000046Z --------------------------------------------------
2022-06-16T11:21:20.2000206Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2000327Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2000666Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2000835Z    Location: ./Exception_Handling_in_Python.py:103:0
2022-06-16T11:21:20.2001055Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2001132Z 102	
2022-06-16T11:21:20.2001215Z 103	except:
2022-06-16T11:21:20.2001286Z 104	    pass
2022-06-16T11:21:20.2001295Z 
2022-06-16T11:21:20.2001522Z --------------------------------------------------
2022-06-16T11:21:20.2001912Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2002034Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2002303Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2002565Z    Location: ./Flappy Bird - created with tkinter/Tubes.py:111:17
2022-06-16T11:21:20.2002919Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2002999Z 110	
2022-06-16T11:21:20.2003087Z 111	        height = randint(
2022-06-16T11:21:20.2003219Z 112	            self.__imageHeight // 2,
2022-06-16T11:21:20.2003486Z 113	            self.__height - (self.__bird_h * 2) - self.__imageHeight,
2022-06-16T11:21:20.2003567Z 114	        )
2022-06-16T11:21:20.2003576Z 
2022-06-16T11:21:20.2003790Z --------------------------------------------------
2022-06-16T11:21:20.2004045Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2004170Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2004434Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2004593Z    Location: ./Google_Image_Downloader/image_grapper.py:53:8
2022-06-16T11:21:20.2004970Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2005111Z 52	    request = Request(g, headers=usr_agent)
2022-06-16T11:21:20.2005225Z 53	    r = urlopen(request).read()
2022-06-16T11:21:20.2005368Z 54	    sew = BeautifulSoup(r, "html.parser")
2022-06-16T11:21:20.2005376Z 
2022-06-16T11:21:20.2005590Z --------------------------------------------------
2022-06-16T11:21:20.2005846Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2006021Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2006287Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2006458Z    Location: ./Google_Image_Downloader/image_grapper.py:86:8
2022-06-16T11:21:20.2006835Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2006969Z 85	    request = Request(g, headers=usr_agent)
2022-06-16T11:21:20.2007082Z 86	    r = urlopen(request).read()
2022-06-16T11:21:20.2007221Z 87	    sew = BeautifulSoup(r, "html.parser")
2022-06-16T11:21:20.2007234Z 
2022-06-16T11:21:20.2007448Z --------------------------------------------------
2022-06-16T11:21:20.2007904Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2008015Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2008280Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2008454Z    Location: ./Google_Image_Downloader/image_grapper.py:170:13
2022-06-16T11:21:20.2008803Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2008976Z 169	        # Via eval() let `str expression` to `function`
2022-06-16T11:21:20.2009089Z 170	        fx = eval(FX[int(choice)])
2022-06-16T11:21:20.2009181Z 171	        run = fx()
2022-06-16T11:21:20.2009190Z 
2022-06-16T11:21:20.2009406Z --------------------------------------------------
2022-06-16T11:21:20.2009763Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2009900Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2010170Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2010342Z    Location: ./Google_Image_Downloader/image_grapper.py:173:8
2022-06-16T11:21:20.2010576Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2010678Z 172	    except KeyError:
2022-06-16T11:21:20.2010775Z 173	        system("clear")
2022-06-16T11:21:20.2010872Z 174	        if count <= 5:
2022-06-16T11:21:20.2010880Z 
2022-06-16T11:21:20.2011079Z --------------------------------------------------
2022-06-16T11:21:20.2011304Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2011422Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2011680Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2011857Z    Location: ./Google_Image_Downloader/image_grapper.py:173:8
2022-06-16T11:21:20.2012103Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2012203Z 172	    except KeyError:
2022-06-16T11:21:20.2012300Z 173	        system("clear")
2022-06-16T11:21:20.2012384Z 174	        if count <= 5:
2022-06-16T11:21:20.2012391Z 
2022-06-16T11:21:20.2012605Z --------------------------------------------------
2022-06-16T11:21:20.2012895Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2013544Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2013894Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2014069Z    Location: ./Google_Image_Downloader/image_grapper.py:178:12
2022-06-16T11:21:20.2014313Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2014405Z 177	        else:
2022-06-16T11:21:20.2014496Z 178	            system("clear")
2022-06-16T11:21:20.2014665Z 179	            print("You have attempted 5 times , try again later")
2022-06-16T11:21:20.2014675Z 
2022-06-16T11:21:20.2014895Z --------------------------------------------------
2022-06-16T11:21:20.2015124Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2015244Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2015505Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2015680Z    Location: ./Google_Image_Downloader/image_grapper.py:178:12
2022-06-16T11:21:20.2015928Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2015999Z 177	        else:
2022-06-16T11:21:20.2016103Z 178	            system("clear")
2022-06-16T11:21:20.2016274Z 179	            print("You have attempted 5 times , try again later")
2022-06-16T11:21:20.2016282Z 
2022-06-16T11:21:20.2016694Z --------------------------------------------------
2022-06-16T11:21:20.2017221Z >> Issue: [B323:blacklist] By default, Python will create a secure, verified ssl context for use in such classes as HTTPSConnection. However, it still allows using an insecure context via the _create_unverified_context that  reverts to the previous behavior that does not validate certificates or perform hostname checks.
2022-06-16T11:21:20.2017349Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2017625Z    CWE: CWE-295 (https://cwe.mitre.org/data/definitions/295.html)
2022-06-16T11:21:20.2017749Z    Location: ./Google_News.py:12:14
2022-06-16T11:21:20.2018144Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b323-unverified-context
2022-06-16T11:21:20.2018208Z 11	
2022-06-16T11:21:20.2018350Z 12	    context = ssl._create_unverified_context()
2022-06-16T11:21:20.2018577Z 13	    Client = urlopen(xml_news_url, context=context)
2022-06-16T11:21:20.2018592Z 
2022-06-16T11:21:20.2018827Z --------------------------------------------------
2022-06-16T11:21:20.2019256Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2019390Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2019667Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2019790Z    Location: ./Google_News.py:13:13
2022-06-16T11:21:20.2020154Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2020299Z 12	    context = ssl._create_unverified_context()
2022-06-16T11:21:20.2020451Z 13	    Client = urlopen(xml_news_url, context=context)
2022-06-16T11:21:20.2020564Z 14	    xml_page = Client.read()
2022-06-16T11:21:20.2020573Z 
2022-06-16T11:21:20.2020789Z --------------------------------------------------
2022-06-16T11:21:20.2021184Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2021311Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2021583Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2021710Z    Location: ./Guess_the_number_game.py:15:10
2022-06-16T11:21:20.2022064Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2022155Z 14	    global num
2022-06-16T11:21:20.2022366Z 15	    num = random.randrange(0, 100)
2022-06-16T11:21:20.2022594Z 16	    print("your range is 0-100")
2022-06-16T11:21:20.2022603Z 
2022-06-16T11:21:20.2022862Z --------------------------------------------------
2022-06-16T11:21:20.2023310Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2023470Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2023730Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2024130Z    Location: ./Guess_the_number_game.py:21:10
2022-06-16T11:21:20.2024491Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2024621Z 20	    global num
2022-06-16T11:21:20.2024777Z 21	    num = random.randrange(0, 1000)
2022-06-16T11:21:20.2025012Z 22	    print("Your range is 0-1000")
2022-06-16T11:21:20.2025021Z 
2022-06-16T11:21:20.2025273Z --------------------------------------------------
2022-06-16T11:21:20.2025714Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2025875Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2026189Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2026301Z    Location: ./Guessing_Game.py:7:13
2022-06-16T11:21:20.2026748Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2026902Z 6	    # Set the initial values.
2022-06-16T11:21:20.2027186Z 7	    RANDOM = randint(1, GUESS_RANGE)
2022-06-16T11:21:20.2027366Z 8	    GUESS = int(input("What is your guess? "))
2022-06-16T11:21:20.2027375Z 
2022-06-16T11:21:20.2027662Z --------------------------------------------------
2022-06-16T11:21:20.2028095Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2028255Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2029224Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2029429Z    Location: ./Hangman.py:24:7
2022-06-16T11:21:20.2029933Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2030148Z 23	# randomly choose a secret word from our "someWords" LIST.
2022-06-16T11:21:20.2030312Z 24	word = random.choice(someWords)
2022-06-16T11:21:20.2030453Z 25	
2022-06-16T11:21:20.2030606Z 
2022-06-16T11:21:20.2030909Z --------------------------------------------------
2022-06-16T11:21:20.2031216Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2031330Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2031641Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2031841Z    Location: ./ImageDownloader/img_downloader.py:14:8
2022-06-16T11:21:20.2032174Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2032320Z 13	    for i in img_addrs:
2022-06-16T11:21:20.2032495Z 14	        os.system("wget {}".format(i))
2022-06-16T11:21:20.2032608Z 15	
2022-06-16T11:21:20.2032619Z 
2022-06-16T11:21:20.2032882Z --------------------------------------------------
2022-06-16T11:21:20.2033110Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2033274Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2033592Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2033755Z    Location: ./JARVIS/JARVIS.py:13:0
2022-06-16T11:21:20.2034234Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2034528Z 12	import datetime  # datetime module supplies classes for manipulating dates and times
2022-06-16T11:21:20.2034774Z 13	import subprocess  # subprocess module allows you to spawn new processes
2022-06-16T11:21:20.2034889Z 14	
2022-06-16T11:21:20.2034961Z 15	# master
2022-06-16T11:21:20.2035093Z 16	import pyjokes
2022-06-16T11:21:20.2035102Z 
2022-06-16T11:21:20.2035366Z --------------------------------------------------
2022-06-16T11:21:20.2035636Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2035796Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2036146Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2036336Z    Location: ./JARVIS/JARVIS.py:203:8
2022-06-16T11:21:20.2036624Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2036725Z 202	    elif Q == "open notepad":
2022-06-16T11:21:20.2036903Z 203	        subprocess.call(["Notepad.exe"])
2022-06-16T11:21:20.2037057Z 204	    elif Q == "open calculator":
2022-06-16T11:21:20.2037066Z 
2022-06-16T11:21:20.2037328Z --------------------------------------------------
2022-06-16T11:21:20.2037738Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2037902Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2038244Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2038421Z    Location: ./JARVIS/JARVIS.py:203:8
2022-06-16T11:21:20.2038666Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2038930Z 202	    elif Q == "open notepad":
2022-06-16T11:21:20.2039108Z 203	        subprocess.call(["Notepad.exe"])
2022-06-16T11:21:20.2039265Z 204	    elif Q == "open calculator":
2022-06-16T11:21:20.2039275Z 
2022-06-16T11:21:20.2039551Z --------------------------------------------------
2022-06-16T11:21:20.2039817Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2039978Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2040355Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2040471Z    Location: ./JARVIS/JARVIS.py:205:8
2022-06-16T11:21:20.2040754Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2040909Z 204	    elif Q == "open calculator":
2022-06-16T11:21:20.2041075Z 205	        subprocess.call(["calc.exe"])
2022-06-16T11:21:20.2041300Z 206	    elif Q == "open stikynot":
2022-06-16T11:21:20.2041312Z 
2022-06-16T11:21:20.2041597Z --------------------------------------------------
2022-06-16T11:21:20.2042010Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2042184Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2042439Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2042706Z    Location: ./JARVIS/JARVIS.py:205:8
2022-06-16T11:21:20.2043007Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2043163Z 204	    elif Q == "open calculator":
2022-06-16T11:21:20.2043326Z 205	        subprocess.call(["calc.exe"])
2022-06-16T11:21:20.2043477Z 206	    elif Q == "open stikynot":
2022-06-16T11:21:20.2043487Z 
2022-06-16T11:21:20.2043752Z --------------------------------------------------
2022-06-16T11:21:20.2044032Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2044146Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2044456Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2044663Z    Location: ./JARVIS/JARVIS.py:207:8
2022-06-16T11:21:20.2044947Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2045098Z 206	    elif Q == "open stikynot":
2022-06-16T11:21:20.2045278Z 207	        subprocess.call(["StikyNot.exe"])
2022-06-16T11:21:20.2046363Z 208	    elif Q == "open shell":
2022-06-16T11:21:20.2046388Z 
2022-06-16T11:21:20.2046751Z --------------------------------------------------
2022-06-16T11:21:20.2047122Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2047305Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2047623Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2047867Z    Location: ./JARVIS/JARVIS.py:207:8
2022-06-16T11:21:20.2048175Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2048933Z 206	    elif Q == "open stikynot":
2022-06-16T11:21:20.2049139Z 207	        subprocess.call(["StikyNot.exe"])
2022-06-16T11:21:20.2049234Z 208	    elif Q == "open shell":
2022-06-16T11:21:20.2049297Z 
2022-06-16T11:21:20.2049546Z --------------------------------------------------
2022-06-16T11:21:20.2049834Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2049992Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2050308Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2050550Z    Location: ./JARVIS/JARVIS.py:209:8
2022-06-16T11:21:20.2050841Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2050992Z 208	    elif Q == "open shell":
2022-06-16T11:21:20.2051124Z 209	        subprocess.call(["powershell.exe"])
2022-06-16T11:21:20.2051412Z 210	    elif Q == "open paint":
2022-06-16T11:21:20.2051421Z 
2022-06-16T11:21:20.2051721Z --------------------------------------------------
2022-06-16T11:21:20.2052134Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2052296Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2052653Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2052875Z    Location: ./JARVIS/JARVIS.py:209:8
2022-06-16T11:21:20.2053173Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2053316Z 208	    elif Q == "open shell":
2022-06-16T11:21:20.2053447Z 209	        subprocess.call(["powershell.exe"])
2022-06-16T11:21:20.2053591Z 210	    elif Q == "open paint":
2022-06-16T11:21:20.2053701Z 
2022-06-16T11:21:20.2053996Z --------------------------------------------------
2022-06-16T11:21:20.2054269Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2054431Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2054746Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2054984Z    Location: ./JARVIS/JARVIS.py:211:8
2022-06-16T11:21:20.2055220Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2055369Z 210	    elif Q == "open paint":
2022-06-16T11:21:20.2055670Z 211	        subprocess.call(["mspaint.exe"])
2022-06-16T11:21:20.2055826Z 212	    elif Q == "open cmd":
2022-06-16T11:21:20.2055835Z 
2022-06-16T11:21:20.2056091Z --------------------------------------------------
2022-06-16T11:21:20.2056536Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2056695Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2056999Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2057106Z    Location: ./JARVIS/JARVIS.py:211:8
2022-06-16T11:21:20.2057442Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2057584Z 210	    elif Q == "open paint":
2022-06-16T11:21:20.2057765Z 211	        subprocess.call(["mspaint.exe"])
2022-06-16T11:21:20.2057902Z 212	    elif Q == "open cmd":
2022-06-16T11:21:20.2057911Z 
2022-06-16T11:21:20.2058165Z --------------------------------------------------
2022-06-16T11:21:20.2058418Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2058571Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2058813Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2059441Z    Location: ./JARVIS/JARVIS.py:213:8
2022-06-16T11:21:20.2059926Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2060078Z 212	    elif Q == "open cmd":
2022-06-16T11:21:20.2060262Z 213	        subprocess.call(["cmd.exe"])
2022-06-16T11:21:20.2060414Z 214	    elif Q == "open discord":
2022-06-16T11:21:20.2060425Z 
2022-06-16T11:21:20.2060710Z --------------------------------------------------
2022-06-16T11:21:20.2061121Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2061229Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2061583Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2061745Z    Location: ./JARVIS/JARVIS.py:213:8
2022-06-16T11:21:20.2062079Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2062237Z 212	    elif Q == "open cmd":
2022-06-16T11:21:20.2062410Z 213	        subprocess.call(["cmd.exe"])
2022-06-16T11:21:20.2062558Z 214	    elif Q == "open discord":
2022-06-16T11:21:20.2062695Z 
2022-06-16T11:21:20.2062984Z --------------------------------------------------
2022-06-16T11:21:20.2063199Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2063361Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2063672Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2063838Z    Location: ./JARVIS/JARVIS.py:215:8
2022-06-16T11:21:20.2064187Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2064337Z 214	    elif Q == "open discord":
2022-06-16T11:21:20.2064634Z 215	        subprocess.call(["discord.exe"])
2022-06-16T11:21:20.2064777Z 216	    elif Q == "open browser":
2022-06-16T11:21:20.2064785Z 
2022-06-16T11:21:20.2064986Z --------------------------------------------------
2022-06-16T11:21:20.2065582Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2065748Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2066045Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2066214Z    Location: ./JARVIS/JARVIS.py:215:8
2022-06-16T11:21:20.2066527Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2066670Z 214	    elif Q == "open discord":
2022-06-16T11:21:20.2066833Z 215	        subprocess.call(["discord.exe"])
2022-06-16T11:21:20.2066923Z 216	    elif Q == "open browser":
2022-06-16T11:21:20.2066931Z 
2022-06-16T11:21:20.2067423Z --------------------------------------------------
2022-06-16T11:21:20.2067830Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2067986Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2068296Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2068480Z    Location: ./JARVIS/JARVIS.py:217:8
2022-06-16T11:21:20.2068808Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2068959Z 216	    elif Q == "open browser":
2022-06-16T11:21:20.2069161Z 217	        subprocess.call(["C:\\Program Files\\Internet Explorer\\iexplore.exe"])
2022-06-16T11:21:20.2069320Z 218	    # patch-1
2022-06-16T11:21:20.2069329Z 
2022-06-16T11:21:20.2069586Z --------------------------------------------------
2022-06-16T11:21:20.2069842Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2070000Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2173860Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2174200Z    Location: ./JustDialScrapperGUI/Justdial Scrapper GUI.py:59:20
2022-06-16T11:21:20.2174445Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2174609Z 58	                            phone_no += str((self.which_digit(classes[1])))
2022-06-16T11:21:20.2174724Z 59	                    except Exception:
2022-06-16T11:21:20.2174809Z 60	                        pass
2022-06-16T11:21:20.2174819Z 
2022-06-16T11:21:20.2190619Z --------------------------------------------------
2022-06-16T11:21:20.2190811Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2190929Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2191228Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2191414Z    Location: ./JustDialScrapperGUI/Justdial Scrapper GUI.py:61:8
2022-06-16T11:21:20.2191628Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2191719Z 60	                        pass
2022-06-16T11:21:20.2191813Z 61	        except Exception:
2022-06-16T11:21:20.2191895Z 62	            pass
2022-06-16T11:21:20.2191914Z 
2022-06-16T11:21:20.2192130Z --------------------------------------------------
2022-06-16T11:21:20.2192751Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2192868Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2193142Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2193323Z    Location: ./JustDialScrapperGUI/Justdial Scrapper GUI.py:143:19
2022-06-16T11:21:20.2193698Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2193770Z 142	            )
2022-06-16T11:21:20.2193907Z 143	            page = urllib.request.urlopen(req)
2022-06-16T11:21:20.2193977Z 144	
2022-06-16T11:21:20.2193987Z 
2022-06-16T11:21:20.2194195Z --------------------------------------------------
2022-06-16T11:21:20.2194682Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2194806Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2195087Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2195201Z    Location: ./Memory_game.py:11:18
2022-06-16T11:21:20.2195546Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2195649Z 10	        while len(card) != 8:
2022-06-16T11:21:20.2195770Z 11	            num = random.randrange(0, 8)
2022-06-16T11:21:20.2195870Z 12	            if num not in card:
2022-06-16T11:21:20.2195881Z 
2022-06-16T11:21:20.2196090Z --------------------------------------------------
2022-06-16T11:21:20.2196335Z >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: ''
2022-06-16T11:21:20.2196449Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2196707Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2196825Z    Location: ./MySQL_Databses.py:5:7
2022-06-16T11:21:20.2197053Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b106_hardcoded_password_funcarg.html
2022-06-16T11:21:20.2197127Z 4	
2022-06-16T11:21:20.2197248Z 5	mydb = mysql.connector.connect(
2022-06-16T11:21:20.2197392Z 6	    host="0.0.0.0", user="root", passwd="", database="db_name"
2022-06-16T11:21:20.2197459Z 7	)
2022-06-16T11:21:20.2197468Z 
2022-06-16T11:21:20.2197677Z --------------------------------------------------
2022-06-16T11:21:20.2197860Z >> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
2022-06-16T11:21:20.2197981Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2198239Z    CWE: CWE-605 (https://cwe.mitre.org/data/definitions/605.html)
2022-06-16T11:21:20.2198354Z    Location: ./MySQL_Databses.py:6:9
2022-06-16T11:21:20.2198587Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b104_hardcoded_bind_all_interfaces.html
2022-06-16T11:21:20.2198706Z 5	mydb = mysql.connector.connect(
2022-06-16T11:21:20.2198854Z 6	    host="0.0.0.0", user="root", passwd="", database="db_name"
2022-06-16T11:21:20.2198927Z 7	)
2022-06-16T11:21:20.2198936Z 
2022-06-16T11:21:20.2199139Z --------------------------------------------------
2022-06-16T11:21:20.2199518Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2199630Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2199899Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2200019Z    Location: ./PONG_GAME.py:28:20
2022-06-16T11:21:20.2200369Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2200476Z 27	    if direction == RIGHT:
2022-06-16T11:21:20.2200659Z 28	        ball_vel = [random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]
2022-06-16T11:21:20.2200755Z 29	    elif direction == LEFT:
2022-06-16T11:21:20.2200763Z 
2022-06-16T11:21:20.2200981Z --------------------------------------------------
2022-06-16T11:21:20.2201366Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2201589Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2201866Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2201986Z    Location: ./PONG_GAME.py:28:53
2022-06-16T11:21:20.2202339Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2202444Z 27	    if direction == RIGHT:
2022-06-16T11:21:20.2202615Z 28	        ball_vel = [random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]
2022-06-16T11:21:20.2202723Z 29	    elif direction == LEFT:
2022-06-16T11:21:20.2202732Z 
2022-06-16T11:21:20.2202946Z --------------------------------------------------
2022-06-16T11:21:20.2203332Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2203587Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2203889Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2204012Z    Location: ./PONG_GAME.py:30:21
2022-06-16T11:21:20.2204366Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2204459Z 29	    elif direction == LEFT:
2022-06-16T11:21:20.2204761Z 30	        ball_vel = [-random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]
2022-06-16T11:21:20.2204837Z 31	
2022-06-16T11:21:20.2204847Z 
2022-06-16T11:21:20.2205062Z --------------------------------------------------
2022-06-16T11:21:20.2205445Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2205565Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2205829Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2205946Z    Location: ./PONG_GAME.py:30:54
2022-06-16T11:21:20.2206286Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2206398Z 29	    elif direction == LEFT:
2022-06-16T11:21:20.2206696Z 30	        ball_vel = [-random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]
2022-06-16T11:21:20.2206773Z 31	
2022-06-16T11:21:20.2206780Z 
2022-06-16T11:21:20.2206995Z --------------------------------------------------
2022-06-16T11:21:20.2207379Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2207497Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2207759Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2207893Z    Location: ./PongPong_Game/pong/ball.py:27:13
2022-06-16T11:21:20.2208244Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2208373Z 26	        ]  # more choices more randomness
2022-06-16T11:21:20.2208491Z 27	        rn = random.choice(speed)
2022-06-16T11:21:20.2208618Z 28	        newx = self.x + self.velocity_x
2022-06-16T11:21:20.2208626Z 
2022-06-16T11:21:20.2208841Z --------------------------------------------------
2022-06-16T11:21:20.2209222Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2209343Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2209595Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2209716Z    Location: ./RandomDice.py:11:25
2022-06-16T11:21:20.2210066Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2210174Z 10	    text.delete(0.0, END)
2022-06-16T11:21:20.2210306Z 11	    text.insert(END, str(randint(1, 100)))
2022-06-16T11:21:20.2210384Z 12	
2022-06-16T11:21:20.2210392Z 
2022-06-16T11:21:20.2210607Z --------------------------------------------------
2022-06-16T11:21:20.2210903Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2211122Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2211382Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2211515Z    Location: ./RandomNumberGame.py:21:0
2022-06-16T11:21:20.2211746Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2211832Z 20	x = input()
2022-06-16T11:21:20.2211929Z 21	os.system("cls")
2022-06-16T11:21:20.2212005Z 22	
2022-06-16T11:21:20.2212014Z 
2022-06-16T11:21:20.2212226Z --------------------------------------------------
2022-06-16T11:21:20.2212435Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2212553Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2212886Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2213031Z    Location: ./RandomNumberGame.py:21:0
2022-06-16T11:21:20.2213278Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2213363Z 20	x = input()
2022-06-16T11:21:20.2213454Z 21	os.system("cls")
2022-06-16T11:21:20.2213529Z 22	
2022-06-16T11:21:20.2213537Z 
2022-06-16T11:21:20.2213743Z --------------------------------------------------
2022-06-16T11:21:20.2214032Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2214151Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2214411Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2214544Z    Location: ./RandomNumberGame.py:30:0
2022-06-16T11:21:20.2215195Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2215668Z 29	
2022-06-16T11:21:20.2215796Z 30	os.system("cls")
2022-06-16T11:21:20.2215863Z 31	
2022-06-16T11:21:20.2215873Z 
2022-06-16T11:21:20.2216142Z --------------------------------------------------
2022-06-16T11:21:20.2216374Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2216495Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2216762Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2216894Z    Location: ./RandomNumberGame.py:30:0
2022-06-16T11:21:20.2217136Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2217198Z 29	
2022-06-16T11:21:20.2217292Z 30	os.system("cls")
2022-06-16T11:21:20.2217368Z 31	
2022-06-16T11:21:20.2217376Z 
2022-06-16T11:21:20.2217592Z --------------------------------------------------
2022-06-16T11:21:20.2217987Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2218104Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2218376Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2218513Z    Location: ./RandomNumberGame.py:33:14
2022-06-16T11:21:20.2218850Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2218952Z 32	for i in range(0, n):
2022-06-16T11:21:20.2219307Z 33	    orignum = random.randint(1, 100)
2022-06-16T11:21:20.2219470Z 34	    print(players[i], "your turn :", end="\n\n")
2022-06-16T11:21:20.2219480Z 
2022-06-16T11:21:20.2219712Z --------------------------------------------------
2022-06-16T11:21:20.2220002Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2220122Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2220393Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2220513Z    Location: ./RandomNumberGame.py:50:4
2022-06-16T11:21:20.2220932Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2221047Z 49	    score.append(count + 1)
2022-06-16T11:21:20.2221145Z 50	    os.system("cls")
2022-06-16T11:21:20.2221249Z 51	print("players :\n")
2022-06-16T11:21:20.2221258Z 
2022-06-16T11:21:20.2221486Z --------------------------------------------------
2022-06-16T11:21:20.2221710Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2221830Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2222079Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2222209Z    Location: ./RandomNumberGame.py:50:4
2022-06-16T11:21:20.2222450Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2222639Z 49	    score.append(count + 1)
2022-06-16T11:21:20.2222746Z 50	    os.system("cls")
2022-06-16T11:21:20.2222854Z 51	print("players :\n")
2022-06-16T11:21:20.2222862Z 
2022-06-16T11:21:20.2223080Z --------------------------------------------------
2022-06-16T11:21:20.2223581Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2223682Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2224058Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2224241Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:5:6
2022-06-16T11:21:20.2224593Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2224695Z 4	t = turtle.Turtle()
2022-06-16T11:21:20.2224807Z 5	num = random.randint(1, 1000)
2022-06-16T11:21:20.2224896Z 6	t.right(num)
2022-06-16T11:21:20.2224905Z 
2022-06-16T11:21:20.2225121Z --------------------------------------------------
2022-06-16T11:21:20.2225492Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2225614Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2225879Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2226067Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:25:13
2022-06-16T11:21:20.2226417Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2226524Z 24	        t.backward(num / 5)
2022-06-16T11:21:20.2226641Z 25	        tree(random.randint(1, 100))
2022-06-16T11:21:20.2226757Z 26	        tree(random.randint(1, num))
2022-06-16T11:21:20.2226764Z 
2022-06-16T11:21:20.2226965Z --------------------------------------------------
2022-06-16T11:21:20.2227345Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2227468Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2227732Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2227921Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:26:13
2022-06-16T11:21:20.2228271Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2228389Z 25	        tree(random.randint(1, 100))
2022-06-16T11:21:20.2228506Z 26	        tree(random.randint(1, num))
2022-06-16T11:21:20.2228620Z 27	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2228628Z 
2022-06-16T11:21:20.2228842Z --------------------------------------------------
2022-06-16T11:21:20.2229227Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2229346Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2229609Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2229796Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:27:13
2022-06-16T11:21:20.2230149Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2230359Z 26	        tree(random.randint(1, num))
2022-06-16T11:21:20.2230473Z 27	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2230719Z 28	        tree(random.randint(1, num / 3))
2022-06-16T11:21:20.2230728Z 
2022-06-16T11:21:20.2230946Z --------------------------------------------------
2022-06-16T11:21:20.2231433Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2231554Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2231820Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2232003Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:28:13
2022-06-16T11:21:20.2232351Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2232533Z 27	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2232673Z 28	        tree(random.randint(1, num / 3))
2022-06-16T11:21:20.2232797Z 29	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2232805Z 
2022-06-16T11:21:20.2233027Z --------------------------------------------------
2022-06-16T11:21:20.2233409Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2233530Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2233799Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2233984Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:29:13
2022-06-16T11:21:20.2234321Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2234449Z 28	        tree(random.randint(1, num / 3))
2022-06-16T11:21:20.2234574Z 29	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2234696Z 30	        tree(random.randint(1, num))
2022-06-16T11:21:20.2234704Z 
2022-06-16T11:21:20.2234926Z --------------------------------------------------
2022-06-16T11:21:20.2235310Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2235431Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2235698Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2235880Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:30:13
2022-06-16T11:21:20.2236217Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2236344Z 29	        tree(random.randint(1, num / 2))
2022-06-16T11:21:20.2236460Z 30	        tree(random.randint(1, num))
2022-06-16T11:21:20.2236578Z 31	        tree(random.randint(1, 100))
2022-06-16T11:21:20.2236586Z 
2022-06-16T11:21:20.2236801Z --------------------------------------------------
2022-06-16T11:21:20.2237188Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2237310Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2237574Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2237744Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:31:13
2022-06-16T11:21:20.2238093Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2238211Z 30	        tree(random.randint(1, num))
2022-06-16T11:21:20.2238328Z 31	        tree(random.randint(1, 100))
2022-06-16T11:21:20.2238431Z 32	        t.forward(num / 5)
2022-06-16T11:21:20.2238439Z 
2022-06-16T11:21:20.2238653Z --------------------------------------------------
2022-06-16T11:21:20.2239036Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2239155Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2239410Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2239684Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:50:17
2022-06-16T11:21:20.2240039Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2240124Z 49	        try:
2022-06-16T11:21:20.2240247Z 50	            tree(random.randint(1, i))
2022-06-16T11:21:20.2240374Z 51	            tree(random.randint(1, i * 2))
2022-06-16T11:21:20.2240383Z 
2022-06-16T11:21:20.2240599Z --------------------------------------------------
2022-06-16T11:21:20.2240980Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2241088Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2241351Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2241532Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:51:17
2022-06-16T11:21:20.2241950Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2242086Z 50	            tree(random.randint(1, i))
2022-06-16T11:21:20.2242213Z 51	            tree(random.randint(1, i * 2))
2022-06-16T11:21:20.2242298Z 52	        except:
2022-06-16T11:21:20.2242308Z 
2022-06-16T11:21:20.2242529Z --------------------------------------------------
2022-06-16T11:21:20.2242901Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2243020Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2243285Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2243469Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:63:14
2022-06-16T11:21:20.2243817Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2243900Z 62	    else:
2022-06-16T11:21:20.2244029Z 63	        cycle(random.randint(1, i + 1))
2022-06-16T11:21:20.2244150Z 64	        cycle(random.randint(1, i))
2022-06-16T11:21:20.2244162Z 
2022-06-16T11:21:20.2244367Z --------------------------------------------------
2022-06-16T11:21:20.2244752Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2244872Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2245138Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2245322Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:64:14
2022-06-16T11:21:20.2245668Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2245793Z 63	        cycle(random.randint(1, i + 1))
2022-06-16T11:21:20.2245910Z 64	        cycle(random.randint(1, i))
2022-06-16T11:21:20.2246094Z 65	        cycle(random.randint(1, i - 1))
2022-06-16T11:21:20.2246103Z 
2022-06-16T11:21:20.2246318Z --------------------------------------------------
2022-06-16T11:21:20.2246700Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2246822Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2247089Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2247271Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:65:14
2022-06-16T11:21:20.2247620Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2247739Z 64	        cycle(random.randint(1, i))
2022-06-16T11:21:20.2247918Z 65	        cycle(random.randint(1, i - 1))
2022-06-16T11:21:20.2248109Z 66	        cycle(random.randint(1, i - 2))
2022-06-16T11:21:20.2248117Z 
2022-06-16T11:21:20.2248329Z --------------------------------------------------
2022-06-16T11:21:20.2248707Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2248831Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2249095Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2249369Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:66:14
2022-06-16T11:21:20.2249724Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2249904Z 65	        cycle(random.randint(1, i - 1))
2022-06-16T11:21:20.2250094Z 66	        cycle(random.randint(1, i - 2))
2022-06-16T11:21:20.2250233Z 67	        print("fractal execution complete")
2022-06-16T11:21:20.2250242Z 
2022-06-16T11:21:20.2250455Z --------------------------------------------------
2022-06-16T11:21:20.2250832Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2250952Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2251218Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2251491Z    Location: ./Recursion Visulaizer/recursionVisualizer.py:70:8
2022-06-16T11:21:20.2251848Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2251928Z 69	
2022-06-16T11:21:20.2252049Z 70	fractal(random.randint(1, 200))
2022-06-16T11:21:20.2252164Z 71	print("Execution complete")
2022-06-16T11:21:20.2252172Z 
2022-06-16T11:21:20.2252447Z --------------------------------------------------
2022-06-16T11:21:20.2252795Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2252921Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2253183Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2253330Z    Location: ./Shortest Distance between Two Lines.py:4:6
2022-06-16T11:21:20.2253678Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2253756Z 3	
2022-06-16T11:21:20.2253893Z 4	LC1 = eval(input("Enter DRs of Line 1 : "))
2022-06-16T11:21:20.2254074Z 5	LP1 = eval(input("Enter Coordinate through which Line 1 passes : "))
2022-06-16T11:21:20.2254086Z 
2022-06-16T11:21:20.2254304Z --------------------------------------------------
2022-06-16T11:21:20.2254644Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2254768Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2255013Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2255173Z    Location: ./Shortest Distance between Two Lines.py:5:6
2022-06-16T11:21:20.2255516Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2255649Z 4	LC1 = eval(input("Enter DRs of Line 1 : "))
2022-06-16T11:21:20.2255828Z 5	LP1 = eval(input("Enter Coordinate through which Line 1 passes : "))
2022-06-16T11:21:20.2255959Z 6	LC2 = eval(input("Enter DRs of Line 2 : "))
2022-06-16T11:21:20.2255971Z 
2022-06-16T11:21:20.2256186Z --------------------------------------------------
2022-06-16T11:21:20.2256530Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2256654Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2256901Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2257061Z    Location: ./Shortest Distance between Two Lines.py:6:6
2022-06-16T11:21:20.2257406Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2257587Z 5	LP1 = eval(input("Enter Coordinate through which Line 1 passes : "))
2022-06-16T11:21:20.2257720Z 6	LC2 = eval(input("Enter DRs of Line 2 : "))
2022-06-16T11:21:20.2257896Z 7	LP2 = eval(input("Enter Coordinate through which Line 2 passes : "))
2022-06-16T11:21:20.2257904Z 
2022-06-16T11:21:20.2258118Z --------------------------------------------------
2022-06-16T11:21:20.2258461Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2258662Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2258933Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2259334Z    Location: ./Shortest Distance between Two Lines.py:7:6
2022-06-16T11:21:20.2259718Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2259850Z 6	LC2 = eval(input("Enter DRs of Line 2 : "))
2022-06-16T11:21:20.2260026Z 7	LP2 = eval(input("Enter Coordinate through which Line 2 passes : "))
2022-06-16T11:21:20.2260173Z 8	a1, b1, c1, a2, b2, c2 = LC1[0], LC1[1], LC1[2], LC2[0], LC2[1], LC2[2]
2022-06-16T11:21:20.2260183Z 
2022-06-16T11:21:20.2260398Z --------------------------------------------------
2022-06-16T11:21:20.2260769Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2261008Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2261301Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2261529Z    Location: ./Snake-Water-Gun-Game.py:82:16
2022-06-16T11:21:20.2261878Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2261954Z 81	
2022-06-16T11:21:20.2262119Z 82	    comp_rand = random.choice(list(choices.keys())).lower()
2022-06-16T11:21:20.2262325Z 83	    user_choice = input("\n----->").lower()
2022-06-16T11:21:20.2262334Z 
2022-06-16T11:21:20.2262534Z --------------------------------------------------
2022-06-16T11:21:20.2262825Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2262945Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2263334Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2263588Z    Location: ./Snake_water_gun/main.py:25:0
2022-06-16T11:21:20.2263821Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2263902Z 24	
2022-06-16T11:21:20.2263991Z 25	system("clear")
2022-06-16T11:21:20.2264063Z 26	b = input(
2022-06-16T11:21:20.2264072Z 
2022-06-16T11:21:20.2264287Z --------------------------------------------------
2022-06-16T11:21:20.2264512Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2264630Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2264892Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2265026Z    Location: ./Snake_water_gun/main.py:25:0
2022-06-16T11:21:20.2265266Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2265343Z 24	
2022-06-16T11:21:20.2265420Z 25	system("clear")
2022-06-16T11:21:20.2265503Z 26	b = input(
2022-06-16T11:21:20.2265515Z 
2022-06-16T11:21:20.2265731Z --------------------------------------------------
2022-06-16T11:21:20.2266117Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2266235Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2266504Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2266642Z    Location: ./Snake_water_gun/main.py:46:18
2022-06-16T11:21:20.2266990Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2267052Z 45	
2022-06-16T11:21:20.2267175Z 46	    comp_choice = random.choice(li)
2022-06-16T11:21:20.2267357Z 47	    user_choice = input("Type s for snake, w for water or g for gun: ").lower()
2022-06-16T11:21:20.2267366Z 
2022-06-16T11:21:20.2267578Z --------------------------------------------------
2022-06-16T11:21:20.2267964Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2268085Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2268454Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2268695Z    Location: ./Test-Case-Generator/test_case.py:612:21
2022-06-16T11:21:20.2269032Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2269141Z 611	        for i in range(self.t):
2022-06-16T11:21:20.2269286Z 612	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2269426Z 613	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2269435Z 
2022-06-16T11:21:20.2269648Z --------------------------------------------------
2022-06-16T11:21:20.2270029Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2270149Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2270482Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2270724Z    Location: ./Test-Case-Generator/test_case.py:617:28
2022-06-16T11:21:20.2271079Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2271190Z 616	            for j in range(self.n):
2022-06-16T11:21:20.2271338Z 617	                self.a[j] = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2271474Z 618	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2271482Z 
2022-06-16T11:21:20.2271695Z --------------------------------------------------
2022-06-16T11:21:20.2272079Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2272198Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2272449Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2272688Z    Location: ./Test-Case-Generator/test_case.py:644:21
2022-06-16T11:21:20.2273038Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2273153Z 643	        for i in range(self.t):
2022-06-16T11:21:20.2273294Z 644	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2273435Z 645	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2273443Z 
2022-06-16T11:21:20.2273659Z --------------------------------------------------
2022-06-16T11:21:20.2274159Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2274261Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2274642Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2274880Z    Location: ./Test-Case-Generator/test_case.py:645:21
2022-06-16T11:21:20.2275228Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2275370Z 644	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2275514Z 645	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2275652Z 646	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2275659Z 
2022-06-16T11:21:20.2275874Z --------------------------------------------------
2022-06-16T11:21:20.2276253Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2276358Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2276623Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2276861Z    Location: ./Test-Case-Generator/test_case.py:652:28
2022-06-16T11:21:20.2277207Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2277318Z 651	            for j in range(self.n):
2022-06-16T11:21:20.2277465Z 652	                self.a[j] = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2277601Z 653	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2277613Z 
2022-06-16T11:21:20.2277947Z --------------------------------------------------
2022-06-16T11:21:20.2278386Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2278503Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2278759Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2278988Z    Location: ./Test-Case-Generator/test_case.py:678:21
2022-06-16T11:21:20.2279322Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2279428Z 677	        for i in range(self.t):
2022-06-16T11:21:20.2279566Z 678	            self.a = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2279702Z 679	            self.b = randint(self.b_min, self.b_max)
2022-06-16T11:21:20.2279711Z 
2022-06-16T11:21:20.2279905Z --------------------------------------------------
2022-06-16T11:21:20.2280453Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2280578Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2280836Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2281057Z    Location: ./Test-Case-Generator/test_case.py:679:21
2022-06-16T11:21:20.2281509Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2281643Z 678	            self.a = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2281898Z 679	            self.b = randint(self.b_min, self.b_max)
2022-06-16T11:21:20.2282022Z 680	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2282032Z 
2022-06-16T11:21:20.2282245Z --------------------------------------------------
2022-06-16T11:21:20.2282624Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2282746Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2283014Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2283255Z    Location: ./Test-Case-Generator/test_case.py:709:21
2022-06-16T11:21:20.2283600Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2283710Z 708	        for i in range(self.t):
2022-06-16T11:21:20.2283837Z 709	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2283976Z 710	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2283984Z 
2022-06-16T11:21:20.2284196Z --------------------------------------------------
2022-06-16T11:21:20.2284575Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2284694Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2285081Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2285438Z    Location: ./Test-Case-Generator/test_case.py:710:21
2022-06-16T11:21:20.2285763Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2285884Z 709	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2286014Z 710	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2286141Z 711	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2286148Z 
2022-06-16T11:21:20.2286349Z --------------------------------------------------
2022-06-16T11:21:20.2286704Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2286816Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2287062Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2287286Z    Location: ./Test-Case-Generator/test_case.py:718:28
2022-06-16T11:21:20.2287735Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2287835Z 717	            for j in range(self.n):
2022-06-16T11:21:20.2288177Z 718	                self.a[j] = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2288313Z 719	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2288322Z 
2022-06-16T11:21:20.2288541Z --------------------------------------------------
2022-06-16T11:21:20.2288922Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2289040Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2289304Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2289543Z    Location: ./Test-Case-Generator/test_case.py:722:28
2022-06-16T11:21:20.2289877Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2289989Z 721	            for j in range(self.m):
2022-06-16T11:21:20.2290136Z 722	                self.b[j] = randint(self.b_min, self.b_max)
2022-06-16T11:21:20.2290341Z 723	            self.output.insert(END, self.b)
2022-06-16T11:21:20.2290359Z 
2022-06-16T11:21:20.2290586Z --------------------------------------------------
2022-06-16T11:21:20.2290965Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2291083Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2291347Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2291573Z    Location: ./Test-Case-Generator/test_case.py:756:21
2022-06-16T11:21:20.2291921Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2292031Z 755	        for i in range(self.t):
2022-06-16T11:21:20.2292172Z 756	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2292312Z 757	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2292319Z 
2022-06-16T11:21:20.2292536Z --------------------------------------------------
2022-06-16T11:21:20.2292921Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2293043Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2293294Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2293534Z    Location: ./Test-Case-Generator/test_case.py:757:21
2022-06-16T11:21:20.2294008Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2294144Z 756	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2294279Z 757	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2294411Z 758	            self.k = randint(self.k_min, self.k_max)
2022-06-16T11:21:20.2294418Z 
2022-06-16T11:21:20.2294624Z --------------------------------------------------
2022-06-16T11:21:20.2295113Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2295233Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2295607Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2295837Z    Location: ./Test-Case-Generator/test_case.py:758:21
2022-06-16T11:21:20.2296172Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2296305Z 757	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2296441Z 758	            self.k = randint(self.k_min, self.k_max)
2022-06-16T11:21:20.2296573Z 759	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2296580Z 
2022-06-16T11:21:20.2296786Z --------------------------------------------------
2022-06-16T11:21:20.2297744Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2297897Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2298221Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2298467Z    Location: ./Test-Case-Generator/test_case.py:794:17
2022-06-16T11:21:20.2299006Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2299353Z 793	        self.output.delete("1.0", END)
2022-06-16T11:21:20.2299502Z 794	        self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2299639Z 795	        self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2299648Z 
2022-06-16T11:21:20.2299882Z --------------------------------------------------
2022-06-16T11:21:20.2300256Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2300376Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2300643Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2300882Z    Location: ./Test-Case-Generator/test_case.py:795:17
2022-06-16T11:21:20.2301388Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2301551Z 794	        self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2301684Z 795	        self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2301818Z 796	        self.output.insert(END, self.n)
2022-06-16T11:21:20.2301827Z 
2022-06-16T11:21:20.2302041Z --------------------------------------------------
2022-06-16T11:21:20.2302426Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2302546Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2302813Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2303053Z    Location: ./Test-Case-Generator/test_case.py:803:28
2022-06-16T11:21:20.2303401Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2303512Z 802	            for j in range(self.m):
2022-06-16T11:21:20.2303663Z 803	                self.a[j] = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2303788Z 804	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2303797Z 
2022-06-16T11:21:20.2304013Z --------------------------------------------------
2022-06-16T11:21:20.2304393Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2304512Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2304776Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2305016Z    Location: ./Test-Case-Generator/test_case.py:829:21
2022-06-16T11:21:20.2305365Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2305475Z 828	        for i in range(self.t):
2022-06-16T11:21:20.2305603Z 829	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2305740Z 830	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2305752Z 
2022-06-16T11:21:20.2305967Z --------------------------------------------------
2022-06-16T11:21:20.2306351Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2306470Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2306733Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2306972Z    Location: ./Test-Case-Generator/test_case.py:832:21
2022-06-16T11:21:20.2307320Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2307456Z 831	            self.output.insert(END, "\n")
2022-06-16T11:21:20.2307587Z 832	            self.a = choices(self.char_lis, k=self.n)
2022-06-16T11:21:20.2307732Z 833	            self.output.insert(END, "".join(self.a))
2022-06-16T11:21:20.2307740Z 
2022-06-16T11:21:20.2307954Z --------------------------------------------------
2022-06-16T11:21:20.2308342Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2308573Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2308850Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2309090Z    Location: ./Test-Case-Generator/test_case.py:860:21
2022-06-16T11:21:20.2309436Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2309533Z 859	        for i in range(self.t):
2022-06-16T11:21:20.2309676Z 860	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2309816Z 861	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2309824Z 
2022-06-16T11:21:20.2310037Z --------------------------------------------------
2022-06-16T11:21:20.2310415Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2310533Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2310990Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2311246Z    Location: ./Test-Case-Generator/test_case.py:861:21
2022-06-16T11:21:20.2311697Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2311839Z 860	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2311978Z 861	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2312114Z 862	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2312123Z 
2022-06-16T11:21:20.2312335Z --------------------------------------------------
2022-06-16T11:21:20.2312714Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2312831Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2313095Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2313325Z    Location: ./Test-Case-Generator/test_case.py:867:25
2022-06-16T11:21:20.2313673Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2313788Z 866	            for j in range(self.m):
2022-06-16T11:21:20.2313932Z 867	                self.a = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2314076Z 868	                self.b = randint(self.b_min, self.b_max)
2022-06-16T11:21:20.2314084Z 
2022-06-16T11:21:20.2314296Z --------------------------------------------------
2022-06-16T11:21:20.2314672Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2314791Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2315041Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2315684Z    Location: ./Test-Case-Generator/test_case.py:868:25
2022-06-16T11:21:20.2316114Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2316268Z 867	                self.a = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2316416Z 868	                self.b = randint(self.b_min, self.b_max)
2022-06-16T11:21:20.2316552Z 869	                self.output.insert(END, self.a)
2022-06-16T11:21:20.2316561Z 
2022-06-16T11:21:20.2316776Z --------------------------------------------------
2022-06-16T11:21:20.2317160Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2317279Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2317532Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2317770Z    Location: ./Test-Case-Generator/test_case.py:896:21
2022-06-16T11:21:20.2318120Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2318230Z 895	        for i in range(self.t):
2022-06-16T11:21:20.2318371Z 896	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2318519Z 897	            self.a = choices(self.char_lis, k=self.n)
2022-06-16T11:21:20.2318683Z 
2022-06-16T11:21:20.2319222Z --------------------------------------------------
2022-06-16T11:21:20.2319676Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2319783Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2320053Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2320292Z    Location: ./Test-Case-Generator/test_case.py:897:21
2022-06-16T11:21:20.2320641Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2320783Z 896	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2320926Z 897	            self.a = choices(self.char_lis, k=self.n)
2022-06-16T11:21:20.2321073Z 898	            self.output.insert(END, "".join(self.a))
2022-06-16T11:21:20.2321082Z 
2022-06-16T11:21:20.2321439Z --------------------------------------------------
2022-06-16T11:21:20.2321841Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2321969Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2322237Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2322477Z    Location: ./Test-Case-Generator/test_case.py:925:21
2022-06-16T11:21:20.2322827Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2322941Z 924	        for i in range(self.t):
2022-06-16T11:21:20.2323081Z 925	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2323220Z 926	            self.k = randint(self.k_min, self.k_max)
2022-06-16T11:21:20.2323229Z 
2022-06-16T11:21:20.2323430Z --------------------------------------------------
2022-06-16T11:21:20.2323822Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2323940Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2324209Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2324447Z    Location: ./Test-Case-Generator/test_case.py:926:21
2022-06-16T11:21:20.2324795Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2324936Z 925	            self.n = randint(self.n_min, self.n_max)
2022-06-16T11:21:20.2325074Z 926	            self.k = randint(self.k_min, self.k_max)
2022-06-16T11:21:20.2325201Z 927	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2325222Z 
2022-06-16T11:21:20.2325423Z --------------------------------------------------
2022-06-16T11:21:20.2325806Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2325924Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2326195Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2326436Z    Location: ./Test-Case-Generator/test_case.py:927:21
2022-06-16T11:21:20.2326789Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2326929Z 926	            self.k = randint(self.k_min, self.k_max)
2022-06-16T11:21:20.2327068Z 927	            self.m = randint(self.m_min, self.m_max)
2022-06-16T11:21:20.2327192Z 928	            self.output.insert(END, self.n)
2022-06-16T11:21:20.2327201Z 
2022-06-16T11:21:20.2327417Z --------------------------------------------------
2022-06-16T11:21:20.2327796Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2327915Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2328178Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2328416Z    Location: ./Test-Case-Generator/test_case.py:936:28
2022-06-16T11:21:20.2328767Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2328988Z 935	            for j in range(self.n):
2022-06-16T11:21:20.2329123Z 936	                self.a[j] = randint(self.a_min, self.a_max)
2022-06-16T11:21:20.2329258Z 937	            self.output.insert(END, self.a)
2022-06-16T11:21:20.2329268Z 
2022-06-16T11:21:20.2329494Z --------------------------------------------------
2022-06-16T11:21:20.2329878Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2329998Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2330266Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2330382Z    Location: ./Tic_Tac_Toe.py:46:12
2022-06-16T11:21:20.2330729Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2330819Z 45	def frist_player():
2022-06-16T11:21:20.2331011Z 46	    guess = random.randint(0, 1)
2022-06-16T11:21:20.2331116Z 47	    if guess == 0:
2022-06-16T11:21:20.2331129Z 
2022-06-16T11:21:20.2331353Z --------------------------------------------------
2022-06-16T11:21:20.2331739Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2331857Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2332123Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2332243Z    Location: ./Tic_Tac_Toe.py:106:15
2022-06-16T11:21:20.2332579Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2332699Z 105	    if len(possible_moves) != 0:
2022-06-16T11:21:20.2332841Z 106	        return random.choice(possible_moves)
2022-06-16T11:21:20.2332925Z 107	    else:
2022-06-16T11:21:20.2332934Z 
2022-06-16T11:21:20.2333149Z --------------------------------------------------
2022-06-16T11:21:20.2333535Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2333658Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2333922Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2334131Z    Location: ./Tweet Pre-Processing.py:42:22
2022-06-16T11:21:20.2334475Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2334553Z 41	
2022-06-16T11:21:20.2334702Z 42	print(positive_tweets[random.randint(0, 5000)])
2022-06-16T11:21:20.2334778Z 43	
2022-06-16T11:21:20.2334786Z 
2022-06-16T11:21:20.2334996Z --------------------------------------------------
2022-06-16T11:21:20.2335374Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2335492Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2335747Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2335873Z    Location: ./Wordle/wordle.py:34:7
2022-06-16T11:21:20.2336227Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2336364Z 33	# Choose a random word from the dictionary
2022-06-16T11:21:20.2336486Z 34	word = random.choice(dictionary)
2022-06-16T11:21:20.2336561Z 35	
2022-06-16T11:21:20.2336569Z 
2022-06-16T11:21:20.2336782Z --------------------------------------------------
2022-06-16T11:21:20.2337075Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2337182Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2337446Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2337605Z    Location: ./Youtube Downloader With GUI/main.py:14:4
2022-06-16T11:21:20.2337842Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2337941Z 13	if q == "shutdown":
2022-06-16T11:21:20.2338209Z 14	    os.system("shutdown -s")
2022-06-16T11:21:20.2338379Z 15	# function progress to keep check of progress of function.
2022-06-16T11:21:20.2338387Z 
2022-06-16T11:21:20.2338604Z --------------------------------------------------
2022-06-16T11:21:20.2338815Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2338934Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2339437Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2339600Z    Location: ./Youtube Downloader With GUI/main.py:14:4
2022-06-16T11:21:20.2339843Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2339940Z 13	if q == "shutdown":
2022-06-16T11:21:20.2340120Z 14	    os.system("shutdown -s")
2022-06-16T11:21:20.2340379Z 15	# function progress to keep check of progress of function.
2022-06-16T11:21:20.2340408Z 
2022-06-16T11:21:20.2340626Z --------------------------------------------------
2022-06-16T11:21:20.2340933Z >> Issue: [B201:flask_debug_true] A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
2022-06-16T11:21:20.2341061Z    Severity: High   Confidence: Medium
2022-06-16T11:21:20.2341323Z    CWE: CWE-94 (https://cwe.mitre.org/data/definitions/94.html)
2022-06-16T11:21:20.2341461Z    Location: ./alexa_news_headlines.py:55:4
2022-06-16T11:21:20.2341678Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b201_flask_debug_true.html
2022-06-16T11:21:20.2341781Z 54	if __name__ == "__main__":
2022-06-16T11:21:20.2341898Z 55	    app.run(port=8000, debug=True)
2022-06-16T11:21:20.2341906Z 
2022-06-16T11:21:20.2342536Z --------------------------------------------------
2022-06-16T11:21:20.2343008Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2343139Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2343410Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2343567Z    Location: ./bank_managment_system/backend.py:142:17
2022-06-16T11:21:20.2343805Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2343905Z 141	    print(new_name)
2022-06-16T11:21:20.2344210Z 142	    conn.execute("update bank set name='{}' where acc_no={}".format(new_name, acc_no))
2022-06-16T11:21:20.2344295Z 143	    conn.commit()
2022-06-16T11:21:20.2344305Z 
2022-06-16T11:21:20.2344520Z --------------------------------------------------
2022-06-16T11:21:20.2344898Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2345026Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2345291Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2345445Z    Location: ./bank_managment_system/backend.py:149:17
2022-06-16T11:21:20.2345685Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2345782Z 148	    print(new_name)
2022-06-16T11:21:20.2345958Z 149	    conn.execute("update bank set age={} where acc_no={}".format(new_name, acc_no))
2022-06-16T11:21:20.2346056Z 150	    conn.commit()
2022-06-16T11:21:20.2346064Z 
2022-06-16T11:21:20.2346280Z --------------------------------------------------
2022-06-16T11:21:20.2346659Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2346789Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2347051Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2347205Z    Location: ./bank_managment_system/backend.py:157:8
2022-06-16T11:21:20.2347440Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2347524Z 156	    conn.execute(
2022-06-16T11:21:20.2348012Z 157	        "update bank set address='{}' where acc_no={}".format(new_name, acc_no)
2022-06-16T11:21:20.2348097Z 158	    )
2022-06-16T11:21:20.2348107Z 
2022-06-16T11:21:20.2348324Z --------------------------------------------------
2022-06-16T11:21:20.2348705Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2348832Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2349096Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2349248Z    Location: ./bank_managment_system/backend.py:207:16
2022-06-16T11:21:20.2349465Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2349577Z 206	    print(new_name, old_name)
2022-06-16T11:21:20.2349964Z 207	    cur.execute("update staff set name='{}' where name='{}'".format(new_name, old_name))
2022-06-16T11:21:20.2350074Z 208	    conn.commit()
2022-06-16T11:21:20.2350087Z 
2022-06-16T11:21:20.2350350Z --------------------------------------------------
2022-06-16T11:21:20.2351458Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2351618Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2351937Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2352093Z    Location: ./bank_managment_system/backend.py:213:16
2022-06-16T11:21:20.2352313Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2352425Z 212	    print(new_pass, old_name)
2022-06-16T11:21:20.2352739Z 213	    cur.execute("update staff set pass='{}' where name='{}'".format(new_pass, old_name))
2022-06-16T11:21:20.2352835Z 214	    conn.commit()
2022-06-16T11:21:20.2352843Z 
2022-06-16T11:21:20.2353063Z --------------------------------------------------
2022-06-16T11:21:20.2353441Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2353575Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2353840Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2353981Z    Location: ./bank_managment_system/backend.py:220:8
2022-06-16T11:21:20.2354217Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2354311Z 219	    cur.execute(
2022-06-16T11:21:20.2354601Z 220	        "update staff set salary={} where name='{}'".format(new_salary, old_name)
2022-06-16T11:21:20.2354682Z 221	    )
2022-06-16T11:21:20.2354691Z 
2022-06-16T11:21:20.2356138Z --------------------------------------------------
2022-06-16T11:21:20.2356609Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2356750Z    Severity: Medium   Confidence: Medium
2022-06-16T11:21:20.2357013Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2357169Z    Location: ./bank_managment_system/backend.py:228:8
2022-06-16T11:21:20.2357406Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2357498Z 227	    cur.execute(
2022-06-16T11:21:20.2357794Z 228	        "update staff set position='{}' where name='{}'".format(new_pos, old_name)
2022-06-16T11:21:20.2357876Z 229	    )
2022-06-16T11:21:20.2357886Z 
2022-06-16T11:21:20.2358102Z --------------------------------------------------
2022-06-16T11:21:20.2358487Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2358594Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2358861Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2358992Z    Location: ./blackJackGUI.py:114:15
2022-06-16T11:21:20.2359347Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2359646Z 113	    def deal_card(self):
2022-06-16T11:21:20.2359779Z 114	        return random.choice(self.Deck)
2022-06-16T11:21:20.2359858Z 115	
2022-06-16T11:21:20.2359867Z 
2022-06-16T11:21:20.2360095Z --------------------------------------------------
2022-06-16T11:21:20.2360394Z >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'Yksrocks'
2022-06-16T11:21:20.2360515Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2360782Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2360935Z    Location: ./bookstore_manangement_system.py:6:8
2022-06-16T11:21:20.2361170Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b106_hardcoded_password_funcarg.html
2022-06-16T11:21:20.2361247Z 5	
2022-06-16T11:21:20.2361348Z 6	mycon = mys.connect(
2022-06-16T11:21:20.2361616Z 7	    host="localhost", user="root", passwd="Yksrocks", database="book_store_management"
2022-06-16T11:21:20.2361711Z 8	)
2022-06-16T11:21:20.2361719Z 
2022-06-16T11:21:20.2361946Z --------------------------------------------------
2022-06-16T11:21:20.2362328Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2362450Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2362714Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2362871Z    Location: ./bookstore_manangement_system.py:240:19
2022-06-16T11:21:20.2363104Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2363167Z 239	
2022-06-16T11:21:20.2363316Z 240	        update33 = "update visit set visits=%s" % (c)
2022-06-16T11:21:20.2363432Z 241	        mycur.execute(update33)
2022-06-16T11:21:20.2363440Z 
2022-06-16T11:21:20.2363660Z --------------------------------------------------
2022-06-16T11:21:20.2364041Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2364166Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2364429Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2364581Z    Location: ./bookstore_manangement_system.py:320:18
2022-06-16T11:21:20.2364801Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2364875Z 319	
2022-06-16T11:21:20.2365141Z 320	        display = "select * from books where Name='%s'" % (book_name)
2022-06-16T11:21:20.2365257Z 321	        mycur.execute(display)
2022-06-16T11:21:20.2365265Z 
2022-06-16T11:21:20.2365478Z --------------------------------------------------
2022-06-16T11:21:20.2365852Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2365978Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2366239Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2366384Z    Location: ./bookstore_manangement_system.py:365:36
2022-06-16T11:21:20.2366619Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2366721Z 364	                                u = (
2022-06-16T11:21:20.2367050Z 365	                                    "update books set Numbers_of_book=Numbers_of_book - 1 where name='%s';"
2022-06-16T11:21:20.2367166Z 366	                                    % (book_name)
2022-06-16T11:21:20.2367261Z 367	                                )
2022-06-16T11:21:20.2367269Z 
2022-06-16T11:21:20.2367484Z --------------------------------------------------
2022-06-16T11:21:20.2367857Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2367981Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2368233Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2368493Z    Location: ./bookstore_manangement_system.py:442:44
2022-06-16T11:21:20.2368731Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2368845Z 441	                                        u2 = (
2022-06-16T11:21:20.2369193Z 442	                                            "update books set numbers_of_book=numbers_of_book -%s where name='%s'"
2022-06-16T11:21:20.2369319Z 443	                                            % (k, book_name)
2022-06-16T11:21:20.2369424Z 444	                                        )
2022-06-16T11:21:20.2369434Z 
2022-06-16T11:21:20.2369646Z --------------------------------------------------
2022-06-16T11:21:20.2370008Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2370129Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2370463Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2370632Z    Location: ./bookstore_manangement_system.py:567:36
2022-06-16T11:21:20.2370869Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2370973Z 566	                                u2 = (
2022-06-16T11:21:20.2371305Z 567	                                    "update books set numbers_of_book=numbers_of_book -%s where name='%s'"
2022-06-16T11:21:20.2371428Z 568	                                    % (wb, book_name)
2022-06-16T11:21:20.2371509Z 569	                                )
2022-06-16T11:21:20.2371531Z 
2022-06-16T11:21:20.2371730Z --------------------------------------------------
2022-06-16T11:21:20.2372104Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2372227Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2372493Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2372648Z    Location: ./bookstore_manangement_system.py:685:24
2022-06-16T11:21:20.2372883Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2372962Z 684	
2022-06-16T11:21:20.2373216Z 685	            display10 = "select * from books where ISBN='%s'" % (ISBN10)
2022-06-16T11:21:20.2373342Z 686	            mycur.execute(display10)
2022-06-16T11:21:20.2373350Z 
2022-06-16T11:21:20.2373563Z --------------------------------------------------
2022-06-16T11:21:20.2373937Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2374058Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2374319Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2374473Z    Location: ./bookstore_manangement_system.py:734:18
2022-06-16T11:21:20.2374709Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2374787Z 733	
2022-06-16T11:21:20.2375041Z 734	        display = "select * from books where ISBN='%s'" % (choice4)
2022-06-16T11:21:20.2375157Z 735	        mycur.execute(display)
2022-06-16T11:21:20.2375165Z 
2022-06-16T11:21:20.2375377Z --------------------------------------------------
2022-06-16T11:21:20.2375751Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2375873Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2376135Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2376292Z    Location: ./bookstore_manangement_system.py:808:18
2022-06-16T11:21:20.2376528Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2376800Z 807	        ISBN1 = input("ENTER ISBN OF THAT BOOK THAT YOU WANT TO DELETE -- ")
2022-06-16T11:21:20.2377056Z 808	        display = "select * from books where ISBN='%s'" % (ISBN1)
2022-06-16T11:21:20.2377172Z 809	        mycur.execute(display)
2022-06-16T11:21:20.2377261Z 
2022-06-16T11:21:20.2377492Z --------------------------------------------------
2022-06-16T11:21:20.2377870Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2377992Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2378253Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2378407Z    Location: ./bookstore_manangement_system.py:823:25
2022-06-16T11:21:20.2378627Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2378873Z 822	                ISBN2 = input("PLEASE ENTER ISBN AGAIN -- ")
2022-06-16T11:21:20.2379346Z 823	                delete = "delete from books where ISBN='%s'" % (ISBN2)
2022-06-16T11:21:20.2379476Z 824	                mycur.execute(delete)
2022-06-16T11:21:20.2379588Z 
2022-06-16T11:21:20.2379843Z --------------------------------------------------
2022-06-16T11:21:20.2380236Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2380356Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2380622Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2380846Z    Location: ./brickout-game/brickout-game.py:289:24
2022-06-16T11:21:20.2381195Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2381339Z 288	# The game objects ball, paddle and brick wall
2022-06-16T11:21:20.2381485Z 289	ball = Ball(screen, 25, random.randint(1, 700), 250)
2022-06-16T11:21:20.2381618Z 290	paddle = Paddle(screen, 100, 20, 250, 450)
2022-06-16T11:21:20.2381626Z 
2022-06-16T11:21:20.2381840Z --------------------------------------------------
2022-06-16T11:21:20.2382188Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2382316Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2382577Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2382685Z    Location: ./calculator.py:75:15
2022-06-16T11:21:20.2383034Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2383166Z 74	        # here goes the actual evaluating.
2022-06-16T11:21:20.2383265Z 75	        term = eval(term)
2022-06-16T11:21:20.2383344Z 76	
2022-06-16T11:21:20.2383352Z 
2022-06-16T11:21:20.2383567Z --------------------------------------------------
2022-06-16T11:21:20.2383803Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2383910Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2384172Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2384292Z    Location: ./changemac.py:7:0
2022-06-16T11:21:20.2384682Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2384780Z 6	import random
2022-06-16T11:21:20.2384912Z 7	from subprocess import PIPE, Popen
2022-06-16T11:21:20.2384987Z 8	
2022-06-16T11:21:20.2385060Z 9	
2022-06-16T11:21:20.2385185Z 10	# function for returning terminal command
2022-06-16T11:21:20.2385283Z 11	def cret(command):
2022-06-16T11:21:20.2385291Z 
2022-06-16T11:21:20.2385508Z --------------------------------------------------
2022-06-16T11:21:20.2385893Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2386011Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2386281Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2386400Z    Location: ./changemac.py:22:8
2022-06-16T11:21:20.2386753Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2386826Z 21	        0x3E,
2022-06-16T11:21:20.2387041Z 22	        random.randint(0x00, 0x7F),
2022-06-16T11:21:20.2387156Z 23	        random.randint(0x00, 0xFF),
2022-06-16T11:21:20.2387165Z 
2022-06-16T11:21:20.2387384Z --------------------------------------------------
2022-06-16T11:21:20.2387770Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2387889Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2388156Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2388261Z    Location: ./changemac.py:23:8
2022-06-16T11:21:20.2388609Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2388725Z 22	        random.randint(0x00, 0x7F),
2022-06-16T11:21:20.2388838Z 23	        random.randint(0x00, 0xFF),
2022-06-16T11:21:20.2388951Z 24	        random.randint(0x00, 0xFF),
2022-06-16T11:21:20.2389025Z 
2022-06-16T11:21:20.2389255Z --------------------------------------------------
2022-06-16T11:21:20.2389642Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2389761Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2390014Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2390134Z    Location: ./changemac.py:24:8
2022-06-16T11:21:20.2390480Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2390596Z 23	        random.randint(0x00, 0xFF),
2022-06-16T11:21:20.2390708Z 24	        random.randint(0x00, 0xFF),
2022-06-16T11:21:20.2390787Z 25	    ]
2022-06-16T11:21:20.2390795Z 
2022-06-16T11:21:20.2391007Z --------------------------------------------------
2022-06-16T11:21:20.2391263Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2391372Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2391638Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2391769Z    Location: ./check_internet_con.py:23:8
2022-06-16T11:21:20.2392141Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2392225Z 22	    try:
2022-06-16T11:21:20.2392336Z 23	        urlopen(url, timeout=2)
2022-06-16T11:21:20.2392555Z 24	        print(f'Connection to "{url}" is working')
2022-06-16T11:21:20.2392563Z 
2022-06-16T11:21:20.2392775Z --------------------------------------------------
2022-06-16T11:21:20.2393144Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2393261Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2393528Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2393691Z    Location: ./classicIndianCardMatch.py:51:15
2022-06-16T11:21:20.2394040Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2394147Z 50	    def dealCard(self):
2022-06-16T11:21:20.2394277Z 51	        return random.choice(self.deck)
2022-06-16T11:21:20.2394353Z 52	
2022-06-16T11:21:20.2394360Z 
2022-06-16T11:21:20.2394559Z --------------------------------------------------
2022-06-16T11:21:20.2394814Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2394937Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2395201Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2395331Z    Location: ./cricket_live_score.py:6:9
2022-06-16T11:21:20.2395703Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2395842Z 5	my_url = "http://www.cricbuzz.com/"
2022-06-16T11:21:20.2395944Z 6	Client = uReq(my_url)
2022-06-16T11:21:20.2396008Z 7	
2022-06-16T11:21:20.2396096Z 
2022-06-16T11:21:20.2396326Z --------------------------------------------------
2022-06-16T11:21:20.2396568Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2396687Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2396948Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2397067Z    Location: ./daily_checks.py:17:0
2022-06-16T11:21:20.2397458Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2397578Z 16	import platform  # Load Modules
2022-06-16T11:21:20.2397664Z 17	import subprocess
2022-06-16T11:21:20.2397749Z 18	import sys
2022-06-16T11:21:20.2397757Z 
2022-06-16T11:21:20.2397970Z --------------------------------------------------
2022-06-16T11:21:20.2398343Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2398476Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2398749Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2398870Z    Location: ./daily_checks.py:24:8
2022-06-16T11:21:20.2399102Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2399237Z 23	    if os.name == "posix":  # Unix/Linux/MacOS/BSD/etc
2022-06-16T11:21:20.2399369Z 24	        os.system("clear")  # Clear the Screen
2022-06-16T11:21:20.2399510Z 25	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2399518Z 
2022-06-16T11:21:20.2399732Z --------------------------------------------------
2022-06-16T11:21:20.2399955Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2400077Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2400386Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2400511Z    Location: ./daily_checks.py:24:8
2022-06-16T11:21:20.2400739Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2400887Z 23	    if os.name == "posix":  # Unix/Linux/MacOS/BSD/etc
2022-06-16T11:21:20.2401017Z 24	        os.system("clear")  # Clear the Screen
2022-06-16T11:21:20.2401156Z 25	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2401164Z 
2022-06-16T11:21:20.2401384Z --------------------------------------------------
2022-06-16T11:21:20.2401677Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2401797Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2402058Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2402180Z    Location: ./daily_checks.py:26:8
2022-06-16T11:21:20.2402397Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2402542Z 25	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2402672Z 26	        os.system("CLS")  # Clear the Screen
2022-06-16T11:21:20.2402751Z 27	
2022-06-16T11:21:20.2402758Z 
2022-06-16T11:21:20.2402976Z --------------------------------------------------
2022-06-16T11:21:20.2403199Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2403315Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2403573Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2403678Z    Location: ./daily_checks.py:26:8
2022-06-16T11:21:20.2403919Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2404064Z 25	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2404193Z 26	        os.system("CLS")  # Clear the Screen
2022-06-16T11:21:20.2404358Z 27	
2022-06-16T11:21:20.2404366Z 
2022-06-16T11:21:20.2404590Z --------------------------------------------------
2022-06-16T11:21:20.2404956Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2405074Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2405322Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2405442Z    Location: ./daily_checks.py:32:4
2022-06-16T11:21:20.2405693Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2405942Z 31	    # The command below passes the command line string to open word, open the document, print it then close word down
2022-06-16T11:21:20.2406054Z 32	    subprocess.Popen(
2022-06-16T11:21:20.2406135Z 33	        [
2022-06-16T11:21:20.2406404Z 34	            "C:\\Program Files (x86)\Microsoft Office\Office14\winword.exe",
2022-06-16T11:21:20.2406605Z 35	            "P:\\\\Documentation\\Daily Docs\\Back office Daily Checks.doc",
2022-06-16T11:21:20.2406726Z 36	            "/mFilePrintDefault",
2022-06-16T11:21:20.2406826Z 37	            "/mFileExit",
2022-06-16T11:21:20.2406905Z 38	        ]
2022-06-16T11:21:20.2406914Z 
2022-06-16T11:21:20.2407138Z --------------------------------------------------
2022-06-16T11:21:20.2407509Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2407628Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2407891Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2407997Z    Location: ./daily_checks.py:46:8
2022-06-16T11:21:20.2408247Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2408379Z 45	    for server in open(conffilename):
2022-06-16T11:21:20.2408692Z 46	        subprocess.Popen(("putty -load " + server))  # Open the PuTTY sessions - 1.1
2022-06-16T11:21:20.2408773Z 47	
2022-06-16T11:21:20.2408781Z 
2022-06-16T11:21:20.2408997Z --------------------------------------------------
2022-06-16T11:21:20.2409221Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2409339Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2409588Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2409705Z    Location: ./daily_checks.py:51:4
2022-06-16T11:21:20.2409946Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2410071Z 50	    print("Loading RDP Sessions:")
2022-06-16T11:21:20.2410180Z 51	    subprocess.Popen(
2022-06-16T11:21:20.2410280Z 52	        "mstsc eclr.rdp"
2022-06-16T11:21:20.2410471Z 53	    )  # Open up a terminal session connection and load the euroclear session
2022-06-16T11:21:20.2410479Z 
2022-06-16T11:21:20.2410696Z --------------------------------------------------
2022-06-16T11:21:20.2411051Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2411172Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2411433Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2411550Z    Location: ./daily_checks.py:51:4
2022-06-16T11:21:20.2411797Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2411919Z 50	    print("Loading RDP Sessions:")
2022-06-16T11:21:20.2412028Z 51	    subprocess.Popen(
2022-06-16T11:21:20.2412129Z 52	        "mstsc eclr.rdp"
2022-06-16T11:21:20.2412305Z 53	    )  # Open up a terminal session connection and load the euroclear session
2022-06-16T11:21:20.2412313Z 
2022-06-16T11:21:20.2412529Z --------------------------------------------------
2022-06-16T11:21:20.2412756Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2412958Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2413229Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2413348Z    Location: ./daily_checks.py:58:4
2022-06-16T11:21:20.2413589Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2413776Z 57	    # The command below opens IE and loads the Euroclear password document
2022-06-16T11:21:20.2413871Z 58	    subprocess.Popen(
2022-06-16T11:21:20.2414141Z 59	        '"C:\\Program Files\\Internet Explorer\\iexplore.exe"'
2022-06-16T11:21:20.2414494Z 60	        '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:20.2414504Z 
2022-06-16T11:21:20.2414717Z --------------------------------------------------
2022-06-16T11:21:20.2415160Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2415297Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2415567Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2415686Z    Location: ./daily_checks.py:58:4
2022-06-16T11:21:20.2416763Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2417001Z 57	    # The command below opens IE and loads the Euroclear password document
2022-06-16T11:21:20.2417115Z 58	    subprocess.Popen(
2022-06-16T11:21:20.2417431Z 59	        '"C:\\Program Files\\Internet Explorer\\iexplore.exe"'
2022-06-16T11:21:20.2417763Z 60	        '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:20.2417774Z 
2022-06-16T11:21:20.2417990Z --------------------------------------------------
2022-06-16T11:21:20.2418385Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2418506Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2418780Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2418877Z    Location: ./dice.py:38:15
2022-06-16T11:21:20.2419391Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2419495Z 37	    def roll(self):
2022-06-16T11:21:20.2419635Z 38	        return random.randint(1, self.sides)
2022-06-16T11:21:20.2419711Z 39	
2022-06-16T11:21:20.2419720Z 
2022-06-16T11:21:20.2419945Z --------------------------------------------------
2022-06-16T11:21:20.2420330Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2420449Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2420703Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2420832Z    Location: ./diceV2_dynamic.py:19:15
2022-06-16T11:21:20.2421183Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2421406Z 18	    def roll(self):
2022-06-16T11:21:20.2421541Z 19	        return random.randint(1, self.sides)
2022-06-16T11:21:20.2421613Z 20	
2022-06-16T11:21:20.2421621Z 
2022-06-16T11:21:20.2421829Z --------------------------------------------------
2022-06-16T11:21:20.2422186Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2422302Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2422559Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2422698Z    Location: ./dice_rolling_simulator.py:63:13
2022-06-16T11:21:20.2423036Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2423192Z 62	    # Getting a random number between 1 and 6 and printing it.
2022-06-16T11:21:20.2423310Z 63	    dice_6 = random.randint(1, 6)
2022-06-16T11:21:20.2423455Z 64	    print("\r\nYou rolled a " + str(dice_6) + "!\r\n")
2022-06-16T11:21:20.2423635Z 
2022-06-16T11:21:20.2423851Z --------------------------------------------------
2022-06-16T11:21:20.2424223Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2424340Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2424595Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2424733Z    Location: ./dice_rolling_simulator.py:70:13
2022-06-16T11:21:20.2425070Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2425154Z 69	def dice8():
2022-06-16T11:21:20.2425268Z 70	    dice_8 = random.randint(1, 8)
2022-06-16T11:21:20.2425395Z 71	    print("\r\nYou rolled a " + str(dice_8) + "!")
2022-06-16T11:21:20.2425415Z 
2022-06-16T11:21:20.2425686Z --------------------------------------------------
2022-06-16T11:21:20.2426069Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2426190Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2426445Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2426583Z    Location: ./dice_rolling_simulator.py:77:14
2022-06-16T11:21:20.2426919Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2427006Z 76	def dice12():
2022-06-16T11:21:20.2427107Z 77	    dice_12 = random.randint(1, 12)
2022-06-16T11:21:20.2427248Z 78	    print("\r\nYou rolled a " + str(dice_12) + "!")
2022-06-16T11:21:20.2427256Z 
2022-06-16T11:21:20.2427585Z --------------------------------------------------
2022-06-16T11:21:20.2427968Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2428091Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2428359Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2428484Z    Location: ./encryptsys.py:44:15
2022-06-16T11:21:20.2428834Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2428921Z 43	    abecedario2 = []
2022-06-16T11:21:20.2429056Z 44	    nummoves = randint(1, len(abecedario))
2022-06-16T11:21:20.2429144Z 45	    indexs = []
2022-06-16T11:21:20.2429152Z 
2022-06-16T11:21:20.2429366Z --------------------------------------------------
2022-06-16T11:21:20.2429684Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'yourpassword'
2022-06-16T11:21:20.2429806Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2430068Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2430294Z    Location: ./facebook-autologin-bot.py:47:19
2022-06-16T11:21:20.2430643Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.2430757Z 46	        username = "your username"
2022-06-16T11:21:20.2430875Z 47	        password = "yourpassword"
2022-06-16T11:21:20.2431033Z 48	        # download webdriver of suitable version by link below
2022-06-16T11:21:20.2431226Z 49	        # https://sites.google.com/a/chromium.org/chromedriver/downloads
2022-06-16T11:21:20.2431328Z 50	        # locate your driver
2022-06-16T11:21:20.2431529Z 51	        driver = webdriver.Chrome("C:\\Users\\AJAY\\Desktop\\chromedriver.exe")
2022-06-16T11:21:20.2431538Z 
2022-06-16T11:21:20.2431747Z --------------------------------------------------
2022-06-16T11:21:20.2432106Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2432221Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2432598Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2432761Z    Location: ./flappyBird_pygame/flappy_bird.py:98:29
2022-06-16T11:21:20.2433117Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2433284Z 97	        )
2022-06-16T11:21:20.2433454Z 98	        self.bottom_pieces = randint(1, total_pipe_body_pieces)
2022-06-16T11:21:20.2433732Z 99	        self.top_pieces = total_pipe_body_pieces - self.bottom_pieces
2022-06-16T11:21:20.2433742Z 
2022-06-16T11:21:20.2433957Z --------------------------------------------------
2022-06-16T11:21:20.2434329Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2434449Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2434719Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2434862Z    Location: ./floodfill/floodfill.py:32:26
2022-06-16T11:21:20.2435216Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2435361Z 31	
2022-06-16T11:21:20.2435500Z 32	        for n in range(0, randint(0, 5)):
2022-06-16T11:21:20.2435720Z 33	            x = randint(50, self.window_width - 50)
2022-06-16T11:21:20.2435742Z 
2022-06-16T11:21:20.2435943Z --------------------------------------------------
2022-06-16T11:21:20.2436327Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2436445Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2436709Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2436847Z    Location: ./floodfill/floodfill.py:33:16
2022-06-16T11:21:20.2437194Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2437318Z 32	        for n in range(0, randint(0, 5)):
2022-06-16T11:21:20.2437523Z 33	            x = randint(50, self.window_width - 50)
2022-06-16T11:21:20.2437750Z 34	            y = randint(50, self.window_height - 50)
2022-06-16T11:21:20.2437759Z 
2022-06-16T11:21:20.2437972Z --------------------------------------------------
2022-06-16T11:21:20.2438352Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2438471Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2438736Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2438875Z    Location: ./floodfill/floodfill.py:34:16
2022-06-16T11:21:20.2439220Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2439438Z 33	            x = randint(50, self.window_width - 50)
2022-06-16T11:21:20.2439646Z 34	            y = randint(50, self.window_height - 50)
2022-06-16T11:21:20.2439721Z 35	
2022-06-16T11:21:20.2439730Z 
2022-06-16T11:21:20.2439941Z --------------------------------------------------
2022-06-16T11:21:20.2440327Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2440569Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2440826Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2440959Z    Location: ./floodfill/floodfill.py:37:21
2022-06-16T11:21:20.2441299Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2441379Z 36	            angle = 0
2022-06-16T11:21:20.2441487Z 37	            angle += uniform(0, 0.7)
2022-06-16T11:21:20.2441583Z 38	            vertices = []
2022-06-16T11:21:20.2441592Z 
2022-06-16T11:21:20.2441799Z --------------------------------------------------
2022-06-16T11:21:20.2442164Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2442279Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2442531Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2442668Z    Location: ./floodfill/floodfill.py:40:30
2022-06-16T11:21:20.2443082Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2443159Z 39	
2022-06-16T11:21:20.2443285Z 40	            for i in range(0, randint(3, 7)):
2022-06-16T11:21:20.2443395Z 41	                dist = randint(10, 50)
2022-06-16T11:21:20.2443403Z 
2022-06-16T11:21:20.2443608Z --------------------------------------------------
2022-06-16T11:21:20.2443974Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2444089Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2444342Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2444464Z    Location: ./floodfill/floodfill.py:41:23
2022-06-16T11:21:20.2444802Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2444988Z 40	            for i in range(0, randint(3, 7)):
2022-06-16T11:21:20.2445107Z 41	                dist = randint(10, 50)
2022-06-16T11:21:20.2445219Z 42	                vertices.append(
2022-06-16T11:21:20.2445226Z 
2022-06-16T11:21:20.2445437Z --------------------------------------------------
2022-06-16T11:21:20.2445806Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2445922Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2446162Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2446294Z    Location: ./floodfill/floodfill.py:45:25
2022-06-16T11:21:20.2446628Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2446712Z 44	                )
2022-06-16T11:21:20.2446832Z 45	                angle += uniform(0, pi / 2)
2022-06-16T11:21:20.2446906Z 46	
2022-06-16T11:21:20.2446913Z 
2022-06-16T11:21:20.2447123Z --------------------------------------------------
2022-06-16T11:21:20.2447526Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2447637Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2447900Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2448013Z    Location: ./friday.py:14:8
2022-06-16T11:21:20.2448244Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2448378Z 13	        pyttsx3.speak("Here it is , sir")
2022-06-16T11:21:20.2448486Z 14	        os.system("notepad")
2022-06-16T11:21:20.2448593Z 15	    print("anything more")
2022-06-16T11:21:20.2448600Z 
2022-06-16T11:21:20.2448813Z --------------------------------------------------
2022-06-16T11:21:20.2449024Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2449145Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2449463Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2449579Z    Location: ./friday.py:14:8
2022-06-16T11:21:20.2449821Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2449954Z 13	        pyttsx3.speak("Here it is , sir")
2022-06-16T11:21:20.2450061Z 14	        os.system("notepad")
2022-06-16T11:21:20.2450156Z 15	    print("anything more")
2022-06-16T11:21:20.2450176Z 
2022-06-16T11:21:20.2450380Z --------------------------------------------------
2022-06-16T11:21:20.2450830Z >> Issue: [B402:blacklist] A FTP-related module is being imported.  FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.
2022-06-16T11:21:20.2450953Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2451219Z    CWE: CWE-319 (https://cwe.mitre.org/data/definitions/319.html)
2022-06-16T11:21:20.2451350Z    Location: ./ftp_send_receive.py:11:0
2022-06-16T11:21:20.2451729Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b402-import-ftplib
2022-06-16T11:21:20.2451900Z 10	
2022-06-16T11:21:20.2451995Z 11	from ftplib import FTP
2022-06-16T11:21:20.2452069Z 12	
2022-06-16T11:21:20.2452252Z 13	ftp = FTP("xxx.xxx.x.x")  # Enter the ip address or the domain name here
2022-06-16T11:21:20.2452262Z 
2022-06-16T11:21:20.2452486Z --------------------------------------------------
2022-06-16T11:21:20.2452935Z >> Issue: [B321:blacklist] FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.
2022-06-16T11:21:20.2453060Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2453326Z    CWE: CWE-319 (https://cwe.mitre.org/data/definitions/319.html)
2022-06-16T11:21:20.2453455Z    Location: ./ftp_send_receive.py:13:6
2022-06-16T11:21:20.2453794Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b321-ftplib
2022-06-16T11:21:20.2453939Z 12	
2022-06-16T11:21:20.2454129Z 13	ftp = FTP("xxx.xxx.x.x")  # Enter the ip address or the domain name here
2022-06-16T11:21:20.2454283Z 14	ftp.login(user="username", passwd="password")
2022-06-16T11:21:20.2454292Z 
2022-06-16T11:21:20.2454513Z --------------------------------------------------
2022-06-16T11:21:20.2454825Z >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'
2022-06-16T11:21:20.2454946Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2455209Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2455322Z    Location: ./ftp_send_receive.py:14:0
2022-06-16T11:21:20.2455561Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b106_hardcoded_password_funcarg.html
2022-06-16T11:21:20.2455735Z 13	ftp = FTP("xxx.xxx.x.x")  # Enter the ip address or the domain name here
2022-06-16T11:21:20.2455881Z 14	ftp.login(user="username", passwd="password")
2022-06-16T11:21:20.2456013Z 15	ftp.cwd("/Enter the directory here/")
2022-06-16T11:21:20.2456022Z 
2022-06-16T11:21:20.2456240Z --------------------------------------------------
2022-06-16T11:21:20.2456629Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2456748Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2457012Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2457239Z    Location: ./gambler.py:15:11
2022-06-16T11:21:20.2457702Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2457793Z 14	        bets += 1
2022-06-16T11:21:20.2457918Z 15	        if random.randrange(0, 2) == 0:
2022-06-16T11:21:20.2458009Z 16	            cash += 1
2022-06-16T11:21:20.2458017Z 
2022-06-16T11:21:20.2458231Z --------------------------------------------------
2022-06-16T11:21:20.2458471Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2458590Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2458842Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2458978Z    Location: ./get_info_remoute_srv.py:11:0
2022-06-16T11:21:20.2459510Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2459590Z 10	
2022-06-16T11:21:20.2459688Z 11	import subprocess
2022-06-16T11:21:20.2459763Z 12	
2022-06-16T11:21:20.2459872Z 13	HOSTS = ("proxy1", "proxy")
2022-06-16T11:21:20.2459880Z 
2022-06-16T11:21:20.2460081Z --------------------------------------------------
2022-06-16T11:21:20.2460304Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2460421Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2460684Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2460823Z    Location: ./get_info_remoute_srv.py:20:14
2022-06-16T11:21:20.2461068Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2461287Z 19	    for command in COMMANDS:
2022-06-16T11:21:20.2461408Z 20	        ssh = subprocess.Popen(
2022-06-16T11:21:20.2461516Z 21	            ["ssh", "%s" % host, command],
2022-06-16T11:21:20.2461612Z 22	            shell=False,
2022-06-16T11:21:20.2461731Z 23	            stdout=subprocess.PIPE,
2022-06-16T11:21:20.2461850Z 24	            stderr=subprocess.PIPE,
2022-06-16T11:21:20.2461932Z 25	        )
2022-06-16T11:21:20.2461941Z 
2022-06-16T11:21:20.2462167Z --------------------------------------------------
2022-06-16T11:21:20.2462531Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2462638Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2462902Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2463114Z    Location: ./get_info_remoute_srv.py:22:14
2022-06-16T11:21:20.2463378Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2463504Z 21	            ["ssh", "%s" % host, command],
2022-06-16T11:21:20.2463600Z 22	            shell=False,
2022-06-16T11:21:20.2463717Z 23	            stdout=subprocess.PIPE,
2022-06-16T11:21:20.2463833Z 24	            stderr=subprocess.PIPE,
2022-06-16T11:21:20.2463900Z 25	        )
2022-06-16T11:21:20.2464048Z 26	        result.append(ssh.stdout.readlines())
2022-06-16T11:21:20.2464298Z 27	    print("--------------- " + host + " --------------- ")
2022-06-16T11:21:20.2464306Z 
2022-06-16T11:21:20.2464519Z --------------------------------------------------
2022-06-16T11:21:20.2464773Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2464896Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2465161Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2465286Z    Location: ./get_likes_on_FB.py:19:17
2022-06-16T11:21:20.2465650Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2465737Z 18	)  # FB Link
2022-06-16T11:21:20.2465868Z 19	data = json.load(urllib.urlopen(url))
2022-06-16T11:21:20.2465950Z 20	id = 0
2022-06-16T11:21:20.2465958Z 
2022-06-16T11:21:20.2466173Z --------------------------------------------------
2022-06-16T11:21:20.2466517Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2466642Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2466904Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2467014Z    Location: ./gui_calculator.py:87:12
2022-06-16T11:21:20.2467361Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2467452Z 86	    global x
2022-06-16T11:21:20.2467560Z 87	    add.b = eval(txt1.get())
2022-06-16T11:21:20.2467665Z 88	    txt1.delete(0, END)
2022-06-16T11:21:20.2467674Z 
2022-06-16T11:21:20.2467887Z --------------------------------------------------
2022-06-16T11:21:20.2468229Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2468350Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2468597Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2468721Z    Location: ./gui_calculator.py:94:17
2022-06-16T11:21:20.2469064Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2469151Z 93	    global x
2022-06-16T11:21:20.2469268Z 94	    subtract.b = eval(txt1.get())
2022-06-16T11:21:20.2469369Z 95	    txt1.delete(0, END)
2022-06-16T11:21:20.2469376Z 
2022-06-16T11:21:20.2469590Z --------------------------------------------------
2022-06-16T11:21:20.2469921Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2470153Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2470424Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2470552Z    Location: ./gui_calculator.py:106:13
2022-06-16T11:21:20.2470897Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2470985Z 105	    if x == 1:
2022-06-16T11:21:20.2471101Z 106	        c = (eval(txt1.get())) + add.b
2022-06-16T11:21:20.2471184Z 107	        cls()
2022-06-16T11:21:20.2471193Z 
2022-06-16T11:21:20.2471390Z --------------------------------------------------
2022-06-16T11:21:20.2471731Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2471855Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2472181Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2472316Z    Location: ./gui_calculator.py:111:26
2022-06-16T11:21:20.2472673Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2472764Z 110	    elif x == 2:
2022-06-16T11:21:20.2472967Z 111	        c = subtract.b - (eval(txt1.get()))
2022-06-16T11:21:20.2473038Z 112	        cls()
2022-06-16T11:21:20.2473046Z 
2022-06-16T11:21:20.2473258Z --------------------------------------------------
2022-06-16T11:21:20.2473594Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2473717Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2473977Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2474102Z    Location: ./gui_calculator.py:116:26
2022-06-16T11:21:20.2474445Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2474536Z 115	    elif x == 3:
2022-06-16T11:21:20.2474657Z 116	        c = multiply.b * (eval(txt1.get()))
2022-06-16T11:21:20.2474742Z 117	        cls()
2022-06-16T11:21:20.2474751Z 
2022-06-16T11:21:20.2474965Z --------------------------------------------------
2022-06-16T11:21:20.2475302Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2475424Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2475684Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2475809Z    Location: ./gui_calculator.py:120:24
2022-06-16T11:21:20.2476152Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2476230Z 119	    elif x == 4:
2022-06-16T11:21:20.2476355Z 120	        c = divide.b / (eval(txt1.get()))
2022-06-16T11:21:20.2476437Z 121	        cls()
2022-06-16T11:21:20.2476445Z 
2022-06-16T11:21:20.2476661Z --------------------------------------------------
2022-06-16T11:21:20.2477003Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2477128Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2477392Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2477517Z    Location: ./gui_calculator.py:133:17
2022-06-16T11:21:20.2477850Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2477935Z 132	    global x
2022-06-16T11:21:20.2478052Z 133	    multiply.b = eval(txt1.get())
2022-06-16T11:21:20.2478155Z 134	    txt1.delete(0, END)
2022-06-16T11:21:20.2478163Z 
2022-06-16T11:21:20.2478376Z --------------------------------------------------
2022-06-16T11:21:20.2478712Z >> Issue: [B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval.
2022-06-16T11:21:20.2478834Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2479097Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2479211Z    Location: ./gui_calculator.py:140:15
2022-06-16T11:21:20.2479645Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b307-eval
2022-06-16T11:21:20.2479731Z 139	    global x
2022-06-16T11:21:20.2479845Z 140	    divide.b = eval(txt1.get())
2022-06-16T11:21:20.2479947Z 141	    txt1.delete(0, END)
2022-06-16T11:21:20.2479955Z 
2022-06-16T11:21:20.2480172Z --------------------------------------------------
2022-06-16T11:21:20.2480560Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2480665Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2480935Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2481100Z    Location: ./insta_monitering/insta_datafetcher.py:32:19
2022-06-16T11:21:20.2481452Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2481626Z 31	            ipdata = f.read()
2022-06-16T11:21:20.2481790Z 32	        self._IP = random.choice(ipdata.split(","))
2022-06-16T11:21:20.2481870Z 33	
2022-06-16T11:21:20.2481878Z 
2022-06-16T11:21:20.2482102Z --------------------------------------------------
2022-06-16T11:21:20.2482353Z >> Issue: [B501:request_with_no_cert_validation] Requests call with verify=False disabling SSL certificate checks, security issue.
2022-06-16T11:21:20.2482475Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2482743Z    CWE: CWE-295 (https://cwe.mitre.org/data/definitions/295.html)
2022-06-16T11:21:20.2482908Z    Location: ./insta_monitering/insta_datafetcher.py:89:23
2022-06-16T11:21:20.2483151Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b501_request_with_no_cert_validation.html
2022-06-16T11:21:20.2483265Z 88	                data = requests.get(
2022-06-16T11:21:20.2483432Z 89	                    url=url, headers=user_agent, timeout=10, verify=False
2022-06-16T11:21:20.2483527Z 90	                ).text
2022-06-16T11:21:20.2483628Z 91	            except Exception as e:
2022-06-16T11:21:20.2483652Z 
2022-06-16T11:21:20.2483856Z --------------------------------------------------
2022-06-16T11:21:20.2484120Z >> Issue: [B501:request_with_no_cert_validation] Requests call with verify=False disabling SSL certificate checks, security issue.
2022-06-16T11:21:20.2484241Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2484509Z    CWE: CWE-295 (https://cwe.mitre.org/data/definitions/295.html)
2022-06-16T11:21:20.2484678Z    Location: ./insta_monitering/insta_datafetcher.py:212:31
2022-06-16T11:21:20.2484920Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b501_request_with_no_cert_validation.html
2022-06-16T11:21:20.2485044Z 211	                        data = requests.get(
2022-06-16T11:21:20.2485213Z 212	                            url=url, headers=user_agent, timeout=24, verify=False
2022-06-16T11:21:20.2485296Z 213	                        ).text
2022-06-16T11:21:20.2485428Z 214	                    except Exception as err:
2022-06-16T11:21:20.2485437Z 
2022-06-16T11:21:20.2485656Z --------------------------------------------------
2022-06-16T11:21:20.2485892Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2486011Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2486274Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2486424Z    Location: ./insta_monitering/subpinsta.py:3:0
2022-06-16T11:21:20.2486815Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2486891Z 2	import os
2022-06-16T11:21:20.2486990Z 3	import subprocess
2022-06-16T11:21:20.2487076Z 4	import sys
2022-06-16T11:21:20.2487084Z 
2022-06-16T11:21:20.2487299Z --------------------------------------------------
2022-06-16T11:21:20.2487548Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2487670Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2488023Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2488172Z    Location: ./insta_monitering/subpinsta.py:22:17
2022-06-16T11:21:20.2488412Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2488551Z 21	        command = child_env + " " + file_pocessing
2022-06-16T11:21:20.2488709Z 22	        result = subprocess.Popen(command, shell=True)
2022-06-16T11:21:20.2488807Z 23	        result.wait()
2022-06-16T11:21:20.2488815Z 
2022-06-16T11:21:20.2489029Z --------------------------------------------------
2022-06-16T11:21:20.2489285Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2489409Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2489740Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2489881Z    Location: ./internet_connection_py3.py:11:4
2022-06-16T11:21:20.2490268Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2490350Z 10	try:
2022-06-16T11:21:20.2490470Z 11	    urllib.request.urlopen(
2022-06-16T11:21:20.2490599Z 12	        "http://google.com", timeout=2
2022-06-16T11:21:20.2490734Z 13	    )  # Tests if connection is up and running
2022-06-16T11:21:20.2490742Z 
2022-06-16T11:21:20.2490955Z --------------------------------------------------
2022-06-16T11:21:20.2491246Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2491353Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2491619Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2491883Z    Location: ./internet_connection_py3.py:28:0
2022-06-16T11:21:20.2492230Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2492335Z 27	browser.get(search)
2022-06-16T11:21:20.2492549Z 28	os.system("cls")  # os.system('clear') if Linux
2022-06-16T11:21:20.2492682Z 29	print("[+] Website " + search + " opened!")
2022-06-16T11:21:20.2492690Z 
2022-06-16T11:21:20.2492903Z --------------------------------------------------
2022-06-16T11:21:20.2493112Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2493232Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2493494Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2493638Z    Location: ./internet_connection_py3.py:28:0
2022-06-16T11:21:20.2493880Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2493982Z 27	browser.get(search)
2022-06-16T11:21:20.2494199Z 28	os.system("cls")  # os.system('clear') if Linux
2022-06-16T11:21:20.2494331Z 29	print("[+] Website " + search + " opened!")
2022-06-16T11:21:20.2494342Z 
2022-06-16T11:21:20.2494542Z --------------------------------------------------
2022-06-16T11:21:20.2494926Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2495045Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2495311Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2495558Z    Location: ./linear-algebra-python/src/lib.py:251:31
2022-06-16T11:21:20.2495911Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2496011Z 250	    for i in range(N):
2022-06-16T11:21:20.2496171Z 251	        ans.changeComponent(i, random.randint(a, b))
2022-06-16T11:21:20.2496247Z 252	    return ans
2022-06-16T11:21:20.2496255Z 
2022-06-16T11:21:20.2496471Z --------------------------------------------------
2022-06-16T11:21:20.2496854Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2497057Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2497333Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2497578Z    Location: ./linear-algebra-python/src/lib.py:425:23
2022-06-16T11:21:20.2497931Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2498034Z 424	        for j in range(W):
2022-06-16T11:21:20.2498159Z 425	            row.append(random.randint(a, b))
2022-06-16T11:21:20.2498268Z 426	        matrix.append(row)
2022-06-16T11:21:20.2498276Z 
2022-06-16T11:21:20.2498489Z --------------------------------------------------
2022-06-16T11:21:20.2498780Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2498966Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2499405Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2499516Z    Location: ./login.py:26:4
2022-06-16T11:21:20.2499749Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2499842Z 25	    # for clear the screen
2022-06-16T11:21:20.2499941Z 26	    os.system("clear")
2022-06-16T11:21:20.2500040Z 27	    print("\033[1;36;49m")
2022-06-16T11:21:20.2500049Z 
2022-06-16T11:21:20.2500272Z --------------------------------------------------
2022-06-16T11:21:20.2500497Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2500616Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2500878Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2500988Z    Location: ./login.py:26:4
2022-06-16T11:21:20.2501221Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2501331Z 25	    # for clear the screen
2022-06-16T11:21:20.2501430Z 26	    os.system("clear")
2022-06-16T11:21:20.2501529Z 27	    print("\033[1;36;49m")
2022-06-16T11:21:20.2501536Z 
2022-06-16T11:21:20.2501752Z --------------------------------------------------
2022-06-16T11:21:20.2502041Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2502160Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2502546Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2502638Z    Location: ./login.py:39:8
2022-06-16T11:21:20.2502863Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2502995Z 38	        print("\033[1;92mlogin successfully")
2022-06-16T11:21:20.2503094Z 39	        os.system("clear")
2022-06-16T11:21:20.2503197Z 40	        print("\033[1;36;49m")
2022-06-16T11:21:20.2503207Z 
2022-06-16T11:21:20.2503414Z --------------------------------------------------
2022-06-16T11:21:20.2503626Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2503741Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2503981Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2504086Z    Location: ./login.py:39:8
2022-06-16T11:21:20.2504319Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2504453Z 38	        print("\033[1;92mlogin successfully")
2022-06-16T11:21:20.2504550Z 39	        os.system("clear")
2022-06-16T11:21:20.2504648Z 40	        print("\033[1;36;49m")
2022-06-16T11:21:20.2504656Z 
2022-06-16T11:21:20.2504862Z --------------------------------------------------
2022-06-16T11:21:20.2505106Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2505320Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2505588Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2505693Z    Location: ./logs.py:24:8
2022-06-16T11:21:20.2505917Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2506069Z 23	        os.chdir(logsdir)  # Change directory to the logsdir
2022-06-16T11:21:20.2506156Z 24	        os.system(
2022-06-16T11:21:20.2506287Z 25	            zip_program + " " + files1 + " " + files
2022-06-16T11:21:20.2506546Z 26	        )  # Zip the logs into dated zip files for each server. - 1.1
2022-06-16T11:21:20.2506556Z 
2022-06-16T11:21:20.2506748Z --------------------------------------------------
2022-06-16T11:21:20.2507238Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2507437Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2507726Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2507853Z    Location: ./magic8ball.py:33:23
2022-06-16T11:21:20.2508205Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2508308Z 32	    question = input()
2022-06-16T11:21:20.2508564Z 33	    answer = responses[random.randint(0, len(responses) - 1)]
2022-06-16T11:21:20.2508646Z 34	    print(answer)
2022-06-16T11:21:20.2508654Z 
2022-06-16T11:21:20.2508869Z --------------------------------------------------
2022-06-16T11:21:20.2509126Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2509250Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2509512Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2509641Z    Location: ./movie_details.py:51:11
2022-06-16T11:21:20.2510016Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2510111Z 50	    print(hht)
2022-06-16T11:21:20.2510235Z 51	    page = urllib.request.urlopen(hht)
2022-06-16T11:21:20.2510393Z 52	    soup2 = BeautifulSoup(page.read(), "html.parser")
2022-06-16T11:21:20.2510401Z 
2022-06-16T11:21:20.2510737Z --------------------------------------------------
2022-06-16T11:21:20.2510892Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2511007Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2512245Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2512416Z    Location: ./nDigitNumberCombinations.py:9:4
2022-06-16T11:21:20.2512637Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2512739Z 8	            numbers.append(code)
2022-06-16T11:21:20.2512841Z 9	    except Exception:
2022-06-16T11:21:20.2512969Z 10	        # handle all other exceptions
2022-06-16T11:21:20.2512981Z 
2022-06-16T11:21:20.2513204Z --------------------------------------------------
2022-06-16T11:21:20.2513429Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.2513547Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2513813Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2513953Z    Location: ./news_articles__scraper.py:14:0
2022-06-16T11:21:20.2514321Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.2514400Z 13	
2022-06-16T11:21:20.2514493Z 14	import pickle
2022-06-16T11:21:20.2514579Z 15	import re
2022-06-16T11:21:20.2514587Z 
2022-06-16T11:21:20.2514799Z --------------------------------------------------
2022-06-16T11:21:20.2514961Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2515081Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2515333Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2515655Z    Location: ./news_articles__scraper.py:207:4
2022-06-16T11:21:20.2515873Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2515976Z 206	        article.nlp()
2022-06-16T11:21:20.2516078Z 207	    except Exception:
2022-06-16T11:21:20.2516568Z 208	        pass
2022-06-16T11:21:20.2516594Z 
2022-06-16T11:21:20.2516897Z --------------------------------------------------
2022-06-16T11:21:20.2517140Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2517247Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2517518Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2517645Z    Location: ./nslookup_check.py:11:0
2022-06-16T11:21:20.2518182Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2518274Z 10	
2022-06-16T11:21:20.2518439Z 11	import subprocess  # Import the subprocess module
2022-06-16T11:21:20.2518515Z 12	
2022-06-16T11:21:20.2518682Z 13	for server in open("server_list.txt"):  # Open the file and read each line
2022-06-16T11:21:20.2518707Z 
2022-06-16T11:21:20.2518922Z --------------------------------------------------
2022-06-16T11:21:20.2519289Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2519408Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2519673Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2519799Z    Location: ./nslookup_check.py:14:4
2022-06-16T11:21:20.2520046Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2520229Z 13	for server in open("server_list.txt"):  # Open the file and read each line
2022-06-16T11:21:20.2520340Z 14	    subprocess.Popen(
2022-06-16T11:21:20.2520437Z 15	        ("nslookup " + server)
2022-06-16T11:21:20.2520598Z 16	    )  # Run the nslookup command for each server in the list
2022-06-16T11:21:20.2520606Z 
2022-06-16T11:21:20.2520825Z --------------------------------------------------
2022-06-16T11:21:20.2521211Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2521331Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2521598Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2521726Z    Location: ./passwordGen.py:13:16
2022-06-16T11:21:20.2522079Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2522583Z 12	    while (len(myPass)) <= 2:
2022-06-16T11:21:20.2522779Z 13	        index = random.randrange(len(lChars))
2022-06-16T11:21:20.2522918Z 14	        myPass = myPass + lChars[index]
2022-06-16T11:21:20.2522928Z 
2022-06-16T11:21:20.2523186Z --------------------------------------------------
2022-06-16T11:21:20.2523582Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2523702Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2523974Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2524102Z    Location: ./passwordGen.py:17:16
2022-06-16T11:21:20.2524440Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2524552Z 16	    while (len(myPass)) <= 5:
2022-06-16T11:21:20.2524691Z 17	        index = random.randrange(len(digits))
2022-06-16T11:21:20.2524817Z 18	        myPass = myPass + digits[index]
2022-06-16T11:21:20.2524826Z 
2022-06-16T11:21:20.2525040Z --------------------------------------------------
2022-06-16T11:21:20.2525425Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2525729Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2526014Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2526126Z    Location: ./passwordGen.py:21:16
2022-06-16T11:21:20.2526478Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2526590Z 20	    while (len(myPass)) <= 7:
2022-06-16T11:21:20.2526747Z 21	        index = random.randrange(len(specialChars))
2022-06-16T11:21:20.2526887Z 22	        myPass = myPass + specialChars[index]
2022-06-16T11:21:20.2526896Z 
2022-06-16T11:21:20.2527111Z --------------------------------------------------
2022-06-16T11:21:20.2527494Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2527613Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2527942Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2528078Z    Location: ./passwordGen.py:25:16
2022-06-16T11:21:20.2528445Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2528557Z 24	    while (len(myPass)) <= 10:
2022-06-16T11:21:20.2528693Z 25	        index = random.randrange(len(uChars))
2022-06-16T11:21:20.2528819Z 26	        myPass = myPass + uChars[index]
2022-06-16T11:21:20.2528829Z 
2022-06-16T11:21:20.2529044Z --------------------------------------------------
2022-06-16T11:21:20.2529424Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2529529Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2529793Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2529933Z    Location: ./passwordGenerator.py:6:7
2022-06-16T11:21:20.2530287Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2530365Z 5	
2022-06-16T11:21:20.2530466Z 6	case = randint(1, 2)
2022-06-16T11:21:20.2530571Z 7	number = randint(1, 99)
2022-06-16T11:21:20.2530580Z 
2022-06-16T11:21:20.2530798Z --------------------------------------------------
2022-06-16T11:21:20.2531169Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2531287Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2531553Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2531692Z    Location: ./passwordGenerator.py:7:9
2022-06-16T11:21:20.2532041Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2532140Z 6	case = randint(1, 2)
2022-06-16T11:21:20.2532243Z 7	number = randint(1, 99)
2022-06-16T11:21:20.2532304Z 8	
2022-06-16T11:21:20.2532327Z 
2022-06-16T11:21:20.2532530Z --------------------------------------------------
2022-06-16T11:21:20.2532918Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2533040Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2533303Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2533446Z    Location: ./passwordGenerator.py:100:4
2022-06-16T11:21:20.2533790Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2533898Z 99	chosenanimal = animals[
2022-06-16T11:21:20.2534067Z 100	    randint(0, len(animals) - 1)
2022-06-16T11:21:20.2534303Z 101	]  # randint will return max lenght but , tuple has index from 0 to len-1
2022-06-16T11:21:20.2534312Z 
2022-06-16T11:21:20.2534523Z --------------------------------------------------
2022-06-16T11:21:20.2535023Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2535142Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2535396Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2535740Z    Location: ./passwordGenerator.py:102:22
2022-06-16T11:21:20.2536094Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2536332Z 101	]  # randint will return max lenght but , tuple has index from 0 to len-1
2022-06-16T11:21:20.2536553Z 102	chosencolour = colour[randint(0, len(colour) - 1)]
2022-06-16T11:21:20.2536890Z 103	chosenSpecialCharacter = specialCharacters[randint(0, len(specialCharacters) - 1)]
2022-06-16T11:21:20.2536899Z 
2022-06-16T11:21:20.2537116Z --------------------------------------------------
2022-06-16T11:21:20.2537501Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2537621Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2537887Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2538119Z    Location: ./passwordGenerator.py:103:43
2022-06-16T11:21:20.2538492Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2538710Z 102	chosencolour = colour[randint(0, len(colour) - 1)]
2022-06-16T11:21:20.2539200Z 103	chosenSpecialCharacter = specialCharacters[randint(0, len(specialCharacters) - 1)]
2022-06-16T11:21:20.2539289Z 104	
2022-06-16T11:21:20.2539298Z 
2022-06-16T11:21:20.2539526Z --------------------------------------------------
2022-06-16T11:21:20.2539906Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2540030Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2540295Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2540552Z    Location: ./password_manager.py:19:14
2022-06-16T11:21:20.2540769Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2540882Z 18	def get_password(service_):
2022-06-16T11:21:20.2541145Z 19	    command = 'SELECT * from STORE WHERE SERVICE = "' + service_ + '"'
2022-06-16T11:21:20.2541258Z 20	    cursor = conn.execute(command)
2022-06-16T11:21:20.2541267Z 
2022-06-16T11:21:20.2541472Z --------------------------------------------------
2022-06-16T11:21:20.2541958Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2542084Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2542347Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2542464Z    Location: ./password_manager.py:43:8
2022-06-16T11:21:20.2542702Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2542792Z 42	    command = (
2022-06-16T11:21:20.2542995Z 43	        'UPDATE STORE set PASSWORD = "'
2022-06-16T11:21:20.2543094Z 44	        + password_
2022-06-16T11:21:20.2544141Z 45	        + '" where SERVICE = "'
2022-06-16T11:21:20.2544159Z 
2022-06-16T11:21:20.2544385Z --------------------------------------------------
2022-06-16T11:21:20.2544772Z >> Issue: [B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction.
2022-06-16T11:21:20.2544882Z    Severity: Medium   Confidence: Low
2022-06-16T11:21:20.2545150Z    CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)
2022-06-16T11:21:20.2545287Z    Location: ./password_manager.py:55:14
2022-06-16T11:21:20.2545526Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b608_hardcoded_sql_expressions.html
2022-06-16T11:21:20.2545643Z 54	def delete_service(service_):
2022-06-16T11:21:20.2545910Z 55	    command = 'DELETE from STORE where SERVICE = "' + service_ + '"'
2022-06-16T11:21:20.2546018Z 56	    conn.execute(command)
2022-06-16T11:21:20.2546027Z 
2022-06-16T11:21:20.2546244Z --------------------------------------------------
2022-06-16T11:21:20.2546476Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.2546794Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2547916Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2548063Z    Location: ./password_manager.py:121:49
2022-06-16T11:21:20.2548300Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.2548454Z 120	                password = getpass("Enter password : ")
2022-06-16T11:21:20.2548593Z 121	                if username == "" or password == "":
2022-06-16T11:21:20.2548756Z 122	                    print("Your username or password is empty.")
2022-06-16T11:21:20.2548765Z 
2022-06-16T11:21:20.2548970Z --------------------------------------------------
2022-06-16T11:21:20.2549208Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2549504Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2549806Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2549936Z    Location: ./ping_servers.py:4:0
2022-06-16T11:21:20.2550331Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2550457Z 3	import os  # Load the Library Module
2022-06-16T11:21:20.2550601Z 4	import subprocess  # Load the Library Module
2022-06-16T11:21:20.2550711Z 5	import sys  # Load the Library Module
2022-06-16T11:21:20.2550734Z 
2022-06-16T11:21:20.2550935Z --------------------------------------------------
2022-06-16T11:21:20.2551185Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2551307Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2551570Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2551694Z    Location: ./ping_servers.py:79:10
2022-06-16T11:21:20.2551953Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2552073Z 78	    ret = subprocess.call(
2022-06-16T11:21:20.2552242Z 79	        myping + server, shell=True, stdout=f, stderr=subprocess.STDOUT
2022-06-16T11:21:20.2552398Z 80	    )  # Run the ping command for each server in the list.
2022-06-16T11:21:20.2552532Z 81	    if ret == 0:  # Depending on the response
2022-06-16T11:21:20.2552540Z 
2022-06-16T11:21:20.2552756Z --------------------------------------------------
2022-06-16T11:21:20.2552993Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2553113Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2553375Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2553498Z    Location: ./ping_subnet.py:4:0
2022-06-16T11:21:20.2553877Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2554002Z 3	import os  # Load the Library Module
2022-06-16T11:21:20.2554148Z 4	import subprocess  # Load the Library Module
2022-06-16T11:21:20.2554271Z 5	import sys  # Load the Library Module
2022-06-16T11:21:20.2554279Z 
2022-06-16T11:21:20.2554494Z --------------------------------------------------
2022-06-16T11:21:20.2554743Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2554863Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2555125Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2555246Z    Location: ./ping_subnet.py:49:14
2022-06-16T11:21:20.2555486Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2555618Z 48	            myping + str(subnet) + "." + str(ip),
2022-06-16T11:21:20.2555714Z 49	            shell=True,
2022-06-16T11:21:20.2555809Z 50	            stdout=f,
2022-06-16T11:21:20.2555935Z 51	            stderr=subprocess.STDOUT,
2022-06-16T11:21:20.2556166Z 52	        )  # Run the command pinging the servers
2022-06-16T11:21:20.2556299Z 53	        if ret == 0:  # Depending on the response
2022-06-16T11:21:20.2556378Z 54	            f.write(
2022-06-16T11:21:20.2556386Z 
2022-06-16T11:21:20.2556612Z --------------------------------------------------
2022-06-16T11:21:20.2556848Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2556966Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2557229Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2557362Z    Location: ./powerdown_startup.py:12:0
2022-06-16T11:21:20.2557752Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2557877Z 11	import os  # Load the Library Module
2022-06-16T11:21:20.2558074Z 12	import subprocess  # Load the Library Module
2022-06-16T11:21:20.2558267Z 13	from time import strftime  # Load just the strftime Module from Time
2022-06-16T11:21:20.2558280Z 
2022-06-16T11:21:20.2558501Z --------------------------------------------------
2022-06-16T11:21:20.2558748Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2558870Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2559130Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2559268Z    Location: ./powerdown_startup.py:23:14
2022-06-16T11:21:20.2559521Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2559683Z 22	            "ping -n 3 %s" % server,
2022-06-16T11:21:20.2559779Z 23	            shell=True,
2022-06-16T11:21:20.2559892Z 24	            stdout=open("NUL", "w"),
2022-06-16T11:21:20.2560020Z 25	            stderr=subprocess.STDOUT,
2022-06-16T11:21:20.2560139Z 26	        )  # Ping the servers in turn
2022-06-16T11:21:20.2560270Z 27	        if ret == 0:  # If you get a response.
2022-06-16T11:21:20.2560362Z 28	            f.write(
2022-06-16T11:21:20.2560370Z 
2022-06-16T11:21:20.2560585Z --------------------------------------------------
2022-06-16T11:21:20.2560937Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2561057Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2561319Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2561455Z    Location: ./powerdown_startup.py:31:12
2022-06-16T11:21:20.2561701Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2561824Z 30	            )  # Write out to the logfile
2022-06-16T11:21:20.2562172Z 31	            subprocess.Popen(("putty -load " + server))  # Load the putty session
2022-06-16T11:21:20.2562262Z 32	        else:
2022-06-16T11:21:20.2562271Z 
2022-06-16T11:21:20.2562475Z --------------------------------------------------
2022-06-16T11:21:20.2562720Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2562840Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2563102Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2563236Z    Location: ./powerdown_startup.py:43:14
2022-06-16T11:21:20.2563492Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2563667Z 42	            "ping -c 3 %s" % server,
2022-06-16T11:21:20.2563764Z 43	            shell=True,
2022-06-16T11:21:20.2563878Z 44	            stdout=open("/dev/null", "w"),
2022-06-16T11:21:20.2564002Z 45	            stderr=subprocess.STDOUT,
2022-06-16T11:21:20.2564118Z 46	        )  # Ping the servers in turn
2022-06-16T11:21:20.2564250Z 47	        if ret == 0:  # If you get a response.
2022-06-16T11:21:20.2564526Z 48	            f.write("%s: is alive" % server.strip() + "\n")  # Print a message
2022-06-16T11:21:20.2564535Z 
2022-06-16T11:21:20.2564756Z --------------------------------------------------
2022-06-16T11:21:20.2564981Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2565100Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2565351Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2565486Z    Location: ./powerdown_startup.py:49:12
2022-06-16T11:21:20.2565726Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2565898Z 48	            f.write("%s: is alive" % server.strip() + "\n")  # Print a message
2022-06-16T11:21:20.2566055Z 49	            subprocess.Popen(["ssh", server.strip()])
2022-06-16T11:21:20.2566140Z 50	        else:
2022-06-16T11:21:20.2566213Z 
2022-06-16T11:21:20.2566441Z --------------------------------------------------
2022-06-16T11:21:20.2566815Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2566922Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2567185Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2567322Z    Location: ./powerdown_startup.py:49:12
2022-06-16T11:21:20.2567571Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2567742Z 48	            f.write("%s: is alive" % server.strip() + "\n")  # Print a message
2022-06-16T11:21:20.2567897Z 49	            subprocess.Popen(["ssh", server.strip()])
2022-06-16T11:21:20.2567981Z 50	        else:
2022-06-16T11:21:20.2567989Z 
2022-06-16T11:21:20.2568204Z --------------------------------------------------
2022-06-16T11:21:20.2568428Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2568549Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2568812Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2568939Z    Location: ./powerup_checks.py:5:0
2022-06-16T11:21:20.2569328Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2569463Z 4	import sqlite3  # Load the Library Module
2022-06-16T11:21:20.2569606Z 5	import subprocess  # Load the Library Module
2022-06-16T11:21:20.2569728Z 6	import sys  # Load the Library Module
2022-06-16T11:21:20.2569736Z 
2022-06-16T11:21:20.2569932Z --------------------------------------------------
2022-06-16T11:21:20.2570294Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2570414Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2570678Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2570805Z    Location: ./powerup_checks.py:47:14
2022-06-16T11:21:20.2571056Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2571517Z 46	        # ret = subprocess.call("ping -n 3 %s" % server.strip(), shell=True,stdout=open('NUL', 'w'),stderr=subprocess.STDOUT)	# Ping the servers in turn
2022-06-16T11:21:20.2571633Z 47	        ret = subprocess.call(
2022-06-16T11:21:20.2571822Z 48	            "ping -n 3 %s" % server.strip(),
2022-06-16T11:21:20.2571934Z 49	            stdout=open("NUL", "w"),
2022-06-16T11:21:20.2572062Z 50	            stderr=subprocess.STDOUT,
2022-06-16T11:21:20.2572180Z 51	        )  # Ping the servers in turn
2022-06-16T11:21:20.2572188Z 
2022-06-16T11:21:20.2572402Z --------------------------------------------------
2022-06-16T11:21:20.2572651Z >> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
2022-06-16T11:21:20.2572772Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2573136Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2573249Z    Location: ./powerup_checks.py:67:14
2022-06-16T11:21:20.2573503Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b602_subprocess_popen_with_shell_equals_true.html
2022-06-16T11:21:20.2573676Z 66	            "ping -c 3 %s" % server,
2022-06-16T11:21:20.2573772Z 67	            shell=True,
2022-06-16T11:21:20.2573900Z 68	            stdout=open("/dev/null", "w"),
2022-06-16T11:21:20.2574026Z 69	            stderr=subprocess.STDOUT,
2022-06-16T11:21:20.2574143Z 70	        )  # Ping the servers in turn
2022-06-16T11:21:20.2574279Z 71	        if ret == 0:  # Depending on the response
2022-06-16T11:21:20.2574356Z 72	            f.write(
2022-06-16T11:21:20.2574366Z 
2022-06-16T11:21:20.2574582Z --------------------------------------------------
2022-06-16T11:21:20.2574888Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2575022Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2575294Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2575436Z    Location: ./prison_break_scrapper.py:6:0
2022-06-16T11:21:20.2575824Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2575912Z 5	import os
2022-06-16T11:21:20.2575995Z 6	import subprocess
2022-06-16T11:21:20.2576072Z 7	
2022-06-16T11:21:20.2576179Z 8	import requests as req
2022-06-16T11:21:20.2576188Z 
2022-06-16T11:21:20.2576402Z --------------------------------------------------
2022-06-16T11:21:20.2576626Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2576747Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2577009Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2577142Z    Location: ./prison_break_scrapper.py:16:8
2022-06-16T11:21:20.2577389Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2577489Z 15	    for link in links:
2022-06-16T11:21:20.2577595Z 16	        subprocess.call(
2022-06-16T11:21:20.2577863Z 17	            ["aria2c", "-s", "16", "-x", "16", "-d", "season" + str(idx), link]
2022-06-16T11:21:20.2577949Z 18	        )
2022-06-16T11:21:20.2577958Z 
2022-06-16T11:21:20.2578169Z --------------------------------------------------
2022-06-16T11:21:20.2578532Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2578638Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2578901Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2579044Z    Location: ./prison_break_scrapper.py:16:8
2022-06-16T11:21:20.2579457Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2579561Z 15	    for link in links:
2022-06-16T11:21:20.2579669Z 16	        subprocess.call(
2022-06-16T11:21:20.2579944Z 17	            ["aria2c", "-s", "16", "-x", "16", "-d", "season" + str(idx), link]
2022-06-16T11:21:20.2580025Z 18	        )
2022-06-16T11:21:20.2580035Z 
2022-06-16T11:21:20.2580235Z --------------------------------------------------
2022-06-16T11:21:20.2580488Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2580610Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2580875Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2580990Z    Location: ./pscheck.py:27:17
2022-06-16T11:21:20.2581225Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2581386Z 26	        # perform a ps command and assign results to a list
2022-06-16T11:21:20.2581644Z 27	        output = commands.getoutput("ps -f|grep " + program)
2022-06-16T11:21:20.2581874Z 28	        proginfo = string.split(output)
2022-06-16T11:21:20.2581898Z 
2022-06-16T11:21:20.2582104Z --------------------------------------------------
2022-06-16T11:21:20.2582359Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2582483Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2582746Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2582865Z    Location: ./psunotify.py:19:4
2022-06-16T11:21:20.2583242Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2583345Z 18	# print type(page)
2022-06-16T11:21:20.2583436Z 19	p = urllib2.Request(
2022-06-16T11:21:20.2583653Z 20	    "https://www.google.co.in/search?q=gate+psu+2017+ext:pdf&start=" + page
2022-06-16T11:21:20.2583808Z 21	)
2022-06-16T11:21:20.2583822Z 
2022-06-16T11:21:20.2584052Z --------------------------------------------------
2022-06-16T11:21:20.2584313Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2584439Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2584704Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2584825Z    Location: ./psunotify.py:40:16
2022-06-16T11:21:20.2585185Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2585288Z 39	        if "http" in url:
2022-06-16T11:21:20.2585405Z 40	            r = urllib2.urlopen(url)
2022-06-16T11:21:20.2585490Z 41	        else:
2022-06-16T11:21:20.2585499Z 
2022-06-16T11:21:20.2585712Z --------------------------------------------------
2022-06-16T11:21:20.2585966Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2586091Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2586357Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2586464Z    Location: ./psunotify.py:42:16
2022-06-16T11:21:20.2586836Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2586920Z 41	        else:
2022-06-16T11:21:20.2587061Z 42	            r = urllib2.urlopen("http://" + url)
2022-06-16T11:21:20.2587192Z 43	        file = open("psu2" + q + ".pdf", "wb")
2022-06-16T11:21:20.2587200Z 
2022-06-16T11:21:20.2587412Z --------------------------------------------------
2022-06-16T11:21:20.2587666Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2587789Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2588044Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2588166Z    Location: ./puttylogs.py:26:8
2022-06-16T11:21:20.2588400Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2588560Z 25	        os.chdir(logsdir)  # Change directory to the logsdir
2022-06-16T11:21:20.2588653Z 26	        os.system(
2022-06-16T11:21:20.2588787Z 27	            zip_program + " " + files1 + " " + files
2022-06-16T11:21:20.2589058Z 28	        )  # Zip the logs into dated zip files for each server. - 1.1
2022-06-16T11:21:20.2589067Z 
2022-06-16T11:21:20.2589281Z --------------------------------------------------
2022-06-16T11:21:20.2589508Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
2022-06-16T11:21:20.2589630Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2589896Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2590012Z    Location: ./pyauto.py:16:17
2022-06-16T11:21:20.2590250Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.2590411Z 15	
2022-06-16T11:21:20.2590515Z 16	guess_password = ""
2022-06-16T11:21:20.2590590Z 17	
2022-06-16T11:21:20.2590700Z 18	while guess_password != password:
2022-06-16T11:21:20.2590709Z 
2022-06-16T11:21:20.2590935Z --------------------------------------------------
2022-06-16T11:21:20.2591322Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2591443Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2591712Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2591827Z    Location: ./pyauto.py:19:21
2022-06-16T11:21:20.2592179Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2592303Z 18	while guess_password != password:
2022-06-16T11:21:20.2592466Z 19	    guess_password = random.choices(chars_list, k=len(password))
2022-06-16T11:21:20.2592612Z 20	
2022-06-16T11:21:20.2592624Z 
2022-06-16T11:21:20.2592851Z --------------------------------------------------
2022-06-16T11:21:20.2593243Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2593364Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2593630Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2593743Z    Location: ./pygame.py:29:17
2022-06-16T11:21:20.2594094Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2594157Z 28	
2022-06-16T11:21:20.2594321Z 29	    com_choice = random.choice(list(choices.keys())).lower()
2022-06-16T11:21:20.2594525Z 30	    user_choice = input("\n----->").lower()
2022-06-16T11:21:20.2594533Z 
2022-06-16T11:21:20.2594747Z --------------------------------------------------
2022-06-16T11:21:20.2595004Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2595132Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2595396Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2595516Z    Location: ./python_sms.py:71:10
2022-06-16T11:21:20.2595876Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2596012Z 70	    postdata = urllib.urlencode(values)
2022-06-16T11:21:20.2596147Z 71	    req = urllib2.Request(url, postdata)
2022-06-16T11:21:20.2596222Z 72	
2022-06-16T11:21:20.2596230Z 
2022-06-16T11:21:20.2596444Z --------------------------------------------------
2022-06-16T11:21:20.2596692Z >> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
2022-06-16T11:21:20.2596815Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2597080Z    CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
2022-06-16T11:21:20.2597185Z    Location: ./python_sms.py:79:19
2022-06-16T11:21:20.2597557Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b310-urllib-urlopen
2022-06-16T11:21:20.2597640Z 78	    try:
2022-06-16T11:21:20.2597770Z 79	        response = urllib2.urlopen(req)
2022-06-16T11:21:20.2597904Z 80	        response_url = response.geturl()
2022-06-16T11:21:20.2597912Z 
2022-06-16T11:21:20.2598124Z --------------------------------------------------
2022-06-16T11:21:20.2598509Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2598628Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2598881Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2599085Z    Location: ./random-sentences.py:17:11
2022-06-16T11:21:20.2599435Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2599535Z 16	def random_int():
2022-06-16T11:21:20.2599653Z 17	    return random.randint(0, 4)
2022-06-16T11:21:20.2599807Z 18	
2022-06-16T11:21:20.2599815Z 
2022-06-16T11:21:20.2600036Z --------------------------------------------------
2022-06-16T11:21:20.2600544Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2600649Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2600909Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2601049Z    Location: ./rock_paper_scissor_game.py:36:18
2022-06-16T11:21:20.2601386Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2601499Z 35	    number = name_to_number(name)
2022-06-16T11:21:20.2601630Z 36	    comp_number = random.randrange(0, 2)
2022-06-16T11:21:20.2601764Z 37	    comp_choice = number_to_name(comp_number)
2022-06-16T11:21:20.2601772Z 
2022-06-16T11:21:20.2602045Z --------------------------------------------------
2022-06-16T11:21:20.2602421Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2602543Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2602801Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2602929Z    Location: ./russian_roulette.py:14:13
2022-06-16T11:21:20.2603262Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2603356Z 13	    gun = [0, 0, 0, 0, 0, 0]
2022-06-16T11:21:20.2603462Z 14	    bullet = randrange(0, 6)
2022-06-16T11:21:20.2603540Z 15	    gun[bullet] = 1
2022-06-16T11:21:20.2603563Z 
2022-06-16T11:21:20.2603756Z --------------------------------------------------
2022-06-16T11:21:20.2604039Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2604160Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2604533Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2604656Z    Location: ./script_count.py:26:8
2022-06-16T11:21:20.2604888Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2605037Z 25	    if os.name == "posix":  # Unix/Linux/MacOS/BSD/etc
2022-06-16T11:21:20.2605170Z 26	        os.system("clear")  # Clear the Screen
2022-06-16T11:21:20.2605296Z 27	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2605305Z 
2022-06-16T11:21:20.2605519Z --------------------------------------------------
2022-06-16T11:21:20.2605742Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2605860Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2606120Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2606243Z    Location: ./script_count.py:26:8
2022-06-16T11:21:20.2606486Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2606635Z 25	    if os.name == "posix":  # Unix/Linux/MacOS/BSD/etc
2022-06-16T11:21:20.2606755Z 26	        os.system("clear")  # Clear the Screen
2022-06-16T11:21:20.2606894Z 27	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2606902Z 
2022-06-16T11:21:20.2607119Z --------------------------------------------------
2022-06-16T11:21:20.2607407Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2607527Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2607787Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2607907Z    Location: ./script_count.py:28:8
2022-06-16T11:21:20.2608141Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2608269Z 27	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2608507Z 28	        os.system("CLS")  # Clear the Screen
2022-06-16T11:21:20.2608584Z 29	
2022-06-16T11:21:20.2608592Z 
2022-06-16T11:21:20.2608813Z --------------------------------------------------
2022-06-16T11:21:20.2609036Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2609154Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2609416Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2609536Z    Location: ./script_count.py:28:8
2022-06-16T11:21:20.2609762Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2609903Z 27	    elif os.name in ("nt", "dos", "ce"):  # DOS/Windows
2022-06-16T11:21:20.2610035Z 28	        os.system("CLS")  # Clear the Screen
2022-06-16T11:21:20.2610111Z 29	
2022-06-16T11:21:20.2610186Z 
2022-06-16T11:21:20.2610418Z --------------------------------------------------
2022-06-16T11:21:20.2610756Z >> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'client_secret.json'
2022-06-16T11:21:20.2610882Z    Severity: Low   Confidence: Medium
2022-06-16T11:21:20.2611149Z    CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
2022-06-16T11:21:20.2611254Z    Location: ./sendemail.py:18:21
2022-06-16T11:21:20.2611488Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b105_hardcoded_password_string.html
2022-06-16T11:21:20.2611665Z 17	SCOPES = "https://www.googleapis.com/auth/gmail.send"
2022-06-16T11:21:20.2611804Z 18	CLIENT_SECRET_FILE = "client_secret.json"
2022-06-16T11:21:20.2611955Z 19	APPLICATION_NAME = "Gmail API Python Send Email"
2022-06-16T11:21:20.2611963Z 
2022-06-16T11:21:20.2612175Z --------------------------------------------------
2022-06-16T11:21:20.2612400Z >> Issue: [B324:hashlib] Use of weak MD4, MD5, or SHA1 hash for security. Consider usedforsecurity=False
2022-06-16T11:21:20.2612521Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2612781Z    CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
2022-06-16T11:21:20.2612890Z    Location: ./sha1.py:107:53
2022-06-16T11:21:20.2613096Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b324_hashlib.html
2022-06-16T11:21:20.2613304Z 106	        msg = bytes("Test String", "utf-8")
2022-06-16T11:21:20.2613503Z 107	        self.assertEqual(SHA1Hash(msg).final_hash(), hashlib.sha1(msg).hexdigest())
2022-06-16T11:21:20.2613581Z 108	
2022-06-16T11:21:20.2613589Z 
2022-06-16T11:21:20.2613803Z --------------------------------------------------
2022-06-16T11:21:20.2614190Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2614297Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2614567Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2614681Z    Location: ./snake.py:99:20
2022-06-16T11:21:20.2615036Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2615134Z 98	                food = [
2022-06-16T11:21:20.2615239Z 99	                    randint(1, 18),
2022-06-16T11:21:20.2615345Z 100	                    randint(1, 58),
2022-06-16T11:21:20.2615353Z 
2022-06-16T11:21:20.2615565Z --------------------------------------------------
2022-06-16T11:21:20.2615934Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2616052Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2616316Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2616429Z    Location: ./snake.py:100:20
2022-06-16T11:21:20.2617214Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2617337Z 99	                    randint(1, 18),
2022-06-16T11:21:20.2617443Z 100	                    randint(1, 58),
2022-06-16T11:21:20.2617896Z 101	                ]  # Calculating next food's coordinates
2022-06-16T11:21:20.2617908Z 
2022-06-16T11:21:20.2618111Z --------------------------------------------------
2022-06-16T11:21:20.2618500Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2618621Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2618891Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2619022Z    Location: ./spotifyAccount.py:17:19
2022-06-16T11:21:20.2619547Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2619734Z 16	def randomName(size=10, chars=string.ascii_letters + string.digits):
2022-06-16T11:21:20.2619896Z 17	    return "".join(random.choice(chars) for i in range(size))
2022-06-16T11:21:20.2619959Z 18	
2022-06-16T11:21:20.2620070Z 
2022-06-16T11:21:20.2620312Z --------------------------------------------------
2022-06-16T11:21:20.2620704Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2620824Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2621095Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2621225Z    Location: ./spotifyAccount.py:21:19
2022-06-16T11:21:20.2621575Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2621770Z 20	def randomPassword(size=14, chars=string.ascii_letters + string.digits):
2022-06-16T11:21:20.2621918Z 21	    return "".join(random.choice(chars) for i in range(size))
2022-06-16T11:21:20.2621994Z 22	
2022-06-16T11:21:20.2622003Z 
2022-06-16T11:21:20.2622218Z --------------------------------------------------
2022-06-16T11:21:20.2622603Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2622724Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2622993Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2623123Z    Location: ./spotifyAccount.py:45:18
2022-06-16T11:21:20.2623471Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2623561Z 44	    def get_proxy(self):
2022-06-16T11:21:20.2623745Z 45	        random1 = random.choice(self.splited)  # choose a random proxie
2022-06-16T11:21:20.2623842Z 46	        return random1
2022-06-16T11:21:20.2623849Z 
2022-06-16T11:21:20.2624063Z --------------------------------------------------
2022-06-16T11:21:20.2624319Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2624443Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2624714Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2624845Z    Location: ./spotifyAccount.py:67:12
2022-06-16T11:21:20.2625066Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2625175Z 66	        if title == "windows":
2022-06-16T11:21:20.2625265Z 67	            system(
2022-06-16T11:21:20.2625357Z 68	                "title "
2022-06-16T11:21:20.2625846Z 69	                + f"Spotify Account Creator by KevinLage https://github.com/KevinLage/Spotify-Account-Creator Created: {created}/{maxi} Errors:{errors}"
2022-06-16T11:21:20.2625930Z 70	            )
2022-06-16T11:21:20.2625938Z 
2022-06-16T11:21:20.2626153Z --------------------------------------------------
2022-06-16T11:21:20.2626406Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue.
2022-06-16T11:21:20.2626516Z    Severity: High   Confidence: High
2022-06-16T11:21:20.2626786Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2626920Z    Location: ./spotifyAccount.py:105:20
2022-06-16T11:21:20.2627248Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2627364Z 104	                if title == "windows":
2022-06-16T11:21:20.2627457Z 105	                    system(
2022-06-16T11:21:20.2627553Z 106	                        "title "
2022-06-16T11:21:20.2627733Z 107	                        + f"Spotify Account Creator : {created}/{maxi} Errors:{errors}"
2022-06-16T11:21:20.2627807Z 108	                    )
2022-06-16T11:21:20.2627816Z 
2022-06-16T11:21:20.2628044Z --------------------------------------------------
2022-06-16T11:21:20.2628208Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2628329Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2628599Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2628731Z    Location: ./spotifyAccount.py:111:8
2022-06-16T11:21:20.2629015Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2629127Z 110	                errors += 1
2022-06-16T11:21:20.2629199Z 111	        except:
2022-06-16T11:21:20.2629287Z 112	            pass
2022-06-16T11:21:20.2629296Z 
2022-06-16T11:21:20.2629521Z --------------------------------------------------
2022-06-16T11:21:20.2629912Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2630030Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2630296Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2630441Z    Location: ./stone_paper_scissor/main.py:23:20
2022-06-16T11:21:20.2630791Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2630962Z 22	    # Assign a random number between 0 and 2 to computer_hand using randint
2022-06-16T11:21:20.2631104Z 23	    computer_hand = random.randint(0, 2)
2022-06-16T11:21:20.2631183Z 24	
2022-06-16T11:21:20.2631194Z 
2022-06-16T11:21:20.2631416Z --------------------------------------------------
2022-06-16T11:21:20.2631709Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2631829Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2632096Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2632301Z    Location: ./text-to-audio/main.py:18:0
2022-06-16T11:21:20.2632522Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2632641Z 17	# This will play your audio file
2022-06-16T11:21:20.2632764Z 18	os.system("mpg321 welcome.mp3")
2022-06-16T11:21:20.2632773Z 
2022-06-16T11:21:20.2632988Z --------------------------------------------------
2022-06-16T11:21:20.2633219Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2633341Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2633604Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2633806Z    Location: ./text-to-audio/main.py:18:0
2022-06-16T11:21:20.2634035Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2634154Z 17	# This will play your audio file
2022-06-16T11:21:20.2634273Z 18	os.system("mpg321 welcome.mp3")
2022-06-16T11:21:20.2634281Z 
2022-06-16T11:21:20.2634496Z --------------------------------------------------
2022-06-16T11:21:20.2634786Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2634906Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2635168Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2635423Z    Location: ./text-to-audio/text-file-to-audio.py:23:0
2022-06-16T11:21:20.2635724Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2635843Z 22	# This will play your audio file
2022-06-16T11:21:20.2635963Z 23	os.system("mpg321 hello.mp3")
2022-06-16T11:21:20.2635972Z 
2022-06-16T11:21:20.2636194Z --------------------------------------------------
2022-06-16T11:21:20.2636418Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2636538Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2636802Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2637051Z    Location: ./text-to-audio/text-file-to-audio.py:23:0
2022-06-16T11:21:20.2637278Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2637396Z 22	# This will play your audio file
2022-06-16T11:21:20.2637579Z 23	os.system("mpg321 hello.mp3")
2022-06-16T11:21:20.2637593Z 
2022-06-16T11:21:20.2637825Z --------------------------------------------------
2022-06-16T11:21:20.2638049Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.2638169Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2638437Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2638566Z    Location: ./tf_idf_generator.py:35:0
2022-06-16T11:21:20.2638949Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.2639026Z 34	import math
2022-06-16T11:21:20.2639121Z 35	import pickle
2022-06-16T11:21:20.2639198Z 36	
2022-06-16T11:21:20.2639323Z 37	from colorama import Fore, Style
2022-06-16T11:21:20.2639331Z 
2022-06-16T11:21:20.2639548Z --------------------------------------------------
2022-06-16T11:21:20.2639830Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.2639958Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2640214Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2640346Z    Location: ./tf_idf_generator.py:98:22
2022-06-16T11:21:20.2640701Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.2640876Z 97	        print(TAG, "modifying over exising file.. @", prev_file_path)
2022-06-16T11:21:20.2641043Z 98	        idf, tf_idf = pickle.load(open(prev_file_path, "rb"))
2022-06-16T11:21:20.2641156Z 99	        prev_doc_count = len(idf)
2022-06-16T11:21:20.2641164Z 
2022-06-16T11:21:20.2641379Z --------------------------------------------------
2022-06-16T11:21:20.2641670Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2641794Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2642044Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2642235Z    Location: ./tic-tac-toe.py:80:4
2022-06-16T11:21:20.2642471Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2642575Z 79	while Game == Running:
2022-06-16T11:21:20.2642676Z 80	    os.system("cls")
2022-06-16T11:21:20.2642770Z 81	    DrawBoard()
2022-06-16T11:21:20.2642778Z 
2022-06-16T11:21:20.2642993Z --------------------------------------------------
2022-06-16T11:21:20.2643205Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2643326Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2643591Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2643777Z    Location: ./tic-tac-toe.py:80:4
2022-06-16T11:21:20.2644023Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2644126Z 79	while Game == Running:
2022-06-16T11:21:20.2644309Z 80	    os.system("cls")
2022-06-16T11:21:20.2644527Z 81	    DrawBoard()
2022-06-16T11:21:20.2644536Z 
2022-06-16T11:21:20.2644735Z --------------------------------------------------
2022-06-16T11:21:20.2645014Z >> Issue: [B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell
2022-06-16T11:21:20.2645129Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2645387Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2645563Z    Location: ./tic-tac-toe.py:94:0
2022-06-16T11:21:20.2645784Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b605_start_process_with_a_shell.html
2022-06-16T11:21:20.2645860Z 93	
2022-06-16T11:21:20.2657905Z 94	os.system("cls")
2022-06-16T11:21:20.2658052Z 95	DrawBoard()
2022-06-16T11:21:20.2658063Z 
2022-06-16T11:21:20.2658570Z --------------------------------------------------
2022-06-16T11:21:20.2658840Z >> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
2022-06-16T11:21:20.2658964Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2659590Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2659789Z    Location: ./tic-tac-toe.py:94:0
2022-06-16T11:21:20.2660037Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b607_start_process_with_partial_path.html
2022-06-16T11:21:20.2660115Z 93	
2022-06-16T11:21:20.2660196Z 94	os.system("cls")
2022-06-16T11:21:20.2660285Z 95	DrawBoard()
2022-06-16T11:21:20.2660295Z 
2022-06-16T11:21:20.2660517Z --------------------------------------------------
2022-06-16T11:21:20.2660909Z >> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
2022-06-16T11:21:20.2661030Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2661305Z    CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
2022-06-16T11:21:20.2661432Z    Location: ./tic_tak_toe.py:29:18
2022-06-16T11:21:20.2661789Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b311-random
2022-06-16T11:21:20.2661905Z 28	    selection = possibilities(board)
2022-06-16T11:21:20.2662043Z 29	    current_loc = random.choice(selection)
2022-06-16T11:21:20.2662157Z 30	    board[current_loc] = player
2022-06-16T11:21:20.2662166Z 
2022-06-16T11:21:20.2662384Z --------------------------------------------------
2022-06-16T11:21:20.2662728Z >> Issue: [B403:blacklist] Consider possible security implications associated with pickle module.
2022-06-16T11:21:20.2662843Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2663101Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2663333Z    Location: ./ultimate-phone-book/contacts.py:11:0
2022-06-16T11:21:20.2663693Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b403-import-pickle
2022-06-16T11:21:20.2663785Z 10	# import library
2022-06-16T11:21:20.2663878Z 11	import pickle
2022-06-16T11:21:20.2664074Z 12	import os
2022-06-16T11:21:20.2664083Z 
2022-06-16T11:21:20.2664300Z --------------------------------------------------
2022-06-16T11:21:20.2664578Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.2664702Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2664968Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2665231Z    Location: ./ultimate-phone-book/contacts.py:17:8
2022-06-16T11:21:20.2665593Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.2665688Z 16	# defining array
2022-06-16T11:21:20.2665803Z 17	array = pickle.load(infile)
2022-06-16T11:21:20.2665896Z 18	infile.close()
2022-06-16T11:21:20.2665905Z 
2022-06-16T11:21:20.2666123Z --------------------------------------------------
2022-06-16T11:21:20.2666551Z >> Issue: [B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.
2022-06-16T11:21:20.2666675Z    Severity: Medium   Confidence: High
2022-06-16T11:21:20.2666939Z    CWE: CWE-502 (https://cwe.mitre.org/data/definitions/502.html)
2022-06-16T11:21:20.2667179Z    Location: ./ultimate-phone-book/contacts.py:25:10
2022-06-16T11:21:20.2667533Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_calls.html#b301-pickle
2022-06-16T11:21:20.2667747Z 24	    pklekey = open('data/pickle-key', 'rb')
2022-06-16T11:21:20.2667864Z 25	    key = pickle.load(pklekey)
2022-06-16T11:21:20.2667967Z 26	    pklekey.close()
2022-06-16T11:21:20.2667975Z 
2022-06-16T11:21:20.2668188Z --------------------------------------------------
2022-06-16T11:21:20.2668335Z >> Issue: [B110:try_except_pass] Try, Except, Pass detected.
2022-06-16T11:21:20.2668536Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2668828Z    CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
2022-06-16T11:21:20.2669034Z    Location: ./whatsapp-monitor.py:54:4
2022-06-16T11:21:20.2669254Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b110_try_except_pass.html
2022-06-16T11:21:20.2669331Z 53	
2022-06-16T11:21:20.2669417Z 54	    except:
2022-06-16T11:21:20.2669500Z 55	        pass
2022-06-16T11:21:20.2669507Z 
2022-06-16T11:21:20.2669710Z --------------------------------------------------
2022-06-16T11:21:20.2669946Z >> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
2022-06-16T11:21:20.2670066Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2670330Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2670450Z    Location: ./work_connect.py:12:0
2022-06-16T11:21:20.2670844Z    More Info: https://bandit.readthedocs.io/en/1.7.4/blacklists/blacklist_imports.html#b404-import-subprocess
2022-06-16T11:21:20.2670967Z 11	import os  # Load the Library Module
2022-06-16T11:21:20.2671113Z 12	import subprocess  # Load the Library Module
2022-06-16T11:21:20.2671226Z 13	import sys  # Load the Library Module
2022-06-16T11:21:20.2671234Z 
2022-06-16T11:21:20.2671450Z --------------------------------------------------
2022-06-16T11:21:20.2671815Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2672361Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2673394Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2673523Z    Location: ./work_connect.py:45:8
2022-06-16T11:21:20.2673776Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2673994Z 44	        ]  # Set the variable passwd as the second argument passed, in this case my login password
2022-06-16T11:21:20.2674101Z 45	        subprocess.Popen(
2022-06-16T11:21:20.2674186Z 46	            (
2022-06-16T11:21:20.2674550Z 47	                r"c:\Program Files\Checkpoint\Endpoint Connect\trac.exe connect -u username -p "
2022-06-16T11:21:20.2674646Z 48	                + passwd
2022-06-16T11:21:20.2674730Z 49	            )
2022-06-16T11:21:20.2674739Z 
2022-06-16T11:21:20.2674956Z --------------------------------------------------
2022-06-16T11:21:20.2675324Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2675445Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2675694Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2675814Z    Location: ./work_connect.py:51:8
2022-06-16T11:21:20.2676064Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2676146Z 50	        )
2022-06-16T11:21:20.2676316Z 51	        subprocess.Popen((r"c:\geektools\puttycm.exe"))
2022-06-16T11:21:20.2676413Z 52	        time.sleep(
2022-06-16T11:21:20.2676598Z 
2022-06-16T11:21:20.2676842Z --------------------------------------------------
2022-06-16T11:21:20.2677210Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2677315Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2677578Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2677697Z    Location: ./work_connect.py:55:8
2022-06-16T11:21:20.2677945Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2678151Z 54	        )  # Sleep for 15 seconds, so the checkpoint software can connect before opening mstsc
2022-06-16T11:21:20.2678304Z 55	        subprocess.Popen([remote, conffilename])
2022-06-16T11:21:20.2678386Z 56	    elif (
2022-06-16T11:21:20.2678395Z 
2022-06-16T11:21:20.2678687Z --------------------------------------------------
2022-06-16T11:21:20.2679058Z >> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
2022-06-16T11:21:20.2679181Z    Severity: Low   Confidence: High
2022-06-16T11:21:20.2679446Z    CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
2022-06-16T11:21:20.2679565Z    Location: ./work_connect.py:59:8
2022-06-16T11:21:20.2679814Z    More Info: https://bandit.readthedocs.io/en/1.7.4/plugins/b603_subprocess_without_shell_equals_true.html
2022-06-16T11:21:20.2680101Z 58	    ):  # If the first argument is -d then disconnect my checkpoint session.
2022-06-16T11:21:20.2680215Z 59	        subprocess.Popen(
2022-06-16T11:21:20.2680425Z 60	            (r"c:\Program Files\Checkpoint\Endpoint Connect\trac.exe disconnect ")
2022-06-16T11:21:20.2680493Z 61	        )
2022-06-16T11:21:20.2680501Z 
2022-06-16T11:21:20.2680720Z --------------------------------------------------
2022-06-16T11:21:20.2680728Z 
2022-06-16T11:21:20.2680820Z Code scanned:
2022-06-16T11:21:20.2680936Z 	Total lines of code: 26638
2022-06-16T11:21:20.2681057Z 	Total lines skipped (#nosec): 0
2022-06-16T11:21:20.2681272Z 	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0
2022-06-16T11:21:20.2681280Z 
2022-06-16T11:21:20.2681366Z Run metrics:
2022-06-16T11:21:20.2681477Z 	Total issues (by severity):
2022-06-16T11:21:20.2681553Z 		Undefined: 0
2022-06-16T11:21:20.2681635Z 		Low: 377
2022-06-16T11:21:20.2681720Z 		Medium: 69
2022-06-16T11:21:20.2681803Z 		High: 18
2022-06-16T11:21:20.2681917Z 	Total issues (by confidence):
2022-06-16T11:21:20.2682005Z 		Undefined: 0
2022-06-16T11:21:20.2682084Z 		Low: 12
2022-06-16T11:21:20.2682156Z 		Medium: 168
2022-06-16T11:21:20.2682238Z 		High: 284
2022-06-16T11:21:20.2682335Z Files skipped (0):
2022-06-16T11:21:20.2703941Z ##[group]Run black --check . || true
2022-06-16T11:21:20.2704089Z [36;1mblack --check . || true[0m
2022-06-16T11:21:20.2766765Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:20.2766992Z env:
2022-06-16T11:21:20.2767279Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:20.2767657Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:20.2767944Z ##[endgroup]
2022-06-16T11:21:20.6890469Z Skipping .ipynb files as Jupyter dependencies are not installed.
2022-06-16T11:21:20.6891374Z You can fix this by running ``pip install black[jupyter]``
2022-06-16T11:21:20.9069691Z would reformat 1 File handle/File handle text/file handle 12 length of line in text file.py
2022-06-16T11:21:20.9193201Z would reformat 1 File handle/File handle text/input,output and error streams.py
2022-06-16T11:21:20.9210322Z would reformat 1 File handle/File handle text/question 2.py
2022-06-16T11:21:20.9341937Z would reformat 1 File handle/File handle text/question 5.py
2022-06-16T11:21:20.9375606Z would reformat 1 File handle/File handle text/question 6.py
2022-06-16T11:21:20.9454276Z would reformat 12.py
2022-06-16T11:21:20.9608626Z would reformat 1 File handle/File handle text/question3.py
2022-06-16T11:21:20.9689564Z would reformat AreaOfTriangle.py
2022-06-16T11:21:21.0038694Z would reformat Automated Scheduled Call Reminders/caller.py
2022-06-16T11:21:21.3270455Z would reformat BoardGame-CLI/snakeLadder.py
2022-06-16T11:21:21.3662650Z would reformat BoardGame-CLI/uno.py
2022-06-16T11:21:21.3716471Z would reformat Cat/cat.py
2022-06-16T11:21:21.8740128Z would reformat Hand-Motion-Detection/hand_motion_recognizer.py
2022-06-16T11:21:22.0449621Z would reformat Key_Binding/key_binding.py
2022-06-16T11:21:22.0482813Z would reformat JARVIS/JARVIS.py
2022-06-16T11:21:22.2165455Z would reformat Program to reverse Linked List( Recursive solution).py
2022-06-16T11:21:22.3079280Z would reformat SimpleCalculator.py
2022-06-16T11:21:22.5998277Z would reformat TicTacToe.py
2022-06-16T11:21:22.7187561Z would reformat VoiceAssistant/Project_Basic_struct/TextTospeech.py
2022-06-16T11:21:22.7539513Z would reformat VoiceAssistant/Project_Basic_struct/dictator.py
2022-06-16T11:21:22.7596454Z would reformat VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py
2022-06-16T11:21:22.7765664Z would reformat VoiceAssistant/Project_Basic_struct/menu.py
2022-06-16T11:21:22.7879603Z would reformat VoiceAssistant/Project_Basic_struct/speechtotext.py
2022-06-16T11:21:22.8704378Z would reformat VoiceAssistant/Project_Basic_struct/speakListen.py
2022-06-16T11:21:22.9127895Z would reformat VoiceAssistant/Project_Basic_struct/websiteWork.py
2022-06-16T11:21:22.9699887Z would reformat Webbrowser/tk-browser.py
2022-06-16T11:21:23.0538408Z would reformat VoiceAssistant/Project_Basic_struct/textRead.py
2022-06-16T11:21:23.0639009Z would reformat Wordle/wordle.py
2022-06-16T11:21:23.1097977Z would reformat armstrongnumber.py
2022-06-16T11:21:23.4576879Z would reformat calc_area.py
2022-06-16T11:21:23.5605849Z would reformat cloning_a_list.py
2022-06-16T11:21:23.6207270Z would reformat dialogs/messagebox.py
2022-06-16T11:21:23.6671840Z would reformat divisors_of_a_number.py
2022-06-16T11:21:23.7045791Z would reformat equations.py
2022-06-16T11:21:23.7748356Z would reformat find_cube_root.py
2022-06-16T11:21:23.8569087Z would reformat generate_permutations.py
2022-06-16T11:21:24.0204101Z would reformat lcm.py
2022-06-16T11:21:24.1952535Z would reformat local_weighted_learning/local_weighted_learning.py
2022-06-16T11:21:24.3042281Z would reformat linear-algebra-python/src/lib.py
2022-06-16T11:21:24.3216703Z would reformat multiplication_table.py
2022-06-16T11:21:24.3223586Z would reformat nDigitNumberCombinations.py
2022-06-16T11:21:24.4248145Z would reformat num-py.py
2022-06-16T11:21:24.7523277Z would reformat recursiveStrings.py
2022-06-16T11:21:24.8216240Z would reformat primelib/primelib.py
2022-06-16T11:21:24.8514278Z would reformat russian_roulette.py
2022-06-16T11:21:24.8978377Z would reformat sensors_information.py
2022-06-16T11:21:25.0049658Z would reformat text-to-audio/text-file-to-audio.py
2022-06-16T11:21:25.1259206Z would reformat twitter_post_scraper.py
2022-06-16T11:21:25.2388242Z would reformat ultimate-phone-book/contacts.py
2022-06-16T11:21:25.2584909Z 
2022-06-16T11:21:25.2585774Z Oh no! 💥 💔 💥
2022-06-16T11:21:25.2586801Z 49 files would be reformatted, 419 files would be left unchanged.
2022-06-16T11:21:25.2850964Z ##[group]Run codespell || true
2022-06-16T11:21:25.2851283Z [36;1mcodespell || true[0m
2022-06-16T11:21:25.2913653Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:25.2913894Z env:
2022-06-16T11:21:25.2914194Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:25.2914546Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:25.2914837Z ##[endgroup]
2022-06-16T11:21:25.8065172Z ./Binary_search.py:31: seperated ==> separated
2022-06-16T11:21:25.8065979Z ./Binary_search.py:31: fucntion ==> function
2022-06-16T11:21:25.8066494Z ./batch_file_rename.py:30: extention ==> extension
2022-06-16T11:21:25.8067920Z ./Python Program to Print the Fibonacci sequence:13: upto ==> up to
2022-06-16T11:21:25.8068400Z ./Day_of_week.py:4: fucntions ==> functions
2022-06-16T11:21:25.8068904Z ./Day_of_week.py:25: calender ==> calendar
2022-06-16T11:21:25.8069932Z ./check_input.py:44: interger ==> integer
2022-06-16T11:21:25.8070594Z ./snake.py:31: co-ordinates ==> coordinates
2022-06-16T11:21:25.8070921Z ./snake.py:32: co-ordinates ==> coordinates
2022-06-16T11:21:25.8071188Z ./Cricket_score.py:10: extrat ==> extract
2022-06-16T11:21:25.8071466Z ./Print_List_of_Even_Numbers.py:1: creat ==> create
2022-06-16T11:21:25.8071728Z ./ping_subnet.py:56: reponse ==> response
2022-06-16T11:21:25.8071999Z ./ftp_send_receive.py:6: seperate ==> separate
2022-06-16T11:21:25.8072263Z ./nmap_scan.py:17: fucntion ==> function
2022-06-16T11:21:25.8072521Z ./insertion_sort.py:16: assending ==> ascending
2022-06-16T11:21:25.8072796Z ./insertion_sort.py:23: assending ==> ascending
2022-06-16T11:21:25.8073048Z ./insertion_sort.py:28: witth ==> with
2022-06-16T11:21:25.8073300Z ./insertion_sort.py:51: witth ==> with
2022-06-16T11:21:25.8073577Z ./input matrice,product any order!.py:6: coloumns ==> columns
2022-06-16T11:21:25.8073900Z ./input matrice,product any order!.py:6: coloumns ==> columns
2022-06-16T11:21:25.8074227Z ./input matrice,product any order!.py:11: coloumns ==> columns
2022-06-16T11:21:25.8074530Z ./input matrice,product any order!.py:25: coloumns ==> columns
2022-06-16T11:21:25.8074836Z ./input matrice,product any order!.py:26: coloumns ==> columns
2022-06-16T11:21:25.8075252Z ./how to display the fibonacci sequence up to n-:13: upto ==> up to
2022-06-16T11:21:25.8075550Z ./EncryptionTool.py:20: encrytion ==> encryption
2022-06-16T11:21:25.8075828Z ./wiki_random.py:32: generted ==> generated
2022-06-16T11:21:25.8076066Z ./data.json:1: Ba ==> By, be
2022-06-16T11:21:25.8076300Z ./data.json:1: Kazakstan ==> Kazakhstan
2022-06-16T11:21:25.8076740Z ./data.json:1: fallow ==> follow
2022-06-16T11:21:25.8076975Z ./data.json:1: fallow ==> follow
2022-06-16T11:21:25.8077204Z ./data.json:1: planed ==> planned
2022-06-16T11:21:25.8077521Z ./data.json:1: homogenous ==> homogeneous
2022-06-16T11:21:25.8077788Z ./data.json:1: Higly ==> Highly
2022-06-16T11:21:25.8078033Z ./data.json:1: Higly ==> Highly
2022-06-16T11:21:25.8078282Z ./data.json:1: wihout ==> without
2022-06-16T11:21:25.8078520Z ./data.json:1: aircrafts ==> aircraft
2022-06-16T11:21:25.8078760Z ./data.json:1: leaded ==> led, lead
2022-06-16T11:21:25.8079078Z ./data.json:1: fallows ==> follows
2022-06-16T11:21:25.8079320Z ./data.json:1: statics ==> statistics
2022-06-16T11:21:25.8079577Z ./data.json:1: polygone ==> polygon
2022-06-16T11:21:25.8079828Z ./data.json:1: excecute ==> execute
2022-06-16T11:21:25.8080068Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8080302Z ./data.json:1: recyling ==> recycling
2022-06-16T11:21:25.8080551Z ./data.json:1: fallow ==> follow
2022-06-16T11:21:25.8080792Z ./data.json:1: fallow ==> follow
2022-06-16T11:21:25.8081023Z ./data.json:1: useable ==> usable
2022-06-16T11:21:25.8081291Z ./data.json:1: accomodation ==> accommodation
2022-06-16T11:21:25.8081588Z ./data.json:1: logarithmical ==> logarithmically
2022-06-16T11:21:25.8081873Z ./data.json:1: consitutes ==> constitutes
2022-06-16T11:21:25.8082153Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8082662Z ./data.json:1: Carribbean ==> Caribbean
2022-06-16T11:21:25.8082951Z ./data.json:1: temorarily ==> temporarily
2022-06-16T11:21:25.8083186Z ./data.json:1: Carribean ==> Caribbean
2022-06-16T11:21:25.8083432Z ./data.json:1: Carribean ==> Caribbean
2022-06-16T11:21:25.8083675Z ./data.json:1: Carribean ==> Caribbean
2022-06-16T11:21:25.8083917Z ./data.json:1: streched ==> stretched
2022-06-16T11:21:25.8084143Z ./data.json:1: streched ==> stretched
2022-06-16T11:21:25.8084395Z ./data.json:1: troups ==> troupes, troops
2022-06-16T11:21:25.8084643Z ./data.json:1: succesful ==> successful
2022-06-16T11:21:25.8084877Z ./data.json:1: publically ==> publicly
2022-06-16T11:21:25.8085124Z ./data.json:1: Carribbean ==> Caribbean
2022-06-16T11:21:25.8085388Z ./data.json:1: accomodation ==> accommodation
2022-06-16T11:21:25.8085643Z ./data.json:1: continously ==> continuously
2022-06-16T11:21:25.8085900Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:25.8086246Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:25.8086487Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8086862Z ./data.json:1: wit ==> with
2022-06-16T11:21:25.8087119Z ./data.json:1: essentialy ==> essentially
2022-06-16T11:21:25.8087378Z ./data.json:1: Stucture ==> Structure
2022-06-16T11:21:25.8087611Z ./data.json:1: wit ==> with
2022-06-16T11:21:25.8087867Z ./data.json:1: higly ==> highly
2022-06-16T11:21:25.8088106Z ./data.json:1: publically ==> publicly
2022-06-16T11:21:25.8088331Z ./data.json:1: busses ==> buses
2022-06-16T11:21:25.8088567Z ./data.json:1: eigth ==> eighth, eight
2022-06-16T11:21:25.8088810Z ./data.json:1: excercise ==> exercise
2022-06-16T11:21:25.8089053Z ./data.json:1: excercise ==> exercise
2022-06-16T11:21:25.8089274Z ./data.json:1: excercise ==> exercise
2022-06-16T11:21:25.8089511Z ./data.json:1: excecute ==> execute
2022-06-16T11:21:25.8089754Z ./data.json:1: publically ==> publicly
2022-06-16T11:21:25.8090117Z ./data.json:1: occurances ==> occurrences
2022-06-16T11:21:25.8090501Z ./data.json:1: childrens ==> children
2022-06-16T11:21:25.8090862Z ./data.json:1: childrens ==> children
2022-06-16T11:21:25.8091128Z ./data.json:1: childrens ==> children
2022-06-16T11:21:25.8091406Z ./data.json:1: attatched ==> attached
2022-06-16T11:21:25.8091699Z ./data.json:1: occurrance ==> occurrence
2022-06-16T11:21:25.8091986Z ./data.json:1: therefor ==> therefore
2022-06-16T11:21:25.8092266Z ./data.json:1: temorarily ==> temporarily
2022-06-16T11:21:25.8092559Z ./data.json:1: repeting ==> repeating
2022-06-16T11:21:25.8092844Z ./data.json:1: repeting ==> repeating
2022-06-16T11:21:25.8093096Z ./data.json:1: repeting ==> repeating
2022-06-16T11:21:25.8093443Z ./data.json:1: repeting ==> repeating
2022-06-16T11:21:25.8093750Z ./data.json:1: permenantly ==> permanently
2022-06-16T11:21:25.8094046Z ./data.json:1: Philipines ==> Philippines
2022-06-16T11:21:25.8094322Z ./data.json:1: Philipines ==> Philippines
2022-06-16T11:21:25.8094603Z ./data.json:1: commiting ==> committing
2022-06-16T11:21:25.8095180Z ./data.json:1: solf ==> solve, sold
2022-06-16T11:21:25.8095431Z ./data.json:1: temorarily ==> temporarily
2022-06-16T11:21:25.8095699Z ./data.json:1: seperated ==> separated
2022-06-16T11:21:25.8095976Z ./data.json:1: inbetween ==> between, in between
2022-06-16T11:21:25.8096242Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8096476Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8096718Z ./data.json:1: commiting ==> committing
2022-06-16T11:21:25.8096955Z ./data.json:1: noone ==> no one
2022-06-16T11:21:25.8097171Z ./data.json:1: Te ==> The, be, we, to
2022-06-16T11:21:25.8097484Z ./data.json:1: potatos ==> potatoes
2022-06-16T11:21:25.8097740Z ./data.json:1: noone ==> no one
2022-06-16T11:21:25.8097978Z ./data.json:1: respecive ==> respective
2022-06-16T11:21:25.8098200Z ./data.json:1: Nd ==> And, 2nd
2022-06-16T11:21:25.8098518Z ./data.json:1: disaproval ==> disapproval
2022-06-16T11:21:25.8098796Z ./data.json:1: independant ==> independent
2022-06-16T11:21:25.8099318Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8100057Z ./data.json:1: ancestory ==> ancestry
2022-06-16T11:21:25.8101075Z ./data.json:1: tyrrany ==> tyranny
2022-06-16T11:21:25.8101339Z ./data.json:1: gird ==> grid
2022-06-16T11:21:25.8101599Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:25.8101877Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:25.8102148Z ./data.json:1: moil ==> soil, mohel
2022-06-16T11:21:25.8102416Z ./data.json:1: annointed ==> anointed
2022-06-16T11:21:25.8102666Z ./data.json:1: Rouge ==> Rogue
2022-06-16T11:21:25.8102944Z ./data.json:1: arithmetics ==> arithmetic
2022-06-16T11:21:25.8103357Z ./data.json:1: beastiality ==> bestiality
2022-06-16T11:21:25.8103620Z ./data.json:1: occurances ==> occurrences
2022-06-16T11:21:25.8103891Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:25.8104158Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:25.8104397Z ./data.json:1: mamal ==> mammal
2022-06-16T11:21:25.8104781Z ./data.json:1: BrE ==> be, brie
2022-06-16T11:21:25.8105039Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8105411Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8105757Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8105992Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8106210Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8106446Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8106677Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8106910Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8107130Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8107366Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8107595Z ./data.json:1: Claus ==> Clause
2022-06-16T11:21:25.8107809Z ./data.json:1: occured ==> occurred
2022-06-16T11:21:25.8108057Z ./data.json:1: excercising ==> exercising
2022-06-16T11:21:25.8108299Z ./data.json:1: langugage ==> language
2022-06-16T11:21:25.8108523Z ./data.json:1: defering ==> deferring
2022-06-16T11:21:25.8108776Z ./data.json:1: bord ==> board, bored, border
2022-06-16T11:21:25.8109034Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8109270Z ./data.json:1: panting ==> painting
2022-06-16T11:21:25.8109503Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8109731Z ./data.json:1: controlls ==> controls
2022-06-16T11:21:25.8109969Z ./data.json:1: consitution ==> constitution
2022-06-16T11:21:25.8110225Z ./data.json:1: achievment ==> achievement
2022-06-16T11:21:25.8110477Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8110706Z ./data.json:1: Stucture ==> Structure
2022-06-16T11:21:25.8110951Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8111203Z ./data.json:1: disaproval ==> disapproval
2022-06-16T11:21:25.8112076Z ./data.json:1: Tha ==> Than, that, the
2022-06-16T11:21:25.8112389Z ./data.json:1: Tha ==> Than, that, the
2022-06-16T11:21:25.8112691Z ./data.json:1: Wight ==> Weight, white, right, write
2022-06-16T11:21:25.8113017Z ./data.json:1: thicknes ==> thickness, thickens
2022-06-16T11:21:25.8113284Z ./data.json:1: Autum ==> Autumn
2022-06-16T11:21:25.8113534Z ./data.json:1: WAN ==> WANT
2022-06-16T11:21:25.8113797Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8114064Z ./data.json:1: nin ==> inn, min, bin, nine
2022-06-16T11:21:25.8114347Z ./data.json:1: nin ==> inn, min, bin, nine
2022-06-16T11:21:25.8114614Z ./data.json:1: stings ==> strings
2022-06-16T11:21:25.8114857Z ./data.json:1: stings ==> strings
2022-06-16T11:21:25.8115151Z ./data.json:1: wither ==> either, whether, weather
2022-06-16T11:21:25.8115702Z ./data.json:1: accomodating ==> accommodating
2022-06-16T11:21:25.8115964Z ./data.json:1: lenghtened ==> lengthened
2022-06-16T11:21:25.8116196Z ./data.json:1: aircaft ==> aircraft
2022-06-16T11:21:25.8116436Z ./data.json:1: commited ==> committed
2022-06-16T11:21:25.8116675Z ./data.json:1: commited ==> committed
2022-06-16T11:21:25.8116904Z ./data.json:1: nin ==> inn, min, bin, nine
2022-06-16T11:21:25.8117151Z ./data.json:1: prefered ==> preferred
2022-06-16T11:21:25.8117544Z ./data.json:1: occurence ==> occurrence
2022-06-16T11:21:25.8117796Z ./data.json:1: occurence ==> occurrence
2022-06-16T11:21:25.8118043Z ./data.json:1: posesses ==> possesses
2022-06-16T11:21:25.8118283Z ./data.json:1: posesses ==> possesses
2022-06-16T11:21:25.8118503Z ./data.json:1: fallow ==> follow
2022-06-16T11:21:25.8118728Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8118951Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8119160Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8119377Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8119598Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8119804Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8120022Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8120240Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8120457Z ./data.json:1: Nax ==> Max, nad
2022-06-16T11:21:25.8120671Z ./data.json:1: oficial ==> official
2022-06-16T11:21:25.8120974Z ./data.json:1: Bale ==> Able
2022-06-16T11:21:25.8121190Z ./data.json:1: Bale ==> Able
2022-06-16T11:21:25.8121426Z ./data.json:1: Tring ==> Trying, string, ring
2022-06-16T11:21:25.8121671Z ./data.json:1: Writen ==> Written
2022-06-16T11:21:25.8121902Z ./data.json:1: Te ==> The, be, we, to
2022-06-16T11:21:25.8122245Z ./data.json:1: Te ==> The, be, we, to
2022-06-16T11:21:25.8122597Z ./data.json:1: Ba ==> By, be
2022-06-16T11:21:25.8122844Z ./data.json:1: Gude ==> Guide, good
2022-06-16T11:21:25.8123086Z ./data.json:1: Gude ==> Guide, good
2022-06-16T11:21:25.8123342Z ./data.json:1: Gude ==> Guide, good
2022-06-16T11:21:25.8123589Z ./data.json:1: Nax ==> Max, nad
2022-06-16T11:21:25.8123813Z ./data.json:1: Mor ==> More
2022-06-16T11:21:25.8124048Z ./data.json:1: Nedd ==> Need
2022-06-16T11:21:25.8124383Z ./data.json:1: Cant ==> Can't
2022-06-16T11:21:25.8124643Z ./data.json:1: Cant ==> Can't
2022-06-16T11:21:25.8124884Z ./data.json:1: Gir ==> Git
2022-06-16T11:21:25.8125132Z ./data.json:1: Tye ==> Type, tie
2022-06-16T11:21:25.8125368Z ./data.json:1: Didi ==> Did
2022-06-16T11:21:25.8125729Z ./data.json:1: Guilia ==> Giulia
2022-06-16T11:21:25.8125949Z ./data.json:1: Ture ==> True
2022-06-16T11:21:25.8126167Z ./data.json:1: Vas ==> Was
2022-06-16T11:21:25.8126374Z ./data.json:1: aroung ==> around
2022-06-16T11:21:25.8126590Z ./data.json:1: Ket ==> Kept
2022-06-16T11:21:25.8126804Z ./data.json:1: Ket ==> Kept
2022-06-16T11:21:25.8127124Z ./data.json:1: Tese ==> These
2022-06-16T11:21:25.8127490Z ./data.json:1: Tese ==> These
2022-06-16T11:21:25.8876149Z ./data.json:1: Tese ==> These
2022-06-16T11:21:25.8876459Z ./data.json:1: Mayu ==> May
2022-06-16T11:21:25.8876684Z ./data.json:1: Mayu ==> May
2022-06-16T11:21:25.8876922Z ./data.json:1: Vill ==> Will
2022-06-16T11:21:25.8877196Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8877458Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8877727Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8877999Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8878273Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8878674Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8879078Z ./data.json:1: Portugese ==> Portuguese
2022-06-16T11:21:25.8879344Z ./data.json:1: litte ==> little
2022-06-16T11:21:25.8879583Z ./data.json:1: Gard ==> Guard
2022-06-16T11:21:25.8879834Z ./data.json:1: Somme ==> Some
2022-06-16T11:21:25.8880085Z ./data.json:1: Somme ==> Some
2022-06-16T11:21:25.8880332Z ./data.json:1: extention ==> extension
2022-06-16T11:21:25.8880609Z ./data.json:1: succesful ==> successful
2022-06-16T11:21:25.8880870Z ./data.json:1: Ake ==> Ache
2022-06-16T11:21:25.8881107Z ./data.json:1: Alege ==> Allege
2022-06-16T11:21:25.8881378Z ./data.json:1: multipled ==> multiplied
2022-06-16T11:21:25.8881659Z ./data.json:1: specifing ==> specifying
2022-06-16T11:21:25.8881924Z ./data.json:1: lightyear ==> light year
2022-06-16T11:21:25.8882198Z ./data.json:1: mucuous ==> mucous
2022-06-16T11:21:25.8882456Z ./data.json:1: trough ==> through
2022-06-16T11:21:25.8882749Z ./data.json:1: correspondance ==> correspondence
2022-06-16T11:21:25.8883353Z ./data.json:1: Prevoius ==> Previous
2022-06-16T11:21:25.8883639Z ./data.json:1: Ede ==> Edge
2022-06-16T11:21:25.8883887Z ./data.json:1: pannels ==> panels
2022-06-16T11:21:25.8884160Z ./data.json:1: Persan ==> Person
2022-06-16T11:21:25.8884418Z ./data.json:1: Ende ==> End
2022-06-16T11:21:25.8884658Z ./data.json:1: ot ==> to, of, or
2022-06-16T11:21:25.8884908Z ./data.json:1: Fwe ==> Few
2022-06-16T11:21:25.8885278Z ./data.json:1: Wan ==> Want
2022-06-16T11:21:25.8885528Z ./data.json:1: nothern ==> northern
2022-06-16T11:21:25.8885760Z ./data.json:1: Ede ==> Edge
2022-06-16T11:21:25.8885994Z ./data.json:1: Ede ==> Edge
2022-06-16T11:21:25.8886241Z ./data.json:1: Idesa ==> Ideas, ides
2022-06-16T11:21:25.8886491Z ./data.json:1: equiped ==> equipped
2022-06-16T11:21:25.8886739Z ./data.json:1: som ==> some
2022-06-16T11:21:25.8886973Z ./data.json:1: som ==> some
2022-06-16T11:21:25.8887319Z ./data.json:1: sence ==> sense, since
2022-06-16T11:21:25.8887595Z ./data.json:1: succesful ==> successful
2022-06-16T11:21:25.8887897Z ./data.json:1: soure ==> source, sure, sore, sour, soured
2022-06-16T11:21:25.8888175Z ./data.json:1: statics ==> statistics
2022-06-16T11:21:25.8888464Z ./data.json:1: spermatozoan ==> spermatozoon
2022-06-16T11:21:25.8888965Z ./data.json:1: atheistical ==> atheistic
2022-06-16T11:21:25.8889233Z ./data.json:1: succesful ==> successful
2022-06-16T11:21:25.8889520Z ./data.json:1: negotation ==> negotiation
2022-06-16T11:21:25.8889797Z ./data.json:1: flourine ==> fluorine
2022-06-16T11:21:25.8890065Z ./data.json:1: familly ==> family
2022-06-16T11:21:25.8890303Z ./data.json:1: bale ==> able
2022-06-16T11:21:25.8890556Z ./data.json:1: bellow ==> below
2022-06-16T11:21:25.8890811Z ./data.json:1: rouge ==> rogue
2022-06-16T11:21:25.8891061Z ./data.json:1: binominal ==> binomial
2022-06-16T11:21:25.8891349Z ./data.json:1: immmediately ==> immediately
2022-06-16T11:21:25.8891643Z ./data.json:1: Hove ==> Have, hover, love
2022-06-16T11:21:25.8892027Z ./data.json:1: Hove ==> Have, hover, love
2022-06-16T11:21:25.8892267Z ./data.json:1: wee ==> we
2022-06-16T11:21:25.8892512Z ./data.json:1: calender ==> calendar
2022-06-16T11:21:25.8892759Z ./data.json:1: ressources ==> resources
2022-06-16T11:21:25.8893024Z ./data.json:1: ficticious ==> fictitious
2022-06-16T11:21:25.8893286Z ./data.json:1: despatch ==> dispatch
2022-06-16T11:21:25.8893523Z ./data.json:1: reacher ==> richer
2022-06-16T11:21:25.8893780Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8894051Z ./data.json:1: phenomenom ==> phenomenon
2022-06-16T11:21:25.8894294Z ./data.json:1: noone ==> no one
2022-06-16T11:21:25.8894555Z ./data.json:1: commend ==> comment, command
2022-06-16T11:21:25.8894828Z ./data.json:1: dessication ==> desiccation
2022-06-16T11:21:25.8895126Z ./data.json:1: fixe ==> fixed, fixes, fix, fixme, fixer
2022-06-16T11:21:25.8895396Z ./data.json:1: acumulate ==> accumulate
2022-06-16T11:21:25.8895896Z ./data.json:1: wont ==> won't
2022-06-16T11:21:25.8896136Z ./data.json:1: afer ==> after
2022-06-16T11:21:25.8896376Z ./data.json:1: deductable ==> deductible
2022-06-16T11:21:25.8896632Z ./data.json:1: acutal ==> actual
2022-06-16T11:21:25.8896899Z ./data.json:1: caracterized ==> characterized
2022-06-16T11:21:25.8897177Z ./data.json:1: discontentment ==> discontent
2022-06-16T11:21:25.8897440Z ./data.json:1: whcih ==> which
2022-06-16T11:21:25.8897683Z ./data.json:1: Rouge ==> Rogue
2022-06-16T11:21:25.8897920Z ./data.json:1: guerilla ==> guerrilla
2022-06-16T11:21:25.8898204Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8898581Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8898927Z ./data.json:1: higly ==> highly
2022-06-16T11:21:25.8900327Z ./data.json:1: intrusted ==> entrusted
2022-06-16T11:21:25.8900606Z ./data.json:1: incase ==> in case
2022-06-16T11:21:25.8900871Z ./data.json:1: negotation ==> negotiation
2022-06-16T11:21:25.8901142Z ./data.json:1: wich ==> which
2022-06-16T11:21:25.8901427Z ./data.json:1: wheather ==> weather, whether
2022-06-16T11:21:25.8901855Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8902494Z ./data.json:1: tought ==> thought, taught, tough
2022-06-16T11:21:25.8902765Z ./data.json:1: exagerrated ==> exaggerated
2022-06-16T11:21:25.8903018Z ./data.json:1: existance ==> existence
2022-06-16T11:21:25.8903249Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8903491Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8903733Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8903955Z ./data.json:1: storeable ==> storable
2022-06-16T11:21:25.8904193Z ./data.json:1: storeable ==> storable
2022-06-16T11:21:25.8904432Z ./data.json:1: millenium ==> millennium
2022-06-16T11:21:25.8904665Z ./data.json:1: perfoms ==> performs
2022-06-16T11:21:25.8904946Z ./data.json:1: perfoms ==> performs
2022-06-16T11:21:25.8905315Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8905561Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8906165Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8906444Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8906715Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8906971Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8907244Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8907515Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8907769Z ./data.json:1: personnal ==> personal
2022-06-16T11:21:25.8908045Z ./data.json:1: greatful ==> grateful
2022-06-16T11:21:25.8908317Z ./data.json:1: greatful ==> grateful
2022-06-16T11:21:25.8908585Z ./data.json:1: litterature ==> literature
2022-06-16T11:21:25.8908864Z ./data.json:1: ancestory ==> ancestry
2022-06-16T11:21:25.8909133Z ./data.json:1: refering ==> referring
2022-06-16T11:21:25.8909387Z ./data.json:1: refering ==> referring
2022-06-16T11:21:25.8909656Z ./data.json:1: refering ==> referring
2022-06-16T11:21:25.8909919Z ./data.json:1: tabacco ==> tobacco
2022-06-16T11:21:25.8910171Z ./data.json:1: curser ==> cursor
2022-06-16T11:21:25.8910437Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8910707Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8910972Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8911221Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8911488Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8911753Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8911993Z ./data.json:1: wit ==> with
2022-06-16T11:21:25.8912248Z ./data.json:1: chancel ==> cancel
2022-06-16T11:21:25.8912506Z ./data.json:1: mucuous ==> mucous
2022-06-16T11:21:25.8912746Z ./data.json:1: rime ==> rhyme
2022-06-16T11:21:25.8913011Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8913284Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8913541Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8913812Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8914081Z ./data.json:1: seperate ==> separate
2022-06-16T11:21:25.8914363Z ./data.json:1: straightaway ==> straight away
2022-06-16T11:21:25.8914653Z ./data.json:1: occuring ==> occurring
2022-06-16T11:21:25.8914922Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8915176Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8915444Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8915721Z ./data.json:1: dependant ==> dependent
2022-06-16T11:21:25.8916020Z ./data.json:1: mater ==> matter, master, mother
2022-06-16T11:21:25.8916311Z ./data.json:1: mater ==> matter, master, mother
2022-06-16T11:21:25.8916588Z ./data.json:1: trough ==> through
2022-06-16T11:21:25.8916855Z ./data.json:1: guerilla ==> guerrilla
2022-06-16T11:21:25.8917103Z ./data.json:1: mamal ==> mammal
2022-06-16T11:21:25.8917369Z ./data.json:1: occurence ==> occurrence
2022-06-16T11:21:25.8917642Z ./data.json:1: Oder ==> Order, odor
2022-06-16T11:21:25.8917897Z ./data.json:1: cemetary ==> cemetery
2022-06-16T11:21:25.8918811Z ./data.json:1: cannnot ==> cannot
2022-06-16T11:21:25.8919099Z ./data.json:1: medias ==> media, mediums
2022-06-16T11:21:25.8919515Z ./data.json:1: tomatos ==> tomatoes
2022-06-16T11:21:25.8919792Z ./data.json:1: ANS ==> AND
2022-06-16T11:21:25.8920048Z ./data.json:1: Writtten ==> Written
2022-06-16T11:21:25.8920290Z ./data.json:1: ALS ==> ALSO
2022-06-16T11:21:25.8920552Z ./data.json:1: refering ==> referring
2022-06-16T11:21:25.8920835Z ./data.json:1: Ressembling ==> Resembling
2022-06-16T11:21:25.8921116Z ./data.json:1: Occuring ==> Occurring
2022-06-16T11:21:25.8921361Z ./data.json:1: WAN ==> WANT
2022-06-16T11:21:25.8921622Z ./data.json:1: subsytem ==> subsystem
2022-06-16T11:21:25.8921904Z ./data.json:1: equipments ==> equipment
2022-06-16T11:21:25.8922174Z ./data.json:1: equipments ==> equipment
2022-06-16T11:21:25.8922446Z ./data.json:1: leaded ==> led, lead
2022-06-16T11:21:25.8922701Z ./data.json:1: BA ==> BY, BE
2022-06-16T11:21:25.8922932Z ./data.json:1: Mor ==> More
2022-06-16T11:21:25.8923202Z ./data.json:1: ressembling ==> resembling
2022-06-16T11:21:25.8923583Z ./data.json:1: ressembling ==> resembling
2022-06-16T11:21:25.8923863Z ./data.json:1: ressembling ==> resembling
2022-06-16T11:21:25.8924140Z ./data.json:1: Morroco ==> Morocco
2022-06-16T11:21:25.8924434Z ./data.json:1: demographical ==> demographic
2022-06-16T11:21:25.8924696Z ./data.json:1: ba ==> by, be
2022-06-16T11:21:25.8924959Z ./data.json:1: stucture ==> structure
2022-06-16T11:21:25.8925226Z ./data.json:1: reacher ==> richer
2022-06-16T11:21:25.8925473Z ./data.json:1: trough ==> through
2022-06-16T11:21:25.8925735Z ./data.json:1: manger ==> manager
2022-06-16T11:21:25.8925990Z ./data.json:1: trough ==> through
2022-06-16T11:21:25.8926238Z ./data.json:1: ba ==> by, be
2022-06-16T11:21:25.8926482Z ./data.json:1: refered ==> referred
2022-06-16T11:21:25.8926770Z ./data.json:1: informations ==> information
2022-06-16T11:21:25.8927054Z ./data.json:1: targetting ==> targeting
2022-06-16T11:21:25.8927334Z ./data.json:1: informations ==> information
2022-06-16T11:21:25.8927622Z ./data.json:1: targetting ==> targeting
2022-06-16T11:21:25.8927901Z ./data.json:1: revered ==> reversed
2022-06-16T11:21:25.8928158Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8928419Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8928676Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8928916Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8929165Z ./data.json:1: fo ==> of, for
2022-06-16T11:21:25.8929414Z ./data.json:1: covert ==> convert
2022-06-16T11:21:25.8929675Z ./data.json:1: wether ==> weather, whether
2022-06-16T11:21:25.8929960Z ./data.json:1: preformed ==> performed
2022-06-16T11:21:25.8930232Z ./data.json:1: sting ==> string
2022-06-16T11:21:25.8930510Z ./data.json:1: preceeded ==> preceded, proceeded
2022-06-16T11:21:25.8930833Z ./data.json:1: aline ==> align, a line, line, saline
2022-06-16T11:21:25.8931139Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8931430Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8931703Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8931993Z ./data.json:1: fulfilment ==> fulfillment
2022-06-16T11:21:25.8932271Z ./data.json:1: instal ==> install
2022-06-16T11:21:25.8932514Z ./data.json:1: imbed ==> embed
2022-06-16T11:21:25.8932783Z ./data.json:1: distribuite ==> distribute
2022-06-16T11:21:25.8933192Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8933457Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8933736Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8934012Z ./data.json:1: cant ==> can't
2022-06-16T11:21:25.8934260Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8934535Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8934806Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8935063Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8935331Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8935599Z ./data.json:1: proccess ==> process
2022-06-16T11:21:25.8935868Z ./data.json:1: abord ==> abort, aboard
2022-06-16T11:21:25.8936118Z ./data.json:1: crate ==> create
2022-06-16T11:21:25.8936388Z ./data.json:1: targetted ==> targeted
2022-06-16T11:21:25.8936747Z ./data.json:1: payed ==> paid
2022-06-16T11:21:25.8937081Z ./data.json:1: spped ==> speed, sped, sipped, sapped, supped, sopped
2022-06-16T11:21:25.8937403Z ./data.json:1: tittle ==> title
2022-06-16T11:21:25.8937672Z ./data.json:1: digitalize ==> digitize
2022-06-16T11:21:25.8937949Z ./data.json:1: sematically ==> semantically
2022-06-16T11:21:25.8938236Z ./data.json:1: tread ==> thread, treat
2022-06-16T11:21:25.8938523Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:25.8938788Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:25.8939395Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:25.8939695Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:26.0296852Z ./data.json:1: Comission ==> Commission
2022-06-16T11:21:26.0297195Z ./data.json:1: colleection ==> collection
2022-06-16T11:21:26.0297453Z ./data.json:1: assigend ==> assigned
2022-06-16T11:21:26.0297716Z ./diction.py:49: ans ==> and
2022-06-16T11:21:26.0298260Z ./diction.py:50: ans ==> and
2022-06-16T11:21:26.0298496Z ./diction.py:52: ans ==> and
2022-06-16T11:21:26.0298744Z ./Tic_Tac_Toe.py:154: frist ==> first
2022-06-16T11:21:26.0299034Z ./text_file_replace.py:22: occurence ==> occurrence
2022-06-16T11:21:26.0299496Z ./Base Converter Number system:39: ans ==> and
2022-06-16T11:21:26.0299788Z ./Base Converter Number system:43: ans ==> and
2022-06-16T11:21:26.0300069Z ./Base Converter Number system:43: ans ==> and
2022-06-16T11:21:26.0300355Z ./Base Converter Number system:45: ans ==> and
2022-06-16T11:21:26.0300637Z ./personal_translator.py:10: intall ==> install
2022-06-16T11:21:26.0300913Z ./SOUNDEX.py:6: Covert ==> Convert
2022-06-16T11:21:26.0301313Z ./SOUNDEX.py:26: Algorythem ==> Algorithm
2022-06-16T11:21:26.0301612Z ./check_for_sqlite_files.py:7: unecessary ==> unnecessary
2022-06-16T11:21:26.0301928Z ./powerup_checks.py:126: funtion ==> function
2022-06-16T11:21:26.0302207Z ./blackJackGUI.py:68: ans ==> and
2022-06-16T11:21:26.0302465Z ./blackJackGUI.py:70: ans ==> and
2022-06-16T11:21:26.0302735Z ./blackJackGUI.py:71: ans ==> and
2022-06-16T11:21:26.0303155Z ./python Space Invader game:128: boundry ==> boundary
2022-06-16T11:21:26.0303469Z ./python Space Invader game:144: boundry ==> boundary
2022-06-16T11:21:26.0303766Z ./find_cube_root.py:9: ans ==> and
2022-06-16T11:21:26.0304035Z ./find_cube_root.py:10: ans ==> and
2022-06-16T11:21:26.0304428Z ./find_cube_root.py:12: ans ==> and
2022-06-16T11:21:26.0304672Z ./find_cube_root.py:16: ans ==> and
2022-06-16T11:21:26.0304929Z ./find_cube_root.py:17: ans ==> and
2022-06-16T11:21:26.0305227Z ./passwordGenerator.py:101: lenght ==> length
2022-06-16T11:21:26.0305503Z ./fibonici series:11: upto ==> up to
2022-06-16T11:21:26.0305923Z ./Decimal_To_Binary.py:42: noe ==> not, no, node, know, now
2022-06-16T11:21:26.0306207Z ./login.py:4: Devloped ==> Developed
2022-06-16T11:21:26.0306448Z ./login.py:23: Funtion ==> Function
2022-06-16T11:21:26.0306703Z ./Untitled.ipynb:13: ouput ==> output
2022-06-16T11:21:26.0306995Z ./Untitled.ipynb:42: Generat ==> Generate, general
2022-06-16T11:21:26.0307301Z ./A solution to project euler problem 3.py:46: ans ==> and
2022-06-16T11:21:26.0307624Z ./A solution to project euler problem 3.py:55: ans ==> and
2022-06-16T11:21:26.0307940Z ./A solution to project euler problem 3.py:62: ans ==> and
2022-06-16T11:21:26.0308220Z ./serial_scanner.py:26: ser ==> set
2022-06-16T11:21:26.0308464Z ./serial_scanner.py:30: ser ==> set
2022-06-16T11:21:26.0308717Z ./serial_scanner.py:31: ser ==> set
2022-06-16T11:21:26.0308971Z ./serial_scanner.py:36: ser ==> set
2022-06-16T11:21:26.0309209Z ./serial_scanner.py:41: ser ==> set
2022-06-16T11:21:26.0309511Z ./longest_increasing_subsequence_length.py:3: lenth ==> length
2022-06-16T11:21:26.0309844Z ./longest_increasing_subsequence_length.py:9: ans ==> and
2022-06-16T11:21:26.0310163Z ./longest_increasing_subsequence_length.py:9: lenth ==> length
2022-06-16T11:21:26.0310495Z ./longest_increasing_subsequence_length.py:10: ans ==> and
2022-06-16T11:21:26.0310825Z ./longest_increasing_subsequence_length.py:14: ans ==> and
2022-06-16T11:21:26.0311386Z ./longest_increasing_subsequence_length.py:14: ans ==> and
2022-06-16T11:21:26.0311739Z ./longest_increasing_subsequence_length.py:15: ans ==> and
2022-06-16T11:21:26.0312075Z ./longest_increasing_subsequence_length.py:15: ans ==> and
2022-06-16T11:21:26.0312408Z ./longest_increasing_subsequence_length.py:16: ans ==> and
2022-06-16T11:21:26.0312716Z ./invisible_clock.py:31: seperating ==> separating
2022-06-16T11:21:26.0313004Z ./diceV2_dynamic.py:93: ans ==> and
2022-06-16T11:21:26.0313271Z ./diceV2_dynamic.py:94: ans ==> and
2022-06-16T11:21:26.0313524Z ./changemac.py:16: genrate ==> generate
2022-06-16T11:21:26.0313809Z ./ping_servers.py:53: argment ==> argument
2022-06-16T11:21:26.0314095Z ./ping_servers.py:84: reponse ==> response
2022-06-16T11:21:26.0314491Z ./fibonacci.py:71: calculting ==> calculating
2022-06-16T11:21:26.0314810Z ./count the numbers of two vovels:8: comparisions ==> comparisons
2022-06-16T11:21:26.0315193Z ./cricket_news.py:17: ans ==> and
2022-06-16T11:21:26.0315447Z ./cricket_news.py:19: ans ==> and
2022-06-16T11:21:26.0315735Z ./convert celsius into fahrenheit:2: temprature ==> temperature
2022-06-16T11:21:26.0316195Z ./convert celsius into fahrenheit:4: temprature ==> temperature
2022-06-16T11:21:26.0316507Z ./mapit.py:9: palce ==> place, palace
2022-06-16T11:21:26.0316785Z ./MySQL_Databses.py:3: databses ==> databases
2022-06-16T11:21:26.0317084Z ./GroupSms_Way2.py:18: seperated ==> separated
2022-06-16T11:21:26.0317380Z ./merge.py:31: readed ==> read, readd, readded
2022-06-16T11:21:26.0317657Z ./script_listing.py:8: varaible ==> variable
2022-06-16T11:21:26.0317950Z ./script_listing.py:20: varable ==> variable
2022-06-16T11:21:26.0318249Z ./RandomNumberGame.py:17: acctual ==> actual
2022-06-16T11:21:26.0318533Z ./RandomNumberGame.py:17: chossen ==> chosen
2022-06-16T11:21:26.0318881Z ./Program to reverse Linked List( Recursive solution).py:28: datas ==> data
2022-06-16T11:21:26.0319275Z ./Program to reverse Linked List( Recursive solution).py:31: datas ==> data
2022-06-16T11:21:26.0319655Z ./Program to reverse Linked List( Recursive solution).py:31: datas ==> data
2022-06-16T11:21:26.0320015Z ./Program to reverse Linked List( Recursive solution).py:32: datas ==> data
2022-06-16T11:21:26.0320341Z ./binary_search_tree.py:309: ans ==> and
2022-06-16T11:21:26.0320619Z ./binary_search_tree.py:314: ans ==> and
2022-06-16T11:21:26.0320882Z ./binary_search_tree.py:319: ans ==> and
2022-06-16T11:21:26.0321313Z ./Split_Circular_Linked_List.py:64: Firts ==> First, flirts
2022-06-16T11:21:26.0321699Z ./Dictionary opperations (input,update a dict).py:3: Dictinary ==> Dictionary
2022-06-16T11:21:26.0322221Z ./Dictionary opperations (input,update a dict).py:3: opperations ==> operations
2022-06-16T11:21:26.0322562Z ./osinfo.py:7: Everytime ==> Every time
2022-06-16T11:21:26.0322825Z ./binod.py:22: Insted ==> Instead
2022-06-16T11:21:26.0323070Z ./binod.py:39: ans ==> and
2022-06-16T11:21:26.0323299Z ./binod.py:40: ans ==> and
2022-06-16T11:21:26.0323567Z ./kmp_str_search.py:2: te ==> the, be, we, to
2022-06-16T11:21:26.0323865Z ./news_articles__scraper.py:221: TOI ==> TO, TOY
2022-06-16T11:21:26.0324280Z ./levenshtein_distance.py:43: minimun ==> minimum
2022-06-16T11:21:26.0324581Z ./Conversation.py:19: dialoge ==> dialog, dialogue
2022-06-16T11:21:26.0324883Z ./Conversation.py:28: dialoge ==> dialog, dialogue
2022-06-16T11:21:26.0325157Z ./turtle module:98: Mutliple ==> Multiple
2022-06-16T11:21:26.0325580Z ./bookstore_manangement_system.py:174: lenght ==> length
2022-06-16T11:21:26.0326727Z ./bookstore_manangement_system.py:176: lenght ==> length
2022-06-16T11:21:26.0327062Z ./bookstore_manangement_system.py:176: lenght ==> length
2022-06-16T11:21:26.0327399Z ./bookstore_manangement_system.py:190: lenght ==> length
2022-06-16T11:21:26.0327732Z ./bookstore_manangement_system.py:214: lenght ==> length
2022-06-16T11:21:26.0328064Z ./bookstore_manangement_system.py:226: lenght ==> length
2022-06-16T11:21:26.0328390Z ./bookstore_manangement_system.py:228: lenght ==> length
2022-06-16T11:21:26.0328885Z ./bookstore_manangement_system.py:228: lenght ==> length
2022-06-16T11:21:26.0329389Z ./bookstore_manangement_system.py:507: FULLFILL ==> FULFILL, FULFIL
2022-06-16T11:21:26.0329731Z ./bookstore_manangement_system.py:537: FULLFILL ==> FULFILL, FULFIL
2022-06-16T11:21:26.0330028Z ./Google_News.py:34: ned ==> need
2022-06-16T11:21:26.0330275Z ./Google_News.py:35: ned ==> need
2022-06-16T11:21:26.0330536Z ./dice_rolling_simulator.py:3: Editted ==> Edited
2022-06-16T11:21:26.0330827Z ./TicTacToe.py:72: inout ==> input, in out
2022-06-16T11:21:26.0331237Z ./ML House Prediction.ipynb:495: gLYH ==> glyph
2022-06-16T11:21:26.0331555Z ./ML House Prediction.ipynb:507: hist ==> heist, his
2022-06-16T11:21:26.0331864Z ./ML House Prediction.ipynb:952: loWd ==> load, low, loud
2022-06-16T11:21:26.0332180Z ./ML House Prediction.ipynb:952: ND ==> AND, 2ND
2022-06-16T11:21:26.0332479Z ./ML House Prediction.ipynb:952: nd ==> and, 2nd
2022-06-16T11:21:26.0332885Z ./portscanner.py:15: preceeding ==> preceding, proceeding
2022-06-16T11:21:26.0333212Z ./portscanner.py:59: seperated ==> separated
2022-06-16T11:21:26.0333509Z ./AREA OF TRIANGLE:2: traingle ==> triangle
2022-06-16T11:21:26.0333796Z ./Classification_human_or_horse.py:34: sav ==> save
2022-06-16T11:21:26.0334233Z ./soundex_algorithm.py:7: dictonary ==> dictionary
2022-06-16T11:21:26.0334541Z ./soundex_algorithm.py:10: charactors ==> characters
2022-06-16T11:21:26.0334836Z ./soundex_algorithm.py:13: charactors ==> characters
2022-06-16T11:21:26.0335143Z ./soundex_algorithm.py:27: charactors ==> characters
2022-06-16T11:21:26.0335713Z ./soundex_algorithm.py:29: doen't ==> doesn't
2022-06-16T11:21:26.0336006Z ./soundex_algorithm.py:38: fucntion ==> function
2022-06-16T11:21:26.0336282Z ./days_from_date.py:2: fucntions ==> functions
2022-06-16T11:21:26.0336565Z ./days_from_date.py:28: calender ==> calendar
2022-06-16T11:21:26.0336852Z ./scrap_file.py:18: Succesfully ==> Successfully
2022-06-16T11:21:26.0337140Z ./scrap_file.py:31: Succesfully ==> Successfully
2022-06-16T11:21:26.0337434Z ./tf_idf_generator.py:95: existant ==> existent
2022-06-16T11:21:26.0337723Z ./tf_idf_generator.py:97: exising ==> existing
2022-06-16T11:21:26.0337974Z ./BruteForce.py:56: ser ==> set
2022-06-16T11:21:26.0338275Z ./CliYoutubeDownloader.py:36: currect ==> correct, current
2022-06-16T11:21:26.0338605Z ./CliYoutubeDownloader.py:58: defualt ==> default
2022-06-16T11:21:26.0338908Z ./encryptsys.py:10: indexs ==> indexes, indices
2022-06-16T11:21:26.0339430Z ./encryptsys.py:22: indexs ==> indexes, indices
2022-06-16T11:21:26.0339723Z ./encryptsys.py:27: indexs ==> indexes, indices
2022-06-16T11:21:26.0340014Z ./encryptsys.py:45: indexs ==> indexes, indices
2022-06-16T11:21:26.0340287Z ./encryptsys.py:56: indexs ==> indexes, indices
2022-06-16T11:21:26.0340569Z ./encryptsys.py:63: indexs ==> indexes, indices
2022-06-16T11:21:26.0340857Z ./encryptsys.py:64: indexs ==> indexes, indices
2022-06-16T11:21:26.0341251Z ./fileinfo.py:82: direcotry ==> directory
2022-06-16T11:21:26.0341608Z ./Python Program to Count the Number of Each Vowel:8: comparisions ==> comparisons
2022-06-16T11:21:26.0342087Z ./Snake-Water-Gun-Game.py:28: doen't ==> doesn't
2022-06-16T11:21:26.0342425Z ./Password Generator/pass_gen.py:50: automaticly ==> automatically
2022-06-16T11:21:26.0342817Z ./Password Generator/pass_gen.py:57: lenght ==> length
2022-06-16T11:21:26.0343146Z ./Password Generator/pass_gen.py:59: lenght ==> length
2022-06-16T11:21:26.0343467Z ./Password Generator/pass_gen.py:85: lenght ==> length
2022-06-16T11:21:26.0343796Z ./Sorting Algorithims/Count sort.py:6: occurences ==> occurrences
2022-06-16T11:21:26.0344379Z ./Sorting Algorithims/Merge-sort.py:28: REMAINER ==> REMAINDER
2022-06-16T11:21:26.0344730Z ./Sorting Algorithims/Counting Sort.py:15: cummulative ==> cumulative
2022-06-16T11:21:26.0345213Z ./Sorting Algorithims/Counting-sort.py:3: plase ==> place, please, phase, plaice
2022-06-16T11:21:26.0345682Z ./Sorting Algorithims/Counting-sort.py:3: seperated ==> separated
2022-06-16T11:21:26.0346190Z ./CliYoutubeDownloader/CliYoutubeDownloader.py:60: defualt ==> default
2022-06-16T11:21:26.0346555Z ./other_pepole/get_ip_gui:47: orignal ==> original
2022-06-16T11:21:26.0346851Z ./other_pepole/get_ip_gui:59: programing ==> programming
2022-06-16T11:21:26.0347145Z ./other_pepole/get_ip_gui:62: Wan ==> Want
2022-06-16T11:21:26.0347428Z ./primelib/primelib.py:45: nuber ==> number
2022-06-16T11:21:26.0347692Z ./primelib/primelib.py:136: ans ==> and
2022-06-16T11:21:26.0347962Z ./primelib/primelib.py:143: ans ==> and
2022-06-16T11:21:26.0348229Z ./primelib/primelib.py:146: ans ==> and
2022-06-16T11:21:26.0348484Z ./primelib/primelib.py:148: ans ==> and
2022-06-16T11:21:26.0348753Z ./primelib/primelib.py:163: ans ==> and
2022-06-16T11:21:26.0349020Z ./primelib/primelib.py:173: ans ==> and
2022-06-16T11:21:26.0349272Z ./primelib/primelib.py:181: ans ==> and
2022-06-16T11:21:26.0349537Z ./primelib/primelib.py:187: ans ==> and
2022-06-16T11:21:26.0349894Z ./primelib/primelib.py:190: ans ==> and
2022-06-16T11:21:26.0350151Z ./primelib/primelib.py:192: ans ==> and
2022-06-16T11:21:26.0350423Z ./primelib/primelib.py:209: ans ==> and
2022-06-16T11:21:26.0350690Z ./primelib/primelib.py:214: ans ==> and
2022-06-16T11:21:26.0350955Z ./primelib/primelib.py:217: ans ==> and
2022-06-16T11:21:26.0351338Z ./primelib/primelib.py:219: ans ==> and
2022-06-16T11:21:26.0351610Z ./primelib/primelib.py:236: ans ==> and
2022-06-16T11:21:26.3798805Z ./primelib/primelib.py:241: ans ==> and
2022-06-16T11:21:26.3799094Z ./primelib/primelib.py:244: ans ==> and
2022-06-16T11:21:26.3799352Z ./primelib/primelib.py:246: ans ==> and
2022-06-16T11:21:26.3799607Z ./primelib/primelib.py:296: ans ==> and
2022-06-16T11:21:26.3799859Z ./primelib/primelib.py:317: ans ==> and
2022-06-16T11:21:26.3800100Z ./primelib/primelib.py:318: ans ==> and
2022-06-16T11:21:26.3800467Z ./primelib/primelib.py:326: ans ==> and
2022-06-16T11:21:26.3800732Z ./primelib/primelib.py:327: ans ==> and
2022-06-16T11:21:26.3801116Z ./primelib/primelib.py:328: ans ==> and
2022-06-16T11:21:26.3801516Z ./primelib/primelib.py:328: ans ==> and
2022-06-16T11:21:26.3801800Z ./primelib/primelib.py:329: ans ==> and
2022-06-16T11:21:26.3802069Z ./primelib/primelib.py:330: ans ==> and
2022-06-16T11:21:26.3802348Z ./primelib/primelib.py:333: ans ==> and
2022-06-16T11:21:26.3802626Z ./primelib/primelib.py:387: ans ==> and
2022-06-16T11:21:26.3802892Z ./primelib/primelib.py:400: ans ==> and
2022-06-16T11:21:26.3803171Z ./primelib/primelib.py:418: ans ==> and
2022-06-16T11:21:26.3803449Z ./primelib/primelib.py:425: ans ==> and
2022-06-16T11:21:26.3803718Z ./primelib/primelib.py:437: ans ==> and
2022-06-16T11:21:26.3804001Z ./primelib/primelib.py:442: ans ==> and
2022-06-16T11:21:26.3804279Z ./primelib/primelib.py:443: ans ==> and
2022-06-16T11:21:26.3804799Z ./primelib/primelib.py:446: ans ==> and
2022-06-16T11:21:26.3805153Z ./primelib/primelib.py:463: ans ==> and
2022-06-16T11:21:26.3805519Z ./primelib/primelib.py:469: ans ==> and
2022-06-16T11:21:26.3805784Z ./primelib/primelib.py:471: ans ==> and
2022-06-16T11:21:26.3806034Z ./primelib/primelib.py:473: ans ==> and
2022-06-16T11:21:26.3806293Z ./primelib/primelib.py:474: ans ==> and
2022-06-16T11:21:26.3806552Z ./primelib/primelib.py:477: ans ==> and
2022-06-16T11:21:26.3806801Z ./primelib/primelib.py:478: ans ==> and
2022-06-16T11:21:26.3807059Z ./primelib/primelib.py:481: ans ==> and
2022-06-16T11:21:26.3807344Z ./primelib/primelib.py:491: exclusiv ==> exclusive
2022-06-16T11:21:26.3807638Z ./primelib/primelib.py:492: exclusiv ==> exclusive
2022-06-16T11:21:26.3807918Z ./primelib/primelib.py:502: ans ==> and
2022-06-16T11:21:26.3808182Z ./primelib/primelib.py:511: ans ==> and
2022-06-16T11:21:26.3808430Z ./primelib/primelib.py:521: ans ==> and
2022-06-16T11:21:26.3808690Z ./primelib/primelib.py:521: ans ==> and
2022-06-16T11:21:26.3809055Z ./primelib/primelib.py:521: ans ==> and
2022-06-16T11:21:26.3809300Z ./primelib/primelib.py:521: ans ==> and
2022-06-16T11:21:26.3809538Z ./primelib/primelib.py:525: ans ==> and
2022-06-16T11:21:26.3809972Z ./primelib/primelib.py:540: ans ==> and
2022-06-16T11:21:26.3810245Z ./primelib/primelib.py:545: ans ==> and
2022-06-16T11:21:26.3810482Z ./primelib/primelib.py:548: ans ==> and
2022-06-16T11:21:26.3810729Z ./primelib/primelib.py:548: ans ==> and
2022-06-16T11:21:26.3810975Z ./primelib/primelib.py:548: ans ==> and
2022-06-16T11:21:26.3811209Z ./primelib/primelib.py:550: ans ==> and
2022-06-16T11:21:26.3811574Z ./primelib/primelib.py:622: ans ==> and
2022-06-16T11:21:26.3811835Z ./primelib/primelib.py:625: ans ==> and
2022-06-16T11:21:26.3812083Z ./primelib/primelib.py:627: ans ==> and
2022-06-16T11:21:26.3812344Z ./primelib/primelib.py:644: ans ==> and
2022-06-16T11:21:26.3812602Z ./primelib/primelib.py:647: ans ==> and
2022-06-16T11:21:26.3812849Z ./primelib/primelib.py:648: ans ==> and
2022-06-16T11:21:26.3813113Z ./primelib/primelib.py:651: ans ==> and
2022-06-16T11:21:26.3813386Z ./primelib/README:96: exclusiv ==> exclusive
2022-06-16T11:21:26.3813776Z ./primelib/README:97: exclusiv ==> exclusive
2022-06-16T11:21:26.3814083Z ./Python_chatting_application/client.py:11: recieve ==> receive
2022-06-16T11:21:26.3814531Z ./Python_chatting_application/client.py:21: Erro ==> Error
2022-06-16T11:21:26.3814856Z ./Python_chatting_application/client.py:21: occured ==> occurred
2022-06-16T11:21:26.3815167Z ./Python_chatting_application/client.py:33: Occured ==> Occurred
2022-06-16T11:21:26.3815486Z ./Python_chatting_application/client.py:41: recieve ==> receive
2022-06-16T11:21:26.3815806Z ./Python_chatting_application/server.py:42: recieve ==> receive
2022-06-16T11:21:26.3816113Z ./Python_chatting_application/server.py:55: recieve ==> receive
2022-06-16T11:21:26.3816396Z ./PDF/images.py:11: Potrait ==> Portrait
2022-06-16T11:21:26.3816653Z ./PDF/images.py:30: potrait ==> portrait
2022-06-16T11:21:26.3816939Z ./Eight_Puzzle_Solver/eight_puzzle.py:136: ans ==> and
2022-06-16T11:21:26.3817219Z ./Eight_Puzzle_Solver/eight_puzzle.py:140: ans ==> and
2022-06-16T11:21:26.3817518Z ./Eight_Puzzle_Solver/eight_puzzle.py:141: ans ==> and
2022-06-16T11:21:26.3817941Z ./Eight_Puzzle_Solver/eight_puzzle.py:146: ans ==> and
2022-06-16T11:21:26.3818357Z ./Eight_Puzzle_Solver/eight_puzzle.py:149: ans ==> and
2022-06-16T11:21:26.3818670Z ./Eight_Puzzle_Solver/eight_puzzle.py:153: ans ==> and
2022-06-16T11:21:26.3819289Z ./Eight_Puzzle_Solver/eight_puzzle.py:153: ans ==> and
2022-06-16T11:21:26.3819612Z ./Eight_Puzzle_Solver/eight_puzzle.py:154: ans ==> and
2022-06-16T11:21:26.3821732Z ./email id dictionary/mbox-short.txt:321: couse ==> course, cause
2022-06-16T11:21:26.3822235Z ./email id dictionary/mbox-short.txt:1188: implmented ==> implemented
2022-06-16T11:21:26.3822702Z ./email id dictionary/mbox-short.txt:1188: sugested ==> suggested
2022-06-16T11:21:26.3823157Z ./email id dictionary/mbox-short.txt:1268: implmented ==> implemented
2022-06-16T11:21:26.3823616Z ./email id dictionary/mbox-short.txt:1268: sugested ==> suggested
2022-06-16T11:21:26.3824070Z ./email id dictionary/mbox-short.txt:1344: manualy ==> manually
2022-06-16T11:21:26.3824379Z ./wiki/wiki.py:58: Callibri ==> Calibri
2022-06-16T11:21:26.3824832Z ./Face and eye Recognition/face_recofnation_first.py:14: falg ==> flag
2022-06-16T11:21:26.3825194Z ./Downloaded Files Organizer/move_to_directory.py:11: archiv ==> archive
2022-06-16T11:21:26.3825644Z ./ultimate-phone-book/readme.md:8: interpretor ==> interpreter
2022-06-16T11:21:26.3826081Z ./ultimate-phone-book/readme.md:13: Contributers ==> Contributors
2022-06-16T11:21:26.3826622Z ./ultimate-phone-book/contacts.py:177: SUCESSFULLY ==> SUCCESSFULLY
2022-06-16T11:21:26.3826935Z ./JARVIS/JARVIS.py:227: whenver ==> whenever
2022-06-16T11:21:26.3827193Z ./JARVIS/JARVIS.py:249: extention ==> extension
2022-06-16T11:21:26.3827463Z ./JARVIS/JARVIS.py:250: extention ==> extension
2022-06-16T11:21:26.3827996Z ./Flappy Bird - created with tkinter/Flappy Bird.py:17: Classe ==> Class, classes
2022-06-16T11:21:26.3828445Z ./Flappy Bird - created with tkinter/Flappy Bird.py:34: eles ==> else
2022-06-16T11:21:26.3829069Z ./Flappy Bird - created with tkinter/Flappy Bird.py:35: eles ==> else
2022-06-16T11:21:26.3829571Z ./Flappy Bird - created with tkinter/Bird.py:10: Classe ==> Class, classes
2022-06-16T11:21:26.3830035Z ./Flappy Bird - created with tkinter/Bird.py:58: construtor ==> constructor
2022-06-16T11:21:26.3830460Z ./Flappy Bird - created with tkinter/Bird.py:107: erro ==> error
2022-06-16T11:21:26.3830900Z ./Flappy Bird - created with tkinter/Bird.py:145: classe ==> class, classes
2022-06-16T11:21:26.3831329Z ./Flappy Bird - created with tkinter/Bird.py:152: ser ==> set
2022-06-16T11:21:26.3831990Z ./Flappy Bird - created with tkinter/Bird.py:195: ser ==> set
2022-06-16T11:21:26.3832412Z ./Flappy Bird - created with tkinter/Bird.py:204: limite ==> limit
2022-06-16T11:21:26.3832859Z ./Flappy Bird - created with tkinter/Tubes.py:12: Classe ==> Class, classes
2022-06-16T11:21:26.3833299Z ./Flappy Bird - created with tkinter/Tubes.py:29: erro ==> error
2022-06-16T11:21:26.3833842Z ./Flappy Bird - created with tkinter/Tubes.py:207: classe ==> class, classes
2022-06-16T11:21:26.3834279Z ./Flappy Bird - created with tkinter/Tubes.py:214: ser ==> set
2022-06-16T11:21:26.3834797Z ./Flappy Bird - created with tkinter/Tubes.py:294: eles ==> else
2022-06-16T11:21:26.3835209Z ./Flappy Bird - created with tkinter/Settings.py:8: Classe ==> Class, classes
2022-06-16T11:21:26.3835627Z ./Flappy Bird - created with tkinter/Settings.py:79: ser ==> set
2022-06-16T11:21:26.3836058Z ./Flappy Bird - created with tkinter/Background.py:9: Classe ==> Class, classes
2022-06-16T11:21:26.3836514Z ./Flappy Bird - created with tkinter/Background.py:29: construtor ==> constructor
2022-06-16T11:21:26.3836957Z ./Flappy Bird - created with tkinter/Background.py:29: classe ==> class, classes
2022-06-16T11:21:26.3837398Z ./Flappy Bird - created with tkinter/Background.py:72: classe ==> class, classes
2022-06-16T11:21:26.3837869Z ./Flappy Bird - created with tkinter/Background.py:79: ser ==> set
2022-06-16T11:21:26.3838283Z ./Flappy Bird - created with tkinter/Background.py:116: itens ==> items
2022-06-16T11:21:26.3838709Z ./Flappy Bird - created with tkinter/Background.py:119: itens ==> items
2022-06-16T11:21:26.3839032Z ./bank_managment_system/frontend.py:481: fro ==> for, from
2022-06-16T11:21:26.3839320Z ./bank_managment_system/frontend.py:511: fro ==> for, from
2022-06-16T11:21:26.3839638Z ./bank_managment_system/frontend.py:623: tAge ==> stage, take, tag, tagged
2022-06-16T11:21:26.3839976Z ./bank_managment_system/backend.py:41: positon ==> position, positron
2022-06-16T11:21:26.3840316Z ./bank_managment_system/backend.py:43: positon ==> position, positron
2022-06-16T11:21:26.3840617Z ./bank_managment_system/backend.py:47: dabase ==> database
2022-06-16T11:21:26.3840908Z ./XORcipher/test_XOR_cipher.py:58: ans ==> and
2022-06-16T11:21:26.3841188Z ./XORcipher/test_XOR_cipher.py:61: ans ==> and
2022-06-16T11:21:26.3841566Z ./XORcipher/test_XOR_cipher.py:72: ans ==> and
2022-06-16T11:21:26.3841854Z ./XORcipher/test_XOR_cipher.py:75: ans ==> and
2022-06-16T11:21:26.3842145Z ./XORcipher/test_XOR_cipher.py:86: ans ==> and
2022-06-16T11:21:26.3842420Z ./XORcipher/test_XOR_cipher.py:89: ans ==> and
2022-06-16T11:21:26.3842711Z ./XORcipher/test_XOR_cipher.py:100: ans ==> and
2022-06-16T11:21:26.3842998Z ./XORcipher/test_XOR_cipher.py:103: ans ==> and
2022-06-16T11:21:26.3856048Z ./XORcipher/XOR_cipher.py:49: ans ==> and
2022-06-16T11:21:26.3863171Z ./XORcipher/XOR_cipher.py:52: ans ==> and
2022-06-16T11:21:26.3863441Z ./XORcipher/XOR_cipher.py:54: ans ==> and
2022-06-16T11:21:26.3863699Z ./XORcipher/XOR_cipher.py:74: ans ==> and
2022-06-16T11:21:26.3863962Z ./XORcipher/XOR_cipher.py:77: ans ==> and
2022-06-16T11:21:26.3864206Z ./XORcipher/XOR_cipher.py:79: ans ==> and
2022-06-16T11:21:26.3864459Z ./XORcipher/XOR_cipher.py:99: ans ==> and
2022-06-16T11:21:26.3864724Z ./XORcipher/XOR_cipher.py:102: ans ==> and
2022-06-16T11:21:26.3865096Z ./XORcipher/XOR_cipher.py:104: ans ==> and
2022-06-16T11:21:26.3865505Z ./XORcipher/XOR_cipher.py:124: ans ==> and
2022-06-16T11:21:26.3865980Z ./XORcipher/XOR_cipher.py:127: ans ==> and
2022-06-16T11:21:26.3866284Z ./XORcipher/XOR_cipher.py:129: ans ==> and
2022-06-16T11:21:26.3866604Z ./Automated Scheduled Call Reminders/caller.py:26: alloted ==> allotted
2022-06-16T11:21:26.3867201Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:58: could'nt ==> couldn't
2022-06-16T11:21:26.3867737Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:59: could'nt ==> couldn't
2022-06-16T11:21:26.3868134Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:60: pyhton ==> python
2022-06-16T11:21:26.3868652Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:103: pyhton ==> python
2022-06-16T11:21:26.3869122Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:137: pyhton ==> python
2022-06-16T11:21:26.3869570Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:26: could'nt ==> couldn't
2022-06-16T11:21:26.3870009Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:27: could'nt ==> couldn't
2022-06-16T11:21:26.3870565Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:55: could'nt ==> couldn't
2022-06-16T11:21:26.3871016Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:56: could'nt ==> couldn't
2022-06-16T11:21:26.3871440Z ./VoiceAssistant/Project_Basic_struct/textRead.py:31: could'nt ==> couldn't
2022-06-16T11:21:26.3871876Z ./VoiceAssistant/Project_Basic_struct/textRead.py:48: could'nt ==> couldn't
2022-06-16T11:21:26.3872300Z ./VoiceAssistant/Project_Basic_struct/textRead.py:82: could'nt ==> couldn't
2022-06-16T11:21:26.3872723Z ./VoiceAssistant/Project_Basic_struct/textRead.py:83: could'nt ==> couldn't
2022-06-16T11:21:26.4701872Z ./VoiceAssistant/Project_Basic_struct/textRead.py:193: could'nt ==> couldn't
2022-06-16T11:21:26.4702437Z ./VoiceAssistant/Project_Basic_struct/textRead.py:194: could'nt ==> couldn't
2022-06-16T11:21:26.4702865Z ./text-to-audio/README.md:21: initilise ==> initialise, initialize
2022-06-16T11:21:26.4703190Z ./Checker_game_by_dz/first.py:8: statics ==> statistics
2022-06-16T11:21:26.4703513Z ./Checker_game_by_dz/first.py:9: statics ==> statistics
2022-06-16T11:21:26.4703804Z ./Checker_game_by_dz/modules/__init__.py:2: Auhtor ==> Author
2022-06-16T11:21:26.4704119Z ./Checker_game_by_dz/modules/checker.py:8: statics ==> statistics
2022-06-16T11:21:26.4704443Z ./Checker_game_by_dz/modules/pieces.py:6: statics ==> statistics
2022-06-16T11:21:26.4704760Z ./Checker_game_by_dz/modules/checker_board.py:7: statics ==> statistics
2022-06-16T11:21:26.4705163Z ./BoardGame-CLI/snakeLadder.py:6: vaiable ==> variable
2022-06-16T11:21:26.4705543Z ./BoardGame-CLI/snakeLadder.py:26: funtion ==> function
2022-06-16T11:21:26.4705904Z ./BoardGame-CLI/snakeLadder.py:86: ans ==> and
2022-06-16T11:21:26.4706254Z ./BoardGame-CLI/snakeLadder.py:88: vaiable ==> variable
2022-06-16T11:21:26.4706580Z ./1 File handle/File handle text/question3.py:12: arguement ==> argument
2022-06-16T11:21:26.4706933Z ./1 File handle/File handle binary/Update a binary file.py:13: currrent ==> current
2022-06-16T11:21:26.4707255Z ./Wordle/Dictionary.txt:373: abord ==> abort, aboard
2022-06-16T11:21:26.4707664Z ./Wordle/Dictionary.txt:669: abundancies ==> abundances
2022-06-16T11:21:26.4709146Z ./Wordle/Dictionary.txt:836: accension ==> accession, ascension
2022-06-16T11:21:26.4709494Z ./Wordle/Dictionary.txt:1008: accompt ==> account
2022-06-16T11:21:26.4709803Z ./Wordle/Dictionary.txt:1093: accreting ==> accrediting
2022-06-16T11:21:26.4710127Z ./Wordle/Dictionary.txt:1424: acquited ==> acquitted
2022-06-16T11:21:26.4710451Z ./Wordle/Dictionary.txt:2282: advertize ==> advertise
2022-06-16T11:21:26.4711075Z ./Wordle/Dictionary.txt:2287: advertizes ==> advertises
2022-06-16T11:21:26.4711416Z ./Wordle/Dictionary.txt:2606: afficionado ==> aficionado
2022-06-16T11:21:26.4711761Z ./Wordle/Dictionary.txt:2607: afficionados ==> aficionados
2022-06-16T11:21:26.4712066Z ./Wordle/Dictionary.txt:3010: agin ==> again
2022-06-16T11:21:26.4712387Z ./Wordle/Dictionary.txt:3150: agregation ==> aggregation
2022-06-16T11:21:26.4712707Z ./Wordle/Dictionary.txt:3471: ake ==> ache
2022-06-16T11:21:26.4713487Z ./Wordle/Dictionary.txt:3850: algebraical ==> algebraic
2022-06-16T11:21:26.4713849Z ./Wordle/Dictionary.txt:3964: aline ==> align, a line, line, saline
2022-06-16T11:21:26.4714383Z ./Wordle/Dictionary.txt:3967: alined ==> aligned
2022-06-16T11:21:26.4714654Z ./Wordle/Dictionary.txt:4245: alloted ==> allotted
2022-06-16T11:21:26.4714915Z ./Wordle/Dictionary.txt:4275: alls ==> all, falls
2022-06-16T11:21:26.4715179Z ./Wordle/Dictionary.txt:4387: alow ==> allow
2022-06-16T11:21:26.4715438Z ./Wordle/Dictionary.txt:4443: als ==> also
2022-06-16T11:21:26.4715703Z ./Wordle/Dictionary.txt:4476: alterative ==> alternative
2022-06-16T11:21:26.4715982Z ./Wordle/Dictionary.txt:4588: alway ==> always
2022-06-16T11:21:26.4716259Z ./Wordle/Dictionary.txt:4859: amened ==> amended, amend
2022-06-16T11:21:26.4716538Z ./Wordle/Dictionary.txt:5687: androgenous ==> androgynous
2022-06-16T11:21:26.4716812Z ./Wordle/Dictionary.txt:5710: ane ==> and
2022-06-16T11:21:26.4717196Z ./Wordle/Dictionary.txt:6288: anonyms ==> anonymous
2022-06-16T11:21:26.4717462Z ./Wordle/Dictionary.txt:6316: ans ==> and
2022-06-16T11:21:26.4717729Z ./Wordle/Dictionary.txt:7581: appliable ==> applicable
2022-06-16T11:21:26.4718149Z ./Wordle/Dictionary.txt:8007: arbitral ==> arbitrary
2022-06-16T11:21:26.4718446Z ./Wordle/Dictionary.txt:8826: arry ==> array, carry
2022-06-16T11:21:26.4718736Z ./Wordle/Dictionary.txt:9885: atheistical ==> atheistic
2022-06-16T11:21:26.4719035Z ./Wordle/Dictionary.txt:10005: atomical ==> atomic
2022-06-16T11:21:26.4719560Z ./Wordle/Dictionary.txt:10091: attache ==> attaché, attached, attach
2022-06-16T11:21:26.4719927Z ./Wordle/Dictionary.txt:10762: automatical ==> automatically, automatic, automated
2022-06-16T11:21:26.4720278Z ./Wordle/Dictionary.txt:10776: automatize ==> automate
2022-06-16T11:21:26.4720588Z ./Wordle/Dictionary.txt:10777: automatized ==> automated
2022-06-16T11:21:26.4721003Z ./Wordle/Dictionary.txt:10778: automatizes ==> automates
2022-06-16T11:21:26.4721422Z ./Wordle/Dictionary.txt:10885: auxiliar ==> auxiliary
2022-06-16T11:21:26.4721725Z ./Wordle/Dictionary.txt:11136: aways ==> always, away
2022-06-16T11:21:26.4722011Z ./Wordle/Dictionary.txt:11230: axises ==> axes
2022-06-16T11:21:26.4722278Z ./Wordle/Dictionary.txt:11353: ba ==> by, be
2022-06-16T11:21:26.4722563Z ./Wordle/Dictionary.txt:11725: backword ==> backward
2022-06-16T11:21:26.4722862Z ./Wordle/Dictionary.txt:11726: backwords ==> backwards
2022-06-16T11:21:26.4723143Z ./Wordle/Dictionary.txt:11783: bacup ==> backup
2022-06-16T11:21:26.4723426Z ./Wordle/Dictionary.txt:12074: bale ==> able
2022-06-16T11:21:26.4723707Z ./Wordle/Dictionary.txt:14383: belive ==> believe
2022-06-16T11:21:26.4723981Z ./Wordle/Dictionary.txt:14435: bellow ==> below
2022-06-16T11:21:26.4724276Z ./Wordle/Dictionary.txt:14484: belove ==> below, beloved
2022-06-16T11:21:26.4724572Z ./Wordle/Dictionary.txt:14927: beseige ==> besiege
2022-06-16T11:21:26.4724862Z ./Wordle/Dictionary.txt:15215: bever ==> never
2022-06-16T11:21:26.4725139Z ./Wordle/Dictionary.txt:15700: billon ==> billion
2022-06-16T11:21:26.4725433Z ./Wordle/Dictionary.txt:15802: binominal ==> binomial
2022-06-16T11:21:26.4725721Z ./Wordle/Dictionary.txt:16793: bloc ==> block
2022-06-16T11:21:26.4725988Z ./Wordle/Dictionary.txt:16818: blocs ==> blocks
2022-06-16T11:21:26.4726289Z ./Wordle/Dictionary.txt:17981: bord ==> board, bored, border
2022-06-16T11:21:26.4726586Z ./Wordle/Dictionary.txt:18549: brach ==> branch
2022-06-16T11:21:26.4726857Z ./Wordle/Dictionary.txt:19560: brocken ==> broken
2022-06-16T11:21:26.4727149Z ./Wordle/Dictionary.txt:19735: brose ==> browse, rose
2022-06-16T11:21:26.4727439Z ./Wordle/Dictionary.txt:20203: builded ==> built
2022-06-16T11:21:26.4727719Z ./Wordle/Dictionary.txt:20880: buss ==> bus
2022-06-16T11:21:26.4728109Z ./Wordle/Dictionary.txt:20882: busses ==> buses
2022-06-16T11:21:26.4728411Z ./Wordle/Dictionary.txt:21418: caesarian ==> caesarean
2022-06-16T11:21:26.4728728Z ./Wordle/Dictionary.txt:21697: calender ==> calendar
2022-06-16T11:21:26.4729124Z ./Wordle/Dictionary.txt:21700: calenders ==> calendars
2022-06-16T11:21:26.4729463Z ./Wordle/Dictionary.txt:22246: cancelation ==> cancellation
2022-06-16T11:21:26.4729777Z ./Wordle/Dictionary.txt:22384: cann ==> can
2022-06-16T11:21:26.4730063Z ./Wordle/Dictionary.txt:22425: cannister ==> canister
2022-06-16T11:21:26.4730421Z ./Wordle/Dictionary.txt:22505: cant ==> can't
2022-06-16T11:21:26.4730724Z ./Wordle/Dictionary.txt:22978: caractere ==> character
2022-06-16T11:21:26.4731152Z ./Wordle/Dictionary.txt:24130: catched ==> caught
2022-06-16T11:21:26.4731428Z ./Wordle/Dictionary.txt:25073: cerate ==> create
2022-06-16T11:21:26.4731718Z ./Wordle/Dictionary.txt:25509: chambre ==> chamber
2022-06-16T11:21:26.4732009Z ./Wordle/Dictionary.txt:25571: chancel ==> cancel
2022-06-16T11:21:26.4732287Z ./Wordle/Dictionary.txt:25581: chancels ==> cancels
2022-06-16T11:21:26.4732575Z ./Wordle/Dictionary.txt:25612: chanel ==> channel
2022-06-16T11:21:26.4732946Z ./Wordle/Dictionary.txt:25823: charas ==> chars
2022-06-16T11:21:26.4733221Z ./Wordle/Dictionary.txt:27278: choos ==> choose
2022-06-16T11:21:26.4733525Z ./Wordle/Dictionary.txt:27421: chouse ==> choose, chose, choux
2022-06-16T11:21:26.4733843Z ./Wordle/Dictionary.txt:28096: circularly ==> circular
2022-06-16T11:21:26.4734124Z ./Wordle/Dictionary.txt:28532: clame ==> claim
2022-06-16T11:21:26.4734407Z ./Wordle/Dictionary.txt:28791: claus ==> clause
2022-06-16T11:21:26.4734685Z ./Wordle/Dictionary.txt:28925: cleck ==> check
2022-06-16T11:21:26.4734964Z ./Wordle/Dictionary.txt:29340: clos ==> close
2022-06-16T11:21:26.4735252Z ./Wordle/Dictionary.txt:30492: collapsable ==> collapsible
2022-06-16T11:21:26.4735561Z ./Wordle/Dictionary.txt:30950: combinate ==> combine
2022-06-16T11:21:26.4735864Z ./Wordle/Dictionary.txt:31091: commandoes ==> commandos
2022-06-16T11:21:26.4736163Z ./Wordle/Dictionary.txt:31121: commend ==> comment, command
2022-06-16T11:21:26.4736484Z ./Wordle/Dictionary.txt:31134: commends ==> comments, commands
2022-06-16T11:21:26.4736805Z ./Wordle/Dictionary.txt:31386: commutated ==> commuted
2022-06-16T11:21:26.4737097Z ./Wordle/Dictionary.txt:31388: commutating ==> commuting
2022-06-16T11:21:26.4737409Z ./Wordle/Dictionary.txt:31605: compleated ==> completed
2022-06-16T11:21:26.4737723Z ./Wordle/Dictionary.txt:31606: compleating ==> completing
2022-06-16T11:21:26.4738162Z ./Wordle/Dictionary.txt:31659: compliancy ==> compliance
2022-06-16T11:21:26.4738466Z ./Wordle/Dictionary.txt:31677: complier ==> compiler
2022-06-16T11:21:26.4738779Z ./Wordle/Dictionary.txt:31678: compliers ==> compilers
2022-06-16T11:21:26.4739257Z ./Wordle/Dictionary.txt:32387: confectionary ==> confectionery
2022-06-16T11:21:26.4739587Z ./Wordle/Dictionary.txt:32903: connexion ==> connection
2022-06-16T11:21:26.4739922Z ./Wordle/Dictionary.txt:33041: consequentially ==> consequently
2022-06-16T11:21:26.4740265Z ./Wordle/Dictionary.txt:33123: consisently ==> consistently
2022-06-16T11:21:26.4740587Z ./Wordle/Dictionary.txt:33331: constructer ==> constructor
2022-06-16T11:21:26.4741043Z ./Wordle/Dictionary.txt:33332: constructers ==> constructors
2022-06-16T11:21:26.4741367Z ./Wordle/Dictionary.txt:33349: constructure ==> constructor
2022-06-16T11:21:26.4741689Z ./Wordle/Dictionary.txt:33624: contiguities ==> continuities
2022-06-16T11:21:26.4742094Z ./Wordle/Dictionary.txt:33673: continuos ==> continuous
2022-06-16T11:21:26.4742410Z ./Wordle/Dictionary.txt:33868: controle ==> control, controlled, controller
2022-06-16T11:21:26.4742723Z ./Wordle/Dictionary.txt:34038: convertor ==> converter
2022-06-16T11:21:26.4743123Z ./Wordle/Dictionary.txt:34039: convertors ==> converters
2022-06-16T11:21:26.4743426Z ./Wordle/Dictionary.txt:34060: conveyer ==> conveyor
2022-06-16T11:21:26.4743715Z ./Wordle/Dictionary.txt:34141: coo ==> coup
2022-06-16T11:21:26.4744018Z ./Wordle/Dictionary.txt:34366: copping ==> coping, copying, cropping
2022-06-16T11:21:26.4744346Z ./Wordle/Dictionary.txt:34370: coppy ==> copy, choppy
2022-06-16T11:21:26.4744642Z ./Wordle/Dictionary.txt:35022: corse ==> course
2022-06-16T11:21:26.4745027Z ./Wordle/Dictionary.txt:35771: couter ==> counter
2022-06-16T11:21:26.4745349Z ./Wordle/Dictionary.txt:35772: couters ==> counters, routers, scouters
2022-06-16T11:21:26.4745668Z ./Wordle/Dictionary.txt:35836: covert ==> convert
2022-06-16T11:21:26.4745958Z ./Wordle/Dictionary.txt:36227: crasher ==> crash
2022-06-16T11:21:26.4746233Z ./Wordle/Dictionary.txt:36245: crate ==> create
2022-06-16T11:21:26.4746515Z ./Wordle/Dictionary.txt:36246: crated ==> created
2022-06-16T11:21:26.4746917Z ./Wordle/Dictionary.txt:36389: creche ==> crèche
2022-06-16T11:21:26.4747193Z ./Wordle/Dictionary.txt:37366: crusies ==> cruises
2022-06-16T11:21:26.4747479Z ./Wordle/Dictionary.txt:37966: curch ==> church
2022-06-16T11:21:26.4747764Z ./Wordle/Dictionary.txt:38092: curser ==> cursor
2022-06-16T11:21:26.4748232Z ./Wordle/Dictionary.txt:38245: customable ==> customizable
2022-06-16T11:21:26.4748540Z ./Wordle/Dictionary.txt:38965: dalmation ==> dalmatian
2022-06-16T11:21:26.4748944Z ./Wordle/Dictionary.txt:39306: dashs ==> dashes
2022-06-16T11:21:26.4749235Z ./Wordle/Dictionary.txt:39582: dealed ==> dealt
2022-06-16T11:21:26.4749529Z ./Wordle/Dictionary.txt:39695: debateable ==> debatable
2022-06-16T11:21:26.4749853Z ./Wordle/Dictionary.txt:40582: deductable ==> deductible
2022-06-16T11:21:26.4750161Z ./Wordle/Dictionary.txt:41248: delate ==> delete
2022-06-16T11:21:26.4750461Z ./Wordle/Dictionary.txt:42305: dependance ==> dependence
2022-06-16T11:21:26.4750785Z ./Wordle/Dictionary.txt:42306: dependancy ==> dependency
2022-06-16T11:21:26.4751317Z ./Wordle/Dictionary.txt:42307: dependant ==> dependent
2022-06-16T11:21:26.4751583Z ./Wordle/Dictionary.txt:42635: derails ==> details
2022-06-16T11:21:26.4751852Z ./Wordle/Dictionary.txt:42792: derth ==> dearth
2022-06-16T11:21:26.5516639Z ./Wordle/Dictionary.txt:43101: despatch ==> dispatch
2022-06-16T11:21:26.5516990Z ./Wordle/Dictionary.txt:43188: dessicate ==> desiccate
2022-06-16T11:21:26.5517325Z ./Wordle/Dictionary.txt:43288: detatched ==> detached
2022-06-16T11:21:26.5517638Z ./Wordle/Dictionary.txt:43577: develope ==> develop
2022-06-16T11:21:26.5517926Z ./Wordle/Dictionary.txt:43587: devels ==> delves
2022-06-16T11:21:26.5518221Z ./Wordle/Dictionary.txt:44123: diaster ==> disaster
2022-06-16T11:21:26.5518524Z ./Wordle/Dictionary.txt:44567: digitalise ==> digitize
2022-06-16T11:21:26.5518825Z ./Wordle/Dictionary.txt:44570: digitalising ==> digitizing
2022-06-16T11:21:26.5519138Z ./Wordle/Dictionary.txt:44572: digitalize ==> digitize
2022-06-16T11:21:26.5519968Z ./Wordle/Dictionary.txt:44575: digitalizing ==> digitizing
2022-06-16T11:21:26.5520325Z ./Wordle/Dictionary.txt:45693: discontentment ==> discontent
2022-06-16T11:21:26.5520650Z ./Wordle/Dictionary.txt:46599: dispence ==> dispense
2022-06-16T11:21:26.5520964Z ./Wordle/Dictionary.txt:47670: doble ==> double
2022-06-16T11:21:26.5521272Z ./Wordle/Dictionary.txt:47671: dobles ==> doubles
2022-06-16T11:21:26.5521576Z ./Wordle/Dictionary.txt:47742: doctorial ==> doctoral
2022-06-16T11:21:26.5521901Z ./Wordle/Dictionary.txt:48242: donnot ==> do not
2022-06-16T11:21:26.5522206Z ./Wordle/Dictionary.txt:48437: dorp ==> drop
2022-06-16T11:21:26.5522493Z ./Wordle/Dictionary.txt:48806: dows ==> does
2022-06-16T11:21:26.5522907Z ./Wordle/Dictionary.txt:49046: drats ==> drafts
2022-06-16T11:21:26.5523209Z ./Wordle/Dictionary.txt:49056: draughtman ==> draughtsman
2022-06-16T11:21:26.5523501Z ./Wordle/Dictionary.txt:49802: dum ==> dumb
2022-06-16T11:21:26.5523771Z ./Wordle/Dictionary.txt:50459: earlies ==> earliest
2022-06-16T11:21:26.5524070Z ./Wordle/Dictionary.txt:52266: embargos ==> embargoes
2022-06-16T11:21:26.5524492Z ./Wordle/Dictionary.txt:52275: embarras ==> embarrass
2022-06-16T11:21:26.5524782Z ./Wordle/Dictionary.txt:53537: enflamed ==> inflamed
2022-06-16T11:21:26.5525094Z ./Wordle/Dictionary.txt:53986: ensconsed ==> ensconced
2022-06-16T11:21:26.5525400Z ./Wordle/Dictionary.txt:54210: entires ==> entries
2022-06-16T11:21:26.5525685Z ./Wordle/Dictionary.txt:55977: ethe ==> the
2022-06-16T11:21:26.5526312Z ./Wordle/Dictionary.txt:56955: excentric ==> eccentric
2022-06-16T11:21:26.5526643Z ./Wordle/Dictionary.txt:57250: exemple ==> example
2022-06-16T11:21:26.5526937Z ./Wordle/Dictionary.txt:57919: expresso ==> espresso
2022-06-16T11:21:26.5527268Z ./Wordle/Dictionary.txt:58282: extraversion ==> extroversion
2022-06-16T11:21:26.5527595Z ./Wordle/Dictionary.txt:58285: extravert ==> extrovert
2022-06-16T11:21:26.5527914Z ./Wordle/Dictionary.txt:58288: extraverts ==> extroverts
2022-06-16T11:21:26.5528209Z ./Wordle/Dictionary.txt:58907: fallow ==> follow
2022-06-16T11:21:26.5528515Z ./Wordle/Dictionary.txt:58908: fallowed ==> followed
2022-06-16T11:21:26.5528828Z ./Wordle/Dictionary.txt:58909: fallowing ==> following
2022-06-16T11:21:26.5529119Z ./Wordle/Dictionary.txt:58911: fallows ==> follows
2022-06-16T11:21:26.5529413Z ./Wordle/Dictionary.txt:59515: fave ==> save
2022-06-16T11:21:26.5529706Z ./Wordle/Dictionary.txt:60502: fiddley ==> fiddly
2022-06-16T11:21:26.5530122Z ./Wordle/Dictionary.txt:60623: fightings ==> fighting
2022-06-16T11:21:26.5530450Z ./Wordle/Dictionary.txt:60745: fille ==> file, fill, filled
2022-06-16T11:21:26.5530782Z ./Wordle/Dictionary.txt:60749: filles ==> files, fills, filled
2022-06-16T11:21:26.5531112Z ./Wordle/Dictionary.txt:60803: fils ==> fills, files, file
2022-06-16T11:21:26.5531442Z ./Wordle/Dictionary.txt:61289: fixe ==> fixed, fixes, fix, fixme, fixer
2022-06-16T11:21:26.5531781Z ./Wordle/Dictionary.txt:61966: floatation ==> flotation
2022-06-16T11:21:26.5532105Z ./Wordle/Dictionary.txt:62088: florescent ==> fluorescent
2022-06-16T11:21:26.5532395Z ./Wordle/Dictionary.txt:62472: fo ==> of, for
2022-06-16T11:21:26.5532691Z ./Wordle/Dictionary.txt:62519: focussed ==> focused
2022-06-16T11:21:26.5532995Z ./Wordle/Dictionary.txt:62520: focusses ==> focuses
2022-06-16T11:21:26.5533294Z ./Wordle/Dictionary.txt:62699: followings ==> following
2022-06-16T11:21:26.5533598Z ./Wordle/Dictionary.txt:62921: forbad ==> forbade
2022-06-16T11:21:26.5533919Z ./Wordle/Dictionary.txt:63297: foreward ==> foreword, forward
2022-06-16T11:21:26.5534237Z ./Wordle/Dictionary.txt:63462: formate ==> format
2022-06-16T11:21:26.5534529Z ./Wordle/Dictionary.txt:63463: formated ==> formatted
2022-06-16T11:21:26.5534831Z ./Wordle/Dictionary.txt:63464: formates ==> formats
2022-06-16T11:21:26.5535143Z ./Wordle/Dictionary.txt:63465: formating ==> formatting
2022-06-16T11:21:26.5535443Z ./Wordle/Dictionary.txt:63481: formes ==> forms, formed
2022-06-16T11:21:26.5535744Z ./Wordle/Dictionary.txt:63803: fount ==> found
2022-06-16T11:21:26.5536036Z ./Wordle/Dictionary.txt:63846: fouth ==> fourth
2022-06-16T11:21:26.5536334Z ./Wordle/Dictionary.txt:64359: frequences ==> frequencies
2022-06-16T11:21:26.5536642Z ./Wordle/Dictionary.txt:64598: frist ==> first
2022-06-16T11:21:26.5536934Z ./Wordle/Dictionary.txt:64649: fro ==> for, from
2022-06-16T11:21:26.5537227Z ./Wordle/Dictionary.txt:64700: frome ==> from
2022-06-16T11:21:26.5537507Z ./Wordle/Dictionary.txt:64784: froward ==> forward
2022-06-16T11:21:26.5537828Z ./Wordle/Dictionary.txt:65016: fulfilment ==> fulfillment
2022-06-16T11:21:26.5538140Z ./Wordle/Dictionary.txt:65210: funguses ==> fungi
2022-06-16T11:21:26.5538421Z ./Wordle/Dictionary.txt:66282: gard ==> guard
2022-06-16T11:21:26.5538993Z ./Wordle/Dictionary.txt:66284: gardai ==> gardaí
2022-06-16T11:21:26.5539499Z ./Wordle/Dictionary.txt:66723: gaus ==> gauss, gauze
2022-06-16T11:21:26.5539803Z ./Wordle/Dictionary.txt:67414: geometrician ==> geometer
2022-06-16T11:21:26.5540130Z ./Wordle/Dictionary.txt:67415: geometricians ==> geometers
2022-06-16T11:21:26.5540438Z ./Wordle/Dictionary.txt:68117: gird ==> grid
2022-06-16T11:21:26.5540712Z ./Wordle/Dictionary.txt:68131: girds ==> grids
2022-06-16T11:21:26.5541008Z ./Wordle/Dictionary.txt:69470: gool ==> ghoul
2022-06-16T11:21:26.5541298Z ./Wordle/Dictionary.txt:70295: grat ==> great
2022-06-16T11:21:26.5541603Z ./Wordle/Dictionary.txt:71317: guarantied ==> guaranteed
2022-06-16T11:21:26.5541915Z ./Wordle/Dictionary.txt:71375: gude ==> guide, good
2022-06-16T11:21:26.5542342Z ./Wordle/Dictionary.txt:71402: guerilla ==> guerrilla
2022-06-16T11:21:26.5542678Z ./Wordle/Dictionary.txt:71403: guerillas ==> guerrillas
2022-06-16T11:21:26.5542979Z ./Wordle/Dictionary.txt:72715: hampster ==> hamster
2022-06-16T11:21:26.5543278Z ./Wordle/Dictionary.txt:72777: handel ==> handle
2022-06-16T11:21:26.5543575Z ./Wordle/Dictionary.txt:72778: hander ==> handler
2022-06-16T11:21:26.5543885Z ./Wordle/Dictionary.txt:72989: happing ==> happening, happen
2022-06-16T11:21:26.5544207Z ./Wordle/Dictionary.txt:73329: hart ==> heart, harm
2022-06-16T11:21:26.5544506Z ./Wordle/Dictionary.txt:73383: hask ==> hash
2022-06-16T11:21:26.5544793Z ./Wordle/Dictionary.txt:73392: hass ==> hash
2022-06-16T11:21:26.5545183Z ./Wordle/Dictionary.txt:74048: heathy ==> healthy
2022-06-16T11:21:26.5545476Z ./Wordle/Dictionary.txt:74264: heigh ==> height, high
2022-06-16T11:21:26.5545900Z ./Wordle/Dictionary.txt:74306: hel ==> help, hell, heal
2022-06-16T11:21:26.5546418Z ./Wordle/Dictionary.txt:75465: hided ==> hidden, hid
2022-06-16T11:21:26.5546738Z ./Wordle/Dictionary.txt:75584: highjack ==> hijack
2022-06-16T11:21:26.5547058Z ./Wordle/Dictionary.txt:75613: hight ==> height, high
2022-06-16T11:21:26.5547356Z ./Wordle/Dictionary.txt:75620: hights ==> height
2022-06-16T11:21:26.5547675Z ./Wordle/Dictionary.txt:75717: hinderance ==> hindrance
2022-06-16T11:21:26.5547993Z ./Wordle/Dictionary.txt:75932: hist ==> heist, his
2022-06-16T11:21:26.5548322Z ./Wordle/Dictionary.txt:76654: homogenious ==> homogeneous
2022-06-16T11:21:26.5548657Z ./Wordle/Dictionary.txt:76655: homogeniously ==> homogeneously
2022-06-16T11:21:26.5549004Z ./Wordle/Dictionary.txt:76670: homogenous ==> homogeneous
2022-06-16T11:21:26.5549462Z ./Wordle/Dictionary.txt:77511: hove ==> have, hover, love
2022-06-16T11:21:26.5549870Z ./Wordle/Dictionary.txt:77746: humber ==> number
2022-06-16T11:21:26.5550151Z ./Wordle/Dictionary.txt:79880: imbed ==> embed
2022-06-16T11:21:26.5550446Z ./Wordle/Dictionary.txt:79881: imbedded ==> embedded
2022-06-16T11:21:26.5550735Z ./Wordle/Dictionary.txt:79882: imbedding ==> embedding
2022-06-16T11:21:26.5551045Z ./Wordle/Dictionary.txt:80305: impassible ==> impassable
2022-06-16T11:21:26.5551344Z ./Wordle/Dictionary.txt:80765: impot ==> import
2022-06-16T11:21:26.5551630Z ./Wordle/Dictionary.txt:81005: inactivate ==> deactivate
2022-06-16T11:21:26.5551924Z ./Wordle/Dictionary.txt:81232: incase ==> in case
2022-06-16T11:21:26.5552213Z ./Wordle/Dictionary.txt:81717: incudes ==> includes
2022-06-16T11:21:26.5552514Z ./Wordle/Dictionary.txt:81885: indention ==> indentation
2022-06-16T11:21:26.5552826Z ./Wordle/Dictionary.txt:82082: indispensible ==> indispensable
2022-06-16T11:21:26.5553135Z ./Wordle/Dictionary.txt:82116: indite ==> indict
2022-06-16T11:21:26.5553413Z ./Wordle/Dictionary.txt:82411: ines ==> lines
2022-06-16T11:21:26.5553695Z ./Wordle/Dictionary.txt:82557: infarction ==> infraction
2022-06-16T11:21:26.5553998Z ./Wordle/Dictionary.txt:82611: inferrable ==> inferable
2022-06-16T11:21:26.5554303Z ./Wordle/Dictionary.txt:82781: inforce ==> enforce
2022-06-16T11:21:26.5554583Z ./Wordle/Dictionary.txt:82782: inforced ==> enforced
2022-06-16T11:21:26.5554874Z ./Wordle/Dictionary.txt:83242: inly ==> only
2022-06-16T11:21:26.5555151Z ./Wordle/Dictionary.txt:83458: inro ==> into
2022-06-16T11:21:26.5555430Z ./Wordle/Dictionary.txt:83773: instal ==> install
2022-06-16T11:21:26.5555712Z ./Wordle/Dictionary.txt:84148: intension ==> intention
2022-06-16T11:21:26.5556023Z ./Wordle/Dictionary.txt:84149: intensional ==> intentional
2022-06-16T11:21:26.5556359Z ./Wordle/Dictionary.txt:84152: intensitive ==> insensitive, intensive
2022-06-16T11:21:26.5556806Z ./Wordle/Dictionary.txt:84729: interpolar ==> interpolator
2022-06-16T11:21:26.5557264Z ./Wordle/Dictionary.txt:84769: interpretor ==> interpreter
2022-06-16T11:21:26.5557613Z ./Wordle/Dictionary.txt:84825: interruptable ==> interruptible
2022-06-16T11:21:26.5557952Z ./Wordle/Dictionary.txt:84837: interruptors ==> interrupters
2022-06-16T11:21:26.5558376Z ./Wordle/Dictionary.txt:85256: intrusted ==> entrusted
2022-06-16T11:21:26.5558720Z ./Wordle/Dictionary.txt:86988: jaques ==> jacques
2022-06-16T11:21:26.5559026Z ./Wordle/Dictionary.txt:88299: jus ==> just
2022-06-16T11:21:26.5559314Z ./Wordle/Dictionary.txt:88345: justs ==> just
2022-06-16T11:21:26.5559626Z ./Wordle/Dictionary.txt:88790: kazakstan ==> kazakhstan
2022-06-16T11:21:26.5559938Z ./Wordle/Dictionary.txt:89114: ket ==> kept
2022-06-16T11:21:26.5560509Z ./Wordle/Dictionary.txt:89965: knifes ==> knives
2022-06-16T11:21:26.5560794Z ./Wordle/Dictionary.txt:89994: knive ==> knife
2022-06-16T11:21:26.5561074Z ./Wordle/Dictionary.txt:92064: layed ==> laid
2022-06-16T11:21:26.5561359Z ./Wordle/Dictionary.txt:92132: leaded ==> led, lead
2022-06-16T11:21:26.5561632Z ./Wordle/Dictionary.txt:92248: leary ==> leery
2022-06-16T11:21:26.5561921Z ./Wordle/Dictionary.txt:92249: leas ==> least, lease
2022-06-16T11:21:26.5562230Z ./Wordle/Dictionary.txt:92279: leat ==> lead, leak, least, leaf
2022-06-16T11:21:26.5562617Z ./Wordle/Dictionary.txt:92294: leats ==> least
2022-06-16T11:21:26.5562906Z ./Wordle/Dictionary.txt:92589: leibnitz ==> leibniz
2022-06-16T11:21:26.5563198Z ./Wordle/Dictionary.txt:93459: lifes ==> lives
2022-06-16T11:21:26.5563498Z ./Wordle/Dictionary.txt:93514: lightening ==> lightning, lighting
2022-06-16T11:21:26.5563826Z ./Wordle/Dictionary.txt:93550: lightyears ==> light years
2022-06-16T11:21:26.5564124Z ./Wordle/Dictionary.txt:93947: linz ==> lines
2022-06-16T11:21:26.5564414Z ./Wordle/Dictionary.txt:94014: lippizaner ==> lipizzaner
2022-06-16T11:21:26.5564719Z ./Wordle/Dictionary.txt:94085: liquify ==> liquefy
2022-06-16T11:21:26.5565006Z ./Wordle/Dictionary.txt:94351: lits ==> list
2022-06-16T11:21:26.5565289Z ./Wordle/Dictionary.txt:94515: loafing ==> loading
2022-06-16T11:21:26.5565595Z ./Wordle/Dictionary.txt:94811: logarithmical ==> logarithmically
2022-06-16T11:21:26.5565923Z ./Wordle/Dictionary.txt:95010: longe ==> longer, lounge
2022-06-16T11:21:26.5566229Z ./Wordle/Dictionary.txt:95121: loos ==> loose, lose
2022-06-16T11:21:26.5566510Z ./Wordle/Dictionary.txt:95139: loosing ==> losing
2022-06-16T11:21:26.6493651Z ./Wordle/Dictionary.txt:95362: lousily ==> loosely
2022-06-16T11:21:26.6494046Z ./Wordle/Dictionary.txt:95741: lumination ==> lamination, illumination
2022-06-16T11:21:26.6494420Z ./Wordle/Dictionary.txt:97043: maks ==> mask, masks, makes, make
2022-06-16T11:21:26.6494754Z ./Wordle/Dictionary.txt:97619: manger ==> manager
2022-06-16T11:21:26.6495065Z ./Wordle/Dictionary.txt:98091: marge ==> merge
2022-06-16T11:21:26.6495367Z ./Wordle/Dictionary.txt:98135: mariage ==> marriage
2022-06-16T11:21:26.6498099Z ./Wordle/Dictionary.txt:98775: mata ==> meta, mater
2022-06-16T11:21:26.6498484Z ./Wordle/Dictionary.txt:98825: mater ==> matter, master, mother
2022-06-16T11:21:26.6498816Z ./Wordle/Dictionary.txt:99543: medias ==> media, mediums
2022-06-16T11:21:26.6499324Z ./Wordle/Dictionary.txt:99669: meeds ==> needs
2022-06-16T11:21:26.6499656Z ./Wordle/Dictionary.txt:100215: ment ==> meant
2022-06-16T11:21:26.6499970Z ./Wordle/Dictionary.txt:101002: methos ==> methods, method
2022-06-16T11:21:26.6500305Z ./Wordle/Dictionary.txt:101629: midwifes ==> midwives
2022-06-16T11:21:26.6500618Z ./Wordle/Dictionary.txt:101692: milage ==> mileage
2022-06-16T11:21:26.6500934Z ./Wordle/Dictionary.txt:101693: milages ==> mileages
2022-06-16T11:21:26.6501237Z ./Wordle/Dictionary.txt:101732: miliary ==> military
2022-06-16T11:21:26.6501559Z ./Wordle/Dictionary.txt:101820: millenia ==> millennia
2022-06-16T11:21:26.6501885Z ./Wordle/Dictionary.txt:101821: millenium ==> millennium
2022-06-16T11:21:26.6502210Z ./Wordle/Dictionary.txt:101833: millepede ==> millipede
2022-06-16T11:21:26.6502541Z ./Wordle/Dictionary.txt:102210: miniscule ==> minuscule
2022-06-16T11:21:26.6502856Z ./Wordle/Dictionary.txt:102242: minium ==> minimum
2022-06-16T11:21:26.6503154Z ./Wordle/Dictionary.txt:102243: miniums ==> minimums
2022-06-16T11:21:26.6503475Z ./Wordle/Dictionary.txt:102838: misformed ==> malformed
2022-06-16T11:21:26.6504161Z ./Wordle/Dictionary.txt:103342: mistery ==> mystery
2022-06-16T11:21:26.6504498Z ./Wordle/Dictionary.txt:103876: mohammedans ==> muslims
2022-06-16T11:21:26.6504820Z ./Wordle/Dictionary.txt:103903: moil ==> soil, mohel
2022-06-16T11:21:26.6505139Z ./Wordle/Dictionary.txt:104302: monickers ==> monikers
2022-06-16T11:21:26.6505453Z ./Wordle/Dictionary.txt:104788: monts ==> months
2022-06-16T11:21:26.6505740Z ./Wordle/Dictionary.txt:104976: mor ==> more
2022-06-16T11:21:26.6506050Z ./Wordle/Dictionary.txt:105313: mose ==> more, mouse
2022-06-16T11:21:26.6506476Z ./Wordle/Dictionary.txt:105356: mot ==> not
2022-06-16T11:21:26.6506749Z ./Wordle/Dictionary.txt:105507: moue ==> mouse
2022-06-16T11:21:26.6507036Z ./Wordle/Dictionary.txt:106733: mutch ==> much
2022-06-16T11:21:26.6507464Z ./Wordle/Dictionary.txt:106734: mutches ==> matches
2022-06-16T11:21:26.6507754Z ./Wordle/Dictionary.txt:106744: muti ==> multi
2022-06-16T11:21:26.6508046Z ./Wordle/Dictionary.txt:107316: nams ==> names
2022-06-16T11:21:26.6508471Z ./Wordle/Dictionary.txt:108049: ned ==> need
2022-06-16T11:21:26.6508777Z ./Wordle/Dictionary.txt:108505: nerver ==> never
2022-06-16T11:21:26.6509081Z ./Wordle/Dictionary.txt:109642: nodulated ==> modulated
2022-06-16T11:21:26.6509392Z ./Wordle/Dictionary.txt:110320: nott ==> not
2022-06-16T11:21:26.6509708Z ./Wordle/Dictionary.txt:110777: nuremburg ==> nuremberg
2022-06-16T11:21:26.6510010Z ./Wordle/Dictionary.txt:111161: objet ==> object
2022-06-16T11:21:26.6510319Z ./Wordle/Dictionary.txt:111162: objets ==> objects
2022-06-16T11:21:26.6510631Z ./Wordle/Dictionary.txt:111593: occured ==> occurred
2022-06-16T11:21:26.6510948Z ./Wordle/Dictionary.txt:111758: octohedron ==> octahedron
2022-06-16T11:21:26.6511273Z ./Wordle/Dictionary.txt:111849: oder ==> order, odor
2022-06-16T11:21:26.6511602Z ./Wordle/Dictionary.txt:112211: oints ==> points, pints
2022-06-16T11:21:26.6511898Z ./Wordle/Dictionary.txt:112213: ois ==> is
2022-06-16T11:21:26.6512198Z ./Wordle/Dictionary.txt:112642: ons ==> owns
2022-06-16T11:21:26.6512517Z ./Wordle/Dictionary.txt:113091: opthalmic ==> ophthalmic
2022-06-16T11:21:26.6512866Z ./Wordle/Dictionary.txt:113093: opthalmology ==> ophthalmology
2022-06-16T11:21:26.6513199Z ./Wordle/Dictionary.txt:114095: otherwhere ==> elsewhere
2022-06-16T11:21:26.6513528Z ./Wordle/Dictionary.txt:114096: otherwhile ==> otherwise
2022-06-16T11:21:26.6513855Z ./Wordle/Dictionary.txt:114462: outher ==> other, outer
2022-06-16T11:21:26.6514166Z ./Wordle/Dictionary.txt:115566: overlayed ==> overlaid
2022-06-16T11:21:26.6514488Z ./Wordle/Dictionary.txt:116200: overwise ==> otherwise
2022-06-16T11:21:26.6514817Z ./Wordle/Dictionary.txt:116288: ower ==> lower, owner, over
2022-06-16T11:21:26.6515132Z ./Wordle/Dictionary.txt:117609: panting ==> painting
2022-06-16T11:21:26.6515456Z ./Wordle/Dictionary.txt:118100: parana ==> piranha
2022-06-16T11:21:26.6515767Z ./Wordle/Dictionary.txt:118299: pard ==> part
2022-06-16T11:21:26.6516073Z ./Wordle/Dictionary.txt:118407: parial ==> partial
2022-06-16T11:21:26.6516516Z ./Wordle/Dictionary.txt:118594: parrakeets ==> parakeets
2022-06-16T11:21:26.6516824Z ./Wordle/Dictionary.txt:118829: pash ==> hash
2022-06-16T11:21:26.6517126Z ./Wordle/Dictionary.txt:119045: pastural ==> pastoral
2022-06-16T11:21:26.6517559Z ./Wordle/Dictionary.txt:119295: patten ==> pattern, patent
2022-06-16T11:21:26.6517890Z ./Wordle/Dictionary.txt:119296: pattened ==> patterned, patented
2022-06-16T11:21:26.6518959Z ./Wordle/Dictionary.txt:119297: pattens ==> patterns, patents
2022-06-16T11:21:26.6519276Z ./Wordle/Dictionary.txt:119475: payed ==> paid
2022-06-16T11:21:26.6519575Z ./Wordle/Dictionary.txt:120340: pennal ==> panel
2022-06-16T11:21:26.6519880Z ./Wordle/Dictionary.txt:120341: pennals ==> panels
2022-06-16T11:21:26.6520186Z ./Wordle/Dictionary.txt:121634: persue ==> pursue
2022-06-16T11:21:26.6520485Z ./Wordle/Dictionary.txt:121668: perturbate ==> perturb
2022-06-16T11:21:26.6520932Z ./Wordle/Dictionary.txt:121670: perturbates ==> perturbs
2022-06-16T11:21:26.6521395Z ./Wordle/Dictionary.txt:121742: pervious ==> previous
2022-06-16T11:21:26.6521838Z ./Wordle/Dictionary.txt:121743: perviously ==> previously
2022-06-16T11:21:26.6522173Z ./Wordle/Dictionary.txt:122216: phasis ==> phases
2022-06-16T11:21:26.6522479Z ./Wordle/Dictionary.txt:123167: phyton ==> python
2022-06-16T11:21:26.6522890Z ./Wordle/Dictionary.txt:124333: pixes ==> pixels
2022-06-16T11:21:26.6523215Z ./Wordle/Dictionary.txt:124505: planation ==> plantation
2022-06-16T11:21:26.6523535Z ./Wordle/Dictionary.txt:124517: planed ==> planned
2022-06-16T11:21:26.6523845Z ./Wordle/Dictionary.txt:124908: pleas ==> please
2022-06-16T11:21:26.6524139Z ./Wordle/Dictionary.txt:125728: poind ==> point
2022-06-16T11:21:26.6524441Z ./Wordle/Dictionary.txt:125735: poing ==> point
2022-06-16T11:21:26.6524759Z ./Wordle/Dictionary.txt:125981: pollenate ==> pollinate
2022-06-16T11:21:26.6525063Z ./Wordle/Dictionary.txt:126560: pont ==> point
2022-06-16T11:21:26.6525364Z ./Wordle/Dictionary.txt:126617: ponts ==> points
2022-06-16T11:21:26.6525791Z ./Wordle/Dictionary.txt:126845: poriferal ==> peripheral
2022-06-16T11:21:26.6526108Z ./Wordle/Dictionary.txt:128358: preform ==> perform
2022-06-16T11:21:26.6526438Z ./Wordle/Dictionary.txt:128364: preformed ==> performed
2022-06-16T11:21:26.6526766Z ./Wordle/Dictionary.txt:128366: preforms ==> performs
2022-06-16T11:21:26.6527067Z ./Wordle/Dictionary.txt:128745: pres ==> press
2022-06-16T11:21:26.6527391Z ./Wordle/Dictionary.txt:129406: principial ==> principal
2022-06-16T11:21:26.6527717Z ./Wordle/Dictionary.txt:129658: proces ==> process
2022-06-16T11:21:26.6528053Z ./Wordle/Dictionary.txt:130576: proprietory ==> proprietary
2022-06-16T11:21:26.6528398Z ./Wordle/Dictionary.txt:131063: protruberance ==> protuberance
2022-06-16T11:21:26.6528767Z ./Wordle/Dictionary.txt:131064: protruberances ==> protuberances
2022-06-16T11:21:26.6529128Z ./Wordle/Dictionary.txt:132183: punctation ==> punctuation
2022-06-16T11:21:26.6529451Z ./Wordle/Dictionary.txt:132785: pyramides ==> pyramids
2022-06-16T11:21:26.6529774Z ./Wordle/Dictionary.txt:133632: querys ==> queries
2022-06-16T11:21:26.6530091Z ./Wordle/Dictionary.txt:133963: quiting ==> quitting
2022-06-16T11:21:26.6530390Z ./Wordle/Dictionary.txt:133969: quitted ==> quit
2022-06-16T11:21:26.6530696Z ./Wordle/Dictionary.txt:133990: quizes ==> quizzes
2022-06-16T11:21:26.6531017Z ./Wordle/Dictionary.txt:134646: raison ==> reason, raisin
2022-06-16T11:21:26.6531340Z ./Wordle/Dictionary.txt:135116: rarified ==> rarefied
2022-06-16T11:21:26.6531638Z ./Wordle/Dictionary.txt:135143: rasing ==> raising
2022-06-16T11:21:26.6531947Z ./Wordle/Dictionary.txt:135499: reacher ==> richer
2022-06-16T11:21:26.6532580Z ./Wordle/Dictionary.txt:135556: readapted ==> re-adapted
2022-06-16T11:21:26.6533130Z ./Wordle/Dictionary.txt:135699: ream ==> stream
2022-06-16T11:21:26.6533443Z ./Wordle/Dictionary.txt:136806: recuring ==> recurring
2022-06-16T11:21:26.6533852Z ./Wordle/Dictionary.txt:137229: reenable ==> re-enable
2022-06-16T11:21:26.6534159Z ./Wordle/Dictionary.txt:137269: refect ==> reflect
2022-06-16T11:21:26.6534477Z ./Wordle/Dictionary.txt:137270: refected ==> reflected
2022-06-16T11:21:26.6534801Z ./Wordle/Dictionary.txt:137271: refecting ==> reflecting
2022-06-16T11:21:26.6535124Z ./Wordle/Dictionary.txt:137281: refects ==> reflects
2022-06-16T11:21:26.6535434Z ./Wordle/Dictionary.txt:137427: refocussed ==> refocused
2022-06-16T11:21:26.6535766Z ./Wordle/Dictionary.txt:138585: rememberable ==> memorable
2022-06-16T11:21:26.6536103Z ./Wordle/Dictionary.txt:139936: resistable ==> resistible
2022-06-16T11:21:26.6536598Z ./Wordle/Dictionary.txt:139942: resistent ==> resistant
2022-06-16T11:21:26.6536922Z ./Wordle/Dictionary.txt:140106: responser ==> responder
2022-06-16T11:21:26.6537377Z ./Wordle/Dictionary.txt:140107: responsers ==> responders
2022-06-16T11:21:26.6537715Z ./Wordle/Dictionary.txt:140149: restauranteurs ==> restaurateurs
2022-06-16T11:21:26.6538069Z ./Wordle/Dictionary.txt:140153: restauration ==> restoration
2022-06-16T11:21:26.6538403Z ./Wordle/Dictionary.txt:140734: retuned ==> returned
2022-06-16T11:21:26.6538828Z ./Wordle/Dictionary.txt:140752: retying ==> retrying
2022-06-16T11:21:26.6539273Z ./Wordle/Dictionary.txt:140912: revered ==> reversed
2022-06-16T11:21:26.6539591Z ./Wordle/Dictionary.txt:141963: rime ==> rhyme
2022-06-16T11:21:26.6539894Z ./Wordle/Dictionary.txt:143176: rouge ==> rogue
2022-06-16T11:21:26.6540182Z ./Wordle/Dictionary.txt:144102: saame ==> same
2022-06-16T11:21:26.6540503Z ./Wordle/Dictionary.txt:144345: sacrifying ==> sacrificing
2022-06-16T11:21:26.6540822Z ./Wordle/Dictionary.txt:144403: sade ==> sad
2022-06-16T11:21:26.6541227Z ./Wordle/Dictionary.txt:144604: sais ==> says
2022-06-16T11:21:26.6541649Z ./Wordle/Dictionary.txt:145265: sanhedrim ==> sanhedrin
2022-06-16T11:21:26.6541938Z ./Wordle/Dictionary.txt:145690: sate ==> state
2022-06-16T11:21:26.6542205Z ./Wordle/Dictionary.txt:145702: sates ==> states
2022-06-16T11:21:26.6542495Z ./Wordle/Dictionary.txt:145904: savable ==> saveable
2022-06-16T11:21:26.6543043Z ./Wordle/Dictionary.txt:146135: scaleability ==> scalability
2022-06-16T11:21:26.6543493Z ./Wordle/Dictionary.txt:146136: scaleable ==> scalable
2022-06-16T11:21:26.6543796Z ./Wordle/Dictionary.txt:146156: scalled ==> scaled
2022-06-16T11:21:26.6544128Z ./Wordle/Dictionary.txt:146417: scatch ==> catch, scratch, sketch
2022-06-16T11:21:26.6544496Z ./Wordle/Dictionary.txt:146418: scatches ==> catches, scratches, sketches
2022-06-16T11:21:26.6544829Z ./Wordle/Dictionary.txt:148425: secund ==> second
2022-06-16T11:21:26.6545141Z ./Wordle/Dictionary.txt:148585: seemless ==> seamless
2022-06-16T11:21:26.6545454Z ./Wordle/Dictionary.txt:148779: seldomly ==> seldom
2022-06-16T11:21:26.6545747Z ./Wordle/Dictionary.txt:148844: selfs ==> self
2022-06-16T11:21:26.6546057Z ./Wordle/Dictionary.txt:148910: sematic ==> semantic
2022-06-16T11:21:26.6546613Z ./Wordle/Dictionary.txt:149512: ser ==> set
2022-06-16T11:21:26.6546892Z ./Wordle/Dictionary.txt:149644: serie ==> series
2022-06-16T11:21:26.6547169Z ./Wordle/Dictionary.txt:149947: setted ==> set
2022-06-16T11:21:26.6547452Z ./Wordle/Dictionary.txt:149969: setts ==> sets
2022-06-16T11:21:26.6547745Z ./Wordle/Dictionary.txt:150449: sharable ==> shareable
2022-06-16T11:21:26.6548028Z ./Wordle/Dictionary.txt:150514: shashes ==> slashes
2022-06-16T11:21:26.6548334Z ./Wordle/Dictionary.txt:150606: sheat ==> sheath, sheet, cheat
2022-06-16T11:21:26.6548889Z ./Wordle/Dictionary.txt:150817: sherif ==> sheriff
2022-06-16T11:21:26.7263843Z ./Wordle/Dictionary.txt:151718: shuting ==> shutting
2022-06-16T11:21:26.7294726Z ./Wordle/Dictionary.txt:151900: sideral ==> sidereal
2022-06-16T11:21:26.7295342Z ./Wordle/Dictionary.txt:152028: sightly ==> slightly
2022-06-16T11:21:26.7295986Z ./Wordle/Dictionary.txt:152580: singe ==> single
2022-06-16T11:21:26.7296603Z ./Wordle/Dictionary.txt:152581: singed ==> signed, singled
2022-06-16T11:21:26.7297060Z ./Wordle/Dictionary.txt:153096: skelton ==> skeleton
2022-06-16T11:21:26.7297445Z ./Wordle/Dictionary.txt:153929: slippy ==> slippery
2022-06-16T11:21:26.7297771Z ./Wordle/Dictionary.txt:154530: smoot ==> smooth
2022-06-16T11:21:26.7298086Z ./Wordle/Dictionary.txt:154552: smooting ==> smoothing
2022-06-16T11:21:26.7298415Z ./Wordle/Dictionary.txt:155653: soler ==> solver, solar, solely
2022-06-16T11:21:26.7298719Z ./Wordle/Dictionary.txt:155826: solum ==> solemn
2022-06-16T11:21:26.7299010Z ./Wordle/Dictionary.txt:155943: somme ==> some
2022-06-16T11:21:26.7299659Z ./Wordle/Dictionary.txt:156263: sord ==> sword, sore, sored, sawed, soared
2022-06-16T11:21:26.7299995Z ./Wordle/Dictionary.txt:156382: sortings ==> sorting
2022-06-16T11:21:26.7300314Z ./Wordle/Dictionary.txt:156831: spaning ==> spanning
2022-06-16T11:21:26.7300645Z ./Wordle/Dictionary.txt:157109: specificated ==> specified
2022-06-16T11:21:26.7300964Z ./Wordle/Dictionary.txt:157271: speeling ==> spelling
2022-06-16T11:21:26.7301306Z ./Wordle/Dictionary.txt:157424: spermatozoan ==> spermatozoon
2022-06-16T11:21:26.7301645Z ./Wordle/Dictionary.txt:157662: spile ==> spite, spiral
2022-06-16T11:21:26.7301972Z ./Wordle/Dictionary.txt:158039: splitted ==> split
2022-06-16T11:21:26.7302652Z ./Wordle/Dictionary.txt:159633: statics ==> statistics
2022-06-16T11:21:26.7302977Z ./Wordle/Dictionary.txt:159776: steams ==> streams
2022-06-16T11:21:26.7303273Z ./Wordle/Dictionary.txt:160529: sting ==> string
2022-06-16T11:21:26.7303555Z ./Wordle/Dictionary.txt:160545: stings ==> strings
2022-06-16T11:21:26.7303848Z ./Wordle/Dictionary.txt:160882: stong ==> strong
2022-06-16T11:21:26.7304595Z ./Wordle/Dictionary.txt:160936: stoped ==> stopped
2022-06-16T11:21:26.7304957Z ./Wordle/Dictionary.txt:160939: stoping ==> stopping
2022-06-16T11:21:26.7305279Z ./Wordle/Dictionary.txt:161111: strack ==> stack, track
2022-06-16T11:21:26.7305618Z ./Wordle/Dictionary.txt:161142: straightaway ==> straight away
2022-06-16T11:21:26.7305975Z ./Wordle/Dictionary.txt:161143: straighted ==> straightened, straighten
2022-06-16T11:21:26.7306321Z ./Wordle/Dictionary.txt:161547: strig ==> string
2022-06-16T11:21:26.7306826Z ./Wordle/Dictionary.txt:161769: stroy ==> story, destroy
2022-06-16T11:21:26.7307164Z ./Wordle/Dictionary.txt:162043: stying ==> staying, styling
2022-06-16T11:21:26.7307481Z ./Wordle/Dictionary.txt:162959: substract ==> subtract
2022-06-16T11:21:26.7307929Z ./Wordle/Dictionary.txt:162960: substracted ==> subtracted
2022-06-16T11:21:26.7308259Z ./Wordle/Dictionary.txt:162961: substracting ==> subtracting
2022-06-16T11:21:26.7308578Z ./Wordle/Dictionary.txt:162962: substraction ==> subtraction
2022-06-16T11:21:26.7308903Z ./Wordle/Dictionary.txt:162964: substracts ==> subtracts
2022-06-16T11:21:26.7309208Z ./Wordle/Dictionary.txt:163204: succes ==> success
2022-06-16T11:21:26.7309628Z ./Wordle/Dictionary.txt:164009: supercede ==> supersede
2022-06-16T11:21:26.7309964Z ./Wordle/Dictionary.txt:164010: superceded ==> superseded
2022-06-16T11:21:26.7310296Z ./Wordle/Dictionary.txt:164011: supercedes ==> supersedes
2022-06-16T11:21:26.7310637Z ./Wordle/Dictionary.txt:164012: superceding ==> superseding
2022-06-16T11:21:26.7310952Z ./Wordle/Dictionary.txt:164599: sur ==> sure, sir
2022-06-16T11:21:26.7311273Z ./Wordle/Dictionary.txt:165015: suttle ==> subtle, shuttle
2022-06-16T11:21:26.7311596Z ./Wordle/Dictionary.txt:165016: suttled ==> shuttled
2022-06-16T11:21:26.7311896Z ./Wordle/Dictionary.txt:165017: suttles ==> shuttles
2022-06-16T11:21:26.7312216Z ./Wordle/Dictionary.txt:165018: suttling ==> shuttling
2022-06-16T11:21:26.7312649Z ./Wordle/Dictionary.txt:165535: swith ==> switch
2022-06-16T11:21:26.7312940Z ./Wordle/Dictionary.txt:165825: symmetral ==> symmetric
2022-06-16T11:21:26.7313247Z ./Wordle/Dictionary.txt:165985: synching ==> syncing
2022-06-16T11:21:26.7313545Z ./Wordle/Dictionary.txt:167487: targed ==> target
2022-06-16T11:21:26.7313835Z ./Wordle/Dictionary.txt:167736: tath ==> that
2022-06-16T11:21:26.7314118Z ./Wordle/Dictionary.txt:167996: te ==> the, be, we, to
2022-06-16T11:21:26.7314417Z ./Wordle/Dictionary.txt:168104: teated ==> treated
2022-06-16T11:21:26.7314723Z ./Wordle/Dictionary.txt:168136: technic ==> technique
2022-06-16T11:21:26.7315025Z ./Wordle/Dictionary.txt:168151: technics ==> techniques
2022-06-16T11:21:26.7315338Z ./Wordle/Dictionary.txt:170191: therefor ==> therefore
2022-06-16T11:21:26.7315651Z ./Wordle/Dictionary.txt:170193: therefrom ==> there from
2022-06-16T11:21:26.7316195Z ./Wordle/Dictionary.txt:170202: theres ==> there's
2022-06-16T11:21:26.7316501Z ./Wordle/Dictionary.txt:170350: thes ==> this, these
2022-06-16T11:21:26.7316813Z ./Wordle/Dictionary.txt:170355: theses ==> these, thesis
2022-06-16T11:21:26.7317132Z ./Wordle/Dictionary.txt:170918: throughly ==> thoroughly
2022-06-16T11:21:26.7317452Z ./Wordle/Dictionary.txt:171169: tich ==> thick, tick, titch, stitch
2022-06-16T11:21:26.7317772Z ./Wordle/Dictionary.txt:171252: tieing ==> tying
2022-06-16T11:21:26.7318068Z ./Wordle/Dictionary.txt:171851: tittle ==> title
2022-06-16T11:21:26.7318472Z ./Wordle/Dictionary.txt:171854: tittled ==> titled
2022-06-16T11:21:26.7318780Z ./Wordle/Dictionary.txt:171855: tittles ==> title
2022-06-16T11:21:26.7319185Z ./Wordle/Dictionary.txt:171856: tittling ==> titling
2022-06-16T11:21:26.7319493Z ./Wordle/Dictionary.txt:172086: toke ==> took
2022-06-16T11:21:26.7319791Z ./Wordle/Dictionary.txt:172397: toom ==> tomb
2022-06-16T11:21:26.7320108Z ./Wordle/Dictionary.txt:172616: tormenters ==> tormentors
2022-06-16T11:21:26.7320442Z ./Wordle/Dictionary.txt:172654: torpedos ==> torpedoes
2022-06-16T11:21:26.7320766Z ./Wordle/Dictionary.txt:173551: transcendant ==> transcendent
2022-06-16T11:21:26.7321102Z ./Wordle/Dictionary.txt:174161: tread ==> thread, treat
2022-06-16T11:21:26.7321423Z ./Wordle/Dictionary.txt:174777: trigged ==> triggered
2022-06-16T11:21:26.7321725Z ./Wordle/Dictionary.txt:174827: triked ==> tricked
2022-06-16T11:21:26.7322036Z ./Wordle/Dictionary.txt:175044: tripple ==> triple
2022-06-16T11:21:26.7322348Z ./Wordle/Dictionary.txt:175496: trough ==> through
2022-06-16T11:21:26.7322639Z ./Wordle/Dictionary.txt:176146: tunned ==> tuned
2022-06-16T11:21:26.7323065Z ./Wordle/Dictionary.txt:176159: tunning ==> tuning, running
2022-06-16T11:21:26.7323390Z ./Wordle/Dictionary.txt:176834: tye ==> type, tie
2022-06-16T11:21:26.7323692Z ./Wordle/Dictionary.txt:176837: tyes ==> types, ties
2022-06-16T11:21:26.7324004Z ./Wordle/Dictionary.txt:176994: tyring ==> trying
2022-06-16T11:21:26.7324303Z ./Wordle/Dictionary.txt:178140: unce ==> once
2022-06-16T11:21:26.7324665Z ./Wordle/Dictionary.txt:178794: undefied ==> undefined
2022-06-16T11:21:26.7324985Z ./Wordle/Dictionary.txt:179098: underlaying ==> underlying
2022-06-16T11:21:26.7325319Z ./Wordle/Dictionary.txt:180175: unforseen ==> unforeseen
2022-06-16T11:21:26.7325634Z ./Wordle/Dictionary.txt:180878: unio ==> union
2022-06-16T11:21:26.7325923Z ./Wordle/Dictionary.txt:181211: unline ==> unlike
2022-06-16T11:21:26.7326241Z ./Wordle/Dictionary.txt:182023: unprecise ==> imprecise
2022-06-16T11:21:26.7326565Z ./Wordle/Dictionary.txt:182972: unsinged ==> unsigned
2022-06-16T11:21:26.7326890Z ./Wordle/Dictionary.txt:183328: unsufficient ==> insufficient
2022-06-16T11:21:26.7327222Z ./Wordle/Dictionary.txt:183514: unter ==> under
2022-06-16T11:21:26.7327532Z ./Wordle/Dictionary.txt:183797: unuseful ==> useless
2022-06-16T11:21:26.7327864Z ./Wordle/Dictionary.txt:184752: ure ==> sure, ire, are, urea, rue
2022-06-16T11:21:26.7328179Z ./Wordle/Dictionary.txt:184955: useable ==> usable
2022-06-16T11:21:26.7328491Z ./Wordle/Dictionary.txt:185390: valetta ==> valletta
2022-06-16T11:21:26.7328798Z ./Wordle/Dictionary.txt:185823: vas ==> was
2022-06-16T11:21:26.7329081Z ./Wordle/Dictionary.txt:186119: vell ==> well
2022-06-16T11:21:26.7329382Z ./Wordle/Dictionary.txt:186189: vender ==> vendor
2022-06-16T11:21:26.7329690Z ./Wordle/Dictionary.txt:186190: venders ==> vendors
2022-06-16T11:21:26.7329983Z ./Wordle/Dictionary.txt:186667: verry ==> very
2022-06-16T11:21:26.7330289Z ./Wordle/Dictionary.txt:186703: versin ==> version
2022-06-16T11:21:26.7330605Z ./Wordle/Dictionary.txt:186739: vertexes ==> vertices
2022-06-16T11:21:26.7330916Z ./Wordle/Dictionary.txt:187145: vie ==> via
2022-06-16T11:21:26.7331202Z ./Wordle/Dictionary.txt:187248: vill ==> will
2022-06-16T11:21:26.7331497Z ./Wordle/Dictionary.txt:187627: vise ==> vice
2022-06-16T11:21:26.7331801Z ./Wordle/Dictionary.txt:187680: visiter ==> visitor
2022-06-16T11:21:26.7332105Z ./Wordle/Dictionary.txt:187681: visiters ==> visitors
2022-06-16T11:21:26.7332412Z ./Wordle/Dictionary.txt:189046: wan ==> want
2022-06-16T11:21:26.7333128Z ./Wordle/Dictionary.txt:189221: waring ==> warning
2022-06-16T11:21:26.7333426Z ./Wordle/Dictionary.txt:189224: warks ==> works
2022-06-16T11:21:26.7333721Z ./Wordle/Dictionary.txt:189881: wee ==> we
2022-06-16T11:21:26.7334017Z ./Wordle/Dictionary.txt:189992: weill ==> will
2022-06-16T11:21:26.7334306Z ./Wordle/Dictionary.txt:190012: weired ==> weird
2022-06-16T11:21:26.7334631Z ./Wordle/Dictionary.txt:190222: wether ==> weather, whether
2022-06-16T11:21:26.7335052Z ./Wordle/Dictionary.txt:190313: whats ==> what's
2022-06-16T11:21:26.7335368Z ./Wordle/Dictionary.txt:190456: whet ==> when, what, wet
2022-06-16T11:21:26.7335829Z ./Wordle/Dictionary.txt:190535: whiling ==> while
2022-06-16T11:21:26.7336284Z ./Wordle/Dictionary.txt:190694: whish ==> wish, whisk
2022-06-16T11:21:26.7336583Z ./Wordle/Dictionary.txt:190961: wice ==> vice
2022-06-16T11:21:26.7336858Z ./Wordle/Dictionary.txt:190962: wich ==> which
2022-06-16T11:21:26.7337183Z ./Wordle/Dictionary.txt:191079: wight ==> weight, white, right, write
2022-06-16T11:21:26.7337531Z ./Wordle/Dictionary.txt:191080: wighted ==> weighted, weighed
2022-06-16T11:21:26.7337879Z ./Wordle/Dictionary.txt:191083: wights ==> weights, waits, whites, rights, writes
2022-06-16T11:21:26.7338215Z ./Wordle/Dictionary.txt:191133: wile ==> while
2022-06-16T11:21:26.7338620Z ./Wordle/Dictionary.txt:191577: wit ==> with
2022-06-16T11:21:26.7338927Z ./Wordle/Dictionary.txt:191595: wite ==> write, white
2022-06-16T11:21:26.7339706Z ./Wordle/Dictionary.txt:191614: withe ==> with
2022-06-16T11:21:26.7340044Z ./Wordle/Dictionary.txt:191616: wither ==> either, whether, weather
2022-06-16T11:21:26.7340513Z ./Wordle/Dictionary.txt:191640: withing ==> within
2022-06-16T11:21:26.7340819Z ./Wordle/Dictionary.txt:191644: withs ==> with, widths
2022-06-16T11:21:26.7341210Z ./Wordle/Dictionary.txt:191887: wont ==> won't
2022-06-16T11:21:26.7341518Z ./Wordle/Dictionary.txt:192236: worser ==> worse
2022-06-16T11:21:26.7341833Z ./Wordle/Dictionary.txt:192264: worthing ==> worth, meriting
2022-06-16T11:21:26.7342158Z ./Wordle/Dictionary.txt:192298: wounder ==> wonder
2022-06-16T11:21:26.7342475Z ./Wordle/Dictionary.txt:192413: wresters ==> wrestlers
2022-06-16T11:21:26.7342808Z ./Wordle/Dictionary.txt:192680: xenophoby ==> xenophobia
2022-06-16T11:21:26.7343112Z ./Wordle/Dictionary.txt:193121: yeld ==> yield
2022-06-16T11:21:26.7343409Z ./Wordle/Dictionary.txt:194197: zoon ==> zoom
2022-06-16T11:21:26.7343704Z ./Wordle/wordle.py:87: checkd ==> checked
2022-06-16T11:21:26.7343980Z ./Wordle/wordle.py:87: ammount ==> amount
2022-06-16T11:21:26.7344305Z ./Wordle/5 letter word dictionary.txt:31: abord ==> abort, aboard
2022-06-16T11:21:26.7344685Z ./Wordle/5 letter word dictionary.txt:253: aline ==> align, a line, line, saline
2022-06-16T11:21:26.7345159Z ./Wordle/5 letter word dictionary.txt:301: alway ==> always
2022-06-16T11:21:26.7345492Z ./Wordle/5 letter word dictionary.txt:637: aways ==> always, away
2022-06-16T11:21:26.7345831Z ./Wordle/5 letter word dictionary.txt:691: bacup ==> backup
2022-06-16T11:21:26.7346159Z ./Wordle/5 letter word dictionary.txt:943: bever ==> never
2022-06-16T11:21:26.7346475Z ./Wordle/5 letter word dictionary.txt:1076: blocs ==> blocks
2022-06-16T11:21:26.7346801Z ./Wordle/5 letter word dictionary.txt:1241: brach ==> branch
2022-06-16T11:21:27.1610687Z ./Wordle/5 letter word dictionary.txt:1319: brose ==> browse, rose
2022-06-16T11:21:27.1611113Z ./Wordle/5 letter word dictionary.txt:1735: choos ==> choose
2022-06-16T11:21:27.1611467Z ./Wordle/5 letter word dictionary.txt:1803: clame ==> claim
2022-06-16T11:21:27.1611823Z ./Wordle/5 letter word dictionary.txt:1821: claus ==> clause
2022-06-16T11:21:27.1612183Z ./Wordle/5 letter word dictionary.txt:1828: cleck ==> check
2022-06-16T11:21:27.1612545Z ./Wordle/5 letter word dictionary.txt:2011: coppy ==> copy, choppy
2022-06-16T11:21:27.1612904Z ./Wordle/5 letter word dictionary.txt:2039: corse ==> course
2022-06-16T11:21:27.1613233Z ./Wordle/5 letter word dictionary.txt:2105: crate ==> create
2022-06-16T11:21:27.1613575Z ./Wordle/5 letter word dictionary.txt:2215: curch ==> church
2022-06-16T11:21:27.1613908Z ./Wordle/5 letter word dictionary.txt:2322: dashs ==> dashes
2022-06-16T11:21:27.1614225Z ./Wordle/5 letter word dictionary.txt:2438: derth ==> dearth
2022-06-16T11:21:27.1614564Z ./Wordle/5 letter word dictionary.txt:2556: doble ==> double
2022-06-16T11:21:27.1614899Z ./Wordle/5 letter word dictionary.txt:2694: drats ==> drafts
2022-06-16T11:21:27.1615237Z ./Wordle/5 letter word dictionary.txt:3342: fille ==> file, fill, filled
2022-06-16T11:21:27.1615595Z ./Wordle/5 letter word dictionary.txt:3536: fount ==> found
2022-06-16T11:21:27.1616195Z ./Wordle/5 letter word dictionary.txt:3538: fouth ==> fourth
2022-06-16T11:21:27.1616563Z ./Wordle/5 letter word dictionary.txt:3587: frist ==> first
2022-06-16T11:21:27.1616890Z ./Wordle/5 letter word dictionary.txt:3596: frome ==> from
2022-06-16T11:21:27.1617230Z ./Wordle/5 letter word dictionary.txt:3861: girds ==> grids
2022-06-16T11:21:27.1617586Z ./Wordle/5 letter word dictionary.txt:4369: heigh ==> height, high
2022-06-16T11:21:27.1618084Z ./Wordle/5 letter word dictionary.txt:4435: hided ==> hidden, hid
2022-06-16T11:21:27.1618444Z ./Wordle/5 letter word dictionary.txt:4442: hight ==> height, high
2022-06-16T11:21:27.1618791Z ./Wordle/5 letter word dictionary.txt:4717: imbed ==> embed
2022-06-16T11:21:27.1619531Z ./Wordle/5 letter word dictionary.txt:4727: impot ==> import
2022-06-16T11:21:27.1619896Z ./Wordle/5 letter word dictionary.txt:5014: justs ==> just
2022-06-16T11:21:27.1620234Z ./Wordle/5 letter word dictionary.txt:5205: knive ==> knife
2022-06-16T11:21:27.1621046Z ./Wordle/5 letter word dictionary.txt:5405: layed ==> laid
2022-06-16T11:21:27.1621470Z ./Wordle/5 letter word dictionary.txt:5428: leary ==> leery
2022-06-16T11:21:27.1621821Z ./Wordle/5 letter word dictionary.txt:5432: leats ==> least
2022-06-16T11:21:27.1622159Z ./Wordle/5 letter word dictionary.txt:5534: lifes ==> lives
2022-06-16T11:21:27.1622497Z ./Wordle/5 letter word dictionary.txt:5659: longe ==> longer, lounge
2022-06-16T11:21:27.1622855Z ./Wordle/5 letter word dictionary.txt:5922: marge ==> merge
2022-06-16T11:21:27.1623227Z ./Wordle/5 letter word dictionary.txt:5954: mater ==> matter, master, mother
2022-06-16T11:21:27.1623594Z ./Wordle/5 letter word dictionary.txt:6015: meeds ==> needs
2022-06-16T11:21:27.1623917Z ./Wordle/5 letter word dictionary.txt:6249: monts ==> months
2022-06-16T11:21:27.1624256Z ./Wordle/5 letter word dictionary.txt:6409: mutch ==> much
2022-06-16T11:21:27.1624593Z ./Wordle/5 letter word dictionary.txt:6757: objet ==> object
2022-06-16T11:21:27.1624948Z ./Wordle/5 letter word dictionary.txt:6809: oints ==> points, pints
2022-06-16T11:21:27.1625310Z ./Wordle/5 letter word dictionary.txt:7140: payed ==> paid
2022-06-16T11:21:27.1625656Z ./Wordle/5 letter word dictionary.txt:7364: pixes ==> pixels
2022-06-16T11:21:27.1625989Z ./Wordle/5 letter word dictionary.txt:7394: pleas ==> please
2022-06-16T11:21:27.1626329Z ./Wordle/5 letter word dictionary.txt:7447: poind ==> point
2022-06-16T11:21:27.1626669Z ./Wordle/5 letter word dictionary.txt:7448: poing ==> point
2022-06-16T11:21:27.1627005Z ./Wordle/5 letter word dictionary.txt:7482: ponts ==> points
2022-06-16T11:21:27.1627330Z ./Wordle/5 letter word dictionary.txt:8248: rouge ==> rogue
2022-06-16T11:21:27.1628204Z ./Wordle/5 letter word dictionary.txt:8343: saame ==> same
2022-06-16T11:21:27.1628554Z ./Wordle/5 letter word dictionary.txt:8474: sates ==> states
2022-06-16T11:21:27.1628881Z ./Wordle/5 letter word dictionary.txt:8649: selfs ==> self
2022-06-16T11:21:27.1629219Z ./Wordle/5 letter word dictionary.txt:8680: serie ==> series
2022-06-16T11:21:27.1629570Z ./Wordle/5 letter word dictionary.txt:8697: setts ==> sets
2022-06-16T11:21:27.1629916Z ./Wordle/5 letter word dictionary.txt:8755: sheat ==> sheath, sheet, cheat
2022-06-16T11:21:27.1630278Z ./Wordle/5 letter word dictionary.txt:8900: singe ==> single
2022-06-16T11:21:27.1630617Z ./Wordle/5 letter word dictionary.txt:9097: smoot ==> smooth
2022-06-16T11:21:27.1630973Z ./Wordle/5 letter word dictionary.txt:9199: soler ==> solver, solar, solely
2022-06-16T11:21:27.1631322Z ./Wordle/5 letter word dictionary.txt:9207: solum ==> solemn
2022-06-16T11:21:27.1631661Z ./Wordle/5 letter word dictionary.txt:9213: somme ==> some
2022-06-16T11:21:27.1632016Z ./Wordle/5 letter word dictionary.txt:9342: spile ==> spite, spiral
2022-06-16T11:21:27.1632355Z ./Wordle/5 letter word dictionary.txt:9491: sting ==> string
2022-06-16T11:21:27.1632688Z ./Wordle/5 letter word dictionary.txt:9519: stong ==> strong
2022-06-16T11:21:27.1633020Z ./Wordle/5 letter word dictionary.txt:9553: strig ==> string
2022-06-16T11:21:27.1633610Z ./Wordle/5 letter word dictionary.txt:9557: stroy ==> story, destroy
2022-06-16T11:21:27.1633976Z ./Wordle/5 letter word dictionary.txt:9698: swith ==> switch
2022-06-16T11:21:27.1634330Z ./Wordle/5 letter word dictionary.txt:10266: tread ==> thread, treat
2022-06-16T11:21:27.1634686Z ./Wordle/5 letter word dictionary.txt:10557: unter ==> under
2022-06-16T11:21:27.1635016Z ./Wordle/5 letter word dictionary.txt:10715: verry ==> very
2022-06-16T11:21:27.1635359Z ./Wordle/5 letter word dictionary.txt:10925: warks ==> works
2022-06-16T11:21:27.1635698Z ./Wordle/5 letter word dictionary.txt:10985: weill ==> will
2022-06-16T11:21:27.1636277Z ./Wordle/5 letter word dictionary.txt:11013: whats ==> what's
2022-06-16T11:21:27.1636631Z ./Wordle/5 letter word dictionary.txt:11046: whish ==> wish, whisk
2022-06-16T11:21:27.1637017Z ./Wordle/5 letter word dictionary.txt:11076: wight ==> weight, white, right, write
2022-06-16T11:21:27.1637529Z ./Wordle/5 letter word dictionary.txt:11119: withe ==> with
2022-06-16T11:21:27.1637870Z ./Wordle/5 letter word dictionary.txt:11120: withs ==> with, widths
2022-06-16T11:21:27.1638297Z ./insta_monitering/insta_datafetcher.py:1: whats ==> what's
2022-06-16T11:21:27.1638671Z ./insta_monitering/insta_datafetcher.py:48: applyting ==> applying
2022-06-16T11:21:27.1639042Z ./insta_monitering/insta_datafetcher.py:165: Execption ==> Exception
2022-06-16T11:21:27.1639426Z ./insta_monitering/insta_datafetcher.py:302: execption ==> exception
2022-06-16T11:21:27.1639788Z ./Compression_Analysis/PSNR.py:19: orignal ==> original
2022-06-16T11:21:27.1640209Z ./communication/socket_conn.py:19: childs ==> children, child's
2022-06-16T11:21:27.1640604Z ./communication/socket_conn.py:27: childs ==> children, child's
2022-06-16T11:21:27.1641024Z ./communication/socket_conn.py:36: childs ==> children, child's
2022-06-16T11:21:27.1641444Z ./communication/pipe.py:18: childs ==> children, child's
2022-06-16T11:21:27.1641842Z ./communication/pipe.py:26: childs ==> children, child's
2022-06-16T11:21:27.1642261Z ./communication/pipe.py:36: childs ==> children, child's
2022-06-16T11:21:27.1642661Z ./Recursion Visulaizer/recursionVisualizer.py:53: occured ==> occurred
2022-06-16T11:21:27.1643076Z ./Recursion Visulaizer/recursionVisualizer.py:55: occured ==> occurred
2022-06-16T11:21:27.1643457Z ./nodepad/notepad.py:73: managment ==> management
2022-06-16T11:21:27.1643799Z ./nodepad/notepad.py:193: managment ==> management
2022-06-16T11:21:27.1644135Z ./nodepad/README.md:1: managment ==> management
2022-06-16T11:21:27.1644453Z ./nodepad/README.md:3: managment ==> management
2022-06-16T11:21:27.1644765Z ./nodepad/README.md:4: writen ==> written
2022-06-16T11:21:27.1645096Z ./nodepad/src/notepad.tcl:82: managment ==> management
2022-06-16T11:21:27.1645438Z ./nodepad/src/notepad.tcl:234: managment ==> management
2022-06-16T11:21:27.1646004Z ./Extract-Table-from-pdf-txt-docx/Parent/Child3/Text_Child3.txt:1: BA ==> BY, BE
2022-06-16T11:21:27.1646433Z ./Assembler/GUIDE.txt:88: Therefor ==> Therefore
2022-06-16T11:21:27.1646747Z ./Assembler/assembler.py:56: fo ==> of, for
2022-06-16T11:21:27.1647062Z ./Assembler/assembler.py:57: fo ==> of, for
2022-06-16T11:21:27.1647374Z ./Assembler/assembler.py:59: fo ==> of, for
2022-06-16T11:21:27.1647686Z ./Assembler/assembler.py:918: applys ==> applies
2022-06-16T11:21:27.1648045Z ./Assembler/assembler.py:1193: informations ==> information
2022-06-16T11:21:27.1648394Z ./Assembler/assembler.py:1500: Unknow ==> Unknown
2022-06-16T11:21:27.1648725Z ./Assembler/assembler.py:1516: adress ==> address
2022-06-16T11:21:27.1649294Z ./linear-algebra-python/src/lib.py:29: arbitray ==> arbitrary
2022-06-16T11:21:27.1649728Z ./linear-algebra-python/src/lib.py:70: ans ==> and
2022-06-16T11:21:27.1650138Z ./linear-algebra-python/src/lib.py:74: ans ==> and
2022-06-16T11:21:27.1650524Z ./linear-algebra-python/src/lib.py:76: ans ==> and
2022-06-16T11:21:27.1650921Z ./linear-algebra-python/src/lib.py:77: ans ==> and
2022-06-16T11:21:27.1651322Z ./linear-algebra-python/src/lib.py:78: ans ==> and
2022-06-16T11:21:27.1651794Z ./linear-algebra-python/src/lib.py:79: ans ==> and
2022-06-16T11:21:27.1652221Z ./linear-algebra-python/src/lib.py:141: ans ==> and
2022-06-16T11:21:27.1652622Z ./linear-algebra-python/src/lib.py:144: ans ==> and
2022-06-16T11:21:27.1653051Z ./linear-algebra-python/src/lib.py:152: invalide ==> invalid
2022-06-16T11:21:27.1653450Z ./linear-algebra-python/src/lib.py:153: ans ==> and
2022-06-16T11:21:27.1653851Z ./linear-algebra-python/src/lib.py:186: ans ==> and
2022-06-16T11:21:27.1654249Z ./linear-algebra-python/src/lib.py:191: ans ==> and
2022-06-16T11:21:27.1654632Z ./linear-algebra-python/src/lib.py:194: ans ==> and
2022-06-16T11:21:27.1655025Z ./linear-algebra-python/src/lib.py:195: ans ==> and
2022-06-16T11:21:27.1655420Z ./linear-algebra-python/src/lib.py:204: ans ==> and
2022-06-16T11:21:27.1655918Z ./linear-algebra-python/src/lib.py:206: ans ==> and
2022-06-16T11:21:27.1656330Z ./linear-algebra-python/src/lib.py:207: ans ==> and
2022-06-16T11:21:27.1656828Z ./linear-algebra-python/src/lib.py:217: ans ==> and
2022-06-16T11:21:27.1657242Z ./linear-algebra-python/src/lib.py:220: ans ==> and
2022-06-16T11:21:27.1657635Z ./linear-algebra-python/src/lib.py:222: ans ==> and
2022-06-16T11:21:27.1658042Z ./linear-algebra-python/src/lib.py:223: ans ==> and
2022-06-16T11:21:27.1658451Z ./linear-algebra-python/src/lib.py:248: ans ==> and
2022-06-16T11:21:27.1658842Z ./linear-algebra-python/src/lib.py:251: ans ==> and
2022-06-16T11:21:27.1659249Z ./linear-algebra-python/src/lib.py:252: ans ==> and
2022-06-16T11:21:27.1661602Z ./linear-algebra-python/src/lib.py:275: initialzes ==> initializes
2022-06-16T11:21:27.1662034Z ./linear-algebra-python/src/lib.py:287: ans ==> and
2022-06-16T11:21:27.1662561Z ./linear-algebra-python/src/lib.py:289: ans ==> and
2022-06-16T11:21:27.1662952Z ./linear-algebra-python/src/lib.py:292: ans ==> and
2022-06-16T11:21:27.1663333Z ./linear-algebra-python/src/lib.py:294: ans ==> and
2022-06-16T11:21:27.1663733Z ./linear-algebra-python/src/lib.py:295: ans ==> and
2022-06-16T11:21:27.1664133Z ./linear-algebra-python/src/lib.py:334: ans ==> and
2022-06-16T11:21:27.1664529Z ./linear-algebra-python/src/lib.py:339: ans ==> and
2022-06-16T11:21:27.1664911Z ./linear-algebra-python/src/lib.py:341: ans ==> and
2022-06-16T11:21:27.1665303Z ./linear-algebra-python/src/lib.py:390: ans ==> and
2022-06-16T11:21:27.1665807Z ./linear-algebra-python/src/lib.py:395: ans ==> and
2022-06-16T11:21:27.1666201Z ./linear-algebra-python/src/lib.py:398: ans ==> and
2022-06-16T11:21:27.1666607Z ./linear-algebra-python/src/lib.py:399: ans ==> and
2022-06-16T11:21:27.1667039Z ./linear-algebra-python/src/lib.py:406: ans ==> and
2022-06-16T11:21:27.1667432Z ./linear-algebra-python/src/lib.py:411: ans ==> and
2022-06-16T11:21:27.1667835Z ./linear-algebra-python/src/lib.py:412: ans ==> and
2022-06-16T11:21:27.1738478Z ##[group]Run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
2022-06-16T11:21:27.1738941Z [36;1mflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics[0m
2022-06-16T11:21:27.1801342Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:27.1801586Z env:
2022-06-16T11:21:27.1801873Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:27.1802356Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:27.1802632Z ##[endgroup]
2022-06-16T11:21:35.1609767Z 0
2022-06-16T11:21:35.1894767Z ##[group]Run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --show-source --statistics
2022-06-16T11:21:35.1895351Z [36;1mflake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --show-source --statistics[0m
2022-06-16T11:21:35.1958900Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:35.1959124Z env:
2022-06-16T11:21:35.1959414Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:35.1959779Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:35.1960054Z ##[endgroup]
2022-06-16T11:21:42.7244786Z ./stack.py:52:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7245480Z     for i in range(0, n, 1):
2022-06-16T11:21:42.7245937Z         ^
2022-06-16T11:21:42.7246430Z ./chaos.py:14:9: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.7246837Z         except Exception as e:
2022-06-16T11:21:42.7247251Z         ^
2022-06-16T11:21:42.7247897Z ./chaos.py:17:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7248347Z     for i in range(10):
2022-06-16T11:21:42.7248641Z         ^
2022-06-16T11:21:42.7249124Z ./Chrome Dino Automater.py:2:1: F401 'PIL.Image' imported but unused
2022-06-16T11:21:42.7249579Z from PIL import Image, ImageGrab  # pip install pillow
2022-06-16T11:21:42.7249911Z ^
2022-06-16T11:21:42.7250259Z ./work_connect.py:7:89: E501 line too long (141 > 88 characters)
2022-06-16T11:21:42.7250971Z # Modifications		: 1.1 - CR - Added some extra code, to check an argument is passed to the script first of all, then check it's a valid input
2022-06-16T11:21:42.7260261Z                		                                                                       ^
2022-06-16T11:21:42.7260658Z ./work_connect.py:18:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7261138Z )  # Set the variable dropbox, by getting the values of the environment setting for dropbox
2022-06-16T11:21:42.7261590Z                                                                                         ^
2022-06-16T11:21:42.7261991Z ./work_connect.py:19:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.7262483Z rdpfile = "remote\\workpc.rdp"  # Set the variable logfile, using the arguments passed to create the logfile
2022-06-16T11:21:42.7262964Z                                                                                         ^
2022-06-16T11:21:42.7263351Z ./work_connect.py:28:1: W191 indentation contains tabs
2022-06-16T11:21:42.7263742Z text = """You need to pass an argument
2022-06-16T11:21:42.7264234Z 	-c Followed by login password to connect
2022-06-16T11:21:42.7264862Z 	-d to disconnect"""  # Text to display if there is no argument passed or it's an invalid option - 1.2
2022-06-16T11:21:42.7265277Z ^
2022-06-16T11:21:42.7265629Z ./work_connect.py:28:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7266038Z text = """You need to pass an argument
2022-06-16T11:21:42.7266504Z 	-c Followed by login password to connect
2022-06-16T11:21:42.7267106Z 	-d to disconnect"""  # Text to display if there is no argument passed or it's an invalid option - 1.2
2022-06-16T11:21:42.7267497Z ^
2022-06-16T11:21:42.7267838Z ./work_connect.py:29:1: W191 indentation contains tabs
2022-06-16T11:21:42.7268215Z text = """You need to pass an argument
2022-06-16T11:21:42.7268663Z 	-c Followed by login password to connect
2022-06-16T11:21:42.7269235Z 	-d to disconnect"""  # Text to display if there is no argument passed or it's an invalid option - 1.2
2022-06-16T11:21:42.7269652Z ^
2022-06-16T11:21:42.7270141Z ./work_connect.py:29:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7270967Z text = """You need to pass an argument
2022-06-16T11:21:42.7271480Z 	-c Followed by login password to connect
2022-06-16T11:21:42.7272353Z 	-d to disconnect"""  # Text to display if there is no argument passed or it's an invalid option - 1.2
2022-06-16T11:21:42.7272949Z ^
2022-06-16T11:21:42.7273284Z ./work_connect.py:29:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.7273671Z text = """You need to pass an argument
2022-06-16T11:21:42.7274680Z 	-c Followed by login password to connect
2022-06-16T11:21:42.7275491Z 	-d to disconnect"""  # Text to display if there is no argument passed or it's an invalid option - 1.2
2022-06-16T11:21:42.7275936Z                                       
2022-06-16T11:21:42.7276269Z 	                                        
2022-06-16T11:21:42.7276608Z 	      ^
2022-06-16T11:21:42.7278062Z ./work_connect.py:44:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.7280868Z         ]  # Set the variable passwd as the second argument passed, in this case my login password
2022-06-16T11:21:42.7281247Z                                                                                         ^
2022-06-16T11:21:42.7281562Z ./work_connect.py:47:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.7282242Z                 r"c:\Program Files\Checkpoint\Endpoint Connect\trac.exe connect -u username -p "
2022-06-16T11:21:42.7282597Z                                                                                         ^
2022-06-16T11:21:42.7282893Z ./work_connect.py:54:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7283619Z         )  # Sleep for 15 seconds, so the checkpoint software can connect before opening mstsc
2022-06-16T11:21:42.7283965Z                                                                                         ^
2022-06-16T11:21:42.7285849Z ./work_connect.py:65:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.7286894Z         )  # If any other option is passed, then print Unknown option and the text from above - 1.2
2022-06-16T11:21:42.7287465Z                                                                                         ^
2022-06-16T11:21:42.7291377Z ./Job_scheduling.py:115:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7292632Z     for i, item in enumerate(scheduled_jobs):
2022-06-16T11:21:42.7293313Z         ^
2022-06-16T11:21:42.7293592Z ./Credit_Card_Validator.py:42:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.7294601Z             message = "First check : Check Card number once again it must be of 13 or 16 digits long."
2022-06-16T11:21:42.7295278Z                                                                                         ^
2022-06-16T11:21:42.7296496Z ./Binary_search.py:3:24: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7315171Z def binary_search(arr, l, r, x):
2022-06-16T11:21:42.7315440Z                        ^
2022-06-16T11:21:42.7315890Z ./Binary_search.py:4:8: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7316153Z     if l <= r:
2022-06-16T11:21:42.7316542Z        ^
2022-06-16T11:21:42.7316939Z ./Binary_search.py:31:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.7317324Z     ]  # the input array will of int type with each element seperated with a comma due to the split fucntion
2022-06-16T11:21:42.7317686Z                                                                                         ^
2022-06-16T11:21:42.7317989Z ./Binary_search.py:32:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7318356Z     # map function returns a list of results after applying the given function to each item
2022-06-16T11:21:42.7318686Z                                                                                         ^
2022-06-16T11:21:42.7318969Z ./Strings.py:19:9: W291 trailing whitespace
2022-06-16T11:21:42.7319210Z String1 = """Smile 
2022-06-16T11:21:42.7319519Z             For 
2022-06-16T11:21:42.7319718Z             Life"""
2022-06-16T11:21:42.7319914Z         ^
2022-06-16T11:21:42.7320142Z ./Strings.py:20:16: W291 trailing whitespace
2022-06-16T11:21:42.7320389Z String1 = """Smile 
2022-06-16T11:21:42.7320595Z             For 
2022-06-16T11:21:42.7320965Z             Life"""
2022-06-16T11:21:42.7321189Z                ^
2022-06-16T11:21:42.7321626Z ./Letter_Counter.py:19:5: F841 local variable 'labl' is assigned to but never used
2022-06-16T11:21:42.7322017Z     labl = tk.Label(root, text=a, font=("arial", 15), fg="black").place(x=10, y=220)
2022-06-16T11:21:42.7322398Z     ^
2022-06-16T11:21:42.7322658Z ./Letter_Counter.py:43:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.7323284Z # print("In this app, I will count the number of times that a specific letter occurs in a message.")
2022-06-16T11:21:42.7323651Z                                                                                         ^
2022-06-16T11:21:42.7323984Z ./password_manager.py:5:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7324394Z # set the environment variable ADMIN_PASS to your desired string, which will be your password.
2022-06-16T11:21:42.7324775Z                                                                                         ^
2022-06-16T11:21:42.7325180Z ./password_manager.py:84:1: C901 'If 84' is too complex (18)
2022-06-16T11:21:42.7325482Z if connect == ADMIN_PASSWORD:
2022-06-16T11:21:42.7325709Z ^
2022-06-16T11:21:42.7326752Z ./password_manager.py:94:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7327229Z     except:
2022-06-16T11:21:42.7327404Z     ^
2022-06-16T11:21:42.7327703Z ./password_manager.py:94:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7328048Z     except:
2022-06-16T11:21:42.7328221Z     ^
2022-06-16T11:21:42.7328458Z ./sWAP_cASE.py:1:89: E501 line too long (139 > 88 characters)
2022-06-16T11:21:42.7328845Z # You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.
2022-06-16T11:21:42.7329229Z                                                                                         ^
2022-06-16T11:21:42.7329659Z ./solution to euler project problem 10.py:1:1: E265 block comment should start with '# '
2022-06-16T11:21:42.7330111Z ##author-slayking1965
2022-06-16T11:21:42.7330320Z ^
2022-06-16T11:21:42.7330802Z ./rook.py:8:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7331147Z for i in range(8):
2022-06-16T11:21:42.7331331Z     ^
2022-06-16T11:21:42.7331645Z ./rook.py:15:1: C901 'Loop 15' is too complex (16)
2022-06-16T11:21:42.7331909Z while len(queue) > 0:
2022-06-16T11:21:42.7332096Z ^
2022-06-16T11:21:42.7332489Z ./recyclebin.py:5:1: F403 'from _winreg import *' used; unable to detect undefined names
2022-06-16T11:21:42.7332824Z from _winreg import *  # Load the Module
2022-06-16T11:21:42.7333037Z ^
2022-06-16T11:21:42.7333285Z ./recyclebin.py:14:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.7333713Z # Description			: Scans the recyclebin and displays the files in there, originally got this script from the Violent Python book
2022-06-16T11:21:42.7334092Z              			                                                                        ^
2022-06-16T11:21:42.7334548Z ./recyclebin.py:19:15: F405 'OpenKey' may be undefined, or defined from star imports: _winreg
2022-06-16T11:21:42.7334859Z         key = OpenKey(
2022-06-16T11:21:42.7335060Z               ^
2022-06-16T11:21:42.7335487Z ./recyclebin.py:20:13: F405 'HKEY_LOCAL_MACHINE' may be undefined, or defined from star imports: _winreg
2022-06-16T11:21:42.7335822Z             HKEY_LOCAL_MACHINE,
2022-06-16T11:21:42.7336035Z             ^
2022-06-16T11:21:42.7336363Z ./recyclebin.py:21:22: W605 invalid escape sequence '\M'
2022-06-16T11:21:42.7336737Z             "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" + "\\" + sid,
2022-06-16T11:21:42.7337039Z                      ^
2022-06-16T11:21:42.7337573Z ./recyclebin.py:21:32: W605 invalid escape sequence '\W'
2022-06-16T11:21:42.7337969Z             "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" + "\\" + sid,
2022-06-16T11:21:42.7338284Z                                ^
2022-06-16T11:21:42.7338652Z ./recyclebin.py:21:43: W605 invalid escape sequence '\C'
2022-06-16T11:21:42.7339473Z             "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" + "\\" + sid,
2022-06-16T11:21:42.7339806Z                                           ^
2022-06-16T11:21:42.7340182Z ./recyclebin.py:21:58: W605 invalid escape sequence '\P'
2022-06-16T11:21:42.7340532Z             "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" + "\\" + sid,
2022-06-16T11:21:42.7340862Z                                                          ^
2022-06-16T11:21:42.7341314Z ./recyclebin.py:23:25: F405 'QueryValueEx' may be undefined, or defined from star imports: _winreg
2022-06-16T11:21:42.7341691Z         (value, type) = QueryValueEx(key, "ProfileImagePath")
2022-06-16T11:21:42.7341965Z                         ^
2022-06-16T11:21:42.7342215Z ./Hangman.py:18:33: W291 trailing whitespace
2022-06-16T11:21:42.7342507Z someWords = """apple banana mango strawberry  
2022-06-16T11:21:42.7342815Z orange grape pineapple apricot lemon coconut watermelon 
2022-06-16T11:21:42.7343134Z cherry papaya berry peach lychee muskmelon"""
2022-06-16T11:21:42.7343495Z                                 ^
2022-06-16T11:21:42.7343715Z ./Hangman.py:19:56: W291 trailing whitespace
2022-06-16T11:21:42.7343983Z someWords = """apple banana mango strawberry  
2022-06-16T11:21:42.7344280Z orange grape pineapple apricot lemon coconut watermelon 
2022-06-16T11:21:42.7344690Z cherry papaya berry peach lychee muskmelon"""
2022-06-16T11:21:42.7344944Z                                               
2022-06-16T11:21:42.7345137Z         ^
2022-06-16T11:21:42.7345360Z ./Day_of_week.py:17:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7345698Z     ).weekday()  # this statement returns an integer corresponding to the day of the week
2022-06-16T11:21:42.7346021Z                                                                                         ^
2022-06-16T11:21:42.7346296Z ./Day_of_week.py:20:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.7346653Z     ]  # this statement returns the corresponding day name to the integer generated in the previous statement
2022-06-16T11:21:42.7346997Z                                                                                         ^
2022-06-16T11:21:42.7347267Z ./Day_of_week.py:25:89: E501 line too long (120 > 88 characters)
2022-06-16T11:21:42.7347634Z # To overcome those we have to process user input and make it standard to accept as defined by  calender and time module
2022-06-16T11:21:42.7347992Z                                                                                         ^
2022-06-16T11:21:42.7348525Z ./passwordGen.py:11:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7348880Z for i in range(passLen):
2022-06-16T11:21:42.7349065Z     ^
2022-06-16T11:21:42.7349466Z ./randomloadingmessage.py:4:1: F403 'from random import *' used; unable to detect undefined names
2022-06-16T11:21:42.7349775Z from random import *
2022-06-16T11:21:42.7349952Z ^
2022-06-16T11:21:42.7350282Z ./randomloadingmessage.py:8:1: C901 'Loop 8' is too complex (81)
2022-06-16T11:21:42.7350546Z for i in range(x):
2022-06-16T11:21:42.7350715Z ^
2022-06-16T11:21:42.7351206Z ./randomloadingmessage.py:8:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7351560Z for i in range(x):
2022-06-16T11:21:42.7351744Z     ^
2022-06-16T11:21:42.7352139Z ./randomloadingmessage.py:9:11: F405 'randint' may be undefined, or defined from star imports: random
2022-06-16T11:21:42.7352453Z     num = randint(1, 80)
2022-06-16T11:21:42.7352649Z           ^
2022-06-16T11:21:42.7353219Z ./addition.py:6:9: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7353526Z while a == True:
2022-06-16T11:21:42.7353721Z         ^
2022-06-16T11:21:42.7354061Z ./equations.py:3:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.7354329Z ####### by @JymPatel
2022-06-16T11:21:42.7354524Z ^
2022-06-16T11:21:42.7354843Z ./equations.py:8:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.7355191Z ##### edited by ... (editors can put their name and thanks for suggestion) :)
2022-06-16T11:21:42.7355459Z ^
2022-06-16T11:21:42.7355704Z ./equations.py:48:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.7356321Z # get NEW versions of equations.py at https://github.com/JymPatel/Python3-FirstEdition with more equations
2022-06-16T11:21:42.7356692Z                                                                                         ^
2022-06-16T11:21:42.7356968Z ./psunotify.py:12:89: E501 line too long (116 > 88 characters)
2022-06-16T11:21:42.7357308Z         "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36",
2022-06-16T11:21:42.7357630Z                                                                                         ^
2022-06-16T11:21:42.7357984Z ./psunotify.py:23:14: W605 invalid escape sequence '\s'
2022-06-16T11:21:42.7358313Z text = '<cite\sclass="_Rm">(.+?)</cite>'
2022-06-16T11:21:42.7358512Z              ^
2022-06-16T11:21:42.7358864Z ./psunotify.py:48:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.7359154Z     except urllib2.URLError as e:
2022-06-16T11:21:42.7359352Z     ^
2022-06-16T11:21:42.7359661Z ./chicks_n_rabs.py:5:72: W291 trailing whitespace
2022-06-16T11:21:42.7359883Z """
2022-06-16T11:21:42.7360109Z Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)
2022-06-16T11:21:42.7360286Z 
2022-06-16T11:21:42.7360416Z Module to solve a classic ancient Chinese puzzle:
2022-06-16T11:21:42.7360734Z We count 35 heads and 94 legs among the chickens and rabbits in a farm. 
2022-06-16T11:21:42.7361033Z How many rabbits and how many chickens do we have?
2022-06-16T11:21:42.7361198Z 
2022-06-16T11:21:42.7361267Z """
2022-06-16T11:21:42.7361429Z    
2022-06-16T11:21:42.7361624Z                                                      
2022-06-16T11:21:42.7361744Z 
2022-06-16T11:21:42.7361815Z             ^
2022-06-16T11:21:42.7362058Z ./power_of_two.py:1:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7362517Z # Simple and efficient python program to check whether a number is series of power of two
2022-06-16T11:21:42.7362852Z                                                                                         ^
2022-06-16T11:21:42.7363165Z ./avg_xdspam_confidence.py:2:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.7363875Z # The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt
2022-06-16T11:21:42.7364268Z                                                                                         ^
2022-06-16T11:21:42.7364641Z ./snake.py:7:1: C901 'TryExcept 7' is too complex (16)
2022-06-16T11:21:42.7364889Z try:
2022-06-16T11:21:42.7365069Z ^
2022-06-16T11:21:42.7365422Z ./snake.py:14:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7365896Z         "Use the arrow keys to move, press the space bar to pause, and press ESC to quit"
2022-06-16T11:21:42.7366234Z                                                                                         ^
2022-06-16T11:21:42.7366513Z ./snake.py:67:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7366994Z         # Calculates the new coordinates of the head of the snake. NOTE: len(snake) increases.
2022-06-16T11:21:42.7367335Z                                                                                         ^
2022-06-16T11:21:42.7367616Z ./snake.py:88:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.7367918Z         # if snake[0][0] == 0 or snake[0][0] == 19 or snake[0][1] == 0 or snake[0][1] == 59: break
2022-06-16T11:21:42.7368302Z                                                                                         ^
2022-06-16T11:21:42.7368717Z ./nslookup_check.py:9:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.7369101Z # Description			: This very simple script opens the file server_list.txt and then does a nslookup for each one to check the DNS entry
2022-06-16T11:21:42.7369465Z              			                                                                        ^
2022-06-16T11:21:42.7369871Z ./JsonParser.py:6:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.7370115Z     """
2022-06-16T11:21:42.7370410Z     this class to handle anything related to json file [as implementation of facade pattern]
2022-06-16T11:21:42.7370706Z     """
2022-06-16T11:21:42.7370882Z        
2022-06-16T11:21:42.7371096Z                                                                                 ^
2022-06-16T11:21:42.7371386Z ./JsonParser.py:21:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7371634Z         """
2022-06-16T11:21:42.7371922Z         this function converts dictionary of data to json string and store it in json file if
2022-06-16T11:21:42.7372300Z         json file pass provided if not it only returns the json string
2022-06-16T11:21:42.7372790Z         args:
2022-06-16T11:21:42.7373032Z              par_data_dic: dictionary of data
2022-06-16T11:21:42.7373297Z              par_json_file: the output json file
2022-06-16T11:21:42.7373550Z         return: json string
2022-06-16T11:21:42.7373760Z         """
2022-06-16T11:21:42.7373931Z            
2022-06-16T11:21:42.7374161Z                                                                             ^
2022-06-16T11:21:42.7375315Z ./Luhn_Algorithm.py:51:47: E203 whitespace before ':'
2022-06-16T11:21:42.7375707Z             newdoubled.append(splitdigit[index : index + 1])
2022-06-16T11:21:42.7376007Z                                               ^
2022-06-16T11:21:42.7376621Z ./patterns.py:10:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7377012Z     for j in range(0, i):
2022-06-16T11:21:42.7377221Z         ^
2022-06-16T11:21:42.7377750Z ./patterns.py:13:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7378219Z     for j in range(1, (2 * (5 - i)) + 1):
2022-06-16T11:21:42.7378552Z         ^
2022-06-16T11:21:42.7379363Z ./patterns.py:30:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7379853Z     for j in range(0, (2 * (i - 1)) + 1):
2022-06-16T11:21:42.7380063Z         ^
2022-06-16T11:21:42.7380568Z ./patterns.py:33:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7380997Z     for j in range(0, 6 - i):
2022-06-16T11:21:42.7381212Z         ^
2022-06-16T11:21:42.7381630Z ./alexa_news_headlines.py:26:26: C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.7382145Z     titles = "... ".join([i for i in titles])
2022-06-16T11:21:42.7382488Z                          ^
2022-06-16T11:21:42.7382862Z ./RandomDice.py:6:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7383152Z from tkinter import *
2022-06-16T11:21:42.7383343Z ^
2022-06-16T11:21:42.7383560Z ./RandomDice.py:9:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7383795Z def roll():
2022-06-16T11:21:42.7383972Z ^
2022-06-16T11:21:42.7384327Z ./RandomDice.py:10:22: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7384623Z     text.delete(0.0, END)
2022-06-16T11:21:42.7384825Z                      ^
2022-06-16T11:21:42.7385195Z ./RandomDice.py:11:17: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7385506Z     text.insert(END, str(randint(1, 100)))
2022-06-16T11:21:42.7385876Z                 ^
2022-06-16T11:21:42.7386285Z ./RandomDice.py:15:10: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7386549Z window = Tk()
2022-06-16T11:21:42.7386733Z          ^
2022-06-16T11:21:42.7387106Z ./RandomDice.py:16:8: F405 'Text' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7387398Z text = Text(window, width=3, height=1)
2022-06-16T11:21:42.7387613Z        ^
2022-06-16T11:21:42.7387991Z ./RandomDice.py:17:11: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7388327Z buttonA = Button(window, text="Press to roll!", command=roll)
2022-06-16T11:21:42.7388573Z           ^
2022-06-16T11:21:42.7388927Z ./Tweet Pre-Processing.py:7:1: F401 'numpy as np' imported but unused
2022-06-16T11:21:42.7389187Z import numpy as np
2022-06-16T11:21:42.7389377Z ^
2022-06-16T11:21:42.7389747Z ./Tweet Pre-Processing.py:9:1: F401 'matplotlib.pyplot as plt' imported but unused
2022-06-16T11:21:42.7390071Z import matplotlib.pyplot as plt
2022-06-16T11:21:42.7390401Z ^
2022-06-16T11:21:42.7399254Z ./Tweet Pre-Processing.py:48:58: W291 trailing whitespace
2022-06-16T11:21:42.7399773Z """ There are 4 basic steps in pre-processing of any text 
2022-06-16T11:21:42.7400042Z 1.Tokenizing
2022-06-16T11:21:42.7400285Z 2.Removing hyper links if any
2022-06-16T11:21:42.7400544Z 3.Converting to lower case
2022-06-16T11:21:42.7400783Z 4.Removing punctuations
2022-06-16T11:21:42.7401030Z 5.steeming of the word"""
2022-06-16T11:21:42.7401522Z                                                          ^
2022-06-16T11:21:42.7401927Z ./Tweet Pre-Processing.py:56:1: E402 module level import not at top of file
2022-06-16T11:21:42.7402435Z import re
2022-06-16T11:21:42.7402621Z ^
2022-06-16T11:21:42.7402996Z ./Tweet Pre-Processing.py:57:1: E402 module level import not at top of file
2022-06-16T11:21:42.7403283Z import string
2022-06-16T11:21:42.7403475Z ^
2022-06-16T11:21:42.7403832Z ./Tweet Pre-Processing.py:59:1: E402 module level import not at top of file
2022-06-16T11:21:42.7404145Z from nltk.corpus import stopwords
2022-06-16T11:21:42.7404368Z ^
2022-06-16T11:21:42.7404731Z ./Tweet Pre-Processing.py:60:1: E402 module level import not at top of file
2022-06-16T11:21:42.7405038Z from nltk.stem import PorterStemmer
2022-06-16T11:21:42.7405266Z ^
2022-06-16T11:21:42.7405630Z ./Tweet Pre-Processing.py:61:1: E402 module level import not at top of file
2022-06-16T11:21:42.7405944Z from nltk.tokenize import TweetTokenizer
2022-06-16T11:21:42.7406180Z ^
2022-06-16T11:21:42.7406484Z ./scalg.py:30:1: C901 'score' is too complex (19)
2022-06-16T11:21:42.7406867Z def score(source_data: list, weights: list, *args) -> list:
2022-06-16T11:21:42.7407114Z ^
2022-06-16T11:21:42.7407598Z ./scalg.py:91:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7407971Z     for i, slist in enumerate(score_lists):
2022-06-16T11:21:42.7408201Z         ^
2022-06-16T11:21:42.7408709Z ./linear_search.py:3:5: B007 Loop control variable 'n' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7409068Z for n in range(num):
2022-06-16T11:21:42.7409256Z     ^
2022-06-16T11:21:42.7409504Z ./pscheck.py:7:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.7409998Z # Modifications		: 1.1 - 17/06/13 - CR - Changed to functions, and check os before running the program
2022-06-16T11:21:42.7410340Z                		                                                                       ^
2022-06-16T11:21:42.7411119Z ./pscheck.py:48:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7411607Z     except:
2022-06-16T11:21:42.7411796Z     ^
2022-06-16T11:21:42.7412094Z ./pscheck.py:48:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7412420Z     except:
2022-06-16T11:21:42.7412618Z     ^
2022-06-16T11:21:42.7412867Z ./get_info_remoute_srv.py:9:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.7413302Z # Description   : this will get info about remoute server on linux through ssh connection. Connect these servers must be through keys
2022-06-16T11:21:42.7413692Z                                                                                         ^
2022-06-16T11:21:42.7413978Z ./slack_message.py:8:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.7414579Z # Set the webhook_url to the one provided by Slack when you create the webhook at https://my.slack.com/services/new/incoming-webhook/
2022-06-16T11:21:42.7414992Z                                                                                         ^
2022-06-16T11:21:42.7415442Z ./digital_clock.py:10:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7415740Z from tkinter import *
2022-06-16T11:21:42.7415946Z ^
2022-06-16T11:21:42.7416356Z ./digital_clock.py:11:1: F403 'from tkinter.ttk import *' used; unable to detect undefined names
2022-06-16T11:21:42.7416664Z from tkinter.ttk import *
2022-06-16T11:21:42.7416873Z ^
2022-06-16T11:21:42.7417294Z ./digital_clock.py:18:8: F405 'Tk' may be undefined, or defined from star imports: tkinter, tkinter.ttk
2022-06-16T11:21:42.7417602Z root = Tk()
2022-06-16T11:21:42.7417781Z        ^
2022-06-16T11:21:42.7418039Z ./digital_clock.py:25:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7418301Z def def_time():
2022-06-16T11:21:42.7418479Z ^
2022-06-16T11:21:42.7418910Z ./digital_clock.py:33:7: F405 'Label' may be undefined, or defined from star imports: tkinter, tkinter.ttk
2022-06-16T11:21:42.7419619Z lbl = Label(
2022-06-16T11:21:42.7419805Z       ^
2022-06-16T11:21:42.7420284Z ./digital_clock.py:45:1: F405 'mainloop' may be undefined, or defined from star imports: tkinter, tkinter.ttk
2022-06-16T11:21:42.7420611Z mainloop()
2022-06-16T11:21:42.7420791Z ^
2022-06-16T11:21:42.7421237Z ./digital_clock.py:47:9: F405 'Label' may be undefined, or defined from star imports: tkinter, tkinter.ttk
2022-06-16T11:21:42.7421651Z label = Label(root, font=("Arial", 30, "bold"), bg="black", fg="white", bd=30)
2022-06-16T11:21:42.7421908Z         ^
2022-06-16T11:21:42.7422175Z ./ping_subnet.py:13:89: E501 line too long (105 > 88 characters)
2022-06-16T11:21:42.7422581Z # Description			: After supplying the first 3 octets it will scan the final range for available addresses
2022-06-16T11:21:42.7423055Z              			                                                                        ^
2022-06-16T11:21:42.7423438Z ./ping_subnet.py:31:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.7423793Z     ):  # If no arguments are passed then display the help and instructions on how to run the script
2022-06-16T11:21:42.7424125Z                                                                                         ^
2022-06-16T11:21:42.7424394Z ./tower_of_hanoi.py:1:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.7424773Z """Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move
2022-06-16T11:21:42.7425163Z     the entire stack to another rod, obeying the following simple rules:
2022-06-16T11:21:42.7425452Z 1) Only one disk can be moved at a time.
2022-06-16T11:21:42.7425793Z 2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk
2022-06-16T11:21:42.7426166Z     can only be moved if it is the uppermost disk on a stack.
2022-06-16T11:21:42.7426458Z 3) No disk may be placed on top of a smaller disk.
2022-06-16T11:21:42.7426680Z APPROACH:
2022-06-16T11:21:42.7426887Z Take an example for 2 disks :
2022-06-16T11:21:42.7427249Z Let rod 1 = 'SOURCE', rod 2 = 'TEMPORARY', rod 3 = 'DESTINATION'.
2022-06-16T11:21:42.7427429Z 
2022-06-16T11:21:42.7427637Z Step 1 : Shift first disk from 'SOURCE' to 'TEMPORARY'.
2022-06-16T11:21:42.7428104Z Step 2 : Shift second disk from 'SOURCE' to 'DESTINATION'.
2022-06-16T11:21:42.7428508Z Step 3 : Shift first disk from 'TEMPORARY' to 'DESTINATION'.
2022-06-16T11:21:42.7428684Z 
2022-06-16T11:21:42.7428776Z The pattern here is :
2022-06-16T11:21:42.7429076Z Shift 'n-1' disks from 'SOURCE' to 'TEMPORARY'.
2022-06-16T11:21:42.7429417Z Shift last disk from 'SOURCE' to 'DESTINATION'.
2022-06-16T11:21:42.7429927Z Shift 'n-1' disks from 'TEMPORARY' to 'DESTINATION'.
2022-06-16T11:21:42.7430175Z """
2022-06-16T11:21:42.7430425Z                                                                                         ^
2022-06-16T11:21:42.7430751Z ./tower_of_hanoi.py:4:89: E501 line too long (120 > 88 characters)
2022-06-16T11:21:42.7431185Z """Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move
2022-06-16T11:21:42.7431617Z     the entire stack to another rod, obeying the following simple rules:
2022-06-16T11:21:42.7431947Z 1) Only one disk can be moved at a time.
2022-06-16T11:21:42.7432414Z 2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk
2022-06-16T11:21:42.7432828Z     can only be moved if it is the uppermost disk on a stack.
2022-06-16T11:21:42.7433163Z 3) No disk may be placed on top of a smaller disk.
2022-06-16T11:21:42.7433425Z APPROACH:
2022-06-16T11:21:42.7433658Z Take an example for 2 disks :
2022-06-16T11:21:42.7434062Z Let rod 1 = 'SOURCE', rod 2 = 'TEMPORARY', rod 3 = 'DESTINATION'.
2022-06-16T11:21:42.7434262Z 
2022-06-16T11:21:42.7434496Z Step 1 : Shift first disk from 'SOURCE' to 'TEMPORARY'.
2022-06-16T11:21:42.7435040Z Step 2 : Shift second disk from 'SOURCE' to 'DESTINATION'.
2022-06-16T11:21:42.7435457Z Step 3 : Shift first disk from 'TEMPORARY' to 'DESTINATION'.
2022-06-16T11:21:42.7435659Z 
2022-06-16T11:21:42.7435764Z The pattern here is :
2022-06-16T11:21:42.7436119Z Shift 'n-1' disks from 'SOURCE' to 'TEMPORARY'.
2022-06-16T11:21:42.7436496Z Shift last disk from 'SOURCE' to 'DESTINATION'.
2022-06-16T11:21:42.7436897Z Shift 'n-1' disks from 'TEMPORARY' to 'DESTINATION'.
2022-06-16T11:21:42.7437161Z """
2022-06-16T11:21:42.7437409Z                                                                                         ^
2022-06-16T11:21:42.7437817Z ./daily_horoscope.py:11:1: C901 'check_sign' is too complex (13)
2022-06-16T11:21:42.7438108Z def check_sign():
2022-06-16T11:21:42.7438316Z ^
2022-06-16T11:21:42.7438566Z ./ftp_send_receive.py:2:1: W191 indentation contains tabs
2022-06-16T11:21:42.7438828Z """
2022-06-16T11:21:42.7439126Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7439484Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7439676Z 
2022-06-16T11:21:42.7439846Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7440233Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7440601Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7440910Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7441160Z """
2022-06-16T11:21:42.7441344Z ^
2022-06-16T11:21:42.7441595Z ./ftp_send_receive.py:3:1: W191 indentation contains tabs
2022-06-16T11:21:42.7441857Z """
2022-06-16T11:21:42.7442151Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7442503Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7442694Z 
2022-06-16T11:21:42.7442861Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7443246Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7443598Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7443916Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7444167Z """
2022-06-16T11:21:42.7444474Z ^
2022-06-16T11:21:42.7444823Z ./ftp_send_receive.py:5:1: W191 indentation contains tabs
2022-06-16T11:21:42.7445163Z """
2022-06-16T11:21:42.7445497Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7445823Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7445996Z 
2022-06-16T11:21:42.7446143Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7446480Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7446782Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7447064Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7447285Z """
2022-06-16T11:21:42.7447438Z ^
2022-06-16T11:21:42.7447670Z ./ftp_send_receive.py:6:1: W191 indentation contains tabs
2022-06-16T11:21:42.7447900Z """
2022-06-16T11:21:42.7448159Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7448466Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7448636Z 
2022-06-16T11:21:42.7448784Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7449120Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7449422Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7449703Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7449928Z """
2022-06-16T11:21:42.7450078Z ^
2022-06-16T11:21:42.7450332Z ./ftp_send_receive.py:6:3: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7450583Z """
2022-06-16T11:21:42.7450828Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7451233Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7451403Z 
2022-06-16T11:21:42.7451549Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7451884Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7452186Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7452469Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7452691Z """
2022-06-16T11:21:42.7452840Z   ^
2022-06-16T11:21:42.7453074Z ./ftp_send_receive.py:7:1: W191 indentation contains tabs
2022-06-16T11:21:42.7453305Z """
2022-06-16T11:21:42.7453551Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7453870Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7454039Z 
2022-06-16T11:21:42.7454185Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7454521Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7454827Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7455108Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7455328Z """
2022-06-16T11:21:42.7455477Z ^
2022-06-16T11:21:42.7455730Z ./ftp_send_receive.py:7:3: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7455980Z """
2022-06-16T11:21:42.7456225Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7456546Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7456713Z 
2022-06-16T11:21:42.7456859Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7457195Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7457494Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7457774Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7457993Z """
2022-06-16T11:21:42.7458145Z   ^
2022-06-16T11:21:42.7458371Z ./ftp_send_receive.py:7:50: W291 trailing whitespace
2022-06-16T11:21:42.7458595Z """
2022-06-16T11:21:42.7458837Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7459457Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7459647Z 
2022-06-16T11:21:42.7459906Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7460267Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7460604Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7460902Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7461136Z """
2022-06-16T11:21:42.7461295Z    
2022-06-16T11:21:42.7461501Z 	                                            ^
2022-06-16T11:21:42.7461780Z ./ftp_send_receive.py:8:1: W191 indentation contains tabs
2022-06-16T11:21:42.7462010Z """
2022-06-16T11:21:42.7462285Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7462719Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7462887Z 
2022-06-16T11:21:42.7463020Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7463354Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7463671Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7463952Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7464157Z """
2022-06-16T11:21:42.7464322Z ^
2022-06-16T11:21:42.7464577Z ./ftp_send_receive.py:8:3: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7464812Z """
2022-06-16T11:21:42.7465070Z 	File transfer protocol used to send and receive files using FTP server.
2022-06-16T11:21:42.7465390Z 	Use credentials to provide access to the FTP client
2022-06-16T11:21:42.7465558Z 
2022-06-16T11:21:42.7465693Z 	Note: Do not use root username & password for security reasons
2022-06-16T11:21:42.7466120Z 		  Create a seperate user and provide access to a home directory of the user
2022-06-16T11:21:42.7466435Z 		  Use login id and password of the user created 
2022-06-16T11:21:42.7466716Z 		  cwd here stands for current working directory
2022-06-16T11:21:42.7466925Z """
2022-06-16T11:21:42.7467088Z   ^
2022-06-16T11:21:42.7467326Z ./ftp_send_receive.py:18:1: W191 indentation contains tabs
2022-06-16T11:21:42.7467547Z """
2022-06-16T11:21:42.7467773Z 	The file which will be received via the FTP server
2022-06-16T11:21:42.7468072Z 	Enter the location of the file where the file is received
2022-06-16T11:21:42.7468290Z """
2022-06-16T11:21:42.7468453Z ^
2022-06-16T11:21:42.7468685Z ./ftp_send_receive.py:19:1: W191 indentation contains tabs
2022-06-16T11:21:42.7468898Z """
2022-06-16T11:21:42.7469123Z 	The file which will be received via the FTP server
2022-06-16T11:21:42.7469421Z 	Enter the location of the file where the file is received
2022-06-16T11:21:42.7469635Z """
2022-06-16T11:21:42.7469802Z ^
2022-06-16T11:21:42.7470056Z ./ftp_send_receive.py:24:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7470342Z     with open(filename, "wb") as out_file:
2022-06-16T11:21:42.7470551Z ^
2022-06-16T11:21:42.7470805Z ./ftp_send_receive.py:25:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7471126Z         ftp.retrbinary("RETR " + filename, out_file.write, 1024)
2022-06-16T11:21:42.7471367Z ^
2022-06-16T11:21:42.7471622Z ./ftp_send_receive.py:26:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7471883Z         ftp.quit()
2022-06-16T11:21:42.7472052Z ^
2022-06-16T11:21:42.7472281Z ./ftp_send_receive.py:30:1: W191 indentation contains tabs
2022-06-16T11:21:42.7472507Z """
2022-06-16T11:21:42.7472713Z 	The file which will be sent via the FTP server
2022-06-16T11:21:42.7473004Z 	The file send will be send to the current working directory
2022-06-16T11:21:42.7473236Z """
2022-06-16T11:21:42.7473384Z ^
2022-06-16T11:21:42.7473618Z ./ftp_send_receive.py:31:1: W191 indentation contains tabs
2022-06-16T11:21:42.7473852Z """
2022-06-16T11:21:42.7474057Z 	The file which will be sent via the FTP server
2022-06-16T11:21:42.7474348Z 	The file send will be send to the current working directory
2022-06-16T11:21:42.7474581Z """
2022-06-16T11:21:42.7474728Z ^
2022-06-16T11:21:42.7475049Z ./ftp_send_receive.py:36:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7475357Z     with open(filename, "rb") as in_file:
2022-06-16T11:21:42.7475552Z ^
2022-06-16T11:21:42.7476762Z ./ftp_send_receive.py:37:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7477172Z         ftp.storbinary("STOR " + filename, in_file)
2022-06-16T11:21:42.7477425Z ^
2022-06-16T11:21:42.7477699Z ./ftp_send_receive.py:38:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7478000Z         ftp.quit()
2022-06-16T11:21:42.7478206Z ^
2022-06-16T11:21:42.7478643Z ./next_number.py:1:34: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.7478995Z x, li, small, maxx, c = input(), list(), 0, 0, 1
2022-06-16T11:21:42.7479381Z                                  ^
2022-06-16T11:21:42.7479798Z ./next_number.py:17:43: E203 whitespace before ':'
2022-06-16T11:21:42.7480069Z li = li[: small + 1] + sorted(li[small + 1 :])
2022-06-16T11:21:42.7480304Z                                           ^
2022-06-16T11:21:42.7480552Z ./nmap_scan.py:14:89: E501 line too long (138 > 88 characters)
2022-06-16T11:21:42.7480957Z # Description			: This scans my scripts directory and gives a count of the different types of scripts, you need nmap installed to run this
2022-06-16T11:21:42.7481329Z              			                                                                        ^
2022-06-16T11:21:42.7481752Z ./nmap_scan.py:34:17: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7482048Z     if (tgtHost == None) | (tgtPorts[0] == None):
2022-06-16T11:21:42.7482271Z                 ^
2022-06-16T11:21:42.7482625Z ./nmap_scan.py:34:41: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7483084Z     if (tgtHost == None) | (tgtPorts[0] == None):
2022-06-16T11:21:42.7483320Z                                         ^
2022-06-16T11:21:42.7483677Z ./factorial_perm_comp.py:29:1: C901 'main' is too complex (13)
2022-06-16T11:21:42.7483907Z def main():
2022-06-16T11:21:42.7484085Z ^
2022-06-16T11:21:42.7484327Z ./WeatherGUI.py:5:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.7484889Z url = "https://weather.com/en-IN/weather/today/l/32355ced66b7ce3ab7ccafb0a4f45f12e7c915bcf8454f712efa57474ba8d6c8"
2022-06-16T11:21:42.7485266Z                                                                                         ^
2022-06-16T11:21:42.7485671Z ./encrypter-decrypter-gui.py:157:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7486162Z     # --------------------------------------------------Binding Functions of Page1 End Here
2022-06-16T11:21:42.7486485Z                                                                                         ^
2022-06-16T11:21:42.7486918Z ./encrypter-decrypter-gui.py:196:5: C901 'Notebook.backend_work' is too complex (13)
2022-06-16T11:21:42.7487256Z     def backend_work(self, todo, text_coming):
2022-06-16T11:21:42.7487477Z     ^
2022-06-16T11:21:42.7487987Z ./input matrice,product any order!.py:10:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7488354Z for i in range(0, rows):
2022-06-16T11:21:42.7488548Z     ^
2022-06-16T11:21:42.7489043Z ./input matrice,product any order!.py:11:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7489415Z     for j in range(0, coloumns):
2022-06-16T11:21:42.7489618Z         ^
2022-06-16T11:21:42.7490115Z ./input matrice,product any order!.py:30:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7490482Z for i in range(0, rows_):
2022-06-16T11:21:42.7490675Z     ^
2022-06-16T11:21:42.7491179Z ./input matrice,product any order!.py:31:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7491535Z     for j in range(0, coloumns_):
2022-06-16T11:21:42.7491738Z         ^
2022-06-16T11:21:42.7492332Z ./input matrice,product any order!.py:47:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7492695Z for i in range(0, rows):
2022-06-16T11:21:42.7492892Z     ^
2022-06-16T11:21:42.7493404Z ./input matrice,product any order!.py:48:9: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7493769Z     for j in range(0, coloumns_):
2022-06-16T11:21:42.7493956Z         ^
2022-06-16T11:21:42.7494285Z ./facebook id hack.py:5:1: F401 'threading' imported but unused
2022-06-16T11:21:42.7494543Z import threading
2022-06-16T11:21:42.7494717Z ^
2022-06-16T11:21:42.7495045Z ./facebook id hack.py:6:1: F401 'urllib.request' imported but unused
2022-06-16T11:21:42.7495315Z import urllib.request
2022-06-16T11:21:42.7495494Z ^
2022-06-16T11:21:42.7495796Z ./facebook id hack.py:7:1: F401 'os' imported but unused
2022-06-16T11:21:42.7496034Z import os
2022-06-16T11:21:42.7496195Z ^
2022-06-16T11:21:42.7496464Z ./facebook id hack.py:11:4: YTT201 `sys.version_info[0] == 3` referenced (python4), use `>=`
2022-06-16T11:21:42.7496758Z if sys.version_info[0] != 3:
2022-06-16T11:21:42.7496944Z    ^
2022-06-16T11:21:42.7497181Z ./facebook id hack.py:14:1: W191 indentation contains tabs
2022-06-16T11:21:42.7497531Z         """--------------------------------------
2022-06-16T11:21:42.7497774Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7497973Z 	use: python3 fb.py
2022-06-16T11:21:42.7498258Z --------------------------------------
2022-06-16T11:21:42.7498560Z 			"""
2022-06-16T11:21:42.7498713Z ^
2022-06-16T11:21:42.7498968Z ./facebook id hack.py:14:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7499711Z         """--------------------------------------
2022-06-16T11:21:42.7499954Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7500179Z 	use: python3 fb.py
2022-06-16T11:21:42.7500478Z --------------------------------------
2022-06-16T11:21:42.7500696Z 			"""
2022-06-16T11:21:42.7500873Z ^
2022-06-16T11:21:42.7506779Z ./facebook id hack.py:15:1: W191 indentation contains tabs
2022-06-16T11:21:42.7507206Z         """--------------------------------------
2022-06-16T11:21:42.7507449Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7507672Z 	use: python3 fb.py
2022-06-16T11:21:42.7507973Z --------------------------------------
2022-06-16T11:21:42.7508187Z 			"""
2022-06-16T11:21:42.7508363Z ^
2022-06-16T11:21:42.7508637Z ./facebook id hack.py:15:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7509017Z         """--------------------------------------
2022-06-16T11:21:42.7509277Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7509501Z 	use: python3 fb.py
2022-06-16T11:21:42.7509786Z --------------------------------------
2022-06-16T11:21:42.7510013Z 			"""
2022-06-16T11:21:42.7510190Z ^
2022-06-16T11:21:42.7510424Z ./facebook id hack.py:17:1: W191 indentation contains tabs
2022-06-16T11:21:42.7510792Z         """--------------------------------------
2022-06-16T11:21:42.7511041Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7511248Z 	use: python3 fb.py
2022-06-16T11:21:42.7511544Z --------------------------------------
2022-06-16T11:21:42.7511769Z 			"""
2022-06-16T11:21:42.7511929Z ^
2022-06-16T11:21:42.7512200Z ./facebook id hack.py:17:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7512589Z         """--------------------------------------
2022-06-16T11:21:42.7512838Z 	REQUIRED PYTHON 3.x
2022-06-16T11:21:42.7513049Z 	use: python3 fb.py
2022-06-16T11:21:42.7513345Z --------------------------------------
2022-06-16T11:21:42.7513586Z 			"""
2022-06-16T11:21:42.7513752Z ^
2022-06-16T11:21:42.7514008Z ./facebook id hack.py:23:89: E501 line too long (136 > 88 characters)
2022-06-16T11:21:42.7514571Z     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36",
2022-06-16T11:21:42.7515111Z                                                                                         ^
2022-06-16T11:21:42.7515831Z ./facebook id hack.py:30:12: C408 Unnecessary dict call - rewrite as a literal.
2022-06-16T11:21:42.7516137Z     form = dict()
2022-06-16T11:21:42.7516334Z            ^
2022-06-16T11:21:42.7516797Z ./mobilePhoneSpecsScrapper.py:34:9: F841 local variable 'err' is assigned to but never used
2022-06-16T11:21:42.7517179Z         except ConnectionError as err:
2022-06-16T11:21:42.7517425Z         ^
2022-06-16T11:21:42.7517725Z ./mobilePhoneSpecsScrapper.py:102:89: E501 line too long (120 > 88 characters)
2022-06-16T11:21:42.7518338Z         # Step 1: Scrape links to all the individual phone specs page and save it so that we don't need to run it again.
2022-06-16T11:21:42.7518745Z                                                                                         ^
2022-06-16T11:21:42.7519083Z ./mobilePhoneSpecsScrapper.py:107:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.7519519Z         # Step 2: Iterate through all the links from the above execution and run the next command
2022-06-16T11:21:42.7519889Z                                                                                         ^
2022-06-16T11:21:42.7520368Z ./EncryptionTool.py:55:5: F841 local variable 'datalistint' is assigned to but never used
2022-06-16T11:21:42.7520735Z     datalistint = [float(data) for data in datalist]
2022-06-16T11:21:42.7520991Z     ^
2022-06-16T11:21:42.7521392Z ./EncryptionTool.py:68:22: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.7521698Z     encrypted_list = list()
2022-06-16T11:21:42.7521932Z                      ^
2022-06-16T11:21:42.7522517Z ./EncryptionTool.py:69:5: F841 local variable 'encrypted_list_str' is assigned to but never used
2022-06-16T11:21:42.7522857Z     encrypted_list_str = list()
2022-06-16T11:21:42.7523089Z     ^
2022-06-16T11:21:42.7523492Z ./EncryptionTool.py:69:26: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.7523819Z     encrypted_list_str = list()
2022-06-16T11:21:42.7524054Z                          ^
2022-06-16T11:21:42.7524433Z ./string_rotation.py:11:5: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7524703Z     l = []
2022-06-16T11:21:42.7524884Z     ^
2022-06-16T11:21:42.7525239Z ./string_rotation.py:14:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7525522Z         l += ["".join(a)]
2022-06-16T11:21:42.7525719Z         ^
2022-06-16T11:21:42.7525975Z ./sha1.py:15:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.7526227Z         """
2022-06-16T11:21:42.7526626Z         Inititates the variables data and h. h is a list of 5 8-digit Hexadecimal
2022-06-16T11:21:42.7527006Z         numbers corresponding to (1732584193, 4023233417, 2562383102, 271733878, 3285377520)
2022-06-16T11:21:42.7527389Z         respectively. We will start with this as a message digest. 0x is how you write
2022-06-16T11:21:42.7527732Z         Hexadecimal numbers in Python
2022-06-16T11:21:42.7527958Z         """
2022-06-16T11:21:42.7528154Z            
2022-06-16T11:21:42.7528403Z                                                                             ^
2022-06-16T11:21:42.7528755Z ./sha1.py:42:31: E203 whitespace before ':'
2022-06-16T11:21:42.7529106Z             self.padded_data[i : i + 64] for i in range(0, len(self.padded_data), 64)
2022-06-16T11:21:42.7529411Z                               ^
2022-06-16T11:21:42.7529671Z ./sha1.py:48:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7529921Z         """
2022-06-16T11:21:42.7530361Z         Takes a bytestring-block of length 64, unpacks it to a list of integers and returns a
2022-06-16T11:21:42.7530736Z         list of 80 integers pafter some bit operations
2022-06-16T11:21:42.7530995Z         """
2022-06-16T11:21:42.7531191Z            
2022-06-16T11:21:42.7531422Z                                                                             ^
2022-06-16T11:21:42.7531719Z ./sha1.py:58:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7531968Z         """
2022-06-16T11:21:42.7532372Z         Calls all the other methods to process the input. Pads the data, then splits into
2022-06-16T11:21:42.7532806Z         blocks and then does a series of operations for each block (including expansion).
2022-06-16T11:21:42.7533223Z         For each block, the variable h that was initialized is copied to a,b,c,d,e
2022-06-16T11:21:42.7533645Z         and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are
2022-06-16T11:21:42.7534055Z         processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.
2022-06-16T11:21:42.7534433Z         This h becomes our final hash which is returned.
2022-06-16T11:21:42.7534695Z         """
2022-06-16T11:21:42.7534892Z            
2022-06-16T11:21:42.7535123Z                                                                             ^
2022-06-16T11:21:42.7535417Z ./sha1.py:59:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7535664Z         """
2022-06-16T11:21:42.7535969Z         Calls all the other methods to process the input. Pads the data, then splits into
2022-06-16T11:21:42.7536395Z         blocks and then does a series of operations for each block (including expansion).
2022-06-16T11:21:42.7536813Z         For each block, the variable h that was initialized is copied to a,b,c,d,e
2022-06-16T11:21:42.7537213Z         and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are
2022-06-16T11:21:42.7537636Z         processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.
2022-06-16T11:21:42.7538007Z         This h becomes our final hash which is returned.
2022-06-16T11:21:42.7538351Z         """
2022-06-16T11:21:42.7538536Z            
2022-06-16T11:21:42.7538785Z                                                                             ^
2022-06-16T11:21:42.7539260Z ./sha1.py:61:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7539513Z         """
2022-06-16T11:21:42.7539837Z         Calls all the other methods to process the input. Pads the data, then splits into
2022-06-16T11:21:42.7540268Z         blocks and then does a series of operations for each block (including expansion).
2022-06-16T11:21:42.7540670Z         For each block, the variable h that was initialized is copied to a,b,c,d,e
2022-06-16T11:21:42.7541089Z         and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are
2022-06-16T11:21:42.7541509Z         processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.
2022-06-16T11:21:42.7541883Z         This h becomes our final hash which is returned.
2022-06-16T11:21:42.7542132Z         """
2022-06-16T11:21:42.7542327Z            
2022-06-16T11:21:42.7542572Z                                                                             ^
2022-06-16T11:21:42.7542854Z ./sha1.py:62:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7543104Z         """
2022-06-16T11:21:42.7543423Z         Calls all the other methods to process the input. Pads the data, then splits into
2022-06-16T11:21:42.7543848Z         blocks and then does a series of operations for each block (including expansion).
2022-06-16T11:21:42.7544251Z         For each block, the variable h that was initialized is copied to a,b,c,d,e
2022-06-16T11:21:42.7544660Z         and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are
2022-06-16T11:21:42.7545083Z         processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.
2022-06-16T11:21:42.7545442Z         This h becomes our final hash which is returned.
2022-06-16T11:21:42.7545698Z         """
2022-06-16T11:21:42.7546020Z            
2022-06-16T11:21:42.7546242Z                                                                             ^
2022-06-16T11:21:42.7546529Z ./sha1.py:112:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7546769Z     """
2022-06-16T11:21:42.7547224Z     Provides option 'string' or 'file' to take input and prints the calculated SHA1 hash.
2022-06-16T11:21:42.7547723Z     unittest.main() has been commented because we probably dont want to run
2022-06-16T11:21:42.7548044Z     the test each time.
2022-06-16T11:21:42.7548256Z     """
2022-06-16T11:21:42.7548426Z        
2022-06-16T11:21:42.7548662Z                                                                                 ^
2022-06-16T11:21:42.7548966Z ./calculator.py:5:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7549209Z """
2022-06-16T11:21:42.7549541Z Written by  : Shreyas Daniel - github.com/shreydan
2022-06-16T11:21:42.7549850Z Description : Uses Pythons eval() function
2022-06-16T11:21:42.7550131Z               as a way to implement calculator.
2022-06-16T11:21:42.7550373Z              
2022-06-16T11:21:42.7550593Z Functions available are:
2022-06-16T11:21:42.7550919Z --------------------------------------------
2022-06-16T11:21:42.7551306Z                          + : addition
2022-06-16T11:21:42.7552075Z                          - : subtraction
2022-06-16T11:21:42.7552366Z                          * : multiplication
2022-06-16T11:21:42.7552603Z                          / : division
2022-06-16T11:21:42.7552845Z                          % : percentage
2022-06-16T11:21:42.7553087Z                          e : 2.718281...
2022-06-16T11:21:42.7553318Z                         pi : 3.141592... 
2022-06-16T11:21:42.7553564Z                       sine : sin(rad)
2022-06-16T11:21:42.7553809Z                     cosine : cos(rad)
2022-06-16T11:21:42.7554041Z                    exponent: x^y
2022-06-16T11:21:42.7554289Z                    tangent : tan(rad)
2022-06-16T11:21:42.7554536Z                  remainder : XmodY
2022-06-16T11:21:42.7554964Z                square root : sqrt(n)
2022-06-16T11:21:42.7555234Z   round to nearest integer : round(n)
2022-06-16T11:21:42.7555514Z convert degrees to radians : rad(deg)
2022-06-16T11:21:42.7555767Z absolute value             : aval(n)
2022-06-16T11:21:42.7555994Z """
2022-06-16T11:21:42.7556178Z ^
2022-06-16T11:21:42.7556416Z ./calculator.py:14:41: W291 trailing whitespace
2022-06-16T11:21:42.7556663Z """
2022-06-16T11:21:42.7557049Z Written by  : Shreyas Daniel - github.com/shreydan
2022-06-16T11:21:42.7557368Z Description : Uses Pythons eval() function
2022-06-16T11:21:42.7557660Z               as a way to implement calculator.
2022-06-16T11:21:42.7557905Z              
2022-06-16T11:21:42.7558132Z Functions available are:
2022-06-16T11:21:42.7558470Z --------------------------------------------
2022-06-16T11:21:42.7558742Z                          + : addition
2022-06-16T11:21:42.7559048Z                          - : subtraction
2022-06-16T11:21:42.7559297Z                          * : multiplication
2022-06-16T11:21:42.7559548Z                          / : division
2022-06-16T11:21:42.7559789Z                          % : percentage
2022-06-16T11:21:42.7560023Z                          e : 2.718281...
2022-06-16T11:21:42.7560266Z                         pi : 3.141592... 
2022-06-16T11:21:42.7560510Z                       sine : sin(rad)
2022-06-16T11:21:42.7560743Z                     cosine : cos(rad)
2022-06-16T11:21:42.7560989Z                    exponent: x^y
2022-06-16T11:21:42.7561236Z                    tangent : tan(rad)
2022-06-16T11:21:42.7561472Z                  remainder : XmodY
2022-06-16T11:21:42.7561723Z                square root : sqrt(n)
2022-06-16T11:21:42.7562113Z   round to nearest integer : round(n)
2022-06-16T11:21:42.7562379Z convert degrees to radians : rad(deg)
2022-06-16T11:21:42.7562621Z absolute value             : aval(n)
2022-06-16T11:21:42.7562836Z """
2022-06-16T11:21:42.7563134Z    
2022-06-16T11:21:42.7563324Z                                     ^
2022-06-16T11:21:42.7563730Z ./calculator.py:28:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.7564130Z ## Imported math library to run sin(), cos(), tan() and other such functions in the calculator
2022-06-16T11:21:42.7564420Z ^
2022-06-16T11:21:42.7564686Z ./calculator.py:28:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7565168Z ## Imported math library to run sin(), cos(), tan() and other such functions in the calculator
2022-06-16T11:21:42.7565530Z                                                                                         ^
2022-06-16T11:21:42.7565847Z ./calculator.py:113:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.7566242Z         "\nScientific Calculator\n\nFor Example: sin(rad(90)) + 50% * (sqrt(16)) + round(1.42^2)"
2022-06-16T11:21:42.7566607Z                                                                                         ^
2022-06-16T11:21:42.7567088Z ./sensors_information.py:47:5: F841 local variable 'arguments' is assigned to but never used
2022-06-16T11:21:42.7567462Z     arguments = parser.parse_args()
2022-06-16T11:21:42.7567703Z     ^
2022-06-16T11:21:42.7568036Z ./num-py.py:4:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7568314Z def get_array(x, y):
2022-06-16T11:21:42.7568528Z ^
2022-06-16T11:21:42.7568982Z ./classicIndianCardMatch.py:96:24: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7569357Z     while switchPlayer == True:
2022-06-16T11:21:42.7569601Z                        ^
2022-06-16T11:21:42.7570046Z ./classicIndianCardMatch.py:97:13: F811 redefinition of unused 'card' from line 23
2022-06-16T11:21:42.7570396Z         for card in range(len(player1)):
2022-06-16T11:21:42.7570637Z             ^
2022-06-16T11:21:42.7571130Z ./classicIndianCardMatch.py:110:24: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.7571497Z     while switchPlayer == False:
2022-06-16T11:21:42.7571743Z                        ^
2022-06-16T11:21:42.7572252Z ./diction.py:31:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.7572554Z     except Exception as e:
2022-06-16T11:21:42.7572779Z     ^
2022-06-16T11:21:42.7573047Z ./Palindrome_Checker.py:4:67: W291 trailing whitespace
2022-06-16T11:21:42.7573294Z """
2022-06-16T11:21:42.7573415Z 
2022-06-16T11:21:42.7573611Z A simple method is , to reverse the string and and compare with original string.
2022-06-16T11:21:42.7574105Z If both are same that's means string is palindrome otherwise else. 
2022-06-16T11:21:42.7574388Z """
2022-06-16T11:21:42.7574557Z    
2022-06-16T11:21:42.7574673Z 
2022-06-16T11:21:42.7574795Z                                                              ^
2022-06-16T11:21:42.7575098Z ./Guessing_Game.py:35:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7575473Z                     f"You nailed it! However, it took you all the {ATTEMPTS_ALLOWED} attempts."
2022-06-16T11:21:42.7575830Z                                                                                         ^
2022-06-16T11:21:42.7576144Z ./Tic_Tac_Toe.py:32:89: E501 line too long (105 > 88 characters)
2022-06-16T11:21:42.7577089Z     # Returns a list with the player's letter as the first item, and the computer's letter as the second.
2022-06-16T11:21:42.7577614Z                                                                                         ^
2022-06-16T11:21:42.7577935Z ./Tic_Tac_Toe.py:38:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.7579496Z     # the first element in the list is the player’s letter, the second is the computer's letter.
2022-06-16T11:21:42.7579901Z                                                                                         ^
2022-06-16T11:21:42.7580201Z ./Tic_Tac_Toe.py:63:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7580748Z     # Given a board and a player’s letter, this function returns True if that player has won.
2022-06-16T11:21:42.7581120Z                                                                                         ^
2022-06-16T11:21:42.7581429Z ./Tic_Tac_Toe.py:64:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7581931Z     # We use bo instead of board and le instead of letter so we don’t have to type as much.
2022-06-16T11:21:42.7582294Z                                                                                         ^
2022-06-16T11:21:42.7582926Z ./Tic_Tac_Toe.py:132:13: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7583242Z     if move != None:
2022-06-16T11:21:42.7583458Z             ^
2022-06-16T11:21:42.7583894Z ./webcam.py:26:12: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7584189Z     if ret == True:
2022-06-16T11:21:42.7584399Z            ^
2022-06-16T11:21:42.7584692Z ./SimpleStopWatch.py:9:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7585077Z         input()  # For ENTER. Use raw_input() if you are running python 2.x instead of input()
2022-06-16T11:21:42.7585444Z                                                                                         ^
2022-06-16T11:21:42.7585779Z ./personal_translator.py:16:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7586088Z def text_translator(Text):
2022-06-16T11:21:42.7586299Z ^
2022-06-16T11:21:42.7586850Z ./SOUNDEX.py:26:89: E501 line too long (132 > 88 characters)
2022-06-16T11:21:42.7587278Z     # Replace all the Characters with Numeric Values (instead of the first letter) with digits according to Soundex Algorythem Ruels
2022-06-16T11:21:42.7587661Z                                                                                         ^
2022-06-16T11:21:42.7587949Z ./SOUNDEX.py:55:89: E501 line too long (121 > 88 characters)
2022-06-16T11:21:42.7588495Z     # If the saved Characters’s Number is the same the resulting First Letter,keep the First Letter AND remove the Number
2022-06-16T11:21:42.7588882Z                                                                                         ^
2022-06-16T11:21:42.7589461Z ./Print_List_of_Odd_Numbers.py:5:12: C400 Unnecessary generator - rewrite as a list comprehension.
2022-06-16T11:21:42.7589810Z odd_list = list(i for i in n if i % 2 != 0)
2022-06-16T11:21:42.7590036Z            ^
2022-06-16T11:21:42.7590449Z ./Print_List_of_Odd_Numbers.py:19:16: C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.7590843Z     odd_list = [i for i in range(1, n + 1, 2)]  # creating string with number "i"
2022-06-16T11:21:42.7591108Z                ^
2022-06-16T11:21:42.7591482Z ./TTS.py:1:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7591777Z from tkinter import *
2022-06-16T11:21:42.7591981Z ^
2022-06-16T11:21:42.7592337Z ./TTS.py:18:7: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7592618Z tts = Tk()
2022-06-16T11:21:42.7592807Z       ^
2022-06-16T11:21:42.7593439Z ./TTS.py:23:5: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7593785Z f = Frame(tts, height=280, width=500, bg="#bebebe")
2022-06-16T11:21:42.7594030Z     ^
2022-06-16T11:21:42.7594435Z ./TTS.py:25:7: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7594774Z lbl = Label(f, text="Enter your Text here : ")
2022-06-16T11:21:42.7595024Z       ^
2022-06-16T11:21:42.7595431Z ./TTS.py:27:5: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7595728Z e = Entry(f, width=30)
2022-06-16T11:21:42.7595944Z     ^
2022-06-16T11:21:42.7596348Z ./TTS.py:29:7: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7596929Z btn = Button(f, text="Speak", command=text2Speech)
2022-06-16T11:21:42.7597170Z       ^
2022-06-16T11:21:42.7597418Z ./tic_tak_toe.py:10:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7597677Z def create_board():
2022-06-16T11:21:42.7597859Z ^
2022-06-16T11:21:42.7598178Z ./tic_tak_toe.py:16:5: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7598425Z     l = []
2022-06-16T11:21:42.7598593Z     ^
2022-06-16T11:21:42.7598984Z ./tic_tak_toe.py:45:16: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7599282Z         if win == True:
2022-06-16T11:21:42.7599468Z                ^
2022-06-16T11:21:42.7600001Z ./tic_tak_toe.py:61:16: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7600404Z         if win == True:
2022-06-16T11:21:42.7600622Z                ^
2022-06-16T11:21:42.7601077Z ./generate_permutations.py:1:15: E231 missing whitespace after ','
2022-06-16T11:21:42.7601384Z def generate(A,k):
2022-06-16T11:21:42.7601584Z               ^
2022-06-16T11:21:42.7601894Z ./generate_permutations.py:2:12: E225 missing whitespace around operator
2022-06-16T11:21:42.7602194Z     if k ==1:
2022-06-16T11:21:42.7602383Z            ^
2022-06-16T11:21:42.7602794Z ./generate_permutations.py:7:23: E231 missing whitespace after ','
2022-06-16T11:21:42.7603156Z             generate(A,k-1)
2022-06-16T11:21:42.7603394Z                       ^
2022-06-16T11:21:42.7603690Z ./generate_permutations.py:8:17: E225 missing whitespace around operator
2022-06-16T11:21:42.7604043Z             if(i<k-1):
2022-06-16T11:21:42.7604257Z                 ^
2022-06-16T11:21:42.7604562Z ./generate_permutations.py:9:21: E228 missing whitespace around modulo operator
2022-06-16T11:21:42.7604882Z                 if k%2 == 0:
2022-06-16T11:21:42.7605103Z                     ^
2022-06-16T11:21:42.7605485Z ./generate_permutations.py:10:25: E231 missing whitespace after ','
2022-06-16T11:21:42.7605884Z                     A[i],A[k-1] = A[k-1],A[i]
2022-06-16T11:21:42.7606123Z                         ^
2022-06-16T11:21:42.7606506Z ./generate_permutations.py:10:41: E231 missing whitespace after ','
2022-06-16T11:21:42.7606898Z                     A[i],A[k-1] = A[k-1],A[i]
2022-06-16T11:21:42.7607147Z                                         ^
2022-06-16T11:21:42.7607549Z ./generate_permutations.py:12:25: E231 missing whitespace after ','
2022-06-16T11:21:42.7608070Z                     A[0],A[k-1] = A[k-1],A[0]
2022-06-16T11:21:42.7608308Z                         ^
2022-06-16T11:21:42.7608706Z ./generate_permutations.py:12:41: E231 missing whitespace after ','
2022-06-16T11:21:42.7609081Z                     A[0],A[k-1] = A[k-1],A[0]
2022-06-16T11:21:42.7609332Z                                         ^
2022-06-16T11:21:42.7609708Z ./generate_permutations.py:14:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.7610098Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7610312Z ^
2022-06-16T11:21:42.7610686Z ./generate_permutations.py:14:7: E231 missing whitespace after ','
2022-06-16T11:21:42.7611025Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7611240Z       ^
2022-06-16T11:21:42.7611622Z ./generate_permutations.py:14:9: E231 missing whitespace after ','
2022-06-16T11:21:42.7611976Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7612175Z         ^
2022-06-16T11:21:42.7612563Z ./generate_permutations.py:14:11: E231 missing whitespace after ','
2022-06-16T11:21:42.7612912Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7613112Z           ^
2022-06-16T11:21:42.7613424Z ./generate_permutations.py:14:14: E261 at least two spaces before inline comment
2022-06-16T11:21:42.7613791Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7613990Z              ^
2022-06-16T11:21:42.7614401Z ./generate_permutations.py:14:15: E262 inline comment should start with '# '
2022-06-16T11:21:42.7614764Z A = [1,2,3,4] #test-case
2022-06-16T11:21:42.7614968Z               ^
2022-06-16T11:21:42.7615357Z ./generate_permutations.py:16:11: E231 missing whitespace after ','
2022-06-16T11:21:42.7615650Z generate(A,x)
2022-06-16T11:21:42.7615845Z           ^
2022-06-16T11:21:42.7616413Z ./check_for_sqlite_files.py:35:8: B007 Loop control variable 'd' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7616822Z for r, d, f in os.walk(r"."):
2022-06-16T11:21:42.7617054Z        ^
2022-06-16T11:21:42.7617310Z ./meme_maker.py:29:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7617699Z     # If the color of the text is not equal to white,then change the background to be white
2022-06-16T11:21:42.7618066Z                                                                                         ^
2022-06-16T11:21:42.7618477Z ./divisors_of_a_number.py:2:8: E225 missing whitespace around operator
2022-06-16T11:21:42.7618792Z while a<= 0 :
2022-06-16T11:21:42.7619000Z        ^
2022-06-16T11:21:42.7619509Z ./divisors_of_a_number.py:2:12: E203 whitespace before ':'
2022-06-16T11:21:42.7619784Z while a<= 0 :
2022-06-16T11:21:42.7619990Z            ^
2022-06-16T11:21:42.7620352Z ./divisors_of_a_number.py:4:8: E203 whitespace before ':'
2022-06-16T11:21:42.7620637Z     try :
2022-06-16T11:21:42.7620843Z        ^
2022-06-16T11:21:42.7621207Z ./divisors_of_a_number.py:6:22: E203 whitespace before ':'
2022-06-16T11:21:42.7621515Z     except ValueError :
2022-06-16T11:21:42.7621759Z                      ^
2022-06-16T11:21:42.7622149Z ./divisors_of_a_number.py:8:14: E203 whitespace before ':'
2022-06-16T11:21:42.7622422Z     if a <= 0 :
2022-06-16T11:21:42.7622637Z              ^
2022-06-16T11:21:42.7623041Z ./divisors_of_a_number.py:12:22: E231 missing whitespace after ','
2022-06-16T11:21:42.7623356Z for number in range(1,a + 1) :
2022-06-16T11:21:42.7623611Z                      ^
2022-06-16T11:21:42.7624003Z ./divisors_of_a_number.py:12:29: E203 whitespace before ':'
2022-06-16T11:21:42.7624303Z for number in range(1,a + 1) :
2022-06-16T11:21:42.7624555Z                             ^
2022-06-16T11:21:42.7624950Z ./divisors_of_a_number.py:14:14: E203 whitespace before ':'
2022-06-16T11:21:42.7625224Z     if b == 0 :
2022-06-16T11:21:42.7625439Z              ^
2022-06-16T11:21:42.7625828Z ./divisors_of_a_number.py:17:32: E203 whitespace before ':'
2022-06-16T11:21:42.7626134Z for item in list_number_divided :
2022-06-16T11:21:42.7626398Z                                ^
2022-06-16T11:21:42.7626863Z ./divisors_of_a_number.py:18:6: E111 indentation is not a multiple of 4
2022-06-16T11:21:42.7627241Z      print(f'{item}')
2022-06-16T11:21:42.7627462Z      ^
2022-06-16T11:21:42.7627821Z ./divisors_of_a_number.py:18:6: E117 over-indented
2022-06-16T11:21:42.7628158Z      print(f'{item}')
2022-06-16T11:21:42.7628365Z      ^
2022-06-16T11:21:42.7628749Z ./divisors_of_a_number.py:19:33: E203 whitespace before ':'
2022-06-16T11:21:42.7629072Z if len(list_number_divided) <= 2 :
2022-06-16T11:21:42.7629320Z                                 ^
2022-06-16T11:21:42.7629628Z ./divisors_of_a_number.py:20:51: W292 no newline at end of file
2022-06-16T11:21:42.7630135Z     print(number_to_divide + ' is a prime number')                                                  ^
2022-06-16T11:21:42.7630512Z ./spotifyAccount.py:37:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.7630987Z                 "https://api.proxyscrape.com/?request=getproxies&proxytype=socks4&timeout=10000&ssl=yes"
2022-06-16T11:21:42.7631404Z                                                                                         ^
2022-06-16T11:21:42.7631744Z ./spotifyAccount.py:69:89: E501 line too long (152 > 88 characters)
2022-06-16T11:21:42.7632445Z                 + f"Spotify Account Creator by KevinLage https://github.com/KevinLage/Spotify-Account-Creator Created: {created}/{maxi} Errors:{errors}"
2022-06-16T11:21:42.7632931Z                                                                                         ^
2022-06-16T11:21:42.7633277Z ./spotifyAccount.py:79:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.7633929Z             "creation_point": "https://login.app.spotify.com?utm_source=spotify&utm_medium=desktop-win32&utm_campaign=organic",
2022-06-16T11:21:42.7634369Z                                                                                         ^
2022-06-16T11:21:42.7635260Z ./spotifyAccount.py:111:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7635837Z         except:
2022-06-16T11:21:42.7636050Z         ^
2022-06-16T11:21:42.7636412Z ./spotifyAccount.py:111:9: E722 do not use bare 'except'
2022-06-16T11:21:42.7636694Z         except:
2022-06-16T11:21:42.7636904Z         ^
2022-06-16T11:21:42.7637282Z ./powerup_checks.py:15:89: E501 line too long (192 > 88 characters)
2022-06-16T11:21:42.7637877Z # Description			: Creates an output file by pulling all the servers for the given site from SQLITE database, then goes through the list pinging the servers to see if they are up on the network
2022-06-16T11:21:42.7638402Z              			                                                                        ^
2022-06-16T11:21:42.7638711Z ./powerup_checks.py:37:64: W291 trailing whitespace
2022-06-16T11:21:42.7638988Z text = """
2022-06-16T11:21:42.7639127Z 
2022-06-16T11:21:42.7639314Z You need to pass an argument, the options the script expects is 
2022-06-16T11:21:42.7639545Z 
2022-06-16T11:21:42.7639779Z     -site1		For the Servers relating to site1
2022-06-16T11:21:42.7639987Z     -site2	For the Servers located in site2"""
2022-06-16T11:21:42.7640071Z           
2022-06-16T11:21:42.7640079Z 
2022-06-16T11:21:42.7640195Z                                                    ^
2022-06-16T11:21:42.7640372Z ./powerup_checks.py:46:89: E501 line too long (152 > 88 characters)
2022-06-16T11:21:42.7640853Z         # ret = subprocess.call("ping -n 3 %s" % server.strip(), shell=True,stdout=open('NUL', 'w'),stderr=subprocess.STDOUT)	# Ping the servers in turn
2022-06-16T11:21:42.7640992Z                                                                                         ^
2022-06-16T11:21:42.7641301Z ./powerup_checks.py:90:16: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7641400Z         if row == None:
2022-06-16T11:21:42.7641485Z                ^
2022-06-16T11:21:42.7641929Z ./memorygame.py:1:1: F403 'from random import *' used; unable to detect undefined names
2022-06-16T11:21:42.7642035Z from random import *
2022-06-16T11:21:42.7642112Z ^
2022-06-16T11:21:42.7642436Z ./memorygame.py:2:1: F403 'from turtle import *' used; unable to detect undefined names
2022-06-16T11:21:42.7642540Z from turtle import *
2022-06-16T11:21:42.7642616Z ^
2022-06-16T11:21:42.7642960Z ./memorygame.py:13:5: F405 'up' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7643031Z     up()
2022-06-16T11:21:42.7643107Z     ^
2022-06-16T11:21:42.7643459Z ./memorygame.py:14:5: F405 'goto' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7643550Z     goto(x, y)
2022-06-16T11:21:42.7643627Z     ^
2022-06-16T11:21:42.7643974Z ./memorygame.py:15:5: F405 'down' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7644058Z     down()
2022-06-16T11:21:42.7644122Z     ^
2022-06-16T11:21:42.7644473Z ./memorygame.py:16:5: F405 'color' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7644587Z     color("black", "white")
2022-06-16T11:21:42.7644666Z     ^
2022-06-16T11:21:42.7645026Z ./memorygame.py:17:5: F405 'begin_fill' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7645117Z     begin_fill()
2022-06-16T11:21:42.7645195Z     ^
2022-06-16T11:21:42.7645638Z ./memorygame.py:18:9: B007 Loop control variable 'count' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7645750Z     for count in range(4):
2022-06-16T11:21:42.7645830Z         ^
2022-06-16T11:21:42.7646183Z ./memorygame.py:19:9: F405 'forward' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7646275Z         forward(50)
2022-06-16T11:21:42.7646356Z         ^
2022-06-16T11:21:42.7646697Z ./memorygame.py:20:9: F405 'left' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7646783Z         left(90)
2022-06-16T11:21:42.7646853Z         ^
2022-06-16T11:21:42.7647209Z ./memorygame.py:21:5: F405 'end_fill' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7647298Z     end_fill()
2022-06-16T11:21:42.7647375Z     ^
2022-06-16T11:21:42.7647724Z ./memorygame.py:49:5: F405 'clear' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7647889Z     clear()
2022-06-16T11:21:42.7647972Z     ^
2022-06-16T11:21:42.7648314Z ./memorygame.py:50:5: F405 'goto' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7648401Z     goto(0, 0)
2022-06-16T11:21:42.7648479Z     ^
2022-06-16T11:21:42.7648834Z ./memorygame.py:51:5: F405 'shape' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7648928Z     shape(car)
2022-06-16T11:21:42.7649005Z     ^
2022-06-16T11:21:42.7649357Z ./memorygame.py:52:5: F405 'stamp' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7649432Z     stamp()
2022-06-16T11:21:42.7649509Z     ^
2022-06-16T11:21:42.7649855Z ./memorygame.py:63:9: F405 'up' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7649940Z         up()
2022-06-16T11:21:42.7650021Z         ^
2022-06-16T11:21:42.7650369Z ./memorygame.py:64:9: F405 'goto' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7650470Z         goto(x + 2, y)
2022-06-16T11:21:42.7650537Z         ^
2022-06-16T11:21:42.7650888Z ./memorygame.py:65:9: F405 'color' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7650985Z         color("black")
2022-06-16T11:21:42.7651066Z         ^
2022-06-16T11:21:42.7651412Z ./memorygame.py:66:9: F405 'write' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7651563Z         write(tiles[mark], font=("Arial", 30, "normal"))
2022-06-16T11:21:42.7651645Z         ^
2022-06-16T11:21:42.7651997Z ./memorygame.py:68:5: F405 'update' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7652156Z     update()
2022-06-16T11:21:42.7652239Z     ^
2022-06-16T11:21:42.7652601Z ./memorygame.py:69:5: F405 'ontimer' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7652704Z     ontimer(draw, 100)
2022-06-16T11:21:42.7652783Z     ^
2022-06-16T11:21:42.7653143Z ./memorygame.py:72:1: F405 'shuffle' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7653240Z shuffle(tiles)
2022-06-16T11:21:42.7653301Z ^
2022-06-16T11:21:42.7653655Z ./memorygame.py:73:1: F405 'setup' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7653752Z setup(420, 420, 370, 0)
2022-06-16T11:21:42.7653829Z ^
2022-06-16T11:21:42.7654188Z ./memorygame.py:74:1: F405 'addshape' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7654285Z addshape(car)
2022-06-16T11:21:42.7654362Z ^
2022-06-16T11:21:42.7654712Z ./memorygame.py:75:1: F405 'hideturtle' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7654808Z hideturtle()
2022-06-16T11:21:42.7654885Z ^
2022-06-16T11:21:42.7655237Z ./memorygame.py:76:1: F405 'tracer' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7655328Z tracer(False)
2022-06-16T11:21:42.7655404Z ^
2022-06-16T11:21:42.7655782Z ./memorygame.py:77:1: F405 'onscreenclick' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7655884Z onscreenclick(tap)
2022-06-16T11:21:42.7655945Z ^
2022-06-16T11:21:42.7656294Z ./memorygame.py:79:1: F405 'done' may be undefined, or defined from star imports: random, turtle
2022-06-16T11:21:42.7656372Z done()
2022-06-16T11:21:42.7656447Z ^
2022-06-16T11:21:42.7656901Z ./blackJackGUI.py:126:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7657004Z     for i in range(2):
2022-06-16T11:21:42.7657084Z         ^
2022-06-16T11:21:42.7657413Z ./blackJackGUI.py:136:16: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7657517Z     if in_play == True:
2022-06-16T11:21:42.7657600Z                ^
2022-06-16T11:21:42.7657923Z ./blackJackGUI.py:144:9: F841 local variable 'outcome' is assigned to but never used
2022-06-16T11:21:42.7658033Z         outcome = "you won!!"
2022-06-16T11:21:42.7658188Z         ^
2022-06-16T11:21:42.7658527Z ./blackJackGUI.py:145:5: F841 local variable 'score1' is assigned to but never used
2022-06-16T11:21:42.7658647Z     score1 = str(player_card.get_value())
2022-06-16T11:21:42.7658725Z     ^
2022-06-16T11:21:42.7659178Z ./blackJackGUI.py:146:5: F841 local variable 'score2' is assigned to but never used
2022-06-16T11:21:42.7659323Z     score2 = str(dealer_card.get_value())
2022-06-16T11:21:42.7659404Z     ^
2022-06-16T11:21:42.7659756Z ./blackJackGUI.py:151:16: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7659857Z     if in_play == True:
2022-06-16T11:21:42.7659932Z                ^
2022-06-16T11:21:42.7660139Z ./translation_of_sizes_of_underwear_RU.py:44:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.7660507Z     f'Выбранный Вами размер "{req[0]}" в системе размеров "{country[req[1]]}" будет: {my_found(req)}'
2022-06-16T11:21:42.7660661Z                                                                                         ^
2022-06-16T11:21:42.7661008Z ./random-sentences.py:35:17: C417 Unnecessary use of map - use a list comprehension instead.
2022-06-16T11:21:42.7661193Z for sentence in list(map(lambda x: random_sentence(), range(0, 20))):
2022-06-16T11:21:42.7661281Z                 ^
2022-06-16T11:21:42.7661631Z ./random-sentences.py:40:21: C417 Unnecessary use of map - use a list comprehension instead.
2022-06-16T11:21:42.7661809Z story = (". ").join(list(map(lambda x: random_sentence(), range(0, 20))))
2022-06-16T11:21:42.7661884Z                     ^
2022-06-16T11:21:42.7662202Z ./pan.py:3:1: F403 'from matplotlib import *' used; unable to detect undefined names
2022-06-16T11:21:42.7662451Z from matplotlib import *
2022-06-16T11:21:42.7662528Z ^
2022-06-16T11:21:42.7662791Z ./pan.py:3:1: F401 'matplotlib.*' imported but unused
2022-06-16T11:21:42.7662904Z from matplotlib import *
2022-06-16T11:21:42.7662981Z ^
2022-06-16T11:21:42.7663207Z ./rotate_string.py:8:13: E203 whitespace before ':'
2022-06-16T11:21:42.7663373Z     s1 = s[0 : len(s) - val]
2022-06-16T11:21:42.7663456Z             ^
2022-06-16T11:21:42.7663695Z ./rotate_string.py:9:24: E203 whitespace before ':'
2022-06-16T11:21:42.7663851Z     s2 = s[len(s) - val :]
2022-06-16T11:21:42.7663942Z                        ^
2022-06-16T11:21:42.7664104Z ./find_prime.py:3:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.7664257Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7664282Z 
2022-06-16T11:21:42.7664512Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7664525Z 
2022-06-16T11:21:42.7664608Z #USAGE:
2022-06-16T11:21:42.7664804Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7664812Z 
2022-06-16T11:21:42.7664894Z ##THEORY
2022-06-16T11:21:42.7665121Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7665416Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7665425Z 
2022-06-16T11:21:42.7665703Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7665975Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7666386Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7666574Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7666598Z 
2022-06-16T11:21:42.7666930Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7666938Z 
2022-06-16T11:21:42.7667236Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7667494Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7668000Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7668168Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7668586Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7668790Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7669172Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7669254Z """
2022-06-16T11:21:42.7669360Z                                                        
2022-06-16T11:21:42.7669369Z 
2022-06-16T11:21:42.7669467Z                                ^
2022-06-16T11:21:42.7669629Z ./find_prime.py:10:89: E501 line too long (129 > 88 characters)
2022-06-16T11:21:42.7669804Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7669812Z 
2022-06-16T11:21:42.7670054Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7670062Z 
2022-06-16T11:21:42.7670144Z #USAGE:
2022-06-16T11:21:42.7670337Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7670346Z 
2022-06-16T11:21:42.7670426Z ##THEORY
2022-06-16T11:21:42.7670639Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7670926Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7671019Z 
2022-06-16T11:21:42.7671312Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7671584Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7672005Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7672209Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7672217Z 
2022-06-16T11:21:42.7672565Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7672573Z 
2022-06-16T11:21:42.7672870Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7673129Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7673542Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7673702Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7674101Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7674311Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7674778Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7674902Z """
2022-06-16T11:21:42.7675040Z                                                        
2022-06-16T11:21:42.7675050Z 
2022-06-16T11:21:42.7675365Z                                ^
2022-06-16T11:21:42.7675574Z ./find_prime.py:12:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.7675796Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7675810Z 
2022-06-16T11:21:42.7676079Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7676087Z 
2022-06-16T11:21:42.7676207Z #USAGE:
2022-06-16T11:21:42.7676454Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7676462Z 
2022-06-16T11:21:42.7676642Z ##THEORY
2022-06-16T11:21:42.7676953Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7677878Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7677899Z 
2022-06-16T11:21:42.7678230Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7678548Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7679036Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7679283Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7679293Z 
2022-06-16T11:21:42.7679673Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7679682Z 
2022-06-16T11:21:42.7680024Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7680406Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7680856Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7680993Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7681448Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7681686Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7682275Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7682392Z """
2022-06-16T11:21:42.7682552Z                                                        
2022-06-16T11:21:42.7682561Z 
2022-06-16T11:21:42.7682697Z                                ^
2022-06-16T11:21:42.7682940Z ./find_prime.py:12:128: W291 trailing whitespace
2022-06-16T11:21:42.7683090Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7683171Z 
2022-06-16T11:21:42.7683387Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7683395Z 
2022-06-16T11:21:42.7683515Z #USAGE:
2022-06-16T11:21:42.7683756Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7683764Z 
2022-06-16T11:21:42.7683887Z ##THEORY
2022-06-16T11:21:42.7684154Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7684465Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7684478Z 
2022-06-16T11:21:42.7684778Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7685120Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7685583Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7685764Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7685827Z 
2022-06-16T11:21:42.7686148Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7686155Z 
2022-06-16T11:21:42.7686489Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7686783Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7687221Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7687409Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7687974Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7688244Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7688663Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7688781Z """
2022-06-16T11:21:42.7688889Z                                                        
2022-06-16T11:21:42.7688898Z 
2022-06-16T11:21:42.7689066Z                                                                       ^
2022-06-16T11:21:42.7689269Z ./find_prime.py:13:89: E501 line too long (124 > 88 characters)
2022-06-16T11:21:42.7689474Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7689482Z 
2022-06-16T11:21:42.7689748Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7689756Z 
2022-06-16T11:21:42.7689943Z #USAGE:
2022-06-16T11:21:42.7690192Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7690202Z 
2022-06-16T11:21:42.7690323Z ##THEORY
2022-06-16T11:21:42.7690533Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7690848Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7690855Z 
2022-06-16T11:21:42.7691158Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7691453Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7691997Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7692247Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7692256Z 
2022-06-16T11:21:42.7692678Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7692689Z 
2022-06-16T11:21:42.7693027Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7693291Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7714304Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7714542Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7715027Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7715242Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7715611Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7715696Z """
2022-06-16T11:21:42.7715821Z                                                        
2022-06-16T11:21:42.7715833Z 
2022-06-16T11:21:42.7715914Z                                ^
2022-06-16T11:21:42.7716061Z ./find_prime.py:13:125: W291 trailing whitespace
2022-06-16T11:21:42.7716222Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7716230Z 
2022-06-16T11:21:42.7716586Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7716594Z 
2022-06-16T11:21:42.7716674Z #USAGE:
2022-06-16T11:21:42.7716859Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7716870Z 
2022-06-16T11:21:42.7716950Z ##THEORY
2022-06-16T11:21:42.7717164Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7717410Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7717431Z 
2022-06-16T11:21:42.7717864Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7718136Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7718525Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7718713Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7718721Z 
2022-06-16T11:21:42.7719040Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7719053Z 
2022-06-16T11:21:42.7719334Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7719573Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7719955Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7720100Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7720600Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7720769Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7721107Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7721181Z """
2022-06-16T11:21:42.7721290Z                                                        
2022-06-16T11:21:42.7721398Z 
2022-06-16T11:21:42.7721524Z                                                                    ^
2022-06-16T11:21:42.7721673Z ./find_prime.py:14:89: E501 line too long (121 > 88 characters)
2022-06-16T11:21:42.7721824Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7721830Z 
2022-06-16T11:21:42.7722048Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7722055Z 
2022-06-16T11:21:42.7722132Z #USAGE:
2022-06-16T11:21:42.7722301Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7722308Z 
2022-06-16T11:21:42.7722384Z ##THEORY
2022-06-16T11:21:42.7722587Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7722838Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7722845Z 
2022-06-16T11:21:42.7723212Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7723463Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7723844Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7724033Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7724041Z 
2022-06-16T11:21:42.7724362Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7724369Z 
2022-06-16T11:21:42.7724653Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7724874Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7725251Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7725398Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7725774Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7726088Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7726500Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7726583Z """
2022-06-16T11:21:42.7726696Z                                                        
2022-06-16T11:21:42.7726704Z 
2022-06-16T11:21:42.7726794Z                                ^
2022-06-16T11:21:42.7726915Z ./find_prime.py:14:122: W291 trailing whitespace
2022-06-16T11:21:42.7727108Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7727116Z 
2022-06-16T11:21:42.7727330Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7727343Z 
2022-06-16T11:21:42.7727419Z #USAGE:
2022-06-16T11:21:42.7727606Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7727613Z 
2022-06-16T11:21:42.7727795Z ##THEORY
2022-06-16T11:21:42.7727988Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7728230Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7728237Z 
2022-06-16T11:21:42.7728467Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7728676Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7729017Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7729186Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7729279Z 
2022-06-16T11:21:42.7729589Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7729595Z 
2022-06-16T11:21:42.7729849Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7730066Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7730411Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7730542Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7730883Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7731058Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7731359Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7731432Z """
2022-06-16T11:21:42.7731535Z                                                        
2022-06-16T11:21:42.7731542Z 
2022-06-16T11:21:42.7731649Z                                                                 ^
2022-06-16T11:21:42.7731786Z ./find_prime.py:17:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.7731930Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7731936Z 
2022-06-16T11:21:42.7732137Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7732143Z 
2022-06-16T11:21:42.7732215Z #USAGE:
2022-06-16T11:21:42.7732365Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7732386Z 
2022-06-16T11:21:42.7732443Z ##THEORY
2022-06-16T11:21:42.7732637Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7732874Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7732997Z 
2022-06-16T11:21:42.7733245Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7733481Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7733916Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7734109Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7734117Z 
2022-06-16T11:21:42.7734431Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7734439Z 
2022-06-16T11:21:42.7734707Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7734934Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7735288Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7735429Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7735791Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7736080Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7736394Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7736464Z """
2022-06-16T11:21:42.7736567Z                                                        
2022-06-16T11:21:42.7736573Z 
2022-06-16T11:21:42.7736657Z                                ^
2022-06-16T11:21:42.7736779Z ./find_prime.py:21:89: E501 line too long (126 > 88 characters)
2022-06-16T11:21:42.7736920Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7737004Z 
2022-06-16T11:21:42.7737209Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7737216Z 
2022-06-16T11:21:42.7737287Z #USAGE:
2022-06-16T11:21:42.7737454Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7737460Z 
2022-06-16T11:21:42.7737532Z ##THEORY
2022-06-16T11:21:42.7737726Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7737962Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7737968Z 
2022-06-16T11:21:42.7738197Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7738419Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7738743Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7738914Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7738921Z 
2022-06-16T11:21:42.7739364Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7739374Z 
2022-06-16T11:21:42.7739640Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7739854Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7740197Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7740328Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7740666Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7740839Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7741141Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7741210Z """
2022-06-16T11:21:42.7741313Z                                                        
2022-06-16T11:21:42.7741319Z 
2022-06-16T11:21:42.7741501Z                                ^
2022-06-16T11:21:42.7741641Z ./find_prime.py:21:127: W291 trailing whitespace
2022-06-16T11:21:42.7741782Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7741789Z 
2022-06-16T11:21:42.7741988Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7741995Z 
2022-06-16T11:21:42.7742066Z #USAGE:
2022-06-16T11:21:42.7742234Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7742241Z 
2022-06-16T11:21:42.7742299Z ##THEORY
2022-06-16T11:21:42.7742488Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7742730Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7742736Z 
2022-06-16T11:21:42.7743086Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7743329Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7743691Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7743870Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7743877Z 
2022-06-16T11:21:42.7744186Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7744193Z 
2022-06-16T11:21:42.7744461Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7744783Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7745133Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7745274Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7745645Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7745829Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7746255Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7746326Z """
2022-06-16T11:21:42.7746429Z                                                        
2022-06-16T11:21:42.7746436Z 
2022-06-16T11:21:42.7746548Z                                                                      ^
2022-06-16T11:21:42.7746689Z ./find_prime.py:23:89: E501 line too long (126 > 88 characters)
2022-06-16T11:21:42.7746814Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7746820Z 
2022-06-16T11:21:42.7747021Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7747027Z 
2022-06-16T11:21:42.7747102Z #USAGE:
2022-06-16T11:21:42.7747265Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7747272Z 
2022-06-16T11:21:42.7747343Z ##THEORY
2022-06-16T11:21:42.7747533Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7747769Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7747775Z 
2022-06-16T11:21:42.7748003Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7748227Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7748568Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7748722Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7748729Z 
2022-06-16T11:21:42.7749082Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7749093Z 
2022-06-16T11:21:42.7749359Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7749571Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7749912Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7750045Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7750385Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7750561Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7750875Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7750933Z """
2022-06-16T11:21:42.7751037Z                                                        
2022-06-16T11:21:42.7751043Z 
2022-06-16T11:21:42.7751128Z                                ^
2022-06-16T11:21:42.7751253Z ./find_prime.py:23:127: W291 trailing whitespace
2022-06-16T11:21:42.7751396Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7751402Z 
2022-06-16T11:21:42.7751600Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7751607Z 
2022-06-16T11:21:42.7751680Z #USAGE:
2022-06-16T11:21:42.7751841Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7751938Z 
2022-06-16T11:21:42.7752015Z ##THEORY
2022-06-16T11:21:42.7752199Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7752435Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7752441Z 
2022-06-16T11:21:42.7752674Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7753017Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7753380Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7753560Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7753567Z 
2022-06-16T11:21:42.7753874Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7753883Z 
2022-06-16T11:21:42.7754151Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7754379Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7754748Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7754873Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7755235Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7755418Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7755753Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7755827Z """
2022-06-16T11:21:42.7756041Z                                                        
2022-06-16T11:21:42.7756051Z 
2022-06-16T11:21:42.7756164Z                                                                      ^
2022-06-16T11:21:42.7756301Z ./find_prime.py:25:89: E501 line too long (111 > 88 characters)
2022-06-16T11:21:42.7756426Z """Author Anurag Kumar(mailto:anuragkumara95@gmail.com)
2022-06-16T11:21:42.7756447Z 
2022-06-16T11:21:42.7756696Z A prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.
2022-06-16T11:21:42.7756706Z 
2022-06-16T11:21:42.7756786Z #USAGE:
2022-06-16T11:21:42.7756955Z   - $pythonfind_prime.py <num:int>
2022-06-16T11:21:42.7756961Z 
2022-06-16T11:21:42.7757033Z ##THEORY
2022-06-16T11:21:42.7757224Z -Sieve of Eratosthenes(source:wikipedia.com)
2022-06-16T11:21:42.7757462Z     In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.
2022-06-16T11:21:42.7757469Z 
2022-06-16T11:21:42.7757697Z     It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime 
2022-06-16T11:21:42.7757924Z     number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant 
2022-06-16T11:21:42.7758269Z     difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to 
2022-06-16T11:21:42.7758425Z     sequentially test each candidate number for divisibility by each prime.
2022-06-16T11:21:42.7758447Z 
2022-06-16T11:21:42.7758722Z     To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
2022-06-16T11:21:42.7758729Z 
2022-06-16T11:21:42.7758980Z       - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2022-06-16T11:21:42.7759195Z       - Initially, let p equal 2, the smallest prime number.
2022-06-16T11:21:42.7759536Z       - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 
2022-06-16T11:21:42.7759743Z         3p, 4p, ...; the p itself should not be marked).
2022-06-16T11:21:42.7760086Z       - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let 
2022-06-16T11:21:42.7760258Z         p now equal this new number (which is the next prime), and repeat from step 3.
2022-06-16T11:21:42.7760576Z       - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.
2022-06-16T11:21:42.7760645Z """
2022-06-16T11:21:42.7760734Z                                                        
2022-06-16T11:21:42.7760741Z 
2022-06-16T11:21:42.7760827Z                                ^
2022-06-16T11:21:42.7761035Z ./find_prime.py:33:50: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7761166Z         if res_list != [] and any(i % l == 0 for l in res_list):
2022-06-16T11:21:42.7761264Z                                                  ^
2022-06-16T11:21:42.7761472Z ./find_prime.py:46:5: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7761562Z     l = find_prime(num)
2022-06-16T11:21:42.7761617Z     ^
2022-06-16T11:21:42.7761980Z ./length.py:6:5: B007 Loop control variable 's' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7762058Z for s in str:
2022-06-16T11:21:42.7762126Z     ^
2022-06-16T11:21:42.7762266Z ./new_script.py:15:89: E501 line too long (112 > 88 characters)
2022-06-16T11:21:42.7762481Z text = """You need to pass an argument for the new script you want to create, followed by the script name.  You can use
2022-06-16T11:21:42.7762628Z 	-python	: Python Script
2022-06-16T11:21:42.7762755Z 	-bash	: Bash Script
2022-06-16T11:21:42.7762877Z 	-ksh	: Korn Shell Script
2022-06-16T11:21:42.7763127Z 	-sql	: SQL Script"""
2022-06-16T11:21:42.7763258Z                                                                                         ^
2022-06-16T11:21:42.7763401Z ./new_script.py:16:1: W191 indentation contains tabs
2022-06-16T11:21:42.7763633Z text = """You need to pass an argument for the new script you want to create, followed by the script name.  You can use
2022-06-16T11:21:42.7763782Z 	-python	: Python Script
2022-06-16T11:21:42.7763915Z 	-bash	: Bash Script
2022-06-16T11:21:42.7764042Z 	-ksh	: Korn Shell Script
2022-06-16T11:21:42.7764176Z 	-sql	: SQL Script"""
2022-06-16T11:21:42.7764316Z ^
2022-06-16T11:21:42.7764472Z ./new_script.py:17:1: W191 indentation contains tabs
2022-06-16T11:21:42.7764699Z text = """You need to pass an argument for the new script you want to create, followed by the script name.  You can use
2022-06-16T11:21:42.7764851Z 	-python	: Python Script
2022-06-16T11:21:42.7764981Z 	-bash	: Bash Script
2022-06-16T11:21:42.7765107Z 	-ksh	: Korn Shell Script
2022-06-16T11:21:42.7765241Z 	-sql	: SQL Script"""
2022-06-16T11:21:42.7765314Z ^
2022-06-16T11:21:42.7765453Z ./new_script.py:18:1: W191 indentation contains tabs
2022-06-16T11:21:42.7765681Z text = """You need to pass an argument for the new script you want to create, followed by the script name.  You can use
2022-06-16T11:21:42.7765833Z 	-python	: Python Script
2022-06-16T11:21:42.7766066Z 	-bash	: Bash Script
2022-06-16T11:21:42.7766200Z 	-ksh	: Korn Shell Script
2022-06-16T11:21:42.7766312Z 	-sql	: SQL Script"""
2022-06-16T11:21:42.7766379Z ^
2022-06-16T11:21:42.7766633Z ./new_script.py:19:1: W191 indentation contains tabs
2022-06-16T11:21:42.7766858Z text = """You need to pass an argument for the new script you want to create, followed by the script name.  You can use
2022-06-16T11:21:42.7767004Z 	-python	: Python Script
2022-06-16T11:21:42.7767136Z 	-bash	: Bash Script
2022-06-16T11:21:42.7767277Z 	-ksh	: Korn Shell Script
2022-06-16T11:21:42.7767395Z 	-sql	: SQL Script"""
2022-06-16T11:21:42.7767467Z ^
2022-06-16T11:21:42.7767633Z ./new_script.py:22:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7767719Z     print(text)
2022-06-16T11:21:42.7767789Z ^
2022-06-16T11:21:42.7767952Z ./new_script.py:23:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7768114Z     sys.exit()
2022-06-16T11:21:42.7768171Z ^
2022-06-16T11:21:42.7768335Z ./new_script.py:26:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7768421Z     print(text)
2022-06-16T11:21:42.7768492Z ^
2022-06-16T11:21:42.7768658Z ./new_script.py:27:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7768741Z     sys.exit()
2022-06-16T11:21:42.7768810Z ^
2022-06-16T11:21:42.7768955Z ./new_script.py:29:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7769129Z     if "-python" in sys.argv[1]:
2022-06-16T11:21:42.7769201Z ^
2022-06-16T11:21:42.7769361Z ./new_script.py:30:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7769470Z         config_file = "python.cfg"
2022-06-16T11:21:42.7769540Z ^
2022-06-16T11:21:42.7769701Z ./new_script.py:31:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7769784Z         extension = ".py"
2022-06-16T11:21:42.7769858Z ^
2022-06-16T11:21:42.7770014Z ./new_script.py:32:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7770175Z     elif "-bash" in sys.argv[1]:
2022-06-16T11:21:42.7770245Z ^
2022-06-16T11:21:42.7770406Z ./new_script.py:33:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7770507Z         config_file = "bash.cfg"
2022-06-16T11:21:42.7770565Z ^
2022-06-16T11:21:42.7770722Z ./new_script.py:34:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7770818Z         extension = ".bash"
2022-06-16T11:21:42.7770888Z ^
2022-06-16T11:21:42.7771046Z ./new_script.py:35:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7771201Z     elif "-ksh" in sys.argv[1]:
2022-06-16T11:21:42.7771271Z ^
2022-06-16T11:21:42.7771415Z ./new_script.py:36:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7771514Z         config_file = "ksh.cfg"
2022-06-16T11:21:42.7771585Z ^
2022-06-16T11:21:42.7771740Z ./new_script.py:37:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7771840Z         extension = ".ksh"
2022-06-16T11:21:42.7771910Z ^
2022-06-16T11:21:42.7772070Z ./new_script.py:38:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7772211Z     elif "-sql" in sys.argv[1]:
2022-06-16T11:21:42.7772283Z ^
2022-06-16T11:21:42.7772513Z ./new_script.py:39:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7772621Z         config_file = "sql.cfg"
2022-06-16T11:21:42.7772691Z ^
2022-06-16T11:21:42.7772848Z ./new_script.py:40:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7773059Z         extension = ".sql"
2022-06-16T11:21:42.7773117Z ^
2022-06-16T11:21:42.7773403Z ./new_script.py:41:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7773480Z     else:
2022-06-16T11:21:42.7773550Z ^
2022-06-16T11:21:42.7773706Z ./new_script.py:42:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7773894Z         print("Unknown option - " + text)
2022-06-16T11:21:42.7773970Z ^
2022-06-16T11:21:42.7774112Z ./new_script.py:43:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7774196Z         sys.exit()
2022-06-16T11:21:42.7774266Z ^
2022-06-16T11:21:42.7774426Z ./new_script.py:56:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7774522Z     os.mkdir(outputdir)
2022-06-16T11:21:42.7774596Z ^
2022-06-16T11:21:42.7774752Z ./new_script.py:64:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7774864Z     line = line.replace(old_text, new_text)
2022-06-16T11:21:42.7774933Z ^
2022-06-16T11:21:42.7775090Z ./new_script.py:65:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7775215Z     line = line.replace(old_date, new_date)
2022-06-16T11:21:42.7775285Z ^
2022-06-16T11:21:42.7775441Z ./new_script.py:66:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7775542Z     newscript.write(line)
2022-06-16T11:21:42.7775598Z ^
2022-06-16T11:21:42.7775908Z ./whatsapp-monitor.py:4:19: W291 trailing whitespace
2022-06-16T11:21:42.7775981Z """
2022-06-16T11:21:42.7776216Z Author- Tony Stark 
2022-06-16T11:21:42.7776225Z 
2022-06-16T11:21:42.7776396Z download https://github.com/mozilla/geckodriver/releases
2022-06-16T11:21:42.7776403Z 
2022-06-16T11:21:42.7776524Z set path paste binary file /usr/local/bin 
2022-06-16T11:21:42.7776530Z 
2022-06-16T11:21:42.7776741Z install requirements: python -m pip install selenium
2022-06-16T11:21:42.7776749Z 
2022-06-16T11:21:42.7776816Z """
2022-06-16T11:21:42.7776883Z    
2022-06-16T11:21:42.7776942Z               ^
2022-06-16T11:21:42.7777149Z ./whatsapp-monitor.py:8:42: W291 trailing whitespace
2022-06-16T11:21:42.7777216Z """
2022-06-16T11:21:42.7777341Z Author- Tony Stark 
2022-06-16T11:21:42.7777347Z 
2022-06-16T11:21:42.7777502Z download https://github.com/mozilla/geckodriver/releases
2022-06-16T11:21:42.7777508Z 
2022-06-16T11:21:42.7777629Z set path paste binary file /usr/local/bin 
2022-06-16T11:21:42.7777638Z 
2022-06-16T11:21:42.7777961Z install requirements: python -m pip install selenium
2022-06-16T11:21:42.7777969Z 
2022-06-16T11:21:42.7778039Z """
2022-06-16T11:21:42.7778673Z    
2022-06-16T11:21:42.7778797Z                    
2022-06-16T11:21:42.7778806Z 
2022-06-16T11:21:42.7778888Z                 ^
2022-06-16T11:21:42.7779390Z ./whatsapp-monitor.py:15:1: F401 'os' imported but unused
2022-06-16T11:21:42.7779487Z import os
2022-06-16T11:21:42.7779563Z ^
2022-06-16T11:21:42.7779853Z ./whatsapp-monitor.py:31:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7780032Z             "/html/body/div[1]/div/div/div[2]/div[1]/span/div/span/div/div[1]/div/label/input"
2022-06-16T11:21:42.7780170Z                                                                                         ^
2022-06-16T11:21:42.7780438Z ./whatsapp-monitor.py:38:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.7780642Z             "/html/body/div[1]/div/div/div[2]/div[1]/span/div/span/div/div[2]/div[1]/div/div/div[2]/div/div"
2022-06-16T11:21:42.7780785Z                                                                                         ^
2022-06-16T11:21:42.7781754Z ./whatsapp-monitor.py:49:13: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7781851Z             except:
2022-06-16T11:21:42.7781923Z             ^
2022-06-16T11:21:42.7782151Z ./whatsapp-monitor.py:49:13: E722 do not use bare 'except'
2022-06-16T11:21:42.7782213Z             except:
2022-06-16T11:21:42.7782284Z             ^
2022-06-16T11:21:42.7782881Z ./whatsapp-monitor.py:54:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7783080Z     except:
2022-06-16T11:21:42.7783154Z     ^
2022-06-16T11:21:42.7783382Z ./whatsapp-monitor.py:54:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7783461Z     except:
2022-06-16T11:21:42.7783520Z     ^
2022-06-16T11:21:42.7783780Z ./CountMillionCharacter.py:11:23: W605 invalid escape sequence '\W'
2022-06-16T11:21:42.7783975Z pattern = re.compile("\W")  # re is used to compile the expression more than once
2022-06-16T11:21:42.7784059Z                       ^
2022-06-16T11:21:42.7784182Z ./loader.py:2:21: W291 trailing whitespace
2022-06-16T11:21:42.7784256Z """
2022-06-16T11:21:42.7784354Z Shaurya Pratap Singh 
2022-06-16T11:21:42.7784466Z @shaurya-blip
2022-06-16T11:21:42.7784490Z 
2022-06-16T11:21:42.7784608Z Shows loading message while doing something.
2022-06-16T11:21:42.7784679Z """
2022-06-16T11:21:42.7784748Z    
2022-06-16T11:21:42.7784824Z                 ^
2022-06-16T11:21:42.7784970Z ./puttylogs.py:7:89: E501 line too long (188 > 88 characters)
2022-06-16T11:21:42.7785467Z # Modifications		: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.
2022-06-16T11:21:42.7785690Z                		                                                                       ^
2022-06-16T11:21:42.7785818Z ./puttylogs.py:8:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.7786197Z # 							: 1.2 - 29-02-12 - CR - Added shutil module and added one line to move the zipped up logs to the zipped_logs directory
2022-06-16T11:21:42.7786326Z   							                                                                               ^
2022-06-16T11:21:42.7786548Z ./puttylogs.py:16:14: W605 invalid escape sequence '\l'
2022-06-16T11:21:42.7786705Z logsdir = "c:\logs\puttylogs"  # Set the Variable logsdir
2022-06-16T11:21:42.7786783Z              ^
2022-06-16T11:21:42.7787005Z ./puttylogs.py:16:19: W605 invalid escape sequence '\p'
2022-06-16T11:21:42.7787153Z logsdir = "c:\logs\puttylogs"  # Set the Variable logsdir
2022-06-16T11:21:42.7787221Z                   ^
2022-06-16T11:21:42.7787540Z ./puttylogs.py:17:13: W605 invalid escape sequence '\l'
2022-06-16T11:21:42.7787804Z zipdir = "c:\logs\puttylogs\zipped_logs"  # Set the Variable zipdir - 1.2
2022-06-16T11:21:42.7787876Z             ^
2022-06-16T11:21:42.7788084Z ./puttylogs.py:17:18: W605 invalid escape sequence '\p'
2022-06-16T11:21:42.7788338Z zipdir = "c:\logs\puttylogs\zipped_logs"  # Set the Variable zipdir - 1.2
2022-06-16T11:21:42.7788414Z                  ^
2022-06-16T11:21:42.7788620Z ./puttylogs.py:17:28: W605 invalid escape sequence '\z'
2022-06-16T11:21:42.7788978Z zipdir = "c:\logs\puttylogs\zipped_logs"  # Set the Variable zipdir - 1.2
2022-06-16T11:21:42.7789067Z                            ^
2022-06-16T11:21:42.7789215Z ./puttylogs.py:24:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.7789453Z         )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension
2022-06-16T11:21:42.7789585Z                                                                                         ^
2022-06-16T11:21:42.7789748Z ./multiplication_table.py:17:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7789937Z ) = argv  # define rows and columns for the table and assign them to the argument variable
2022-06-16T11:21:42.7790139Z                                                                                         ^
2022-06-16T11:21:42.7790451Z ./Mp3_media_player.py:7:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7790550Z from tkinter import *
2022-06-16T11:21:42.7790623Z ^
2022-06-16T11:21:42.7790923Z ./Mp3_media_player.py:9:8: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7791008Z root = Tk()
2022-06-16T11:21:42.7791083Z        ^
2022-06-16T11:21:42.7791400Z ./Mp3_media_player.py:16:5: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7791476Z v = StringVar()
2022-06-16T11:21:42.7791549Z     ^
2022-06-16T11:21:42.7791861Z ./Mp3_media_player.py:17:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7792000Z songlabel = Label(root, textvariable=v, width=35)
2022-06-16T11:21:42.7792077Z             ^
2022-06-16T11:21:42.7792388Z ./Mp3_media_player.py:73:9: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7792512Z label = Label(root, text="Music Player")
2022-06-16T11:21:42.7792588Z         ^
2022-06-16T11:21:42.7792883Z ./Mp3_media_player.py:76:11: F405 'Listbox' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7792983Z listbox = Listbox(root)
2022-06-16T11:21:42.7793058Z           ^
2022-06-16T11:21:42.7793460Z ./Mp3_media_player.py:89:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7793583Z nextbutton = Button(root, text="Next Song")
2022-06-16T11:21:42.7793655Z              ^
2022-06-16T11:21:42.7794026Z ./Mp3_media_player.py:92:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7794151Z previousbutton = Button(root, text="Previous Song")
2022-06-16T11:21:42.7794225Z                  ^
2022-06-16T11:21:42.7794510Z ./Mp3_media_player.py:95:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7794639Z stopbutton = Button(root, text="Stop Music")
2022-06-16T11:21:42.7794713Z              ^
2022-06-16T11:21:42.7794818Z ./12.py:1:14: W291 trailing whitespace
2022-06-16T11:21:42.7794898Z import turtle 
2022-06-16T11:21:42.7794969Z              ^
2022-06-16T11:21:42.7795056Z ./12.py:2:20: W291 trailing whitespace
2022-06-16T11:21:42.7795143Z t = turtle.Turtle() 
2022-06-16T11:21:42.7795218Z                    ^
2022-06-16T11:21:42.7795316Z ./12.py:3:13: W291 trailing whitespace
2022-06-16T11:21:42.7795396Z t.circle(20) 
2022-06-16T11:21:42.7795466Z             ^
2022-06-16T11:21:42.7795584Z ./12.py:4:3: E225 missing whitespace around operator
2022-06-16T11:21:42.7795674Z t1=turtle.Turtle() 
2022-06-16T11:21:42.7795742Z   ^
2022-06-16T11:21:42.7795843Z ./12.py:4:19: W291 trailing whitespace
2022-06-16T11:21:42.7795928Z t1=turtle.Turtle() 
2022-06-16T11:21:42.7795999Z                   ^
2022-06-16T11:21:42.7796099Z ./12.py:5:14: W291 trailing whitespace
2022-06-16T11:21:42.7796163Z t1.circle(25) 
2022-06-16T11:21:42.7796237Z              ^
2022-06-16T11:21:42.7796384Z ./Decimal_To_Binary.py:52:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7796482Z def DecimalToBinary(num):
2022-06-16T11:21:42.7796549Z ^
2022-06-16T11:21:42.7796674Z ./cloning_a_list.py:1:41: W291 trailing whitespace
2022-06-16T11:21:42.7796791Z # Python program to copy or clone a list 
2022-06-16T11:21:42.7796866Z                                         ^
2022-06-16T11:21:42.7796990Z ./cloning_a_list.py:2:27: W291 trailing whitespace
2022-06-16T11:21:42.7797087Z # Using the Slice Operator 
2022-06-16T11:21:42.7797167Z                           ^
2022-06-16T11:21:42.7797293Z ./cloning_a_list.py:3:18: W291 trailing whitespace
2022-06-16T11:21:42.7797377Z def Cloning(li1): 
2022-06-16T11:21:42.7797449Z                  ^
2022-06-16T11:21:42.7797574Z ./cloning_a_list.py:5:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7797642Z   
2022-06-16T11:21:42.7797710Z ^
2022-06-16T11:21:42.7797901Z ./cloning_a_list.py:6:14: W291 trailing whitespace
2022-06-16T11:21:42.7797989Z # Driver Code 
2022-06-16T11:21:42.7798064Z              ^
2022-06-16T11:21:42.7798252Z ./cloning_a_list.py:7:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.7798309Z li1 = [
2022-06-16T11:21:42.7798377Z ^
2022-06-16T11:21:42.7798502Z ./cloning_a_list.py:8:7: W291 trailing whitespace
2022-06-16T11:21:42.7798572Z     4, 
2022-06-16T11:21:42.7798642Z       ^
2022-06-16T11:21:42.7798766Z ./cloning_a_list.py:9:7: W291 trailing whitespace
2022-06-16T11:21:42.7798834Z     8, 
2022-06-16T11:21:42.7798887Z       ^
2022-06-16T11:21:42.7799014Z ./cloning_a_list.py:10:7: W291 trailing whitespace
2022-06-16T11:21:42.7799083Z     2, 
2022-06-16T11:21:42.7799151Z       ^
2022-06-16T11:21:42.7799270Z ./cloning_a_list.py:11:8: W291 trailing whitespace
2022-06-16T11:21:42.7799339Z     10, 
2022-06-16T11:21:42.7799408Z        ^
2022-06-16T11:21:42.7799513Z ./cloning_a_list.py:12:8: W291 trailing whitespace
2022-06-16T11:21:42.7799585Z     15, 
2022-06-16T11:21:42.7799653Z        ^
2022-06-16T11:21:42.7799896Z ./cloning_a_list.py:14:2: W291 trailing whitespace
2022-06-16T11:21:42.7800087Z ] 
2022-06-16T11:21:42.7800162Z  ^
2022-06-16T11:21:42.7800304Z ./cloning_a_list.py:15:19: W291 trailing whitespace
2022-06-16T11:21:42.7800383Z li2 = Cloning(li1) 
2022-06-16T11:21:42.7800464Z                   ^
2022-06-16T11:21:42.7800604Z ./cloning_a_list.py:16:29: W291 trailing whitespace
2022-06-16T11:21:42.7800717Z print("Original List:", li1) 
2022-06-16T11:21:42.7800809Z                             ^
2022-06-16T11:21:42.7800946Z ./cloning_a_list.py:17:29: W291 trailing whitespace
2022-06-16T11:21:42.7801137Z print("After Cloning:", li2) 
2022-06-16T11:21:42.7801213Z                             ^
2022-06-16T11:21:42.7801363Z ./fastapi.py:11:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7801472Z class Course(BaseModel):
2022-06-16T11:21:42.7801549Z ^
2022-06-16T11:21:42.7801711Z ./daily_checks.py:7:89: E501 line too long (130 > 88 characters)
2022-06-16T11:21:42.7801790Z """
2022-06-16T11:21:42.7802061Z Modifications	: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.
2022-06-16T11:21:42.7802285Z                 : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.
2022-06-16T11:21:42.7802494Z                 : 1.3 Changed the server_list.txt file name and moved the file to the config directory.
2022-06-16T11:21:42.7802654Z                 : 1.4 Changed some settings due to getting a new pc
2022-06-16T11:21:42.7802782Z                 : 1.5 Tidy comments and syntax
2022-06-16T11:21:42.7802793Z 
2022-06-16T11:21:42.7803025Z Description	: This simple script loads everything I need to carry out the daily checks for our systems.
2022-06-16T11:21:42.7803101Z """
2022-06-16T11:21:42.7803175Z    
2022-06-16T11:21:42.7803311Z              	                                                                      ^
2022-06-16T11:21:42.7803457Z ./daily_checks.py:8:89: E501 line too long (130 > 88 characters)
2022-06-16T11:21:42.7803533Z """
2022-06-16T11:21:42.7803797Z Modifications	: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.
2022-06-16T11:21:42.7804035Z                 : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.
2022-06-16T11:21:42.7804240Z                 : 1.3 Changed the server_list.txt file name and moved the file to the config directory.
2022-06-16T11:21:42.7804400Z                 : 1.4 Changed some settings due to getting a new pc
2022-06-16T11:21:42.7804527Z                 : 1.5 Tidy comments and syntax
2022-06-16T11:21:42.7804535Z 
2022-06-16T11:21:42.7804762Z Description	: This simple script loads everything I need to carry out the daily checks for our systems.
2022-06-16T11:21:42.7804838Z """
2022-06-16T11:21:42.7804898Z    
2022-06-16T11:21:42.7805101Z              	                                                                      ^
2022-06-16T11:21:42.7805273Z ./daily_checks.py:9:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.7805347Z """
2022-06-16T11:21:42.7805612Z Modifications	: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.
2022-06-16T11:21:42.7805845Z                 : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.
2022-06-16T11:21:42.7806050Z                 : 1.3 Changed the server_list.txt file name and moved the file to the config directory.
2022-06-16T11:21:42.7806212Z                 : 1.4 Changed some settings due to getting a new pc
2022-06-16T11:21:42.7806322Z                 : 1.5 Tidy comments and syntax
2022-06-16T11:21:42.7806344Z 
2022-06-16T11:21:42.7806556Z Description	: This simple script loads everything I need to carry out the daily checks for our systems.
2022-06-16T11:21:42.7806631Z """
2022-06-16T11:21:42.7806710Z    
2022-06-16T11:21:42.7806846Z              	                                                                      ^
2022-06-16T11:21:42.7807005Z ./daily_checks.py:13:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.7807080Z """
2022-06-16T11:21:42.7807342Z Modifications	: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.
2022-06-16T11:21:42.7807560Z                 : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.
2022-06-16T11:21:42.7807766Z                 : 1.3 Changed the server_list.txt file name and moved the file to the config directory.
2022-06-16T11:21:42.7808007Z                 : 1.4 Changed some settings due to getting a new pc
2022-06-16T11:21:42.7808134Z                 : 1.5 Tidy comments and syntax
2022-06-16T11:21:42.7808141Z 
2022-06-16T11:21:42.7808374Z Description	: This simple script loads everything I need to carry out the daily checks for our systems.
2022-06-16T11:21:42.7808450Z """
2022-06-16T11:21:42.7808523Z    
2022-06-16T11:21:42.7808657Z              	                                                                      ^
2022-06-16T11:21:42.7808814Z ./daily_checks.py:31:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.7810165Z     # The command below passes the command line string to open word, open the document, print it then close word down
2022-06-16T11:21:42.7810297Z                                                                                         ^
2022-06-16T11:21:42.7810568Z ./daily_checks.py:34:37: W605 invalid escape sequence '\M'
2022-06-16T11:21:42.7810760Z             "C:\\Program Files (x86)\Microsoft Office\Office14\winword.exe",
2022-06-16T11:21:42.7810857Z                                     ^
2022-06-16T11:21:42.7811092Z ./daily_checks.py:34:54: W605 invalid escape sequence '\O'
2022-06-16T11:21:42.7811275Z             "C:\\Program Files (x86)\Microsoft Office\Office14\winword.exe",
2022-06-16T11:21:42.7811372Z                                                      ^
2022-06-16T11:21:42.7811603Z ./daily_checks.py:34:63: W605 invalid escape sequence '\w'
2022-06-16T11:21:42.7811778Z             "C:\\Program Files (x86)\Microsoft Office\Office14\winword.exe",
2022-06-16T11:21:42.7811897Z                                                               ^
2022-06-16T11:21:42.7812132Z ./daily_checks.py:60:21: W605 invalid escape sequence '\p'
2022-06-16T11:21:42.7812454Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7812541Z                     ^
2022-06-16T11:21:42.7812782Z ./daily_checks.py:60:27: W605 invalid escape sequence '\P'
2022-06-16T11:21:42.7813077Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7813167Z                           ^
2022-06-16T11:21:42.7813398Z ./daily_checks.py:60:37: W605 invalid escape sequence '\D'
2022-06-16T11:21:42.7813808Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7813918Z                                     ^
2022-06-16T11:21:42.7814162Z ./daily_checks.py:60:51: W605 invalid escape sequence '\S'
2022-06-16T11:21:42.7814469Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7814577Z                                                   ^
2022-06-16T11:21:42.7814796Z ./daily_checks.py:60:69: W605 invalid escape sequence '\P'
2022-06-16T11:21:42.7815095Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7815222Z                                                                     ^
2022-06-16T11:21:42.7815455Z ./daily_checks.py:60:73: W605 invalid escape sequence '\E'
2022-06-16T11:21:42.7815750Z         '"file://fs1\pub_b\Pub_Admin\Documentation\Settlements_Files\PWD\Eclr.doc"'
2022-06-16T11:21:42.7815875Z                                                                         ^
2022-06-16T11:21:42.7816021Z ./login.py:6:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7816106Z def logo():
2022-06-16T11:21:42.7816166Z ^
2022-06-16T11:21:42.7816464Z ./pyhton_array.py:1:1: F403 'from array import *' used; unable to detect undefined names
2022-06-16T11:21:42.7816559Z from array import *
2022-06-16T11:21:42.7816631Z ^
2022-06-16T11:21:42.7817055Z ./pyhton_array.py:3:10: F405 'array' may be undefined, or defined from star imports: array
2022-06-16T11:21:42.7817164Z array1 = array("i", [10, 20, 30, 40, 50])
2022-06-16T11:21:42.7817241Z          ^
2022-06-16T11:21:42.7817372Z ./heap_sort.py:2:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.7817651Z # It is similar to selection sort in the sense that it first identifies the maximum element,
2022-06-16T11:21:42.7817778Z                                                                                         ^
2022-06-16T11:21:42.7818006Z ./googlemaps.py:2:1: F401 'json' imported but unused
2022-06-16T11:21:42.7818093Z import json
2022-06-16T11:21:42.7818165Z ^
2022-06-16T11:21:42.7818407Z ./tic-tac-toe.py:7:1: E265 block comment should start with '# '
2022-06-16T11:21:42.7818488Z ########win Flags##########
2022-06-16T11:21:42.7818560Z ^
2022-06-16T11:21:42.7818789Z ./tic-tac-toe.py:17:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7818879Z def DrawBoard():
2022-06-16T11:21:42.7818950Z ^
2022-06-16T11:21:42.7819293Z ./stackF_Harsh2255.py:8:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7819395Z def createStack():
2022-06-16T11:21:42.7819450Z ^
2022-06-16T11:21:42.7819605Z ./serial_scanner.py:19:89: E501 line too long (111 > 88 characters)
2022-06-16T11:21:42.7819836Z     # availables in the computer (this function works only for Windows & Linux Platforms but you can extend it)
2022-06-16T11:21:42.7819963Z                                                                                         ^
2022-06-16T11:21:42.7820218Z ./password_cracker.py:19:9: F401 'fcrypt' imported but unused
2022-06-16T11:21:42.7820369Z         import fcrypt  # Try importing the fcrypt module
2022-06-16T11:21:42.7820444Z         ^
2022-06-16T11:21:42.7820722Z ./Binary_to_Decimal.py:13:17: F841 local variable 'n' is assigned to but never used
2022-06-16T11:21:42.7820805Z     decimal, i, n = 0, 0, 0
2022-06-16T11:21:42.7820882Z                 ^
2022-06-16T11:21:42.7821287Z ./invisible_clock.py:17:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7821389Z for i in range(30):  # 30 times
2022-06-16T11:21:42.7821462Z     ^
2022-06-16T11:21:42.7821691Z ./tik_tak.py:25:1: C901 'enter_number' is too complex (15)
2022-06-16T11:21:42.7821804Z def enter_number(p1_sign, p2_sign):
2022-06-16T11:21:42.7821862Z ^
2022-06-16T11:21:42.7822011Z ./diceV2_dynamic.py:4:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.7822339Z # Class that that holds dice-functions. You can set the amount of sides and roll with each dice object.
2022-06-16T11:21:42.7822573Z                                                                                         ^
2022-06-16T11:21:42.7822738Z ./diceV2_dynamic.py:14:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7823030Z                 "This absolutely shouldn't ever happen. The programmer sucks or someone "
2022-06-16T11:21:42.7823155Z                                                                                         ^
2022-06-16T11:21:42.7823558Z ./diceV2_dynamic.py:69:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7823672Z     for i in range(0, diceAmount):
2022-06-16T11:21:42.7823733Z         ^
2022-06-16T11:21:42.7823878Z ./testlines.py:9:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7824080Z # Description		: This is a very simple script that opens up a file and writes whatever is set "
2022-06-16T11:21:42.7824210Z              		                                                                         ^
2022-06-16T11:21:42.7824472Z ./testlines.py:14:9: F841 local variable 's' is assigned to but never used
2022-06-16T11:21:42.7824580Z         s = file_object.write(txt)
2022-06-16T11:21:42.7824655Z         ^
2022-06-16T11:21:42.7825058Z ./get_youtube_view.py:46:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7825140Z for i in range(count):
2022-06-16T11:21:42.7825214Z     ^
2022-06-16T11:21:42.7825375Z ./create_dir_if_not_there.py:9:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.7825930Z # Description   : Checks to see if a directory exists in the users home directory, if not then create it
2022-06-16T11:21:42.7826066Z                                                                                         ^
2022-06-16T11:21:42.7826218Z ./changemac.py:3:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7826432Z # Simple python Script to change mac address of linux generate random or enter mac address
2022-06-16T11:21:42.7826566Z                                                                                         ^
2022-06-16T11:21:42.7826872Z ./changemac.py:29:21: C417 Unnecessary use of map - use a generator expression instead.
2022-06-16T11:21:42.7827010Z     return ":".join(map(lambda x: "%02x" % x, mac))
2022-06-16T11:21:42.7827098Z                     ^
2022-06-16T11:21:42.7827254Z ./changemac.py:47:89: E501 line too long (107 > 88 characters)
2022-06-16T11:21:42.7827535Z     + "\nEnter Option to change Your MAC:\n1. Enter MAC address manually \n2. Automatic Random MAC address"
2022-06-16T11:21:42.7827677Z                                                                                         ^
2022-06-16T11:21:42.7827939Z ./sqlite_table_check.py:17:20: W605 invalid escape sequence '\j'
2022-06-16T11:21:42.7828057Z dbfile = "Databases\jarvis.db"
2022-06-16T11:21:42.7828128Z                    ^
2022-06-16T11:21:42.7828429Z ./Binary Coefficients.py:2:13: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.7828519Z     list1 = list()
2022-06-16T11:21:42.7828601Z             ^
2022-06-16T11:21:42.7828857Z ./Binary Coefficients.py:7:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7828941Z         l = []
2022-06-16T11:21:42.7829020Z         ^
2022-06-16T11:21:42.7829157Z ./calc_area.py:9:89: E501 line too long (126 > 88 characters)
2022-06-16T11:21:42.7829394Z             "Enter 1 for square, 2 for rectangle, 3 for circle, 4 for triangle, 5 for cylinder, 6 for cone, or 7 for sphere: "
2022-06-16T11:21:42.7829529Z                                                                                         ^
2022-06-16T11:21:42.7829762Z ./calc_area.py:16:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7829890Z         l = float(input("Enter length: "))
2022-06-16T11:21:42.7829971Z         ^
2022-06-16T11:21:42.7830130Z ./ping_servers.py:12:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.7830569Z # Modifications		: 1.1 - 14th May 2012 - CR Changed it to use the config directory to store the server files
2022-06-16T11:21:42.7830701Z                		                                                                       ^
2022-06-16T11:21:42.7830863Z ./ping_servers.py:35:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7831074Z     ):  # If no arguments are passed,display the help/instructions on how to run the script
2022-06-16T11:21:42.7831211Z                                                                                         ^
2022-06-16T11:21:42.7831365Z ./fibonacci.py:41:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7831450Z     """
2022-06-16T11:21:42.7831668Z     Calculate the fibonacci number at position n using dynamic programming to improve runtime
2022-06-16T11:21:42.7831747Z     """
2022-06-16T11:21:42.7831810Z        
2022-06-16T11:21:42.7831943Z                                                                                 ^
2022-06-16T11:21:42.7832281Z ./polygon.py:3:1: F403 'from pygame.locals import *' used; unable to detect undefined names
2022-06-16T11:21:42.7832396Z from pygame.locals import *
2022-06-16T11:21:42.7832472Z ^
2022-06-16T11:21:42.7832801Z ./polygon.py:18:26: F405 'QUIT' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.7832912Z         if event.type == QUIT:
2022-06-16T11:21:42.7832988Z                          ^
2022-06-16T11:21:42.7833297Z ./wikipedia.py:2:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7833401Z from tkinter import *
2022-06-16T11:21:42.7833477Z ^
2022-06-16T11:21:42.7833784Z ./wikipedia.py:5:7: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7833956Z win = Tk()  # objek
2022-06-16T11:21:42.7834035Z       ^
2022-06-16T11:21:42.7834178Z ./wikipedia.py:10:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7834272Z def search_wiki():
2022-06-16T11:21:42.7834347Z ^
2022-06-16T11:21:42.7834671Z ./wikipedia.py:16:9: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7834813Z label = Label(win, text="Wikipedia Search :")
2022-06-16T11:21:42.7834891Z         ^
2022-06-16T11:21:42.7835197Z ./wikipedia.py:19:9: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7835291Z entry = Entry(win)
2022-06-16T11:21:42.7835354Z         ^
2022-06-16T11:21:42.7835669Z ./wikipedia.py:22:10: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7835828Z button = Button(win, text="Search", command=search_wiki)
2022-06-16T11:21:42.7835908Z          ^
2022-06-16T11:21:42.7836068Z ./recursiveStrings.py:1:20: W291 trailing whitespace
2022-06-16T11:21:42.7836166Z """ author: Ataba29 
2022-06-16T11:21:42.7836333Z code has a matrix each list inside of the matrix has two strings
2022-06-16T11:21:42.7836490Z the code determines if the two strings are similar or different 
2022-06-16T11:21:42.7836602Z from each other recursively
2022-06-16T11:21:42.7836678Z """
2022-06-16T11:21:42.7836767Z                    ^
2022-06-16T11:21:42.7836922Z ./recursiveStrings.py:3:64: W291 trailing whitespace
2022-06-16T11:21:42.7837017Z """ author: Ataba29 
2022-06-16T11:21:42.7837182Z code has a matrix each list inside of the matrix has two strings
2022-06-16T11:21:42.7837336Z the code determines if the two strings are similar or different 
2022-06-16T11:21:42.7837446Z from each other recursively
2022-06-16T11:21:42.7837524Z """
2022-06-16T11:21:42.7837612Z                     
2022-06-16T11:21:42.7837721Z                                           ^
2022-06-16T11:21:42.7837865Z ./mapit.py:1:11: E401 multiple imports on one line
2022-06-16T11:21:42.7837992Z import sys, webbrowser, pyperclip
2022-06-16T11:21:42.7838059Z           ^
2022-06-16T11:21:42.7838364Z ./magic8ball.py:32:5: F841 local variable 'question' is assigned to but never used
2022-06-16T11:21:42.7838465Z     question = input()
2022-06-16T11:21:42.7838543Z     ^
2022-06-16T11:21:42.7838773Z ./magic8ball.py:40:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7838982Z         "Do you wanna ask any more questions? press Y for yes and any other key to exit "
2022-06-16T11:21:42.7839117Z                                                                                         ^
2022-06-16T11:21:42.7839277Z ./GroupSms_Way2.py:34:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.7839461Z         "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 "
2022-06-16T11:21:42.7839596Z                                                                                         ^
2022-06-16T11:21:42.7839758Z ./script_listing.py:7:89: E501 line too long (152 > 88 characters)
2022-06-16T11:21:42.7840222Z # Modifications		: 1.1 - 28-02-2012 - CR - Added the variable to get the logs directory, I then joined the output so the file goes to the logs directory
2022-06-16T11:21:42.7840359Z                		                                                                       ^
2022-06-16T11:21:42.7840520Z ./script_listing.py:8:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.7840922Z # 							: 1.2 - 29-05/2012 - CR - Changed the line so it doesn't ask for a directory, it now uses the environment varaible scripts
2022-06-16T11:21:42.7841059Z   							                                                                               ^
2022-06-16T11:21:42.7841221Z ./script_listing.py:10:89: E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.7841461Z # Description			: This will list all the files in the given directory, it will also go through all the subdirectories as well
2022-06-16T11:21:42.7841685Z              			                                                                        ^
2022-06-16T11:21:42.7841843Z ./script_listing.py:20:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7842182Z )  # Set the varable path by getting the value from the OS environment variable scripts - 1.2
2022-06-16T11:21:42.7842322Z                                                                                         ^
2022-06-16T11:21:42.7842764Z ./script_listing.py:28:14: B007 Loop control variable 'dirname' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7842905Z for dirpath, dirname, filenames in os.walk(
2022-06-16T11:21:42.7842990Z              ^
2022-06-16T11:21:42.7843254Z ./python_sms.py:33:12: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7843348Z     if row == None:
2022-06-16T11:21:42.7843431Z            ^
2022-06-16T11:21:42.7843585Z ./python_sms.py:42:89: E501 line too long (155 > 88 characters)
2022-06-16T11:21:42.7843870Z         + " Sorry for the late notice, I have sent a mail as well, just trying to reach everyone, please do not reply to this message as this is automated"
2022-06-16T11:21:42.7844007Z                                                                                         ^
2022-06-16T11:21:42.7844163Z ./python_sms.py:52:89: E501 line too long (139 > 88 characters)
2022-06-16T11:21:42.7844428Z     # Set flag to 1 to simulate sending, this saves your credits while you are testing your code. # To send real message set this flag to 0
2022-06-16T11:21:42.7844563Z                                                                                         ^
2022-06-16T11:21:42.7844722Z ./RandomNumberGame.py:2:89: E501 line too long (141 > 88 characters)
2022-06-16T11:21:42.7844801Z """
2022-06-16T11:21:42.7845076Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7845356Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7845636Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7845754Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7845914Z     Thank you
2022-06-16T11:21:42.7845998Z """
2022-06-16T11:21:42.7846059Z    
2022-06-16T11:21:42.7846193Z                                                                                     ^
2022-06-16T11:21:42.7846353Z ./RandomNumberGame.py:2:142: W291 trailing whitespace
2022-06-16T11:21:42.7846428Z """
2022-06-16T11:21:42.7846700Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7846972Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7847257Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7847377Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7847447Z     Thank you
2022-06-16T11:21:42.7847522Z """
2022-06-16T11:21:42.7847725Z    
2022-06-16T11:21:42.7847883Z                                                                                                                                          ^
2022-06-16T11:21:42.7848051Z ./RandomNumberGame.py:3:89: E501 line too long (144 > 88 characters)
2022-06-16T11:21:42.7848128Z """
2022-06-16T11:21:42.7848388Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7848646Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7848978Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7849093Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7849176Z     Thank you
2022-06-16T11:21:42.7849250Z """
2022-06-16T11:21:42.7849322Z    
2022-06-16T11:21:42.7849455Z                                                                                     ^
2022-06-16T11:21:42.7849613Z ./RandomNumberGame.py:3:145: W291 trailing whitespace
2022-06-16T11:21:42.7849671Z """
2022-06-16T11:21:42.7849933Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7850195Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7850466Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7850584Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7850666Z     Thank you
2022-06-16T11:21:42.7850741Z """
2022-06-16T11:21:42.7850816Z    
2022-06-16T11:21:42.7850972Z                                                                                                                                             ^
2022-06-16T11:21:42.7851127Z ./RandomNumberGame.py:4:89: E501 line too long (146 > 88 characters)
2022-06-16T11:21:42.7851200Z """
2022-06-16T11:21:42.7851459Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7851723Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7851991Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7852108Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7852190Z     Thank you
2022-06-16T11:21:42.7852263Z """
2022-06-16T11:21:42.7852320Z    
2022-06-16T11:21:42.7852452Z                                                                                     ^
2022-06-16T11:21:42.7852673Z ./RandomNumberGame.py:4:147: W291 trailing whitespace
2022-06-16T11:21:42.7852755Z """
2022-06-16T11:21:42.7853022Z   hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have 
2022-06-16T11:21:42.7853282Z   to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is 
2022-06-16T11:21:42.7853549Z   a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify 
2022-06-16T11:21:42.7853669Z   this game he/she is most welcomed.
2022-06-16T11:21:42.7853736Z     Thank you
2022-06-16T11:21:42.7853808Z """
2022-06-16T11:21:42.7853880Z    
2022-06-16T11:21:42.7854035Z                                                                                                                                               ^
2022-06-16T11:21:42.7854206Z ./RandomNumberGame.py:16:89: E501 line too long (112 > 88 characters)
2022-06-16T11:21:42.7854442Z     "\n\tRandom Number Game\n\nHello Everyone ! it is just a game of chance in which you have to guess a number"
2022-06-16T11:21:42.7854574Z                                                                                         ^
2022-06-16T11:21:42.7854740Z ./RandomNumberGame.py:17:89: E501 line too long (134 > 88 characters)
2022-06-16T11:21:42.7854977Z     " from 0 to 100 and computer will tell whether your guess is smaller or bigger than the acctual number chossen by the computer . "
2022-06-16T11:21:42.7855110Z                                                                                         ^
2022-06-16T11:21:42.7855636Z ./RandomNumberGame.py:26:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7855734Z for i in range(0, n):
2022-06-16T11:21:42.7855809Z     ^
2022-06-16T11:21:42.7856025Z ./Program to reverse Linked List( Recursive solution).py:6:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7856110Z class Node:
2022-06-16T11:21:42.7856184Z ^
2022-06-16T11:21:42.7856467Z ./binary_search_tree.py:69:5: C901 'BinarySearchTree.delete' is too complex (18)
2022-06-16T11:21:42.7856571Z     def delete(self, val):
2022-06-16T11:21:42.7856647Z     ^
2022-06-16T11:21:42.7856812Z ./binary_search_tree.py:228:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7857113Z     # 3) Push the current node to S and set current = current->left until current is NULL
2022-06-16T11:21:42.7857246Z                                                                                         ^
2022-06-16T11:21:42.7857547Z ./binary_search_tree.py:237:20: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7857647Z         if current != None:
2022-06-16T11:21:42.7857716Z                    ^
2022-06-16T11:21:42.7857874Z ./random_file_move.py:6:89: E501 line too long (116 > 88 characters)
2022-06-16T11:21:42.7858112Z # Description   : This will move specified number of files(given in ratio) from the src directory to dest directory.
2022-06-16T11:21:42.7858243Z                                                                                         ^
2022-06-16T11:21:42.7858396Z ./random_file_move.py:9:10: E401 multiple imports on one line
2022-06-16T11:21:42.7858491Z import os, random
2022-06-16T11:21:42.7858570Z          ^
2022-06-16T11:21:42.7858712Z ./random_file_move.py:24:89: E501 line too long (107 > 88 characters)
2022-06-16T11:21:42.7858936Z desc = "Script to move specified number of files(given in ratio) from the src directory to dest directory."
2022-06-16T11:21:42.7859194Z                                                                                         ^
2022-06-16T11:21:42.7859361Z ./random_file_move.py:33:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.7859565Z     help="(REQUIRED) Path to directory from which we cut files. Space not allowed in path.",
2022-06-16T11:21:42.7859797Z                                                                                         ^
2022-06-16T11:21:42.7859964Z ./random_file_move.py:40:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7860167Z     help="(REQUIRED) Path to directory to which we move files. Space not allowed in path.",
2022-06-16T11:21:42.7860298Z                                                                                         ^
2022-06-16T11:21:42.7860589Z ./facebook-autologin-bot.py:35:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.7860791Z         text = "I can autologin to your social sites like facebook twitter github and instagram"
2022-06-16T11:21:42.7860926Z                                                                                         ^
2022-06-16T11:21:42.7861206Z ./facebook-autologin-bot.py:37:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.7861401Z             "I can autologin to your social sites like facebook twitter github and instagram"
2022-06-16T11:21:42.7861538Z                                                                                         ^
2022-06-16T11:21:42.7861689Z ./blackjack.py:10:89: E501 line too long (123 > 88 characters)
2022-06-16T11:21:42.7861831Z     "                       **********************************************************                                    "
2022-06-16T11:21:42.7861965Z                                                                                         ^
2022-06-16T11:21:42.7862099Z ./blackjack.py:13:89: E501 line too long (123 > 88 characters)
2022-06-16T11:21:42.7862413Z     "                                   Welcome to the game Casino - BLACK JACK !                                         "
2022-06-16T11:21:42.7862632Z                                                                                         ^
2022-06-16T11:21:42.7862782Z ./blackjack.py:16:89: E501 line too long (123 > 88 characters)
2022-06-16T11:21:42.7862928Z     "                       **********************************************************                                    "
2022-06-16T11:21:42.7863060Z                                                                                         ^
2022-06-16T11:21:42.7863206Z ./blackjack.py:42:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7863372Z         "Dealer is BUSTED !\n   ************** You are the Winner !!******************\n"
2022-06-16T11:21:42.7863484Z                                                                                         ^
2022-06-16T11:21:42.7863740Z ./blackjack.py:55:1: C901 'dealer_choice' is too complex (13)
2022-06-16T11:21:42.7863837Z def dealer_choice():
2022-06-16T11:21:42.7863915Z ^
2022-06-16T11:21:42.7864056Z ./osinfo.py:2:89: E501 line too long (176 > 88 characters)
2022-06-16T11:21:42.7864550Z # Authors		: {'geekcomputers': 'Craig Richards', 'dmahugh': 'Doug Mahugh','rutvik1010':'Rutvik Narayana Nadimpally','y12uc231': 'Satyapriya Krishna', 'minto4644':'Mohit Kumar'}
2022-06-16T11:21:42.7864686Z          		                                                                             ^
2022-06-16T11:21:42.7864829Z ./osinfo.py:7:89: E501 line too long (138 > 88 characters)
2022-06-16T11:21:42.7865244Z # Modification 1	: Changed the profile to list again. Order is important. Everytime we run script we don't want to see different ordering.
2022-06-16T11:21:42.7865359Z                 	                                                                       ^
2022-06-16T11:21:42.7865500Z ./osinfo.py:8:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7865708Z # Modification 2        : Fixed the AttributeError checking for all properties. Using hasttr().
2022-06-16T11:21:42.7865837Z                                                                                         ^
2022-06-16T11:21:42.7865976Z ./binod.py:10:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.7866287Z # def checkBinod(file):       #this function will check there is any 'Binod' text in file or not
2022-06-16T11:21:42.7866488Z                                                                                         ^
2022-06-16T11:21:42.7866642Z ./binod.py:11:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.7866980Z #     with open(file, "r") as f: #we are opening file in read mode and using 'with' so need to take care of close()
2022-06-16T11:21:42.7867111Z                                                                                         ^
2022-06-16T11:21:42.7867255Z ./dir_test.py:8:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.7867507Z # Description			: Tests to see if the directory testdir exists, if not it will create the directory for you if you want it created.
2022-06-16T11:21:42.7867641Z              			                                                                        ^
2022-06-16T11:21:42.7868064Z ./kmp_str_search.py:16:9: B007 Loop control variable 'index' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7868206Z     for index, char in enumerate(pattern[1:]):
2022-06-16T11:21:42.7868288Z         ^
2022-06-16T11:21:42.7868548Z ./news_articles__scraper.py:14:1: F401 'pickle' imported but unused
2022-06-16T11:21:42.7868624Z import pickle
2022-06-16T11:21:42.7868699Z ^
2022-06-16T11:21:42.7868945Z ./news_articles__scraper.py:15:1: F401 're' imported but unused
2022-06-16T11:21:42.7869028Z import re
2022-06-16T11:21:42.7869104Z ^
2022-06-16T11:21:42.7869354Z ./news_articles__scraper.py:17:1: F401 'urllib' imported but unused
2022-06-16T11:21:42.7869440Z import urllib
2022-06-16T11:21:42.7869498Z ^
2022-06-16T11:21:42.7869793Z ./news_articles__scraper.py:44:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.7869996Z     except Exception as e:
2022-06-16T11:21:42.7870071Z     ^
2022-06-16T11:21:42.7870380Z ./news_articles__scraper.py:59:1: F401 'matplotlib.pyplot as plt' imported but unused
2022-06-16T11:21:42.7870504Z import matplotlib.pyplot as plt
2022-06-16T11:21:42.7870578Z ^
2022-06-16T11:21:42.7870747Z ./news_articles__scraper.py:59:1: E402 module level import not at top of file
2022-06-16T11:21:42.7870873Z import matplotlib.pyplot as plt
2022-06-16T11:21:42.7870945Z ^
2022-06-16T11:21:42.7871232Z ./news_articles__scraper.py:60:1: F811 redefinition of unused 'pd' from line 19
2022-06-16T11:21:42.7871332Z import pandas as pd
2022-06-16T11:21:42.7871405Z ^
2022-06-16T11:21:42.7871581Z ./news_articles__scraper.py:60:1: E402 module level import not at top of file
2022-06-16T11:21:42.7871662Z import pandas as pd
2022-06-16T11:21:42.7871737Z ^
2022-06-16T11:21:42.7872007Z ./news_articles__scraper.py:62:1: F401 'numpy as np' imported but unused
2022-06-16T11:21:42.7872105Z import numpy as np
2022-06-16T11:21:42.7872178Z ^
2022-06-16T11:21:42.7872355Z ./news_articles__scraper.py:62:1: E402 module level import not at top of file
2022-06-16T11:21:42.7872449Z import numpy as np
2022-06-16T11:21:42.7872508Z ^
2022-06-16T11:21:42.7872677Z ./news_articles__scraper.py:64:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.7872930Z """We have to modify the links so that the links actually work as we can see that the string extracted is the last part of the url!
2022-06-16T11:21:42.7872941Z 
2022-06-16T11:21:42.7873244Z **We have to add 'https://www.boomlive.in/fake-news' to the extracted links.**
2022-06-16T11:21:42.7873319Z """
2022-06-16T11:21:42.7873452Z                                                                                         ^
2022-06-16T11:21:42.7873629Z ./news_articles__scraper.py:146:1: E402 module level import not at top of file
2022-06-16T11:21:42.7874214Z from google.colab import files
2022-06-16T11:21:42.7874306Z ^
2022-06-16T11:21:42.7875105Z ./news_articles__scraper.py:171:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.7875222Z     except Exception as e:
2022-06-16T11:21:42.7875300Z     ^
2022-06-16T11:21:42.7875478Z ./news_articles__scraper.py:236:1: E402 module level import not at top of file
2022-06-16T11:21:42.7875586Z from google.colab import files
2022-06-16T11:21:42.7875815Z ^
2022-06-16T11:21:42.7875973Z ./pygame.py:5:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7876044Z """
2022-06-16T11:21:42.7876185Z This is a game very similar to stone paper scissor
2022-06-16T11:21:42.7876266Z In this game :
2022-06-16T11:21:42.7876474Z if computer chooses snake and user chooses water, the snake will drink water and computer wins.
2022-06-16T11:21:42.7876679Z If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
2022-06-16T11:21:42.7876774Z And so on for other cases
2022-06-16T11:21:42.7876834Z """
2022-06-16T11:21:42.7876941Z    
2022-06-16T11:21:42.7877055Z                                                   
2022-06-16T11:21:42.7877127Z               
2022-06-16T11:21:42.7877200Z                   ^
2022-06-16T11:21:42.7877339Z ./pygame.py:6:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.7877531Z """
2022-06-16T11:21:42.7877659Z This is a game very similar to stone paper scissor
2022-06-16T11:21:42.7877863Z In this game :
2022-06-16T11:21:42.7878056Z if computer chooses snake and user chooses water, the snake will drink water and computer wins.
2022-06-16T11:21:42.7878241Z If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
2022-06-16T11:21:42.7878328Z And so on for other cases
2022-06-16T11:21:42.7878398Z """
2022-06-16T11:21:42.7878462Z    
2022-06-16T11:21:42.7878555Z                                                   
2022-06-16T11:21:42.7878617Z               
2022-06-16T11:21:42.7878684Z                   ^
2022-06-16T11:21:42.7878963Z ./Exception_Handling_in_Python.py:43:89: E501 line too long (135 > 88 characters)
2022-06-16T11:21:42.7880116Z     # eval is a built-in-function used in python, eval function parses the expression argument and evaluates it as a python expression.
2022-06-16T11:21:42.7880256Z                                                                                         ^
2022-06-16T11:21:42.7880577Z ./Exception_Handling_in_Python.py:70:1: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.7880654Z l = [1, 2, 3, 4]
2022-06-16T11:21:42.7880715Z ^
2022-06-16T11:21:42.7881425Z ./Exception_Handling_in_Python.py:103:1: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7881500Z except:
2022-06-16T11:21:42.7881569Z ^
2022-06-16T11:21:42.7881836Z ./Exception_Handling_in_Python.py:103:1: E722 do not use bare 'except'
2022-06-16T11:21:42.7881912Z except:
2022-06-16T11:21:42.7881990Z ^
2022-06-16T11:21:42.7882165Z ./Exception_Handling_in_Python.py:108:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7882349Z         "Handled multiples errors at one go with no need of knowing names of the errors."
2022-06-16T11:21:42.7882479Z                                                                                         ^
2022-06-16T11:21:42.7882777Z ./levenshtein_distance.py:15:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.7883178Z     # also store that value in the 'diff' variable and get the max length of the user given words
2022-06-16T11:21:42.7883297Z                                                                                         ^
2022-06-16T11:21:42.7883444Z ./levenshtein_distance.py:26:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.7883628Z     # starting from the front of the words and compare the letters of the both user given words
2022-06-16T11:21:42.7883747Z                                                                                         ^
2022-06-16T11:21:42.7883901Z ./levenshtein_distance.py:35:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7884192Z     # starting from the back of the words and compare the letters of the both user given words
2022-06-16T11:21:42.7884319Z                                                                                         ^
2022-06-16T11:21:42.7884622Z ./levenshtein_distance.py:43:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7884947Z     # get the minimun value of the 'distances' array and add it with the 'diff' values and
2022-06-16T11:21:42.7885071Z                                                                                         ^
2022-06-16T11:21:42.7885223Z ./coronacases.py:33:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7885308Z     world = f"""
2022-06-16T11:21:42.7885697Z ▀▀█▀▀ █▀▀█ ▀▀█▀▀ █▀▀█ █░░ 　 ▒█▀▀█ █▀▀█ █▀▀ █▀▀ █▀▀ 　 ▀█▀ █▀▀▄ 　 ▒█░░▒█ █▀▀█ █▀▀█ █░░ █▀▀▄ 
2022-06-16T11:21:42.7886019Z ░▒█░░ █░░█ ░░█░░ █▄▄█ █░░ 　 ▒█░░░ █▄▄█ ▀▀█ █▀▀ ▀▀█ 　 ▒█░ █░░█ 　 ▒█▒█▒█ █░░█ █▄▄▀ █░░ █░░█ 
2022-06-16T11:21:42.7886433Z ░▒█░░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ 　 ▒█▄▄█ ▀░░▀ ▀▀▀ ▀▀▀ ▀▀▀ 　 ▄█▄ ▀░░▀ 　 ▒█▄▀▄█ ▀▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀░\n
2022-06-16T11:21:42.7886616Z New Confirmed Cases :- {NewConfirmed}
2022-06-16T11:21:42.7886806Z Total Confirmed Cases :- {TotalConfirmed}
2022-06-16T11:21:42.7886952Z New Deaths :- {NewDeaths}
2022-06-16T11:21:42.7887124Z Total Deaths :- {TotalDeaths}
2022-06-16T11:21:42.7887285Z New Recovered :- {NewRecovered}
2022-06-16T11:21:42.7887459Z Total Recovered :- {TotalRecovered}
2022-06-16T11:21:42.7887520Z     """
2022-06-16T11:21:42.7887598Z                 
2022-06-16T11:21:42.7887808Z                           　                        　          　        ^
2022-06-16T11:21:42.7888053Z ./coronacases.py:33:90: W291 trailing whitespace
2022-06-16T11:21:42.7888132Z     world = f"""
2022-06-16T11:21:42.7888433Z ▀▀█▀▀ █▀▀█ ▀▀█▀▀ █▀▀█ █░░ 　 ▒█▀▀█ █▀▀█ █▀▀ █▀▀ █▀▀ 　 ▀█▀ █▀▀▄ 　 ▒█░░▒█ █▀▀█ █▀▀█ █░░ █▀▀▄ 
2022-06-16T11:21:42.7888745Z ░▒█░░ █░░█ ░░█░░ █▄▄█ █░░ 　 ▒█░░░ █▄▄█ ▀▀█ █▀▀ ▀▀█ 　 ▒█░ █░░█ 　 ▒█▒█▒█ █░░█ █▄▄▀ █░░ █░░█ 
2022-06-16T11:21:42.7889049Z ░▒█░░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ 　 ▒█▄▄█ ▀░░▀ ▀▀▀ ▀▀▀ ▀▀▀ 　 ▄█▄ ▀░░▀ 　 ▒█▄▀▄█ ▀▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀░\n
2022-06-16T11:21:42.7889200Z New Confirmed Cases :- {NewConfirmed}
2022-06-16T11:21:42.7889376Z Total Confirmed Cases :- {TotalConfirmed}
2022-06-16T11:21:42.7889524Z New Deaths :- {NewDeaths}
2022-06-16T11:21:42.7889670Z Total Deaths :- {TotalDeaths}
2022-06-16T11:21:42.7889821Z New Recovered :- {NewRecovered}
2022-06-16T11:21:42.7889981Z Total Recovered :- {TotalRecovered}
2022-06-16T11:21:42.7890053Z     """
2022-06-16T11:21:42.7890111Z                 
2022-06-16T11:21:42.7890306Z                           　                        　          　         ^
2022-06-16T11:21:42.7890451Z ./coronacases.py:34:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.7890530Z     world = f"""
2022-06-16T11:21:42.7890828Z ▀▀█▀▀ █▀▀█ ▀▀█▀▀ █▀▀█ █░░ 　 ▒█▀▀█ █▀▀█ █▀▀ █▀▀ █▀▀ 　 ▀█▀ █▀▀▄ 　 ▒█░░▒█ █▀▀█ █▀▀█ █░░ █▀▀▄ 
2022-06-16T11:21:42.7891138Z ░▒█░░ █░░█ ░░█░░ █▄▄█ █░░ 　 ▒█░░░ █▄▄█ ▀▀█ █▀▀ ▀▀█ 　 ▒█░ █░░█ 　 ▒█▒█▒█ █░░█ █▄▄▀ █░░ █░░█ 
2022-06-16T11:21:42.7891439Z ░▒█░░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ 　 ▒█▄▄█ ▀░░▀ ▀▀▀ ▀▀▀ ▀▀▀ 　 ▄█▄ ▀░░▀ 　 ▒█▄▀▄█ ▀▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀░\n
2022-06-16T11:21:42.7891589Z New Confirmed Cases :- {NewConfirmed}
2022-06-16T11:21:42.7891763Z Total Confirmed Cases :- {TotalConfirmed}
2022-06-16T11:21:42.7891974Z New Deaths :- {NewDeaths}
2022-06-16T11:21:42.7892136Z Total Deaths :- {TotalDeaths}
2022-06-16T11:21:42.7892278Z New Recovered :- {NewRecovered}
2022-06-16T11:21:42.7892435Z Total Recovered :- {TotalRecovered}
2022-06-16T11:21:42.7892506Z     """
2022-06-16T11:21:42.7892564Z                 
2022-06-16T11:21:42.7892762Z                           　                        　          　        ^
2022-06-16T11:21:42.7892893Z ./coronacases.py:34:90: W291 trailing whitespace
2022-06-16T11:21:42.7892973Z     world = f"""
2022-06-16T11:21:42.7893275Z ▀▀█▀▀ █▀▀█ ▀▀█▀▀ █▀▀█ █░░ 　 ▒█▀▀█ █▀▀█ █▀▀ █▀▀ █▀▀ 　 ▀█▀ █▀▀▄ 　 ▒█░░▒█ █▀▀█ █▀▀█ █░░ █▀▀▄ 
2022-06-16T11:21:42.7893663Z ░▒█░░ █░░█ ░░█░░ █▄▄█ █░░ 　 ▒█░░░ █▄▄█ ▀▀█ █▀▀ ▀▀█ 　 ▒█░ █░░█ 　 ▒█▒█▒█ █░░█ █▄▄▀ █░░ █░░█ 
2022-06-16T11:21:42.7893964Z ░▒█░░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ 　 ▒█▄▄█ ▀░░▀ ▀▀▀ ▀▀▀ ▀▀▀ 　 ▄█▄ ▀░░▀ 　 ▒█▄▀▄█ ▀▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀░\n
2022-06-16T11:21:42.7894130Z New Confirmed Cases :- {NewConfirmed}
2022-06-16T11:21:42.7894303Z Total Confirmed Cases :- {TotalConfirmed}
2022-06-16T11:21:42.7894441Z New Deaths :- {NewDeaths}
2022-06-16T11:21:42.7894587Z Total Deaths :- {TotalDeaths}
2022-06-16T11:21:42.7894737Z New Recovered :- {NewRecovered}
2022-06-16T11:21:42.7894896Z Total Recovered :- {TotalRecovered}
2022-06-16T11:21:42.7894967Z     """
2022-06-16T11:21:42.7895040Z                 
2022-06-16T11:21:42.7895219Z                           　                        　          　         ^
2022-06-16T11:21:42.7895364Z ./coronacases.py:35:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7895443Z     world = f"""
2022-06-16T11:21:42.7895743Z ▀▀█▀▀ █▀▀█ ▀▀█▀▀ █▀▀█ █░░ 　 ▒█▀▀█ █▀▀█ █▀▀ █▀▀ █▀▀ 　 ▀█▀ █▀▀▄ 　 ▒█░░▒█ █▀▀█ █▀▀█ █░░ █▀▀▄ 
2022-06-16T11:21:42.7896054Z ░▒█░░ █░░█ ░░█░░ █▄▄█ █░░ 　 ▒█░░░ █▄▄█ ▀▀█ █▀▀ ▀▀█ 　 ▒█░ █░░█ 　 ▒█▒█▒█ █░░█ █▄▄▀ █░░ █░░█ 
2022-06-16T11:21:42.7896354Z ░▒█░░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ 　 ▒█▄▄█ ▀░░▀ ▀▀▀ ▀▀▀ ▀▀▀ 　 ▄█▄ ▀░░▀ 　 ▒█▄▀▄█ ▀▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀░\n
2022-06-16T11:21:42.7896520Z New Confirmed Cases :- {NewConfirmed}
2022-06-16T11:21:42.7896705Z Total Confirmed Cases :- {TotalConfirmed}
2022-06-16T11:21:42.7896828Z New Deaths :- {NewDeaths}
2022-06-16T11:21:42.7896973Z Total Deaths :- {TotalDeaths}
2022-06-16T11:21:42.7897122Z New Recovered :- {NewRecovered}
2022-06-16T11:21:42.7897282Z Total Recovered :- {TotalRecovered}
2022-06-16T11:21:42.7897352Z     """
2022-06-16T11:21:42.7897425Z                 
2022-06-16T11:21:42.7897620Z                           　                        　          　        ^
2022-06-16T11:21:42.7897748Z ./coronacases.py:74:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.7897817Z     """
2022-06-16T11:21:42.7898141Z ░█████╗░░█████╗░██████╗░░█████╗░███╗░░██╗░█████╗░  ██╗░░░██╗██╗██████╗░██╗░░░██╗░██████╗
2022-06-16T11:21:42.7898447Z ██╔══██╗██╔══██╗██╔══██╗██╔══██╗████╗░██║██╔══██╗  ██║░░░██║██║██╔══██╗██║░░░██║██╔════╝
2022-06-16T11:21:42.7898749Z ██║░░╚═╝██║░░██║██████╔╝██║░░██║██╔██╗██║███████║  ╚██╗░██╔╝██║██████╔╝██║░░░██║╚█████╗░
2022-06-16T11:21:42.7899289Z ██║░░██╗██║░░██║██╔══██╗██║░░██║██║╚████║██╔══██║  ░╚████╔╝░██║██╔══██╗██║░░░██║░╚═══██╗
2022-06-16T11:21:42.7899637Z ╚█████╔╝╚█████╔╝██║░░██║╚█████╔╝██║░╚███║██║░░██║  ░░╚██╔╝░░██║██║░░██║╚██████╔╝██████╔╝
2022-06-16T11:21:42.7899948Z ░╚════╝░░╚════╝░╚═╝░░╚═╝░╚════╝░╚═╝░░╚══╝╚═╝░░╚═╝  ░░░╚═╝░░░╚═╝╚═╝░░╚═╝░╚═════╝░╚═════╝░"""
2022-06-16T11:21:42.7900006Z        
2022-06-16T11:21:42.7900214Z                                                                                 ^
2022-06-16T11:21:42.7900434Z ./sqlite_check.py:16:20: W605 invalid escape sequence '\j'
2022-06-16T11:21:42.7900538Z dbfile = "Databases\jarvis.db"
2022-06-16T11:21:42.7900705Z                    ^
2022-06-16T11:21:42.7900962Z ./sqlite_check.py:50:12: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7901044Z     if row == None:
2022-06-16T11:21:42.7901102Z            ^
2022-06-16T11:21:42.7901350Z ./Hotel-Management.py:127:1: E402 module level import not at top of file
2022-06-16T11:21:42.7901427Z import os
2022-06-16T11:21:42.7901495Z ^
2022-06-16T11:21:42.7901748Z ./Hotel-Management.py:128:1: E402 module level import not at top of file
2022-06-16T11:21:42.7901824Z import json
2022-06-16T11:21:42.7901890Z ^
2022-06-16T11:21:42.7902184Z ./Hotel-Management.py:131:14: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.7902276Z if filecheck == False:
2022-06-16T11:21:42.7902348Z              ^
2022-06-16T11:21:42.7902607Z ./Hotel-Management.py:390:1: F811 redefinition of unused 'exit' from line 368
2022-06-16T11:21:42.7902720Z except KeyboardInterrupt as exit:
2022-06-16T11:21:42.7902786Z ^
2022-06-16T11:21:42.7903062Z ./Hotel-Management.py:390:1: F841 local variable 'exit' is assigned to but never used
2022-06-16T11:21:42.7903173Z except KeyboardInterrupt as exit:
2022-06-16T11:21:42.7903226Z ^
2022-06-16T11:21:42.7903354Z ./new.py:85:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.7903518Z         "                 HERE YOU WILL GET ALL THE NEWS JUST IN ONE SEARCH                   ",
2022-06-16T11:21:42.7903644Z                                                                                         ^
2022-06-16T11:21:42.7903768Z ./new.py:93:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.7903938Z         "UserAgent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0"
2022-06-16T11:21:42.7904058Z                                                                                         ^
2022-06-16T11:21:42.7904276Z ./ReadFromCSV.py:11:21: W605 invalid escape sequence '\S'
2022-06-16T11:21:42.7904409Z df = pd.read_csv("..\SalesData.csv")  # Reading the csv file
2022-06-16T11:21:42.7904491Z                     ^
2022-06-16T11:21:42.7904772Z ./gui_calculator.py:2:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.7904864Z from tkinter import *
2022-06-16T11:21:42.7904932Z ^
2022-06-16T11:21:42.7905209Z ./gui_calculator.py:4:5: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7905358Z w = Tk()
2022-06-16T11:21:42.7905422Z     ^
2022-06-16T11:21:42.7905569Z ./gui_calculator.py:10:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7905646Z def calc1():
2022-06-16T11:21:42.7905713Z ^
2022-06-16T11:21:42.7906003Z ./gui_calculator.py:12:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7906093Z     txt1.delete(0, END)
2022-06-16T11:21:42.7906171Z                    ^
2022-06-16T11:21:42.7906436Z ./gui_calculator.py:19:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7906525Z     txt1.delete(0, END)
2022-06-16T11:21:42.7906670Z                    ^
2022-06-16T11:21:42.7906957Z ./gui_calculator.py:26:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7907045Z     txt1.delete(0, END)
2022-06-16T11:21:42.7907120Z                    ^
2022-06-16T11:21:42.7907394Z ./gui_calculator.py:33:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7907488Z     txt1.delete(0, END)
2022-06-16T11:21:42.7907549Z                    ^
2022-06-16T11:21:42.7907823Z ./gui_calculator.py:40:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7907910Z     txt1.delete(0, END)
2022-06-16T11:21:42.7907984Z                    ^
2022-06-16T11:21:42.7908258Z ./gui_calculator.py:47:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7908345Z     txt1.delete(0, END)
2022-06-16T11:21:42.7908419Z                    ^
2022-06-16T11:21:42.7908677Z ./gui_calculator.py:54:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7908768Z     txt1.delete(0, END)
2022-06-16T11:21:42.7908843Z                    ^
2022-06-16T11:21:42.7909117Z ./gui_calculator.py:61:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7909204Z     txt1.delete(0, END)
2022-06-16T11:21:42.7909279Z                    ^
2022-06-16T11:21:42.7909557Z ./gui_calculator.py:68:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7909631Z     txt1.delete(0, END)
2022-06-16T11:21:42.7909706Z                    ^
2022-06-16T11:21:42.7909975Z ./gui_calculator.py:75:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7910055Z     txt1.delete(0, END)
2022-06-16T11:21:42.7910119Z                    ^
2022-06-16T11:21:42.7910386Z ./gui_calculator.py:88:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7910473Z     txt1.delete(0, END)
2022-06-16T11:21:42.7910551Z                    ^
2022-06-16T11:21:42.7910810Z ./gui_calculator.py:95:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7910897Z     txt1.delete(0, END)
2022-06-16T11:21:42.7910972Z                    ^
2022-06-16T11:21:42.7911231Z ./gui_calculator.py:100:5: F841 local variable 'b' is assigned to but never used
2022-06-16T11:21:42.7911313Z     b = txt1.get()
2022-06-16T11:21:42.7911382Z     ^
2022-06-16T11:21:42.7911663Z ./gui_calculator.py:128:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7911736Z     txt1.delete(0, END)
2022-06-16T11:21:42.7911813Z                    ^
2022-06-16T11:21:42.7912088Z ./gui_calculator.py:134:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7912175Z     txt1.delete(0, END)
2022-06-16T11:21:42.7912249Z                    ^
2022-06-16T11:21:42.7912528Z ./gui_calculator.py:141:20: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7912618Z     txt1.delete(0, END)
2022-06-16T11:21:42.7912678Z                    ^
2022-06-16T11:21:42.7912963Z ./gui_calculator.py:147:8: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7913041Z lbl1 = Label(
2022-06-16T11:21:42.7913111Z        ^
2022-06-16T11:21:42.7913464Z ./gui_calculator.py:152:8: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7913574Z txt1 = Entry(w, width=80, font=30)
2022-06-16T11:21:42.7913644Z        ^
2022-06-16T11:21:42.7913921Z ./gui_calculator.py:156:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7914077Z btn1 = Button(w, text="1", font=("Unispace", 25), command=calc1, bg="#c3c6d9")
2022-06-16T11:21:42.7914147Z        ^
2022-06-16T11:21:42.7914436Z ./gui_calculator.py:157:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7914590Z btn2 = Button(w, text="2", font=("Unispace", 25), command=calc2, bg="#c3c6d9")
2022-06-16T11:21:42.7914724Z        ^
2022-06-16T11:21:42.7915018Z ./gui_calculator.py:158:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7915165Z btn3 = Button(w, text="3", font=("Unispace", 25), command=calc3, bg="#c3c6d9")
2022-06-16T11:21:42.7915220Z        ^
2022-06-16T11:21:42.7915498Z ./gui_calculator.py:159:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7915646Z btn4 = Button(w, text="4", font=("Unispace", 25), command=calc4, bg="#c3c6d9")
2022-06-16T11:21:42.7915715Z        ^
2022-06-16T11:21:42.7916003Z ./gui_calculator.py:160:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7916156Z btn5 = Button(w, text="5", font=("Unispace", 25), command=calc5, bg="#c3c6d9")
2022-06-16T11:21:42.7916226Z        ^
2022-06-16T11:21:42.7916510Z ./gui_calculator.py:161:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7916651Z btn6 = Button(w, text="6", font=("Unispace", 25), command=calc6, bg="#c3c6d9")
2022-06-16T11:21:42.7916721Z        ^
2022-06-16T11:21:42.7917002Z ./gui_calculator.py:162:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7917152Z btn7 = Button(w, text="7", font=("Unispace", 25), command=calc7, bg="#c3c6d9")
2022-06-16T11:21:42.7917221Z        ^
2022-06-16T11:21:42.7917507Z ./gui_calculator.py:163:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7917659Z btn8 = Button(w, text="8", font=("Unispace", 25), command=calc8, bg="#c3c6d9")
2022-06-16T11:21:42.7917727Z        ^
2022-06-16T11:21:42.7917995Z ./gui_calculator.py:164:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7918145Z btn9 = Button(w, text="9", font=("Unispace", 25), command=calc9, bg="#c3c6d9")
2022-06-16T11:21:42.7918214Z        ^
2022-06-16T11:21:42.7918494Z ./gui_calculator.py:165:8: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7918649Z btn0 = Button(w, text="0", font=("Unispace", 25), command=calc0, bg="#c3c6d9")
2022-06-16T11:21:42.7918717Z        ^
2022-06-16T11:21:42.7919004Z ./gui_calculator.py:167:16: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7919169Z btn_addition = Button(w, text="+", font=("Unispace", 26), command=add, bg="#3954ed")
2022-06-16T11:21:42.7919228Z                ^
2022-06-16T11:21:42.7919515Z ./gui_calculator.py:168:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7919600Z btn_equals = Button(
2022-06-16T11:21:42.7919675Z              ^
2022-06-16T11:21:42.7919957Z ./gui_calculator.py:178:13: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7920039Z btn_clear = Button(
2022-06-16T11:21:42.7920111Z             ^
2022-06-16T11:21:42.7920374Z ./gui_calculator.py:188:16: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7920468Z btn_subtract = Button(
2022-06-16T11:21:42.7920543Z                ^
2022-06-16T11:21:42.7920830Z ./gui_calculator.py:191:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7920931Z btn_multiplication = Button(
2022-06-16T11:21:42.7921009Z                      ^
2022-06-16T11:21:42.7921352Z ./gui_calculator.py:194:16: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.7921638Z btn_division = Button(w, text="÷", font=("Unispace", 26), command=divide, bg="#3954ed")
2022-06-16T11:21:42.7921697Z                ^
2022-06-16T11:21:42.7921949Z ./bookstore_manangement_system.py:153:1: C901 'Loop 153' is too complex (12)
2022-06-16T11:21:42.7922033Z for m in data2222:
2022-06-16T11:21:42.7922105Z ^
2022-06-16T11:21:42.7922267Z ./bookstore_manangement_system.py:219:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7922430Z                                 " Password Is  Greater  than  20  Characters  Enter Again"
2022-06-16T11:21:42.7922629Z                                                                                         ^
2022-06-16T11:21:42.7923012Z ./bookstore_manangement_system.py:263:1: C901 'Loop 263' is too complex (46)
2022-06-16T11:21:42.7923097Z while a == True:
2022-06-16T11:21:42.7923168Z ^
2022-06-16T11:21:42.7923509Z ./bookstore_manangement_system.py:263:9: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.7923594Z while a == True:
2022-06-16T11:21:42.7923668Z         ^
2022-06-16T11:21:42.7923976Z ./bookstore_manangement_system.py:324:18: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7924066Z         if data2 != None:
2022-06-16T11:21:42.7924129Z                  ^
2022-06-16T11:21:42.7924301Z ./bookstore_manangement_system.py:365:89: E501 line too long (107 > 88 characters)
2022-06-16T11:21:42.7924608Z                                     "update books set Numbers_of_book=Numbers_of_book - 1 where name='%s';"
2022-06-16T11:21:42.7924740Z                                                                                         ^
2022-06-16T11:21:42.7924914Z ./bookstore_manangement_system.py:442:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.7925228Z                                             "update books set numbers_of_book=numbers_of_book -%s where name='%s'"
2022-06-16T11:21:42.7925359Z                                                                                         ^
2022-06-16T11:21:42.7925529Z ./bookstore_manangement_system.py:483:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7925775Z                                             "Do  You  Want  To  Restart  ??    yes / no  --  "
2022-06-16T11:21:42.7925903Z                                                                                         ^
2022-06-16T11:21:42.7926076Z ./bookstore_manangement_system.py:507:89: E501 line too long (143 > 88 characters)
2022-06-16T11:21:42.7926344Z                                             "SORRY  FOR  INCONVENIENCE  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE"
2022-06-16T11:21:42.7926479Z                                                                                         ^
2022-06-16T11:21:42.7926653Z ./bookstore_manangement_system.py:515:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7926924Z                                             "Do  You  Want  To  Restart  ??    yes / no  --  "
2022-06-16T11:21:42.7927051Z                                                                                         ^
2022-06-16T11:21:42.7927223Z ./bookstore_manangement_system.py:537:89: E501 line too long (135 > 88 characters)
2022-06-16T11:21:42.7927425Z                                         "SORRY  NO  BOOK  LEFT  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE"
2022-06-16T11:21:42.7927554Z                                                                                         ^
2022-06-16T11:21:42.7927830Z ./bookstore_manangement_system.py:545:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7928074Z                                         "Do  You  Want  To  Restart  ??    yes / no  --  "
2022-06-16T11:21:42.7928195Z                                                                                         ^
2022-06-16T11:21:42.7928453Z ./bookstore_manangement_system.py:567:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.7928753Z                                     "update books set numbers_of_book=numbers_of_book -%s where name='%s'"
2022-06-16T11:21:42.7928871Z                                                                                         ^
2022-06-16T11:21:42.7929027Z ./bookstore_manangement_system.py:592:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7929256Z                                             "Do  You  Want  To  Restart  ??    yes / no  --  "
2022-06-16T11:21:42.7929377Z                                                                                         ^
2022-06-16T11:21:42.7929867Z ./bookstore_manangement_system.py:675:13: B007 Loop control variable 'k' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7929961Z         for k in range(q10):
2022-06-16T11:21:42.7930034Z             ^
2022-06-16T11:21:42.7930333Z ./bookstore_manangement_system.py:689:23: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7930426Z             if data20 != None:
2022-06-16T11:21:42.7930504Z                       ^
2022-06-16T11:21:42.7930781Z ./bookstore_manangement_system.py:738:18: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7930872Z         if data2 != None:
2022-06-16T11:21:42.7930946Z                  ^
2022-06-16T11:21:42.7931109Z ./bookstore_manangement_system.py:748:89: E501 line too long (122 > 88 characters)
2022-06-16T11:21:42.7931325Z             update = "update books set SNo=%s,Name=%s,Author=%s,Year=%s,ISBN=%s,Price=%s,numbers_of_book=%s where ISBN=%s"
2022-06-16T11:21:42.7931448Z                                                                                         ^
2022-06-16T11:21:42.7931741Z ./bookstore_manangement_system.py:812:18: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.7931829Z         if data2 != None:
2022-06-16T11:21:42.7931887Z                  ^
2022-06-16T11:21:42.7932028Z ./Google_News.py:35:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.7932383Z sports_url = "https://news.google.com/news/rss/headlines/section/topic/SPORTS.en_in/Sports?ned=in&hl=en-IN&gl=IN"
2022-06-16T11:21:42.7932505Z                                                                                         ^
2022-06-16T11:21:42.7932658Z ./dice_rolling_simulator.py:44:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.7932835Z     # Below is the references to our dice functions (Below), when the user chooses a dice.
2022-06-16T11:21:42.7932952Z                                                                                         ^
2022-06-16T11:21:42.7933084Z ./ph_email.py:20:1: W191 indentation contains tabs
2022-06-16T11:21:42.7933144Z     r"""\b
2022-06-16T11:21:42.7933217Z 							(\+?91|0)?
2022-06-16T11:21:42.7933288Z 							\ ?
2022-06-16T11:21:42.7933360Z 							(\d{10})
2022-06-16T11:21:42.7933432Z 							\b
2022-06-16T11:21:42.7933503Z 							""",
2022-06-16T11:21:42.7933569Z ^
2022-06-16T11:21:42.7933711Z ./ph_email.py:20:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7933783Z     r"""\b
2022-06-16T11:21:42.7933856Z 							(\+?91|0)?
2022-06-16T11:21:42.7933924Z 							\ ?
2022-06-16T11:21:42.7933997Z 							(\d{10})
2022-06-16T11:21:42.7934068Z 							\b
2022-06-16T11:21:42.7934138Z 							""",
2022-06-16T11:21:42.7934191Z ^
2022-06-16T11:21:42.7934317Z ./ph_email.py:21:1: W191 indentation contains tabs
2022-06-16T11:21:42.7934387Z     r"""\b
2022-06-16T11:21:42.7934460Z 							(\+?91|0)?
2022-06-16T11:21:42.7934529Z 							\ ?
2022-06-16T11:21:42.7934600Z 							(\d{10})
2022-06-16T11:21:42.7934659Z 							\b
2022-06-16T11:21:42.7934729Z 							""",
2022-06-16T11:21:42.7934796Z ^
2022-06-16T11:21:42.7934950Z ./ph_email.py:21:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7935021Z     r"""\b
2022-06-16T11:21:42.7935095Z 							(\+?91|0)?
2022-06-16T11:21:42.7935159Z 							\ ?
2022-06-16T11:21:42.7935216Z 							(\d{10})
2022-06-16T11:21:42.7935352Z 							\b
2022-06-16T11:21:42.7935429Z 							""",
2022-06-16T11:21:42.7935495Z ^
2022-06-16T11:21:42.7935625Z ./ph_email.py:22:1: W191 indentation contains tabs
2022-06-16T11:21:42.7935695Z     r"""\b
2022-06-16T11:21:42.7935768Z 							(\+?91|0)?
2022-06-16T11:21:42.7935823Z 							\ ?
2022-06-16T11:21:42.7935895Z 							(\d{10})
2022-06-16T11:21:42.7935965Z 							\b
2022-06-16T11:21:42.7936035Z 							""",
2022-06-16T11:21:42.7936101Z ^
2022-06-16T11:21:42.7936256Z ./ph_email.py:22:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7936311Z     r"""\b
2022-06-16T11:21:42.7936446Z 							(\+?91|0)?
2022-06-16T11:21:42.7936516Z 							\ ?
2022-06-16T11:21:42.7936590Z 							(\d{10})
2022-06-16T11:21:42.7936662Z 							\b
2022-06-16T11:21:42.7936732Z 							""",
2022-06-16T11:21:42.7936798Z ^
2022-06-16T11:21:42.7936912Z ./ph_email.py:23:1: W191 indentation contains tabs
2022-06-16T11:21:42.7936982Z     r"""\b
2022-06-16T11:21:42.7937053Z 							(\+?91|0)?
2022-06-16T11:21:42.7937125Z 							\ ?
2022-06-16T11:21:42.7937196Z 							(\d{10})
2022-06-16T11:21:42.7937266Z 							\b
2022-06-16T11:21:42.7937337Z 							""",
2022-06-16T11:21:42.7937389Z ^
2022-06-16T11:21:42.7937541Z ./ph_email.py:23:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7937611Z     r"""\b
2022-06-16T11:21:42.7937682Z 							(\+?91|0)?
2022-06-16T11:21:42.7937751Z 							\ ?
2022-06-16T11:21:42.7937824Z 							(\d{10})
2022-06-16T11:21:42.7937880Z 							\b
2022-06-16T11:21:42.7937949Z 							""",
2022-06-16T11:21:42.7938016Z ^
2022-06-16T11:21:42.7938140Z ./ph_email.py:24:1: W191 indentation contains tabs
2022-06-16T11:21:42.7938215Z     r"""\b
2022-06-16T11:21:42.7938285Z 							(\+?91|0)?
2022-06-16T11:21:42.7938354Z 							\ ?
2022-06-16T11:21:42.7938411Z 							(\d{10})
2022-06-16T11:21:42.7938481Z 							\b
2022-06-16T11:21:42.7938550Z 							""",
2022-06-16T11:21:42.7938618Z ^
2022-06-16T11:21:42.7938771Z ./ph_email.py:24:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7938845Z     r"""\b
2022-06-16T11:21:42.7938916Z 							(\+?91|0)?
2022-06-16T11:21:42.7938971Z 							\ ?
2022-06-16T11:21:42.7939036Z 							(\d{10})
2022-06-16T11:21:42.7939216Z 							\b
2022-06-16T11:21:42.7939282Z 							""",
2022-06-16T11:21:42.7939345Z ^
2022-06-16T11:21:42.7939470Z ./ph_email.py:31:1: W191 indentation contains tabs
2022-06-16T11:21:42.7939540Z     r"""(
2022-06-16T11:21:42.7939694Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7939763Z 							@
2022-06-16T11:21:42.7939941Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7940009Z 							|
2022-06-16T11:21:42.7940157Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7940303Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7940360Z 							(\]?)
2022-06-16T11:21:42.7940428Z 							)
2022-06-16T11:21:42.7940497Z 							""",
2022-06-16T11:21:42.7940563Z ^
2022-06-16T11:21:42.7940714Z ./ph_email.py:31:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7940785Z     r"""(
2022-06-16T11:21:42.7941044Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7941104Z 							@
2022-06-16T11:21:42.7941285Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7941358Z 							|
2022-06-16T11:21:42.7941503Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7941658Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7941733Z 							(\]?)
2022-06-16T11:21:42.7941807Z 							)
2022-06-16T11:21:42.7941866Z 							""",
2022-06-16T11:21:42.7941936Z ^
2022-06-16T11:21:42.7942059Z ./ph_email.py:31:27: W291 trailing whitespace
2022-06-16T11:21:42.7942131Z     r"""(
2022-06-16T11:21:42.7942280Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7942354Z 							@
2022-06-16T11:21:42.7942537Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7942595Z 							|
2022-06-16T11:21:42.7942741Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7942896Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7942972Z 							(\]?)
2022-06-16T11:21:42.7943044Z 							)
2022-06-16T11:21:42.7943221Z 							""",
2022-06-16T11:21:42.7943288Z          
2022-06-16T11:21:42.7943365Z 							         ^
2022-06-16T11:21:42.7943507Z ./ph_email.py:32:1: W191 indentation contains tabs
2022-06-16T11:21:42.7943581Z     r"""(
2022-06-16T11:21:42.7943737Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7943813Z 							@
2022-06-16T11:21:42.7943994Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7944053Z 							|
2022-06-16T11:21:42.7944198Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7944569Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7944645Z 							(\]?)
2022-06-16T11:21:42.7944799Z 							)
2022-06-16T11:21:42.7944873Z 							""",
2022-06-16T11:21:42.7944943Z ^
2022-06-16T11:21:42.7945093Z ./ph_email.py:32:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7945168Z     r"""(
2022-06-16T11:21:42.7945318Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7945392Z 							@
2022-06-16T11:21:42.7945573Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7945651Z 							|
2022-06-16T11:21:42.7945797Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7945933Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7946009Z 							(\]?)
2022-06-16T11:21:42.7946082Z 							)
2022-06-16T11:21:42.7946150Z 							""",
2022-06-16T11:21:42.7946218Z ^
2022-06-16T11:21:42.7946353Z ./ph_email.py:33:1: W191 indentation contains tabs
2022-06-16T11:21:42.7946412Z     r"""(
2022-06-16T11:21:42.7946557Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7946630Z 							@
2022-06-16T11:21:42.7946810Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7946887Z 							|
2022-06-16T11:21:42.7947032Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7947185Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7947246Z 							(\]?)
2022-06-16T11:21:42.7947318Z 							)
2022-06-16T11:21:42.7947392Z 							""",
2022-06-16T11:21:42.7947463Z ^
2022-06-16T11:21:42.7947624Z ./ph_email.py:33:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7947703Z     r"""(
2022-06-16T11:21:42.7947847Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7947905Z 							@
2022-06-16T11:21:42.7948083Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7948155Z 							|
2022-06-16T11:21:42.7948299Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7948450Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7948525Z 							(\]?)
2022-06-16T11:21:42.7948599Z 							)
2022-06-16T11:21:42.7948658Z 							""",
2022-06-16T11:21:42.7948728Z ^
2022-06-16T11:21:42.7948864Z ./ph_email.py:34:1: W191 indentation contains tabs
2022-06-16T11:21:42.7948944Z     r"""(
2022-06-16T11:21:42.7949091Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7949271Z 							@
2022-06-16T11:21:42.7949440Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7949495Z 							|
2022-06-16T11:21:42.7949630Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7949774Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7949846Z 							(\]?)
2022-06-16T11:21:42.7949917Z 							)
2022-06-16T11:21:42.7949986Z 							""",
2022-06-16T11:21:42.7950038Z ^
2022-06-16T11:21:42.7950190Z ./ph_email.py:34:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7950261Z     r"""(
2022-06-16T11:21:42.7950389Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7950454Z 							@
2022-06-16T11:21:42.7950613Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7950678Z 							|
2022-06-16T11:21:42.7950799Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7950939Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7951009Z 							(\]?)
2022-06-16T11:21:42.7951082Z 							)
2022-06-16T11:21:42.7951153Z 							""",
2022-06-16T11:21:42.7951219Z ^
2022-06-16T11:21:42.7951347Z ./ph_email.py:35:1: W191 indentation contains tabs
2022-06-16T11:21:42.7951403Z     r"""(
2022-06-16T11:21:42.7951539Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7951607Z 							@
2022-06-16T11:21:42.7951777Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7951916Z 							|
2022-06-16T11:21:42.7952071Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7952214Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7952271Z 							(\]?)
2022-06-16T11:21:42.7952338Z 							)
2022-06-16T11:21:42.7952409Z 							""",
2022-06-16T11:21:42.7952476Z ^
2022-06-16T11:21:42.7952627Z ./ph_email.py:35:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7952697Z     r"""(
2022-06-16T11:21:42.7952818Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7952888Z 							@
2022-06-16T11:21:42.7953057Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7953198Z 							|
2022-06-16T11:21:42.7953340Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7953484Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7953555Z 							(\]?)
2022-06-16T11:21:42.7953609Z 							)
2022-06-16T11:21:42.7953679Z 							""",
2022-06-16T11:21:42.7953746Z ^
2022-06-16T11:21:42.7953874Z ./ph_email.py:36:1: W191 indentation contains tabs
2022-06-16T11:21:42.7953948Z     r"""(
2022-06-16T11:21:42.7954084Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7954155Z 							@
2022-06-16T11:21:42.7954308Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7954379Z 							|
2022-06-16T11:21:42.7954514Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7954655Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7954721Z 							(\]?)
2022-06-16T11:21:42.7954783Z 							)
2022-06-16T11:21:42.7954849Z 							""",
2022-06-16T11:21:42.7954901Z ^
2022-06-16T11:21:42.7955055Z ./ph_email.py:36:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7955129Z     r"""(
2022-06-16T11:21:42.7955264Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7955334Z 							@
2022-06-16T11:21:42.7955499Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7955568Z 							|
2022-06-16T11:21:42.7955690Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7955832Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7955903Z 							(\]?)
2022-06-16T11:21:42.7955975Z 							)
2022-06-16T11:21:42.7956046Z 							""",
2022-06-16T11:21:42.7956112Z ^
2022-06-16T11:21:42.7956225Z ./ph_email.py:37:1: W191 indentation contains tabs
2022-06-16T11:21:42.7956295Z     r"""(
2022-06-16T11:21:42.7956430Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7956499Z 							@
2022-06-16T11:21:42.7956668Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7956737Z 							|
2022-06-16T11:21:42.7956874Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7957001Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7957073Z 							(\]?)
2022-06-16T11:21:42.7957145Z 							)
2022-06-16T11:21:42.7957218Z 							""",
2022-06-16T11:21:42.7957284Z ^
2022-06-16T11:21:42.7957434Z ./ph_email.py:37:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7957505Z     r"""(
2022-06-16T11:21:42.7957626Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7957696Z 							@
2022-06-16T11:21:42.7957863Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7957935Z 							|
2022-06-16T11:21:42.7958071Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7958213Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7958283Z 							(\]?)
2022-06-16T11:21:42.7958337Z 							)
2022-06-16T11:21:42.7958407Z 							""",
2022-06-16T11:21:42.7958474Z ^
2022-06-16T11:21:42.7958602Z ./ph_email.py:38:1: W191 indentation contains tabs
2022-06-16T11:21:42.7958673Z     r"""(
2022-06-16T11:21:42.7958807Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7958863Z 							@
2022-06-16T11:21:42.7959030Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7959099Z 							|
2022-06-16T11:21:42.7959240Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7959385Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7959457Z 							(\]?)
2022-06-16T11:21:42.7959527Z 							)
2022-06-16T11:21:42.7959583Z 							""",
2022-06-16T11:21:42.7959650Z ^
2022-06-16T11:21:42.7959799Z ./ph_email.py:38:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7959933Z     r"""(
2022-06-16T11:21:42.7960084Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7960154Z 							@
2022-06-16T11:21:42.7960323Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7960377Z 							|
2022-06-16T11:21:42.7960517Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7960658Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7960728Z 							(\]?)
2022-06-16T11:21:42.7960797Z 							)
2022-06-16T11:21:42.7960866Z 							""",
2022-06-16T11:21:42.7960933Z ^
2022-06-16T11:21:42.7961049Z ./ph_email.py:39:1: W191 indentation contains tabs
2022-06-16T11:21:42.7961119Z     r"""(
2022-06-16T11:21:42.7961332Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7961401Z 							@
2022-06-16T11:21:42.7961569Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7961639Z 							|
2022-06-16T11:21:42.7961774Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7961900Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7961970Z 							(\]?)
2022-06-16T11:21:42.7962043Z 							)
2022-06-16T11:21:42.7962113Z 							""",
2022-06-16T11:21:42.7962179Z ^
2022-06-16T11:21:42.7962331Z ./ph_email.py:39:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.7962387Z     r"""(
2022-06-16T11:21:42.7962522Z 							([a-zA-Z0-9_\-\.]+)	
2022-06-16T11:21:42.7962593Z 							@
2022-06-16T11:21:42.7962763Z 							((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)
2022-06-16T11:21:42.7962832Z 							|
2022-06-16T11:21:42.7962969Z 							(([a-zA-Z0-9\-]+\.)+))
2022-06-16T11:21:42.7963114Z 							([a-zA-Z]{2,4}|[0-9]{1,3})
2022-06-16T11:21:42.7963170Z 							(\]?)
2022-06-16T11:21:42.7963235Z 							)
2022-06-16T11:21:42.7963302Z 							""",
2022-06-16T11:21:42.7963360Z ^
2022-06-16T11:21:42.7963496Z ./TicTacToe.py:6:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7963563Z  
2022-06-16T11:21:42.7963629Z ^
2022-06-16T11:21:42.7963755Z ./TicTacToe.py:10:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7963822Z  
2022-06-16T11:21:42.7963889Z ^
2022-06-16T11:21:42.7964029Z ./TicTacToe.py:12:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7964097Z  
2022-06-16T11:21:42.7964166Z ^
2022-06-16T11:21:42.7964300Z ./TicTacToe.py:16:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7964352Z  
2022-06-16T11:21:42.7964418Z ^
2022-06-16T11:21:42.7964552Z ./TicTacToe.py:17:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7964619Z  
2022-06-16T11:21:42.7964685Z ^
2022-06-16T11:21:42.7964819Z ./TicTacToe.py:23:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7964870Z  
2022-06-16T11:21:42.7964939Z ^
2022-06-16T11:21:42.7965072Z ./TicTacToe.py:27:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7965141Z  
2022-06-16T11:21:42.7965208Z ^
2022-06-16T11:21:42.7965341Z ./TicTacToe.py:29:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7965408Z  
2022-06-16T11:21:42.7965459Z ^
2022-06-16T11:21:42.7965597Z ./TicTacToe.py:31:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7965710Z def check_win(player_pos, cur_player):
2022-06-16T11:21:42.7965780Z ^
2022-06-16T11:21:42.7965911Z ./TicTacToe.py:32:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7965978Z  
2022-06-16T11:21:42.7966045Z ^
2022-06-16T11:21:42.7966168Z ./TicTacToe.py:34:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.7966297Z     soln = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
2022-06-16T11:21:42.7966416Z                                                                                         ^
2022-06-16T11:21:42.7966549Z ./TicTacToe.py:35:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7966618Z  
2022-06-16T11:21:42.7966684Z ^
2022-06-16T11:21:42.7966815Z ./TicTacToe.py:39:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7966866Z  
2022-06-16T11:21:42.7966932Z ^
2022-06-16T11:21:42.7967053Z ./TicTacToe.py:42:50: W291 trailing whitespace
2022-06-16T11:21:42.7967188Z     # Return False if no combination is satisfied       
2022-06-16T11:21:42.7967354Z                                                  ^
2022-06-16T11:21:42.7967487Z ./TicTacToe.py:43:17: W291 trailing whitespace
2022-06-16T11:21:42.7967578Z     return False       
2022-06-16T11:21:42.7967636Z                 ^
2022-06-16T11:21:42.7967770Z ./TicTacToe.py:44:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7967837Z  
2022-06-16T11:21:42.7967902Z ^
2022-06-16T11:21:42.7968035Z ./TicTacToe.py:46:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7968134Z def check_draw(player_pos):
2022-06-16T11:21:42.7968201Z ^
2022-06-16T11:21:42.7968306Z ./TicTacToe.py:49:17: W291 trailing whitespace
2022-06-16T11:21:42.7968458Z     return False       
2022-06-16T11:21:42.7968531Z                 ^
2022-06-16T11:21:42.7968663Z ./TicTacToe.py:50:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7968729Z  
2022-06-16T11:21:42.7968794Z ^
2022-06-16T11:21:42.7968928Z ./TicTacToe.py:52:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.7969012Z def single_game(cur_player):
2022-06-16T11:21:42.7969072Z ^
2022-06-16T11:21:42.7969198Z ./TicTacToe.py:53:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7969255Z  
2022-06-16T11:21:42.7969313Z ^
2022-06-16T11:21:42.7969436Z ./TicTacToe.py:56:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7969496Z      
2022-06-16T11:21:42.7969549Z ^
2022-06-16T11:21:42.7969770Z ./TicTacToe.py:58:22: E231 missing whitespace after ':'
2022-06-16T11:21:42.7969914Z     player_pos = {'X':[], 'O':[]}
2022-06-16T11:21:42.7969993Z                      ^
2022-06-16T11:21:42.7970200Z ./TicTacToe.py:58:30: E231 missing whitespace after ':'
2022-06-16T11:21:42.7970348Z     player_pos = {'X':[], 'O':[]}
2022-06-16T11:21:42.7970436Z                              ^
2022-06-16T11:21:42.7970557Z ./TicTacToe.py:59:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7970625Z      
2022-06-16T11:21:42.7970692Z ^
2022-06-16T11:21:42.7970822Z ./TicTacToe.py:63:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7970891Z          
2022-06-16T11:21:42.7970959Z ^
2022-06-16T11:21:42.7971082Z ./TicTacToe.py:67:32: W291 trailing whitespace
2022-06-16T11:21:42.7971164Z             move = int(input()) 
2022-06-16T11:21:42.7971248Z                                ^
2022-06-16T11:21:42.7971378Z ./TicTacToe.py:71:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7971443Z  
2022-06-16T11:21:42.7971509Z ^
2022-06-16T11:21:42.7971639Z ./TicTacToe.py:76:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7971705Z  
2022-06-16T11:21:42.7971757Z ^
2022-06-16T11:21:42.7971887Z ./TicTacToe.py:81:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7971954Z  
2022-06-16T11:21:42.7972023Z ^
2022-06-16T11:21:42.7972154Z ./TicTacToe.py:83:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7972221Z  
2022-06-16T11:21:42.7972287Z ^
2022-06-16T11:21:42.7972392Z ./TicTacToe.py:84:31: W291 trailing whitespace
2022-06-16T11:21:42.7972488Z         # Updating grid status 
2022-06-16T11:21:42.7972570Z                               ^
2022-06-16T11:21:42.7972703Z ./TicTacToe.py:86:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7972770Z  
2022-06-16T11:21:42.7972839Z ^
2022-06-16T11:21:42.7972968Z ./TicTacToe.py:89:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7973020Z  
2022-06-16T11:21:42.7973086Z ^
2022-06-16T11:21:42.7973205Z ./TicTacToe.py:93:64: W291 trailing whitespace
2022-06-16T11:21:42.7973352Z             print("Player ", cur_player, " has won the game!!")     
2022-06-16T11:21:42.7973459Z                                                                ^
2022-06-16T11:21:42.7973590Z ./TicTacToe.py:96:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7973660Z  
2022-06-16T11:21:42.7973713Z ^
2022-06-16T11:21:42.7973848Z ./TicTacToe.py:103:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7973914Z  
2022-06-16T11:21:42.7973981Z ^
2022-06-16T11:21:42.7974115Z ./TicTacToe.py:109:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7974182Z  
2022-06-16T11:21:42.7974234Z ^
2022-06-16T11:21:42.7974513Z ./TicTacToe.py:110:1: C901 'If 110' is too complex (12)
2022-06-16T11:21:42.7974613Z if __name__ == "__main__":
2022-06-16T11:21:42.7974679Z ^
2022-06-16T11:21:42.7974864Z ./TicTacToe.py:110:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.7974953Z if __name__ == "__main__":
2022-06-16T11:21:42.7975018Z ^
2022-06-16T11:21:42.7975139Z ./TicTacToe.py:111:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7975206Z  
2022-06-16T11:21:42.7975271Z ^
2022-06-16T11:21:42.7975405Z ./TicTacToe.py:115:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7975465Z  
2022-06-16T11:21:42.7975528Z ^
2022-06-16T11:21:42.7975736Z ./TicTacToe.py:119:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7975789Z      
2022-06-16T11:21:42.7975858Z ^
2022-06-16T11:21:42.7975990Z ./TicTacToe.py:122:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7976056Z  
2022-06-16T11:21:42.7976121Z ^
2022-06-16T11:21:42.7976326Z ./TicTacToe.py:124:25: E203 whitespace before ':'
2022-06-16T11:21:42.7976495Z     player_choice = {'X' : "", 'O' : ""}
2022-06-16T11:21:42.7976562Z                         ^
2022-06-16T11:21:42.7976754Z ./TicTacToe.py:124:35: E203 whitespace before ':'
2022-06-16T11:21:42.7976914Z     player_choice = {'X' : "", 'O' : ""}
2022-06-16T11:21:42.7977001Z                                   ^
2022-06-16T11:21:42.7977135Z ./TicTacToe.py:125:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7977202Z  
2022-06-16T11:21:42.7977269Z ^
2022-06-16T11:21:42.7977387Z ./TicTacToe.py:128:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7977453Z  
2022-06-16T11:21:42.7977525Z ^
2022-06-16T11:21:42.7977660Z ./TicTacToe.py:132:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7977725Z  
2022-06-16T11:21:42.7977777Z ^
2022-06-16T11:21:42.7977900Z ./TicTacToe.py:134:43: W291 trailing whitespace
2022-06-16T11:21:42.7978018Z     # The loop runs until the players quit 
2022-06-16T11:21:42.7978111Z                                           ^
2022-06-16T11:21:42.7978245Z ./TicTacToe.py:136:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7978311Z  
2022-06-16T11:21:42.7978376Z ^
2022-06-16T11:21:42.7978493Z ./TicTacToe.py:142:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7978558Z  
2022-06-16T11:21:42.7978625Z ^
2022-06-16T11:21:42.7978744Z ./TicTacToe.py:145:34: W291 trailing whitespace
2022-06-16T11:21:42.7978842Z             choice = int(input())   
2022-06-16T11:21:42.7978926Z                                  ^
2022-06-16T11:21:42.7979176Z ./TicTacToe.py:149:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7979235Z  
2022-06-16T11:21:42.7979301Z ^
2022-06-16T11:21:42.7979427Z ./TicTacToe.py:150:39: W291 trailing whitespace
2022-06-16T11:21:42.7979539Z         # Conditions for player choice  
2022-06-16T11:21:42.7979745Z                                       ^
2022-06-16T11:21:42.7979883Z ./TicTacToe.py:157:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7980496Z  
2022-06-16T11:21:42.7980583Z ^
2022-06-16T11:21:42.7980759Z ./TicTacToe.py:164:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7980839Z          
2022-06-16T11:21:42.7980911Z ^
2022-06-16T11:21:42.7981047Z ./TicTacToe.py:168:18: W291 trailing whitespace
2022-06-16T11:21:42.7981130Z             break  
2022-06-16T11:21:42.7981204Z                  ^
2022-06-16T11:21:42.7981338Z ./TicTacToe.py:169:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7981409Z  
2022-06-16T11:21:42.7981475Z ^
2022-06-16T11:21:42.7981623Z ./TicTacToe.py:172:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7981695Z  
2022-06-16T11:21:42.7981767Z ^
2022-06-16T11:21:42.7981913Z ./TicTacToe.py:175:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7981982Z          
2022-06-16T11:21:42.7982055Z ^
2022-06-16T11:21:42.7982335Z ./TicTacToe.py:177:25: E203 whitespace before ':'
2022-06-16T11:21:42.7982488Z         if winner != 'D' :
2022-06-16T11:21:42.7982577Z                         ^
2022-06-16T11:21:42.7982725Z ./TicTacToe.py:180:1: W293 blank line contains whitespace
2022-06-16T11:21:42.7982970Z  
2022-06-16T11:21:42.7983044Z ^
2022-06-16T11:21:42.7983206Z ./PONG_GAME.py:48:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.7983548Z     global paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, BALL_RADIUS
2022-06-16T11:21:42.7983784Z                                                                                         ^
2022-06-16T11:21:42.7983934Z ./Gregorian_Calendar.py:1:89: E501 line too long (250 > 88 characters)
2022-06-16T11:21:42.7984296Z # An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.
2022-06-16T11:21:42.7984512Z                                                                                         ^
2022-06-16T11:21:42.7984660Z ./Gregorian_Calendar.py:8:89: E501 line too long (148 > 88 characters)
2022-06-16T11:21:42.7984884Z # This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years.
2022-06-16T11:21:42.7984991Z                                                                                         ^
2022-06-16T11:21:42.7985279Z ./portscanner.py:4:1: F403 'from socket import *' used; unable to detect undefined names
2022-06-16T11:21:42.7985392Z from socket import *  # Import the module
2022-06-16T11:21:42.7985460Z ^
2022-06-16T11:21:42.7985740Z ./portscanner.py:5:1: F403 'from threading import *' used; unable to detect undefined names
2022-06-16T11:21:42.7985865Z from threading import *  # Import the module
2022-06-16T11:21:42.7985932Z ^
2022-06-16T11:21:42.7986246Z ./portscanner.py:15:14: F405 'Semaphore' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7986399Z screenLock = Semaphore(value=1)  # Prevent other threads from preceeding
2022-06-16T11:21:42.7986469Z              ^
2022-06-16T11:21:42.7986773Z ./portscanner.py:20:19: F405 'socket' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7986914Z         connSkt = socket(AF_INET, SOCK_STREAM)  # Open a socket
2022-06-16T11:21:42.7986988Z                   ^
2022-06-16T11:21:42.7987284Z ./portscanner.py:20:26: F405 'AF_INET' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7987421Z         connSkt = socket(AF_INET, SOCK_STREAM)  # Open a socket
2022-06-16T11:21:42.7987489Z                          ^
2022-06-16T11:21:42.7987803Z ./portscanner.py:20:35: F405 'SOCK_STREAM' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7987945Z         connSkt = socket(AF_INET, SOCK_STREAM)  # Open a socket
2022-06-16T11:21:42.7988030Z                                   ^
2022-06-16T11:21:42.7988623Z ./portscanner.py:27:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7988700Z     except:
2022-06-16T11:21:42.7988770Z     ^
2022-06-16T11:21:42.7988973Z ./portscanner.py:27:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7989034Z     except:
2022-06-16T11:21:42.7989100Z     ^
2022-06-16T11:21:42.7989418Z ./portscanner.py:37:17: F405 'gethostbyname' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7989573Z         tgtIP = gethostbyname(tgtHost)  # Get the IP from the hostname
2022-06-16T11:21:42.7989646Z                 ^
2022-06-16T11:21:42.7990236Z ./portscanner.py:38:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7990307Z     except:
2022-06-16T11:21:42.7990375Z     ^
2022-06-16T11:21:42.7990635Z ./portscanner.py:38:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7990718Z     except:
2022-06-16T11:21:42.7990785Z     ^
2022-06-16T11:21:42.7991105Z ./portscanner.py:42:19: F405 'gethostbyaddr' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7991245Z         tgtName = gethostbyaddr(tgtIP)  # Get hostname from IP
2022-06-16T11:21:42.7991316Z                   ^
2022-06-16T11:21:42.7991891Z ./portscanner.py:44:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.7992032Z     except:
2022-06-16T11:21:42.7992086Z     ^
2022-06-16T11:21:42.7992291Z ./portscanner.py:44:5: E722 do not use bare 'except'
2022-06-16T11:21:42.7992361Z     except:
2022-06-16T11:21:42.7992428Z     ^
2022-06-16T11:21:42.7992763Z ./portscanner.py:46:5: F405 'setdefaulttimeout' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7992861Z     setdefaulttimeout(1)
2022-06-16T11:21:42.7992929Z     ^
2022-06-16T11:21:42.7993216Z ./portscanner.py:48:13: F405 'Thread' may be undefined, or defined from star imports: socket, threading
2022-06-16T11:21:42.7993362Z         t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))
2022-06-16T11:21:42.7993433Z             ^
2022-06-16T11:21:42.7993686Z ./portscanner.py:64:17: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7993806Z     if (tgtHost == None) | (tgtPorts[0] == None):
2022-06-16T11:21:42.7993881Z                 ^
2022-06-16T11:21:42.7994137Z ./portscanner.py:64:41: E711 comparison to None should be 'if cond is None:'
2022-06-16T11:21:42.7994257Z     if (tgtHost == None) | (tgtPorts[0] == None):
2022-06-16T11:21:42.7994334Z                                         ^
2022-06-16T11:21:42.7994471Z ./folder_size.py:9:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.7994674Z # Description   : This will scan the current directory and all subdirectories and display the size.
2022-06-16T11:21:42.7994795Z                                                                                         ^
2022-06-16T11:21:42.7995171Z ./folder_size.py:28:12: B007 Loop control variable 'dirs' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7995273Z for (path, dirs, files) in os.walk(
2022-06-16T11:21:42.7995338Z            ^
2022-06-16T11:21:42.7995477Z ./folder_size.py:30:89: E501 line too long (121 > 88 characters)
2022-06-16T11:21:42.7995685Z ):  # Walk through all the directories. For each iteration, os.walk returns the folders, subfolders and files in the dir.
2022-06-16T11:21:42.7995810Z                                                                                         ^
2022-06-16T11:21:42.7996183Z ./jee_result.py:40:9: B007 Loop control variable 'writ' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.7996295Z     for writ in soup.find_all("table"):
2022-06-16T11:21:42.7996367Z         ^
2022-06-16T11:21:42.7996501Z ./env_check.py:9:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.7996698Z # Description   : This script will check to see if all of the environment variables I require are set
2022-06-16T11:21:42.7996814Z                                                                                         ^
2022-06-16T11:21:42.7996947Z ./env_check.py:28:89: E501 line too long (122 > 88 characters)
2022-06-16T11:21:42.7997148Z     )  # Set the variable newenv to get the settings from the OS what is currently set for the settings out the configfile
2022-06-16T11:21:42.7997269Z                                                                                         ^
2022-06-16T11:21:42.7997443Z ./Classification_human_or_horse.py:21:1: E402 module level import not at top of file
2022-06-16T11:21:42.7997586Z from tensorflow.keras.optimizers import RMSprop
2022-06-16T11:21:42.7997655Z ^
2022-06-16T11:21:42.7997892Z ./Classification_human_or_horse.py:24:1: E402 module level import not at top of file
2022-06-16T11:21:42.7998092Z from tensorflow.keras.preprocessing.image import ImageDataGenerator
2022-06-16T11:21:42.7998160Z ^
2022-06-16T11:21:42.7998318Z ./Classification_human_or_horse.py:37:1: E402 module level import not at top of file
2022-06-16T11:21:42.7998409Z from tkinter import Tk
2022-06-16T11:21:42.7998478Z ^
2022-06-16T11:21:42.7998648Z ./Classification_human_or_horse.py:38:1: E402 module level import not at top of file
2022-06-16T11:21:42.7998786Z from tkinter.filedialog import askopenfilename
2022-06-16T11:21:42.7998913Z ^
2022-06-16T11:21:42.7999084Z ./Classification_human_or_horse.py:39:1: E402 module level import not at top of file
2022-06-16T11:21:42.7999189Z from keras.preprocessing import image
2022-06-16T11:21:42.7999256Z ^
2022-06-16T11:21:42.7999426Z ./Classification_human_or_horse.py:40:1: E402 module level import not at top of file
2022-06-16T11:21:42.7999512Z import numpy as np
2022-06-16T11:21:42.7999575Z ^
2022-06-16T11:21:42.7999948Z ./rotatelist.py:3:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8000039Z for i in range(0, N):
2022-06-16T11:21:42.8000094Z     ^
2022-06-16T11:21:42.8000478Z ./soundex_algorithm.py:31:13: B007 Loop control variable 'x' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8000594Z         for x in range(len(return_val), 4):
2022-06-16T11:21:42.8000667Z             ^
2022-06-16T11:21:42.8000807Z ./days_from_date.py:20:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.8000986Z     ).weekday()  # this statement returns an integer corresponding to the day of the week
2022-06-16T11:21:42.8001106Z                                                                                         ^
2022-06-16T11:21:42.8001251Z ./days_from_date.py:23:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.8001447Z     ]  # this statement returns the corresponding day name to the integer generated in the previous statement
2022-06-16T11:21:42.8001565Z                                                                                         ^
2022-06-16T11:21:42.8001705Z ./days_from_date.py:28:89: E501 line too long (120 > 88 characters)
2022-06-16T11:21:42.8001927Z # To overcome those we have to process user input and make it standard to accept as defined by  calender and time module
2022-06-16T11:21:42.8002046Z                                                                                         ^
2022-06-16T11:21:42.8002317Z ./days_from_date.py:33:5: F841 local variable 'label2' is assigned to but never used
2022-06-16T11:21:42.8002478Z     label2 = tk.Label(root, text=c, font=("Times new roman", 20), fg="black").place(
2022-06-16T11:21:42.8002549Z     ^
2022-06-16T11:21:42.8002834Z ./Memory_game.py:42:21: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8002941Z     if exposed[ind] == False and state < 2:
2022-06-16T11:21:42.8003020Z                     ^
2022-06-16T11:21:42.8003302Z ./Memory_game.py:51:23: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8003398Z         if exposed[i] == False:
2022-06-16T11:21:42.8003476Z                       ^
2022-06-16T11:21:42.8003744Z ./Memory_game.py:58:25: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.8003840Z         elif exposed[i] == True:
2022-06-16T11:21:42.8003906Z                         ^
2022-06-16T11:21:42.8004056Z ./sierpinski_triangle.py:6:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.8004220Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8004230Z 
2022-06-16T11:21:42.8004382Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8004389Z 
2022-06-16T11:21:42.8004488Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8004809Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8005057Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8005408Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8005632Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8006068Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8006148Z 
2022-06-16T11:21:42.8006242Z Requirements(pip):
2022-06-16T11:21:42.8006344Z   - turtle
2022-06-16T11:21:42.8006350Z 
2022-06-16T11:21:42.8006432Z Python:
2022-06-16T11:21:42.8006539Z   - 2.6
2022-06-16T11:21:42.8006545Z 
2022-06-16T11:21:42.8006614Z Usage:
2022-06-16T11:21:42.8006842Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8006849Z 
2022-06-16T11:21:42.8007207Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8007214Z 
2022-06-16T11:21:42.8007280Z """
2022-06-16T11:21:42.8007392Z                                                                         
2022-06-16T11:21:42.8007399Z 
2022-06-16T11:21:42.8007458Z               ^
2022-06-16T11:21:42.8007596Z ./sierpinski_triangle.py:6:134: W291 trailing whitespace
2022-06-16T11:21:42.8007759Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8007770Z 
2022-06-16T11:21:42.8007922Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8007928Z 
2022-06-16T11:21:42.8008026Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8008270Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8008502Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8008845Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8009077Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8009451Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8009463Z 
2022-06-16T11:21:42.8009538Z Requirements(pip):
2022-06-16T11:21:42.8009646Z   - turtle
2022-06-16T11:21:42.8009653Z 
2022-06-16T11:21:42.8009723Z Python:
2022-06-16T11:21:42.8009823Z   - 2.6
2022-06-16T11:21:42.8009829Z 
2022-06-16T11:21:42.8009895Z Usage:
2022-06-16T11:21:42.8010114Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8010125Z 
2022-06-16T11:21:42.8010471Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8010478Z 
2022-06-16T11:21:42.8010545Z """
2022-06-16T11:21:42.8010644Z                                                                         
2022-06-16T11:21:42.8010662Z 
2022-06-16T11:21:42.8010755Z                                                            ^
2022-06-16T11:21:42.8010907Z ./sierpinski_triangle.py:7:89: E501 line too long (124 > 88 characters)
2022-06-16T11:21:42.8011066Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8011076Z 
2022-06-16T11:21:42.8011227Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8011233Z 
2022-06-16T11:21:42.8011333Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8011656Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8011907Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8012261Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8012491Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8012853Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8012944Z 
2022-06-16T11:21:42.8013027Z Requirements(pip):
2022-06-16T11:21:42.8013141Z   - turtle
2022-06-16T11:21:42.8013148Z 
2022-06-16T11:21:42.8013219Z Python:
2022-06-16T11:21:42.8013314Z   - 2.6
2022-06-16T11:21:42.8013320Z 
2022-06-16T11:21:42.8013383Z Usage:
2022-06-16T11:21:42.8013594Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8013602Z 
2022-06-16T11:21:42.8013951Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8013959Z 
2022-06-16T11:21:42.8014026Z """
2022-06-16T11:21:42.8014126Z                                                                         
2022-06-16T11:21:42.8014145Z 
2022-06-16T11:21:42.8014204Z               ^
2022-06-16T11:21:42.8014341Z ./sierpinski_triangle.py:7:125: W291 trailing whitespace
2022-06-16T11:21:42.8014503Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8014509Z 
2022-06-16T11:21:42.8014664Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8014670Z 
2022-06-16T11:21:42.8014768Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8015012Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8015244Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8015591Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8015822Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8016182Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8016189Z 
2022-06-16T11:21:42.8016277Z Requirements(pip):
2022-06-16T11:21:42.8016387Z   - turtle
2022-06-16T11:21:42.8016394Z 
2022-06-16T11:21:42.8016465Z Python:
2022-06-16T11:21:42.8016565Z   - 2.6
2022-06-16T11:21:42.8016572Z 
2022-06-16T11:21:42.8016638Z Usage:
2022-06-16T11:21:42.8016853Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8016860Z 
2022-06-16T11:21:42.8017207Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8017215Z 
2022-06-16T11:21:42.8017282Z """
2022-06-16T11:21:42.8017384Z                                                                         
2022-06-16T11:21:42.8017390Z 
2022-06-16T11:21:42.8017487Z                                                   ^
2022-06-16T11:21:42.8017638Z ./sierpinski_triangle.py:8:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.8017798Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8017804Z 
2022-06-16T11:21:42.8017955Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8017963Z 
2022-06-16T11:21:42.8018062Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8018304Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8018621Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8018992Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8019346Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8019741Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8019749Z 
2022-06-16T11:21:42.8019836Z Requirements(pip):
2022-06-16T11:21:42.8019941Z   - turtle
2022-06-16T11:21:42.8020052Z 
2022-06-16T11:21:42.8020128Z Python:
2022-06-16T11:21:42.8020236Z   - 2.6
2022-06-16T11:21:42.8020242Z 
2022-06-16T11:21:42.8020308Z Usage:
2022-06-16T11:21:42.8020524Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8020530Z 
2022-06-16T11:21:42.8020880Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8020888Z 
2022-06-16T11:21:42.8020941Z """
2022-06-16T11:21:42.8021054Z                                                                         
2022-06-16T11:21:42.8021061Z 
2022-06-16T11:21:42.8021131Z               ^
2022-06-16T11:21:42.8021267Z ./sierpinski_triangle.py:8:120: W291 trailing whitespace
2022-06-16T11:21:42.8021426Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8021432Z 
2022-06-16T11:21:42.8021584Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8021590Z 
2022-06-16T11:21:42.8021690Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8021933Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8022166Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8022505Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8022734Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8023106Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8023114Z 
2022-06-16T11:21:42.8023201Z Requirements(pip):
2022-06-16T11:21:42.8023302Z   - turtle
2022-06-16T11:21:42.8023309Z 
2022-06-16T11:21:42.8023378Z Python:
2022-06-16T11:21:42.8023478Z   - 2.6
2022-06-16T11:21:42.8023489Z 
2022-06-16T11:21:42.8023625Z Usage:
2022-06-16T11:21:42.8023892Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8023899Z 
2022-06-16T11:21:42.8024235Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8024310Z 
2022-06-16T11:21:42.8024366Z """
2022-06-16T11:21:42.8024522Z                                                                         
2022-06-16T11:21:42.8024530Z 
2022-06-16T11:21:42.8024660Z                                              ^
2022-06-16T11:21:42.8024827Z ./sierpinski_triangle.py:9:89: E501 line too long (118 > 88 characters)
2022-06-16T11:21:42.8025176Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8025184Z 
2022-06-16T11:21:42.8025372Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8025379Z 
2022-06-16T11:21:42.8025513Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8025843Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8026112Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8026604Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8026941Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8027380Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8027389Z 
2022-06-16T11:21:42.8027513Z Requirements(pip):
2022-06-16T11:21:42.8027612Z   - turtle
2022-06-16T11:21:42.8027619Z 
2022-06-16T11:21:42.8027728Z Python:
2022-06-16T11:21:42.8027887Z   - 2.6
2022-06-16T11:21:42.8027895Z 
2022-06-16T11:21:42.8028088Z Usage:
2022-06-16T11:21:42.8028353Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8028361Z 
2022-06-16T11:21:42.8028749Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8028757Z 
2022-06-16T11:21:42.8028904Z """
2022-06-16T11:21:42.8029061Z                                                                         
2022-06-16T11:21:42.8029069Z 
2022-06-16T11:21:42.8029219Z               ^
2022-06-16T11:21:42.8029354Z ./sierpinski_triangle.py:9:119: W291 trailing whitespace
2022-06-16T11:21:42.8029565Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8029573Z 
2022-06-16T11:21:42.8029764Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8029771Z 
2022-06-16T11:21:42.8029905Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8030185Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8031172Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8032150Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8032506Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8033026Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8033038Z 
2022-06-16T11:21:42.8033126Z Requirements(pip):
2022-06-16T11:21:42.8033351Z   - turtle
2022-06-16T11:21:42.8033357Z 
2022-06-16T11:21:42.8033479Z Python:
2022-06-16T11:21:42.8033636Z   - 2.6
2022-06-16T11:21:42.8033644Z 
2022-06-16T11:21:42.8033803Z Usage:
2022-06-16T11:21:42.8034107Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8034124Z 
2022-06-16T11:21:42.8034696Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8034705Z 
2022-06-16T11:21:42.8034813Z """
2022-06-16T11:21:42.8034989Z                                                                         
2022-06-16T11:21:42.8034997Z 
2022-06-16T11:21:42.8035094Z                                             ^
2022-06-16T11:21:42.8035298Z ./sierpinski_triangle.py:10:89: E501 line too long (128 > 88 characters)
2022-06-16T11:21:42.8035515Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8035523Z 
2022-06-16T11:21:42.8035728Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8035736Z 
2022-06-16T11:21:42.8035926Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8036457Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8036729Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8037137Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8037528Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8037980Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8037990Z 
2022-06-16T11:21:42.8038066Z Requirements(pip):
2022-06-16T11:21:42.8038209Z   - turtle
2022-06-16T11:21:42.8038216Z 
2022-06-16T11:21:42.8038322Z Python:
2022-06-16T11:21:42.8038512Z   - 2.6
2022-06-16T11:21:42.8038520Z 
2022-06-16T11:21:42.8038623Z Usage:
2022-06-16T11:21:42.8038903Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8038993Z 
2022-06-16T11:21:42.8039407Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8039415Z 
2022-06-16T11:21:42.8039515Z """
2022-06-16T11:21:42.8039617Z                                                                         
2022-06-16T11:21:42.8039674Z 
2022-06-16T11:21:42.8039734Z               ^
2022-06-16T11:21:42.8039928Z ./sierpinski_triangle.py:21:89: E501 line too long (110 > 88 characters)
2022-06-16T11:21:42.8057543Z """Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95
2022-06-16T11:21:42.8057575Z 
2022-06-16T11:21:42.8057780Z Simple example of Fractal generation using recursive function.
2022-06-16T11:21:42.8057788Z 
2022-06-16T11:21:42.8057896Z What is Sierpinski Triangle?
2022-06-16T11:21:42.8058162Z >>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, 
2022-06-16T11:21:42.8058409Z is a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller 
2022-06-16T11:21:42.8060172Z equilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., 
2022-06-16T11:21:42.8060398Z it is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after 
2022-06-16T11:21:42.8060799Z the Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.
2022-06-16T11:21:42.8060808Z 
2022-06-16T11:21:42.8060897Z Requirements(pip):
2022-06-16T11:21:42.8061003Z   - turtle
2022-06-16T11:21:42.8061010Z 
2022-06-16T11:21:42.8061081Z Python:
2022-06-16T11:21:42.8061178Z   - 2.6
2022-06-16T11:21:42.8061184Z 
2022-06-16T11:21:42.8061249Z Usage:
2022-06-16T11:21:42.8061466Z   - $python sierpinski_triangle.py <int:depth_for_fractal>
2022-06-16T11:21:42.8061473Z 
2022-06-16T11:21:42.8061831Z Credits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/
2022-06-16T11:21:42.8061845Z 
2022-06-16T11:21:42.8061900Z """
2022-06-16T11:21:42.8062011Z                                                                         
2022-06-16T11:21:42.8062017Z 
2022-06-16T11:21:42.8062081Z               ^
2022-06-16T11:21:42.8062229Z ./sierpinski_triangle.py:30:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.8062406Z         "right format for using this script: $python fractals.py <int:depth_for_fractal>"
2022-06-16T11:21:42.8062522Z                                                                                         ^
2022-06-16T11:21:42.8062727Z ./Organise.py:72:15: W605 invalid escape sequence '\{'
2022-06-16T11:21:42.8062844Z     dest = "{}\{}".format(destLocation, name)
2022-06-16T11:21:42.8062904Z               ^
2022-06-16T11:21:42.8063041Z ./scrap_file.py:36:89: E501 line too long (105 > 88 characters)
2022-06-16T11:21:42.8063265Z url = "https://avatars0.githubusercontent.com/u/29729380?s=400&v=4"  # URL from which we want to download
2022-06-16T11:21:42.8064170Z                                                                                         ^
2022-06-16T11:21:42.8064333Z ./powerdown_startup.py:9:89: E501 line too long (147 > 88 characters)
2022-06-16T11:21:42.8064906Z # Description		: This goes through the server list and pings the machine, if it's up it will load the putty session, if its not it will notify you.
2022-06-16T11:21:42.8065042Z              		                                                                         ^
2022-06-16T11:21:42.8065415Z ./gambler.py:11:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8065499Z for i in range(trials):
2022-06-16T11:21:42.8065555Z     ^
2022-06-16T11:21:42.8065686Z ./helloworld.py:21:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8065894Z     "make sure to use the same type of quotes(quotation marks or apostrophes)at the end that you used at the start"
2022-06-16T11:21:42.8066096Z                                                                                         ^
2022-06-16T11:21:42.8066228Z ./tf_idf_generator.py:1:59: W291 trailing whitespace
2022-06-16T11:21:42.8066373Z """@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.8066683Z This module is used for generating a TF-IDF file or values from a list of files that contains docs.
2022-06-16T11:21:42.8066693Z 
2022-06-16T11:21:42.8066930Z What is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf
2022-06-16T11:21:42.8066937Z 
2022-06-16T11:21:42.8067006Z python:
2022-06-16T11:21:42.8067097Z   - 3.5
2022-06-16T11:21:42.8067104Z 
2022-06-16T11:21:42.8067227Z pre-requisites: 
2022-06-16T11:21:42.8067349Z   - colorama==0.3.9 
2022-06-16T11:21:42.8067356Z 
2022-06-16T11:21:42.8067450Z sample file format of input:
2022-06-16T11:21:42.8067457Z 
2022-06-16T11:21:42.8067542Z     ##START(NOT INCLUDED)
2022-06-16T11:21:42.8068548Z     sport smile today because signs Gemini
2022-06-16T11:21:42.8068682Z     little sister dealt severe allergy figure
2022-06-16T11:21:42.8068820Z     about looks gender color attitude nationality respect
2022-06-16T11:21:42.8068939Z     added video playlist Sonic Fightstick Edition
2022-06-16T11:21:42.8069057Z     weeks birthday scott wants camping keeper
2022-06-16T11:21:42.8069185Z     photo taking photo trying auction scale photo
2022-06-16T11:21:42.8069308Z     happy creatively capture story stage magical
2022-06-16T11:21:42.8069440Z     yoongi looks seokjin looking yoongi looking seokjin
2022-06-16T11:21:42.8069567Z     taking glasses because buffering cannot handle
2022-06-16T11:21:42.8069703Z     tried Michelle Obama proceeded defend whole pointless
2022-06-16T11:21:42.8069826Z     robbed shades backstage reading guess karma stealing
2022-06-16T11:21:42.8069953Z     remains sailors destroyer McCain collision found
2022-06-16T11:21:42.8070092Z     timeline beginnings infographics Catch upcoming debut
2022-06-16T11:21:42.8070182Z     ##END(NOT INCLUDED)
2022-06-16T11:21:42.8070190Z 
2022-06-16T11:21:42.8070299Z here, every line represents a document.
2022-06-16T11:21:42.8070305Z 
2022-06-16T11:21:42.8070382Z have fun, cheers.
2022-06-16T11:21:42.8070446Z """
2022-06-16T11:21:42.8070549Z                                                           ^
2022-06-16T11:21:42.8070682Z ./tf_idf_generator.py:2:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.8070821Z """@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.8071140Z This module is used for generating a TF-IDF file or values from a list of files that contains docs.
2022-06-16T11:21:42.8071146Z 
2022-06-16T11:21:42.8071379Z What is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf
2022-06-16T11:21:42.8071385Z 
2022-06-16T11:21:42.8071452Z python:
2022-06-16T11:21:42.8071550Z   - 3.5
2022-06-16T11:21:42.8071556Z 
2022-06-16T11:21:42.8071676Z pre-requisites: 
2022-06-16T11:21:42.8071796Z   - colorama==0.3.9 
2022-06-16T11:21:42.8071805Z 
2022-06-16T11:21:42.8071891Z sample file format of input:
2022-06-16T11:21:42.8071906Z 
2022-06-16T11:21:42.8071982Z     ##START(NOT INCLUDED)
2022-06-16T11:21:42.8072097Z     sport smile today because signs Gemini
2022-06-16T11:21:42.8073126Z     little sister dealt severe allergy figure
2022-06-16T11:21:42.8073278Z     about looks gender color attitude nationality respect
2022-06-16T11:21:42.8073520Z     added video playlist Sonic Fightstick Edition
2022-06-16T11:21:42.8073655Z     weeks birthday scott wants camping keeper
2022-06-16T11:21:42.8073781Z     photo taking photo trying auction scale photo
2022-06-16T11:21:42.8073895Z     happy creatively capture story stage magical
2022-06-16T11:21:42.8074027Z     yoongi looks seokjin looking yoongi looking seokjin
2022-06-16T11:21:42.8074154Z     taking glasses because buffering cannot handle
2022-06-16T11:21:42.8074294Z     tried Michelle Obama proceeded defend whole pointless
2022-06-16T11:21:42.8074427Z     robbed shades backstage reading guess karma stealing
2022-06-16T11:21:42.8074683Z     remains sailors destroyer McCain collision found
2022-06-16T11:21:42.8074824Z     timeline beginnings infographics Catch upcoming debut
2022-06-16T11:21:42.8074909Z     ##END(NOT INCLUDED)
2022-06-16T11:21:42.8074918Z 
2022-06-16T11:21:42.8075017Z here, every line represents a document.
2022-06-16T11:21:42.8075023Z 
2022-06-16T11:21:42.8075103Z have fun, cheers.
2022-06-16T11:21:42.8075166Z """
2022-06-16T11:21:42.8075270Z                                                            
2022-06-16T11:21:42.8075347Z                             ^
2022-06-16T11:21:42.8075474Z ./tf_idf_generator.py:9:16: W291 trailing whitespace
2022-06-16T11:21:42.8075615Z """@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.8075943Z This module is used for generating a TF-IDF file or values from a list of files that contains docs.
2022-06-16T11:21:42.8075950Z 
2022-06-16T11:21:42.8076174Z What is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf
2022-06-16T11:21:42.8076198Z 
2022-06-16T11:21:42.8076257Z python:
2022-06-16T11:21:42.8076359Z   - 3.5
2022-06-16T11:21:42.8076365Z 
2022-06-16T11:21:42.8076486Z pre-requisites: 
2022-06-16T11:21:42.8077519Z   - colorama==0.3.9 
2022-06-16T11:21:42.8077531Z 
2022-06-16T11:21:42.8077643Z sample file format of input:
2022-06-16T11:21:42.8077649Z 
2022-06-16T11:21:42.8077738Z     ##START(NOT INCLUDED)
2022-06-16T11:21:42.8077853Z     sport smile today because signs Gemini
2022-06-16T11:21:42.8077960Z     little sister dealt severe allergy figure
2022-06-16T11:21:42.8078094Z     about looks gender color attitude nationality respect
2022-06-16T11:21:42.8078222Z     added video playlist Sonic Fightstick Edition
2022-06-16T11:21:42.8078341Z     weeks birthday scott wants camping keeper
2022-06-16T11:21:42.8078468Z     photo taking photo trying auction scale photo
2022-06-16T11:21:42.8078591Z     happy creatively capture story stage magical
2022-06-16T11:21:42.8078765Z     yoongi looks seokjin looking yoongi looking seokjin
2022-06-16T11:21:42.8078900Z     taking glasses because buffering cannot handle
2022-06-16T11:21:42.8079152Z     tried Michelle Obama proceeded defend whole pointless
2022-06-16T11:21:42.8079292Z     robbed shades backstage reading guess karma stealing
2022-06-16T11:21:42.8079427Z     remains sailors destroyer McCain collision found
2022-06-16T11:21:42.8079581Z     timeline beginnings infographics Catch upcoming debut
2022-06-16T11:21:42.8079672Z     ##END(NOT INCLUDED)
2022-06-16T11:21:42.8079680Z 
2022-06-16T11:21:42.8079794Z here, every line represents a document.
2022-06-16T11:21:42.8079801Z 
2022-06-16T11:21:42.8079883Z have fun, cheers.
2022-06-16T11:21:42.8079954Z """
2022-06-16T11:21:42.8080016Z                ^
2022-06-16T11:21:42.8080155Z ./tf_idf_generator.py:10:20: W291 trailing whitespace
2022-06-16T11:21:42.8080307Z """@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.8080649Z This module is used for generating a TF-IDF file or values from a list of files that contains docs.
2022-06-16T11:21:42.8080660Z 
2022-06-16T11:21:42.8082837Z What is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf
2022-06-16T11:21:42.8082857Z 
2022-06-16T11:21:42.8082944Z python:
2022-06-16T11:21:42.8083105Z   - 3.5
2022-06-16T11:21:42.8083112Z 
2022-06-16T11:21:42.8083250Z pre-requisites: 
2022-06-16T11:21:42.8083381Z   - colorama==0.3.9 
2022-06-16T11:21:42.8083389Z 
2022-06-16T11:21:42.8083668Z sample file format of input:
2022-06-16T11:21:42.8083682Z 
2022-06-16T11:21:42.8083793Z     ##START(NOT INCLUDED)
2022-06-16T11:21:42.8083926Z     sport smile today because signs Gemini
2022-06-16T11:21:42.8084064Z     little sister dealt severe allergy figure
2022-06-16T11:21:42.8084216Z     about looks gender color attitude nationality respect
2022-06-16T11:21:42.8084357Z     added video playlist Sonic Fightstick Edition
2022-06-16T11:21:42.8084619Z     weeks birthday scott wants camping keeper
2022-06-16T11:21:42.8084870Z     photo taking photo trying auction scale photo
2022-06-16T11:21:42.8085082Z     happy creatively capture story stage magical
2022-06-16T11:21:42.8085222Z     yoongi looks seokjin looking yoongi looking seokjin
2022-06-16T11:21:42.8085354Z     taking glasses because buffering cannot handle
2022-06-16T11:21:42.8085500Z     tried Michelle Obama proceeded defend whole pointless
2022-06-16T11:21:42.8085641Z     robbed shades backstage reading guess karma stealing
2022-06-16T11:21:42.8085786Z     remains sailors destroyer McCain collision found
2022-06-16T11:21:42.8085924Z     timeline beginnings infographics Catch upcoming debut
2022-06-16T11:21:42.8086014Z     ##END(NOT INCLUDED)
2022-06-16T11:21:42.8086021Z 
2022-06-16T11:21:42.8086139Z here, every line represents a document.
2022-06-16T11:21:42.8086146Z 
2022-06-16T11:21:42.8086225Z have fun, cheers.
2022-06-16T11:21:42.8086290Z """
2022-06-16T11:21:42.8086368Z                    ^
2022-06-16T11:21:42.8086631Z ./tf_idf_generator.py:72:1: C901 'find_tf_idf' is too complex (13)
2022-06-16T11:21:42.8086795Z def find_tf_idf(file_names=None, prev_file_path=None, dump_path=None):
2022-06-16T11:21:42.8086962Z ^
2022-06-16T11:21:42.8087104Z ./tf_idf_generator.py:74:89: E501 line too long (129 > 88 characters)
2022-06-16T11:21:42.8087352Z     """Function to create a TF-IDF list of dictionaries for a corpus of docs.
2022-06-16T11:21:42.8087588Z     If you opt for dumping the data, you can provide a file_path with .tfidfpkl extension(standard made for better understanding)
2022-06-16T11:21:42.8087885Z     and also re-generate a new tfidf list which overrides over an old one by mentioning its path.
2022-06-16T11:21:42.8087893Z 
2022-06-16T11:21:42.8087963Z     @Args:
2022-06-16T11:21:42.8088049Z     --
2022-06-16T11:21:42.8089191Z     file_names : paths of files to be processed on, you can give many small sized file, rather than one large file.
2022-06-16T11:21:42.8089359Z     prev_file_path : path of old .tfidfpkl file, if available. (default=None)
2022-06-16T11:21:42.8089633Z     dump_path : directory-path where to dump generated lists.(default=None)
2022-06-16T11:21:42.8089646Z 
2022-06-16T11:21:42.8089718Z     @returns:
2022-06-16T11:21:42.8089800Z     --
2022-06-16T11:21:42.8089972Z     idf : a dict of unique words in corpus,with their document frequency as values.
2022-06-16T11:21:42.8090213Z     tf_idf : the generated tf-idf list of dictionaries for mentioned docs.
2022-06-16T11:21:42.8090274Z     """
2022-06-16T11:21:42.8090384Z                                                                              
2022-06-16T11:21:42.8090442Z           ^
2022-06-16T11:21:42.8090585Z ./tf_idf_generator.py:75:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.8090830Z     """Function to create a TF-IDF list of dictionaries for a corpus of docs.
2022-06-16T11:21:42.8091059Z     If you opt for dumping the data, you can provide a file_path with .tfidfpkl extension(standard made for better understanding)
2022-06-16T11:21:42.8091345Z     and also re-generate a new tfidf list which overrides over an old one by mentioning its path.
2022-06-16T11:21:42.8091355Z 
2022-06-16T11:21:42.8091426Z     @Args:
2022-06-16T11:21:42.8091509Z     --
2022-06-16T11:21:42.8091717Z     file_names : paths of files to be processed on, you can give many small sized file, rather than one large file.
2022-06-16T11:21:42.8091881Z     prev_file_path : path of old .tfidfpkl file, if available. (default=None)
2022-06-16T11:21:42.8092231Z     dump_path : directory-path where to dump generated lists.(default=None)
2022-06-16T11:21:42.8092244Z 
2022-06-16T11:21:42.8092324Z     @returns:
2022-06-16T11:21:42.8092416Z     --
2022-06-16T11:21:42.8092586Z     idf : a dict of unique words in corpus,with their document frequency as values.
2022-06-16T11:21:42.8092824Z     tf_idf : the generated tf-idf list of dictionaries for mentioned docs.
2022-06-16T11:21:42.8092891Z     """
2022-06-16T11:21:42.8093003Z                                                                              
2022-06-16T11:21:42.8093060Z           ^
2022-06-16T11:21:42.8093204Z ./tf_idf_generator.py:79:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8093539Z     """Function to create a TF-IDF list of dictionaries for a corpus of docs.
2022-06-16T11:21:42.8093770Z     If you opt for dumping the data, you can provide a file_path with .tfidfpkl extension(standard made for better understanding)
2022-06-16T11:21:42.8094059Z     and also re-generate a new tfidf list which overrides over an old one by mentioning its path.
2022-06-16T11:21:42.8094067Z 
2022-06-16T11:21:42.8094133Z     @Args:
2022-06-16T11:21:42.8094213Z     --
2022-06-16T11:21:42.8094417Z     file_names : paths of files to be processed on, you can give many small sized file, rather than one large file.
2022-06-16T11:21:42.8095552Z     prev_file_path : path of old .tfidfpkl file, if available. (default=None)
2022-06-16T11:21:42.8095822Z     dump_path : directory-path where to dump generated lists.(default=None)
2022-06-16T11:21:42.8095830Z 
2022-06-16T11:21:42.8095898Z     @returns:
2022-06-16T11:21:42.8095979Z     --
2022-06-16T11:21:42.8096155Z     idf : a dict of unique words in corpus,with their document frequency as values.
2022-06-16T11:21:42.8096392Z     tf_idf : the generated tf-idf list of dictionaries for mentioned docs.
2022-06-16T11:21:42.8096459Z     """
2022-06-16T11:21:42.8096569Z                                                                              
2022-06-16T11:21:42.8096625Z           ^
2022-06-16T11:21:42.8096772Z ./tf_idf_generator.py:95:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.8097127Z     # this statement is useful for altering existant tf-idf file and adding new docs in itself.(## memory is now the biggest issue)
2022-06-16T11:21:42.8097247Z                                                                                         ^
2022-06-16T11:21:42.8097388Z ./tf_idf_generator.py:106:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8097680Z         )  # never use 'rb' for textual data, it creates something like,  {b'line-inside-the-doc'}
2022-06-16T11:21:42.8097799Z                                                                                         ^
2022-06-16T11:21:42.8097943Z ./tf_idf_generator.py:126:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8098216Z     # calculating final TF-IDF values  for all words in all docs(line in a doc in this case)
2022-06-16T11:21:42.8098324Z                                                                                         ^
2022-06-16T11:21:42.8098464Z ./tf_idf_generator.py:133:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8098645Z     # do not get overwhelmed, just for logging the quantity of words that have been processed.
2022-06-16T11:21:42.8098753Z                                                                                         ^
2022-06-16T11:21:42.8099954Z ./tf_idf_generator.py:156:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.8100159Z                 + "Please provide a .tfidfpkl file_path, it is the standard format of this module."
2022-06-16T11:21:42.8100278Z                                                                                         ^
2022-06-16T11:21:42.8100520Z ./Web_Scraper.py:7:1: F401 'requests' imported but unused
2022-06-16T11:21:42.8100590Z import requests
2022-06-16T11:21:42.8100654Z ^
2022-06-16T11:21:42.8101071Z ./Web_Scraper.py:10:1: F401 'selenium.webdriver.common.keys.Keys' imported but unused
2022-06-16T11:21:42.8101363Z from selenium.webdriver.common.keys import Keys
2022-06-16T11:21:42.8101443Z ^
2022-06-16T11:21:42.8101599Z ./script_count.py:10:89: E501 line too long (151 > 88 characters)
2022-06-16T11:21:42.8102048Z # Modifications		: 1.1 - 28-02-2012 - CR - Changed inside github and development functions, so instead of if os.name = "posix" do this else do this etc
2022-06-16T11:21:42.8102177Z                		                                                                       ^
2022-06-16T11:21:42.8102313Z ./script_count.py:14:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.8102526Z # Description			: This scans my scripts directory and gives a count of the different types of scripts
2022-06-16T11:21:42.8103769Z              			                                                                        ^
2022-06-16T11:21:42.8104040Z ./script_count.py:21:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.8104229Z )  # Set the variable dropbox by getting the value from the OS environment variable dropbox
2022-06-16T11:21:42.8104345Z                                                                                         ^
2022-06-16T11:21:42.8104478Z ./script_count.py:33:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.8104686Z ):  # Start of the function to count the files in the scripts directory, it counts the extension when passed below
2022-06-16T11:21:42.8104800Z                                                                                         ^
2022-06-16T11:21:42.8105194Z ./script_count.py:35:9: B007 Loop control variable 'root' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8105304Z     for root, dirs, files in os.walk(
2022-06-16T11:21:42.8105370Z         ^
2022-06-16T11:21:42.8105743Z ./script_count.py:35:15: B007 Loop control variable 'dirs' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8105844Z     for root, dirs, files in os.walk(
2022-06-16T11:21:42.8105917Z               ^
2022-06-16T11:21:42.8106051Z ./script_count.py:58:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.8107182Z     else:  # If it is any other number then print the following message, showing the number outstanding.
2022-06-16T11:21:42.8107301Z                                                                                         ^
2022-06-16T11:21:42.8107438Z ./script_count.py:64:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8107630Z def development():  # Start of the function just to count the files in the development directory
2022-06-16T11:21:42.8107746Z                                                                                         ^
2022-06-16T11:21:42.8107877Z ./script_count.py:82:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.8108066Z         )  # If it is any other number then print the following message, showing the number outstanding.
2022-06-16T11:21:42.8108185Z                                                                                         ^
2022-06-16T11:21:42.8108610Z ./To print series 1,12,123,1234......py:20:13: B007 Loop control variable 'k' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8108708Z         for k in range(0, i + 1):
2022-06-16T11:21:42.8108767Z             ^
2022-06-16T11:21:42.8109068Z ./CliYoutubeDownloader.py:1:1: F403 'from pytube import *' used; unable to detect undefined names
2022-06-16T11:21:42.8109157Z from pytube import *
2022-06-16T11:21:42.8109223Z ^
2022-06-16T11:21:42.8109536Z ./CliYoutubeDownloader.py:8:24: F405 'YouTube' may be undefined, or defined from star imports: pytube
2022-06-16T11:21:42.8109637Z         self.youtube = YouTube(
2022-06-16T11:21:42.8109713Z                        ^
2022-06-16T11:21:42.8109861Z ./CliYoutubeDownloader.py:50:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.8110140Z             "\n title : {0} \n author : {1} \n size : {2:.2f}MB \n resolution : {3} \n fps : {4} \n ".format(
2022-06-16T11:21:42.8110272Z                                                                                         ^
2022-06-16T11:21:42.8110423Z ./CliYoutubeDownloader.py:70:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8110611Z             f"downloading ... {file_downloaded/file_size*100:0.2f} % [{file_downloaded:.1f}MB of {file_size:.1f}MB]",
2022-06-16T11:21:42.8110721Z                                                                                         ^
2022-06-16T11:21:42.8110969Z ./Timetable_Operations.py:1:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8111122Z ##Clock in pt2thon##
2022-06-16T11:21:42.8111176Z ^
2022-06-16T11:21:42.8111317Z ./move_files_over_x_days.py:6:89: E501 line too long (107 > 88 characters)
2022-06-16T11:21:42.8112423Z # Modifications : Added possibility to use command line arguments to specify source, destination, and days.
2022-06-16T11:21:42.8112562Z                                                                                         ^
2022-06-16T11:21:42.8112701Z ./move_files_over_x_days.py:7:89: E501 line too long (126 > 88 characters)
2022-06-16T11:21:42.8112920Z # Description   : This will move all the files from the src directory that are over 240 days old to the destination directory.
2022-06-16T11:21:42.8113037Z                                                                                         ^
2022-06-16T11:21:42.8113182Z ./move_files_over_x_days.py:15:89: E501 line too long (112 > 88 characters)
2022-06-16T11:21:42.8113384Z description = "Move files from src to dst if they are older than a certain number of days.  Default is 240 days"
2022-06-16T11:21:42.8113492Z                                                                                         ^
2022-06-16T11:21:42.8113638Z ./move_files_over_x_days.py:24:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8113823Z     help="(OPTIONAL) Directory where files will be moved from. Defaults to current directory",
2022-06-16T11:21:42.8113941Z                                                                                         ^
2022-06-16T11:21:42.8114084Z ./move_files_over_x_days.py:40:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.8114272Z     help="(OPTIONAL) Days value specifies the minimum age of files to be moved. Default is 240.",
2022-06-16T11:21:42.8114387Z                                                                                         ^
2022-06-16T11:21:42.8114527Z ./russian_roulette.py:33:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8114833Z         "please press 'm' if you want to start first or 'p' if you want the pc to start first: "
2022-06-16T11:21:42.8114943Z                                                                                         ^
2022-06-16T11:21:42.8115238Z ./russian_roulette.py:47:36: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8115377Z     while numOfRounds != 0 and (pc == False and player == False):
2022-06-16T11:21:42.8115463Z                                    ^
2022-06-16T11:21:42.8115751Z ./russian_roulette.py:47:56: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8115891Z     while numOfRounds != 0 and (pc == False and player == False):
2022-06-16T11:21:42.8115991Z                                                        ^
2022-06-16T11:21:42.8116195Z ./encryptsys.py:15:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8116287Z     for l in range(0, len(abecedario)):
2022-06-16T11:21:42.8116357Z         ^
2022-06-16T11:21:42.8117585Z ./encryptsys.py:24:9: B007 Loop control variable 'move' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8117699Z     for move in range(nummoves, 0):
2022-06-16T11:21:42.8117766Z         ^
2022-06-16T11:21:42.8117983Z ./encryptsys.py:49:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8118082Z     for l in range(0, len(abecedario)):
2022-06-16T11:21:42.8118138Z         ^
2022-06-16T11:21:42.8118612Z ./encryptsys.py:58:9: B007 Loop control variable 'move' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8118725Z     for move in range(0, nummoves):
2022-06-16T11:21:42.8118790Z         ^
2022-06-16T11:21:42.8119005Z ./encryptsys.py:74:12: W605 invalid escape sequence '\E'
2022-06-16T11:21:42.8119116Z     print("\Encrypted text : " + fintext)
2022-06-16T11:21:42.8119185Z            ^
2022-06-16T11:21:42.8119307Z ./logs.py:7:89: E501 line too long (187 > 88 characters)
2022-06-16T11:21:42.8119755Z # Modifications	: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.
2022-06-16T11:21:42.8119969Z                	                                                                        ^
2022-06-16T11:21:42.8120091Z ./logs.py:10:89: E501 line too long (149 > 88 characters)
2022-06-16T11:21:42.8120342Z # Description   : This script will search for all *.log files in the given directory, zip them using the program you specify and then date stamp them
2022-06-16T11:21:42.8120458Z                                                                                         ^
2022-06-16T11:21:42.8120660Z ./logs.py:15:14: W605 invalid escape sequence '\p'
2022-06-16T11:21:42.8120791Z logsdir = "c:\puttylogs"  # Set the Variable logsdir
2022-06-16T11:21:42.8120859Z              ^
2022-06-16T11:21:42.8120971Z ./logs.py:22:89: E501 line too long (133 > 88 characters)
2022-06-16T11:21:42.8121191Z         )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension
2022-06-16T11:21:42.8121310Z                                                                                         ^
2022-06-16T11:21:42.8121556Z ./Snake-Water-Gun-Game.py:4:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.8121618Z """
2022-06-16T11:21:42.8121758Z This is a snake water gun game similar to rock paper scissor
2022-06-16T11:21:42.8121830Z In this game :
2022-06-16T11:21:42.8122017Z if computer chooses snake and user chooses water, the snake will drink water and computer wins.
2022-06-16T11:21:42.8123399Z If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
2022-06-16T11:21:42.8123500Z And so on for other cases
2022-06-16T11:21:42.8123563Z """
2022-06-16T11:21:42.8123628Z    
2022-06-16T11:21:42.8123731Z                                                             
2022-06-16T11:21:42.8123801Z               
2022-06-16T11:21:42.8123870Z         ^
2022-06-16T11:21:42.8124129Z ./Snake-Water-Gun-Game.py:5:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8124191Z """
2022-06-16T11:21:42.8124331Z This is a snake water gun game similar to rock paper scissor
2022-06-16T11:21:42.8124407Z In this game :
2022-06-16T11:21:42.8124596Z if computer chooses snake and user chooses water, the snake will drink water and computer wins.
2022-06-16T11:21:42.8124782Z If computer chooses gun and user chooses water, the gun gets drown into water and user wins.
2022-06-16T11:21:42.8124874Z And so on for other cases
2022-06-16T11:21:42.8124938Z """
2022-06-16T11:21:42.8124990Z    
2022-06-16T11:21:42.8125090Z                                                             
2022-06-16T11:21:42.8125158Z               
2022-06-16T11:21:42.8125221Z         ^
2022-06-16T11:21:42.8125469Z ./Snake-Water-Gun-Game.py:25:89: E501 line too long (137 > 88 characters)
2022-06-16T11:21:42.8125531Z """
2022-06-16T11:21:42.8125625Z # Snake || Water || Gun __ Game
2022-06-16T11:21:42.8125694Z import random
2022-06-16T11:21:42.8125785Z times = 10 # times to play game
2022-06-16T11:21:42.8125915Z comp_choice = ["s","w","g"] # output choice for computer
2022-06-16T11:21:42.8126035Z user_point = 0 # user point is initially marked 0
2022-06-16T11:21:42.8128339Z comp_point = 0 # computer point is initially marked 0
2022-06-16T11:21:42.8128431Z while times >= 1:
2022-06-16T11:21:42.8128697Z     comp_rand = random.choice(comp_choice) # output computer will give
2022-06-16T11:21:42.8128763Z     #
2022-06-16T11:21:42.8128908Z     # print(comp_rand) # checking if the code is working or not
2022-06-16T11:21:42.8129009Z     print(f"ROUND LEFT = {times}")
2022-06-16T11:21:42.8129134Z # checking if the input is entered correct or not
2022-06-16T11:21:42.8129201Z     try:
2022-06-16T11:21:42.8129593Z         user_choice = input("Enter the input in lowercase ex. \n (snake- s) (water- w) (gun- w)\n:- ") # user choice, the user will input
2022-06-16T11:21:42.8129686Z     except Exception as e:
2022-06-16T11:21:42.8129820Z         print(e)
2022-06-16T11:21:42.8129988Z # if input doen't match this will run
2022-06-16T11:21:42.8132183Z     if user_choice != 's' and user_choice != 'w' and user_choice != 'g':
2022-06-16T11:21:42.8132315Z             print("Invalid input, try again\n")
2022-06-16T11:21:42.8132392Z             continue
2022-06-16T11:21:42.8132508Z # checking the input and calculating score
2022-06-16T11:21:42.8132656Z     if comp_rand == 's':
2022-06-16T11:21:42.8132786Z         if user_choice == 'w':
2022-06-16T11:21:42.8132867Z             comp_point += 1
2022-06-16T11:21:42.8133009Z         elif user_choice == 'g':
2022-06-16T11:21:42.8133093Z             user_point += 1
2022-06-16T11:21:42.8133102Z 
2022-06-16T11:21:42.8133233Z     elif comp_rand == 'w':
2022-06-16T11:21:42.8133370Z         if user_choice == 'g':
2022-06-16T11:21:42.8133453Z             comp_point += 1
2022-06-16T11:21:42.8133590Z         elif user_choice == 's':
2022-06-16T11:21:42.8133662Z             user_point += 1
2022-06-16T11:21:42.8133673Z 
2022-06-16T11:21:42.8133802Z     elif comp_rand == 'g':
2022-06-16T11:21:42.8133934Z         if user_choice == 's':
2022-06-16T11:21:42.8134015Z             comp_point += 1
2022-06-16T11:21:42.8134156Z         elif user_choice == 'w':
2022-06-16T11:21:42.8136184Z             user_point += 1
2022-06-16T11:21:42.8136196Z 
2022-06-16T11:21:42.8136453Z     times -=1 # reducing the number of rounds after each match
2022-06-16T11:21:42.8136556Z if user_point>comp_point: # if user wins
2022-06-16T11:21:42.8136748Z     print(f"WOOUUH! You have win \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8136870Z elif comp_point>user_point: # if computer wins
2022-06-16T11:21:42.8137109Z     print(f"WE RESPECT YOUR HARD WORK, BUT YOU LOSE AND YOU ARE A LOSER NOW! \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8137225Z elif comp_point==user_point: # if match draw
2022-06-16T11:21:42.8137399Z     print(f"MATCH DRAW\nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8137483Z else: # just checked
2022-06-16T11:21:42.8137639Z     print("can't calculate score")
2022-06-16T11:21:42.8137734Z exit = input("PRESS ENTER TO EXIT")
2022-06-16T11:21:42.8137811Z """  # code ends here
2022-06-16T11:21:42.8137874Z    
2022-06-16T11:21:42.8137951Z                                
2022-06-16T11:21:42.8138016Z              
2022-06-16T11:21:42.8138097Z                                
2022-06-16T11:21:42.8138165Z       ^
2022-06-16T11:21:42.8138405Z ./Snake-Water-Gun-Game.py:53:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.8138469Z """
2022-06-16T11:21:42.8138563Z # Snake || Water || Gun __ Game
2022-06-16T11:21:42.8138641Z import random
2022-06-16T11:21:42.8138732Z times = 10 # times to play game
2022-06-16T11:21:42.8138861Z comp_choice = ["s","w","g"] # output choice for computer
2022-06-16T11:21:42.8138984Z user_point = 0 # user point is initially marked 0
2022-06-16T11:21:42.8139275Z comp_point = 0 # computer point is initially marked 0
2022-06-16T11:21:42.8139370Z while times >= 1:
2022-06-16T11:21:42.8139528Z     comp_rand = random.choice(comp_choice) # output computer will give
2022-06-16T11:21:42.8139595Z     #
2022-06-16T11:21:42.8141860Z     # print(comp_rand) # checking if the code is working or not
2022-06-16T11:21:42.8141968Z     print(f"ROUND LEFT = {times}")
2022-06-16T11:21:42.8142228Z # checking if the input is entered correct or not
2022-06-16T11:21:42.8142299Z     try:
2022-06-16T11:21:42.8142709Z         user_choice = input("Enter the input in lowercase ex. \n (snake- s) (water- w) (gun- w)\n:- ") # user choice, the user will input
2022-06-16T11:21:42.8142807Z     except Exception as e:
2022-06-16T11:21:42.8142884Z         print(e)
2022-06-16T11:21:42.8143045Z # if input doen't match this will run
2022-06-16T11:21:42.8143271Z     if user_choice != 's' and user_choice != 'w' and user_choice != 'g':
2022-06-16T11:21:42.8143389Z             print("Invalid input, try again\n")
2022-06-16T11:21:42.8143461Z             continue
2022-06-16T11:21:42.8143659Z # checking the input and calculating score
2022-06-16T11:21:42.8143798Z     if comp_rand == 's':
2022-06-16T11:21:42.8143935Z         if user_choice == 'w':
2022-06-16T11:21:42.8144020Z             comp_point += 1
2022-06-16T11:21:42.8144163Z         elif user_choice == 'g':
2022-06-16T11:21:42.8144248Z             user_point += 1
2022-06-16T11:21:42.8144257Z 
2022-06-16T11:21:42.8144395Z     elif comp_rand == 'w':
2022-06-16T11:21:42.8144520Z         if user_choice == 'g':
2022-06-16T11:21:42.8146683Z             comp_point += 1
2022-06-16T11:21:42.8146859Z         elif user_choice == 's':
2022-06-16T11:21:42.8146941Z             user_point += 1
2022-06-16T11:21:42.8146949Z 
2022-06-16T11:21:42.8147081Z     elif comp_rand == 'g':
2022-06-16T11:21:42.8147214Z         if user_choice == 's':
2022-06-16T11:21:42.8147298Z             comp_point += 1
2022-06-16T11:21:42.8147428Z         elif user_choice == 'w':
2022-06-16T11:21:42.8147506Z             user_point += 1
2022-06-16T11:21:42.8147517Z 
2022-06-16T11:21:42.8147734Z     times -=1 # reducing the number of rounds after each match
2022-06-16T11:21:42.8147840Z if user_point>comp_point: # if user wins
2022-06-16T11:21:42.8148025Z     print(f"WOOUUH! You have win \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8148145Z elif comp_point>user_point: # if computer wins
2022-06-16T11:21:42.8148389Z     print(f"WE RESPECT YOUR HARD WORK, BUT YOU LOSE AND YOU ARE A LOSER NOW! \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8148506Z elif comp_point==user_point: # if match draw
2022-06-16T11:21:42.8150694Z     print(f"MATCH DRAW\nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8150780Z else: # just checked
2022-06-16T11:21:42.8150953Z     print("can't calculate score")
2022-06-16T11:21:42.8151057Z exit = input("PRESS ENTER TO EXIT")
2022-06-16T11:21:42.8151135Z """  # code ends here
2022-06-16T11:21:42.8151200Z    
2022-06-16T11:21:42.8151282Z                                
2022-06-16T11:21:42.8151349Z              
2022-06-16T11:21:42.8151416Z                                
2022-06-16T11:21:42.8151481Z       ^
2022-06-16T11:21:42.8151735Z ./Snake-Water-Gun-Game.py:55:89: E501 line too long (137 > 88 characters)
2022-06-16T11:21:42.8151799Z """
2022-06-16T11:21:42.8151893Z # Snake || Water || Gun __ Game
2022-06-16T11:21:42.8151974Z import random
2022-06-16T11:21:42.8152067Z times = 10 # times to play game
2022-06-16T11:21:42.8152186Z comp_choice = ["s","w","g"] # output choice for computer
2022-06-16T11:21:42.8152308Z user_point = 0 # user point is initially marked 0
2022-06-16T11:21:42.8152441Z comp_point = 0 # computer point is initially marked 0
2022-06-16T11:21:42.8152519Z while times >= 1:
2022-06-16T11:21:42.8152675Z     comp_rand = random.choice(comp_choice) # output computer will give
2022-06-16T11:21:42.8152739Z     #
2022-06-16T11:21:42.8152877Z     # print(comp_rand) # checking if the code is working or not
2022-06-16T11:21:42.8152968Z     print(f"ROUND LEFT = {times}")
2022-06-16T11:21:42.8153090Z # checking if the input is entered correct or not
2022-06-16T11:21:42.8153156Z     try:
2022-06-16T11:21:42.8153518Z         user_choice = input("Enter the input in lowercase ex. \n (snake- s) (water- w) (gun- w)\n:- ") # user choice, the user will input
2022-06-16T11:21:42.8153609Z     except Exception as e:
2022-06-16T11:21:42.8153793Z         print(e)
2022-06-16T11:21:42.8153977Z # if input doen't match this will run
2022-06-16T11:21:42.8154193Z     if user_choice != 's' and user_choice != 'w' and user_choice != 'g':
2022-06-16T11:21:42.8154309Z             print("Invalid input, try again\n")
2022-06-16T11:21:42.8154383Z             continue
2022-06-16T11:21:42.8154501Z # checking the input and calculating score
2022-06-16T11:21:42.8154631Z     if comp_rand == 's':
2022-06-16T11:21:42.8154769Z         if user_choice == 'w':
2022-06-16T11:21:42.8154852Z             comp_point += 1
2022-06-16T11:21:42.8154984Z         elif user_choice == 'g':
2022-06-16T11:21:42.8155143Z             user_point += 1
2022-06-16T11:21:42.8155151Z 
2022-06-16T11:21:42.8155288Z     elif comp_rand == 'w':
2022-06-16T11:21:42.8155424Z         if user_choice == 'g':
2022-06-16T11:21:42.8155506Z             comp_point += 1
2022-06-16T11:21:42.8155644Z         elif user_choice == 's':
2022-06-16T11:21:42.8155722Z             user_point += 1
2022-06-16T11:21:42.8155733Z 
2022-06-16T11:21:42.8155858Z     elif comp_rand == 'g':
2022-06-16T11:21:42.8155984Z         if user_choice == 's':
2022-06-16T11:21:42.8156062Z             comp_point += 1
2022-06-16T11:21:42.8156196Z         elif user_choice == 'w':
2022-06-16T11:21:42.8156273Z             user_point += 1
2022-06-16T11:21:42.8156278Z 
2022-06-16T11:21:42.8156489Z     times -=1 # reducing the number of rounds after each match
2022-06-16T11:21:42.8156601Z if user_point>comp_point: # if user wins
2022-06-16T11:21:42.8156792Z     print(f"WOOUUH! You have win \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8156923Z elif comp_point>user_point: # if computer wins
2022-06-16T11:21:42.8157154Z     print(f"WE RESPECT YOUR HARD WORK, BUT YOU LOSE AND YOU ARE A LOSER NOW! \nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8157273Z elif comp_point==user_point: # if match draw
2022-06-16T11:21:42.8157453Z     print(f"MATCH DRAW\nYour_point = {user_point}\nComputer_point = {comp_point}")
2022-06-16T11:21:42.8157536Z else: # just checked
2022-06-16T11:21:42.8157689Z     print("can't calculate score")
2022-06-16T11:21:42.8157796Z exit = input("PRESS ENTER TO EXIT")
2022-06-16T11:21:42.8157873Z """  # code ends here
2022-06-16T11:21:42.8157927Z    
2022-06-16T11:21:42.8158004Z                                
2022-06-16T11:21:42.8158071Z              
2022-06-16T11:21:42.8158147Z                                
2022-06-16T11:21:42.8158211Z       ^
2022-06-16T11:21:42.8158468Z ./Snake-Water-Gun-Game.py:62:1: E402 module level import not at top of file
2022-06-16T11:21:42.8158551Z import random
2022-06-16T11:21:42.8158604Z ^
2022-06-16T11:21:42.8158842Z ./Snake-Water-Gun-Game.py:77:1: C901 'Loop 77' is too complex (12)
2022-06-16T11:21:42.8158916Z while x < 10:
2022-06-16T11:21:42.8158976Z ^
2022-06-16T11:21:42.8159287Z ./currency converter/main.py:2:1: F403 'from PyQt5.QtGui import *' used; unable to detect undefined names
2022-06-16T11:21:42.8159381Z from PyQt5.QtGui import *
2022-06-16T11:21:42.8159447Z ^
2022-06-16T11:21:42.8159743Z ./currency converter/main.py:3:1: F403 'from PyQt5.QtCore import *' used; unable to detect undefined names
2022-06-16T11:21:42.8159839Z from PyQt5.QtCore import *
2022-06-16T11:21:42.8159902Z ^
2022-06-16T11:21:42.8160220Z ./currency converter/main.py:4:1: F403 'from PyQt5.QtWidgets import *' used; unable to detect undefined names
2022-06-16T11:21:42.8160321Z from PyQt5.QtWidgets import *
2022-06-16T11:21:42.8160385Z ^
2022-06-16T11:21:42.8160691Z ./currency converter/main.py:6:1: F403 'from PyQt5.QtCore import *' used; unable to detect undefined names
2022-06-16T11:21:42.8160785Z from PyQt5.QtCore import *
2022-06-16T11:21:42.8160838Z ^
2022-06-16T11:21:42.8161113Z ./currency converter/main.py:6:1: F811 redefinition of unused 'PyQt5.QtCore.*' from line 3
2022-06-16T11:21:42.8161205Z from PyQt5.QtCore import *
2022-06-16T11:21:42.8161266Z ^
2022-06-16T11:21:42.8161657Z ./currency converter/main.py:9:1: F401 'requests.models.ContentDecodingError' imported but unused
2022-06-16T11:21:42.8161809Z from requests.models import ContentDecodingError
2022-06-16T11:21:42.8161871Z ^
2022-06-16T11:21:42.8162013Z ./currency converter/main.py:15:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.8162241Z     url = f"https://free.currconv.com/api/v7/convert?q={cont1val}_{cont2val}&compact=ultra&apiKey=b43a653672c4a94c4c26"
2022-06-16T11:21:42.8162360Z                                                                                         ^
2022-06-16T11:21:42.8162770Z ./currency converter/main.py:40:11: F405 'QDoubleValidator' may be undefined, or defined from star imports: PyQt5.QtCore, PyQt5.QtGui, PyQt5.QtWidgets
2022-06-16T11:21:42.8162943Z intOnly = QDoubleValidator()
2022-06-16T11:21:42.8163015Z           ^
2022-06-16T11:21:42.8163264Z ./Password Generator/pass_gen.py:3:1: F401 'random' imported but unused
2022-06-16T11:21:42.8163441Z import random  # this is the module used to generate random numbers on your given range
2022-06-16T11:21:42.8163499Z ^
2022-06-16T11:21:42.8163656Z ./Password Generator/pass_gen.py:10:89: E501 line too long (99 > 88 characters)
2022-06-16T11:21:42.8163836Z     ):  # must have  conditions (in a list format), for each member of the list possible_characters
2022-06-16T11:21:42.8163949Z                                                                                         ^
2022-06-16T11:21:42.8164567Z ./Password Generator/pass_gen.py:74:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8164646Z         except:
2022-06-16T11:21:42.8164710Z         ^
2022-06-16T11:21:42.8164946Z ./Password Generator/pass_gen.py:74:9: E722 do not use bare 'except'
2022-06-16T11:21:42.8165008Z         except:
2022-06-16T11:21:42.8165074Z         ^
2022-06-16T11:21:42.8165376Z ./notepad/notepad_support.py:11:5: F403 'from Tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8165466Z     from Tkinter import *
2022-06-16T11:21:42.8165529Z     ^
2022-06-16T11:21:42.8165825Z ./notepad/notepad_support.py:13:5: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8165917Z     from tkinter import *
2022-06-16T11:21:42.8165983Z     ^
2022-06-16T11:21:42.8166215Z ./notepad/notepad_support.py:20:5: F401 'tkinter.ttk' imported but unused
2022-06-16T11:21:42.8166314Z     import tkinter.ttk as ttk
2022-06-16T11:21:42.8166378Z     ^
2022-06-16T11:21:42.8166518Z ./notepad/notepad_support.py:60:25: W291 trailing whitespace
2022-06-16T11:21:42.8166605Z     sql_command = """
2022-06-16T11:21:42.8166691Z     CREATE TABLE notes ( 
2022-06-16T11:21:42.8166782Z     id INTEGER PRIMARY KEY, 
2022-06-16T11:21:42.8166848Z     title TEXT, 
2022-06-16T11:21:42.8166924Z     note TEXT);"""
2022-06-16T11:21:42.8166995Z                      
2022-06-16T11:21:42.8167056Z   ^
2022-06-16T11:21:42.8167195Z ./notepad/notepad_support.py:61:28: W291 trailing whitespace
2022-06-16T11:21:42.8167278Z     sql_command = """
2022-06-16T11:21:42.8167362Z     CREATE TABLE notes ( 
2022-06-16T11:21:42.8167445Z     id INTEGER PRIMARY KEY, 
2022-06-16T11:21:42.8167517Z     title TEXT, 
2022-06-16T11:21:42.8167589Z     note TEXT);"""
2022-06-16T11:21:42.8167660Z                      
2022-06-16T11:21:42.8167722Z      ^
2022-06-16T11:21:42.8167857Z ./notepad/notepad_support.py:62:16: W291 trailing whitespace
2022-06-16T11:21:42.8167928Z     sql_command = """
2022-06-16T11:21:42.8168012Z     CREATE TABLE notes ( 
2022-06-16T11:21:42.8168104Z     id INTEGER PRIMARY KEY, 
2022-06-16T11:21:42.8168177Z     title TEXT, 
2022-06-16T11:21:42.8168246Z     note TEXT);"""
2022-06-16T11:21:42.8168310Z                ^
2022-06-16T11:21:42.8168627Z ./notepad/notepad_support.py:67:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8168735Z         w.errorOutput.configure(text="")
2022-06-16T11:21:42.8168872Z         ^
2022-06-16T11:21:42.8169508Z ./notepad/notepad_support.py:68:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8169580Z     except:
2022-06-16T11:21:42.8169644Z     ^
2022-06-16T11:21:42.8169868Z ./notepad/notepad_support.py:68:5: E722 do not use bare 'except'
2022-06-16T11:21:42.8169933Z     except:
2022-06-16T11:21:42.8169994Z     ^
2022-06-16T11:21:42.8170289Z ./notepad/notepad_support.py:69:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8170516Z         w.errorOutput.configure(text="The database already exists")
2022-06-16T11:21:42.8170581Z         ^
2022-06-16T11:21:42.8170895Z ./notepad/notepad_support.py:76:12: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8171058Z     if len(w.inputTitle.get()) > 0 and len(w.inputNotice.get(1.0, END)) > 0:
2022-06-16T11:21:42.8171124Z            ^
2022-06-16T11:21:42.8171433Z ./notepad/notepad_support.py:76:44: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8171588Z     if len(w.inputTitle.get()) > 0 and len(w.inputNotice.get(1.0, END)) > 0:
2022-06-16T11:21:42.8171670Z                                            ^
2022-06-16T11:21:42.8171984Z ./notepad/notepad_support.py:76:67: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8172139Z     if len(w.inputTitle.get()) > 0 and len(w.inputNotice.get(1.0, END)) > 0:
2022-06-16T11:21:42.8172247Z                                                                   ^
2022-06-16T11:21:42.8172552Z ./notepad/notepad_support.py:77:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8172669Z         w.errorOutput.configure(text="")
2022-06-16T11:21:42.8172736Z         ^
2022-06-16T11:21:42.8173044Z ./notepad/notepad_support.py:78:17: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8173138Z         title = w.inputTitle.get()
2022-06-16T11:21:42.8173205Z                 ^
2022-06-16T11:21:42.8173512Z ./notepad/notepad_support.py:79:16: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8173624Z         note = w.inputNotice.get(1.0, END)
2022-06-16T11:21:42.8173690Z                ^
2022-06-16T11:21:42.8174004Z ./notepad/notepad_support.py:79:39: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8174116Z         note = w.inputNotice.get(1.0, END)
2022-06-16T11:21:42.8174198Z                                       ^
2022-06-16T11:21:42.8174498Z ./notepad/notepad_support.py:85:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8174649Z         w.errorOutput.configure(text="Please fill the fields. ")
2022-06-16T11:21:42.8174717Z         ^
2022-06-16T11:21:42.8175023Z ./notepad/notepad_support.py:93:5: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8175134Z     w.errorOutput.configure(text="")
2022-06-16T11:21:42.8175197Z     ^
2022-06-16T11:21:42.8175498Z ./notepad/notepad_support.py:96:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8175597Z         w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8175659Z         ^
2022-06-16T11:21:42.8175971Z ./notepad/notepad_support.py:96:36: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8176078Z         w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8176155Z                                    ^
2022-06-16T11:21:42.8176458Z ./notepad/notepad_support.py:97:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8176588Z         w.outputNotice.insert(1.0, results[index][2])
2022-06-16T11:21:42.8176722Z         ^
2022-06-16T11:21:42.8177040Z ./notepad/notepad_support.py:105:5: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8177145Z     w.inputNotice.delete(1.0, END)
2022-06-16T11:21:42.8177212Z     ^
2022-06-16T11:21:42.8177532Z ./notepad/notepad_support.py:105:31: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8177638Z     w.inputNotice.delete(1.0, END)
2022-06-16T11:21:42.8177717Z                               ^
2022-06-16T11:21:42.8178028Z ./notepad/notepad_support.py:113:5: F405 'sys' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8178169Z     sys.exit(0)
2022-06-16T11:21:42.8178223Z     ^
2022-06-16T11:21:42.8178536Z ./notepad/notepad_support.py:120:5: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8178642Z     w.errorOutput.configure(text="")
2022-06-16T11:21:42.8178703Z     ^
2022-06-16T11:21:42.8179010Z ./notepad/notepad_support.py:122:38: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8179318Z     sql_command = sql_command.format(w.inputSearchTitle.get())
2022-06-16T11:21:42.8179406Z                                      ^
2022-06-16T11:21:42.8179717Z ./notepad/notepad_support.py:126:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8179871Z         w.errorOutput.configure(text=str(len(results)) + " results")
2022-06-16T11:21:42.8179936Z         ^
2022-06-16T11:21:42.8180246Z ./notepad/notepad_support.py:129:13: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8180369Z             w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8180438Z             ^
2022-06-16T11:21:42.8180752Z ./notepad/notepad_support.py:129:40: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8180866Z             w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8180945Z                                        ^
2022-06-16T11:21:42.8181252Z ./notepad/notepad_support.py:130:13: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8181504Z             w.outputNotice.insert(1.0, results[index][2])
2022-06-16T11:21:42.8181577Z             ^
2022-06-16T11:21:42.8183093Z ./notepad/notepad_support.py:131:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8183189Z     except:
2022-06-16T11:21:42.8183258Z     ^
2022-06-16T11:21:42.8183548Z ./notepad/notepad_support.py:131:5: E722 do not use bare 'except'
2022-06-16T11:21:42.8183617Z     except:
2022-06-16T11:21:42.8183686Z     ^
2022-06-16T11:21:42.8184034Z ./notepad/notepad_support.py:132:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8184229Z         w.errorOutput.configure(text="Please create at first a database.")
2022-06-16T11:21:42.8184305Z         ^
2022-06-16T11:21:42.8184657Z ./notepad/notepad_support.py:139:12: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8184791Z     if len(w.inputSearchTitle.get()) > 0:
2022-06-16T11:21:42.8184863Z            ^
2022-06-16T11:21:42.8185205Z ./notepad/notepad_support.py:141:13: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8185334Z             w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8185410Z             ^
2022-06-16T11:21:42.8186008Z ./notepad/notepad_support.py:141:40: F405 'END' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8186232Z             w.outputNotice.delete(1.0, END)
2022-06-16T11:21:42.8186316Z                                        ^
2022-06-16T11:21:42.8186780Z ./notepad/notepad_support.py:142:13: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8186933Z             w.outputNotice.insert(1.0, results[index][2])
2022-06-16T11:21:42.8186991Z             ^
2022-06-16T11:21:42.8187308Z ./notepad/notepad_support.py:145:9: F405 'w' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.8187465Z         w.errorOutput.configure(text="Please fill the search field. ")
2022-06-16T11:21:42.8187530Z         ^
2022-06-16T11:21:42.8187797Z ./Sorting Algorithims/Iterative Merge Sort.py:43:14: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8187881Z def merge(a, l, m, r):
2022-06-16T11:21:42.8188028Z              ^
2022-06-16T11:21:42.8188270Z ./Sorting Algorithims/Heap sort.py:7:5: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8188357Z     l = 2 * i + 1  # left = 2*i + 1
2022-06-16T11:21:42.8188420Z     ^
2022-06-16T11:21:42.8188577Z ./Sorting Algorithims/Tim_sort.py:2:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8188665Z """   Author : Mohit Kumar
2022-06-16T11:21:42.8188734Z       
2022-06-16T11:21:42.8188838Z         Tim Sort implemented in python
2022-06-16T11:21:42.8188928Z         Time Complexity : O(n log(n))
2022-06-16T11:21:42.8189019Z         Space Complexity :O(n)
2022-06-16T11:21:42.8189029Z 
2022-06-16T11:21:42.8189090Z """
2022-06-16T11:21:42.8189151Z ^
2022-06-16T11:21:42.8189310Z ./Sorting Algorithims/Tim_sort.py:14:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8189413Z def insertionSort(arr, left, right):
2022-06-16T11:21:42.8189476Z ^
2022-06-16T11:21:42.8189708Z ./Sorting Algorithims/Tim_sort.py:29:16: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8189800Z def merge(arr, l, m, r):
2022-06-16T11:21:42.8189865Z                ^
2022-06-16T11:21:42.8190005Z ./Sorting Algorithims/Tim_sort.py:122:4: W291 trailing whitespace
2022-06-16T11:21:42.8190065Z """ 
2022-06-16T11:21:42.8190137Z     OUTPUT : 
2022-06-16T11:21:42.8190200Z     
2022-06-16T11:21:42.8190278Z     Enter size of array : 5
2022-06-16T11:21:42.8190357Z     Given Array is
2022-06-16T11:21:42.8190430Z     5 3 4 2 1 
2022-06-16T11:21:42.8190520Z     After Sorting Array is
2022-06-16T11:21:42.8190585Z     1 2 3 4 5
2022-06-16T11:21:42.8190649Z       
2022-06-16T11:21:42.8190709Z """
2022-06-16T11:21:42.8190762Z    ^
2022-06-16T11:21:42.8190909Z ./Sorting Algorithims/Tim_sort.py:123:13: W291 trailing whitespace
2022-06-16T11:21:42.8190969Z """ 
2022-06-16T11:21:42.8191041Z     OUTPUT : 
2022-06-16T11:21:42.8191102Z     
2022-06-16T11:21:42.8191187Z     Enter size of array : 5
2022-06-16T11:21:42.8191260Z     Given Array is
2022-06-16T11:21:42.8191317Z     5 3 4 2 1 
2022-06-16T11:21:42.8191408Z     After Sorting Array is
2022-06-16T11:21:42.8191472Z     1 2 3 4 5
2022-06-16T11:21:42.8191534Z       
2022-06-16T11:21:42.8191595Z """
2022-06-16T11:21:42.8191656Z     
2022-06-16T11:21:42.8191713Z        ^
2022-06-16T11:21:42.8191870Z ./Sorting Algorithims/Tim_sort.py:124:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8191930Z """ 
2022-06-16T11:21:42.8191995Z     OUTPUT : 
2022-06-16T11:21:42.8192058Z     
2022-06-16T11:21:42.8192143Z     Enter size of array : 5
2022-06-16T11:21:42.8192216Z     Given Array is
2022-06-16T11:21:42.8192273Z     5 3 4 2 1 
2022-06-16T11:21:42.8192358Z     After Sorting Array is
2022-06-16T11:21:42.8192422Z     1 2 3 4 5
2022-06-16T11:21:42.8192484Z       
2022-06-16T11:21:42.8192545Z """
2022-06-16T11:21:42.8192606Z ^
2022-06-16T11:21:42.8192748Z ./Sorting Algorithims/Tim_sort.py:127:14: W291 trailing whitespace
2022-06-16T11:21:42.8192802Z """ 
2022-06-16T11:21:42.8192872Z     OUTPUT : 
2022-06-16T11:21:42.8192933Z     
2022-06-16T11:21:42.8193018Z     Enter size of array : 5
2022-06-16T11:21:42.8193091Z     Given Array is
2022-06-16T11:21:42.8193156Z     5 3 4 2 1 
2022-06-16T11:21:42.8193233Z     After Sorting Array is
2022-06-16T11:21:42.8193295Z     1 2 3 4 5
2022-06-16T11:21:42.8193355Z       
2022-06-16T11:21:42.8193418Z """
2022-06-16T11:21:42.8193479Z     
2022-06-16T11:21:42.8193544Z         ^
2022-06-16T11:21:42.8193790Z ./Sorting Algorithims/Tim_sort.py:130:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8193853Z """ 
2022-06-16T11:21:42.8193927Z     OUTPUT : 
2022-06-16T11:21:42.8193987Z     
2022-06-16T11:21:42.8194071Z     Enter size of array : 5
2022-06-16T11:21:42.8194143Z     Given Array is
2022-06-16T11:21:42.8194207Z     5 3 4 2 1 
2022-06-16T11:21:42.8194291Z     After Sorting Array is
2022-06-16T11:21:42.8194348Z     1 2 3 4 5
2022-06-16T11:21:42.8194409Z       
2022-06-16T11:21:42.8194468Z """
2022-06-16T11:21:42.8194528Z ^
2022-06-16T11:21:42.8194695Z ./Sorting Algorithims/bubblesortpgm.py:2:89: E501 line too long (129 > 88 characters)
2022-06-16T11:21:42.8194833Z """Bubble Sort
2022-06-16T11:21:42.8195072Z Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
2022-06-16T11:21:42.8195132Z Example:
2022-06-16T11:21:42.8195204Z First Pass:
2022-06-16T11:21:42.8195522Z ( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
2022-06-16T11:21:42.8195696Z ( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
2022-06-16T11:21:42.8195863Z ( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
2022-06-16T11:21:42.8196158Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
2022-06-16T11:21:42.8196167Z 
2022-06-16T11:21:42.8196245Z Second Pass:
2022-06-16T11:21:42.8196378Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
2022-06-16T11:21:42.8196537Z ( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
2022-06-16T11:21:42.8196662Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8196797Z ( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
2022-06-16T11:21:42.8197055Z Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
2022-06-16T11:21:42.8197063Z 
2022-06-16T11:21:42.8197133Z Third Pass:
2022-06-16T11:21:42.8197261Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8197393Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8197510Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8197641Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )"""
2022-06-16T11:21:42.8197708Z               
2022-06-16T11:21:42.8197813Z                                                                          ^
2022-06-16T11:21:42.8197982Z ./Sorting Algorithims/bubblesortpgm.py:5:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.8198055Z """Bubble Sort
2022-06-16T11:21:42.8198287Z Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
2022-06-16T11:21:42.8198363Z Example:
2022-06-16T11:21:42.8198426Z First Pass:
2022-06-16T11:21:42.8198710Z ( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
2022-06-16T11:21:42.8198877Z ( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
2022-06-16T11:21:42.8199041Z ( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
2022-06-16T11:21:42.8199343Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
2022-06-16T11:21:42.8199351Z 
2022-06-16T11:21:42.8199426Z Second Pass:
2022-06-16T11:21:42.8199555Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
2022-06-16T11:21:42.8199717Z ( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
2022-06-16T11:21:42.8199833Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8199959Z ( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
2022-06-16T11:21:42.8200216Z Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
2022-06-16T11:21:42.8200230Z 
2022-06-16T11:21:42.8200299Z Third Pass:
2022-06-16T11:21:42.8200426Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8200551Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8200674Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8200802Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )"""
2022-06-16T11:21:42.8200861Z               
2022-06-16T11:21:42.8201045Z                                                                          ^
2022-06-16T11:21:42.8201226Z ./Sorting Algorithims/bubblesortpgm.py:8:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8201301Z """Bubble Sort
2022-06-16T11:21:42.8201534Z Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
2022-06-16T11:21:42.8201602Z Example:
2022-06-16T11:21:42.8201671Z First Pass:
2022-06-16T11:21:42.8201955Z ( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
2022-06-16T11:21:42.8202122Z ( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
2022-06-16T11:21:42.8202372Z ( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
2022-06-16T11:21:42.8202670Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
2022-06-16T11:21:42.8202678Z 
2022-06-16T11:21:42.8202749Z Second Pass:
2022-06-16T11:21:42.8202874Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
2022-06-16T11:21:42.8203044Z ( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
2022-06-16T11:21:42.8203172Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8203291Z ( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
2022-06-16T11:21:42.8203549Z Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
2022-06-16T11:21:42.8203556Z 
2022-06-16T11:21:42.8203625Z Third Pass:
2022-06-16T11:21:42.8203750Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8203872Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8203993Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8204129Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )"""
2022-06-16T11:21:42.8204194Z               
2022-06-16T11:21:42.8204295Z                                                                          ^
2022-06-16T11:21:42.8204461Z ./Sorting Algorithims/bubblesortpgm.py:15:89: E501 line too long (159 > 88 characters)
2022-06-16T11:21:42.8204531Z """Bubble Sort
2022-06-16T11:21:42.8204765Z Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
2022-06-16T11:21:42.8204832Z Example:
2022-06-16T11:21:42.8204902Z First Pass:
2022-06-16T11:21:42.8205185Z ( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
2022-06-16T11:21:42.8205344Z ( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
2022-06-16T11:21:42.8205506Z ( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
2022-06-16T11:21:42.8205801Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
2022-06-16T11:21:42.8205814Z 
2022-06-16T11:21:42.8205886Z Second Pass:
2022-06-16T11:21:42.8206011Z ( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
2022-06-16T11:21:42.8206178Z ( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
2022-06-16T11:21:42.8206302Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8206428Z ( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
2022-06-16T11:21:42.8206681Z Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
2022-06-16T11:21:42.8206696Z 
2022-06-16T11:21:42.8206758Z Third Pass:
2022-06-16T11:21:42.8206882Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8207008Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8207129Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
2022-06-16T11:21:42.8207259Z ( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )"""
2022-06-16T11:21:42.8207325Z               
2022-06-16T11:21:42.8207432Z                                                                          ^
2022-06-16T11:21:42.8207831Z ./Sorting Algorithims/Bubble_sort.py:2:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8207921Z     for i in range(len(Lists)):
2022-06-16T11:21:42.8207983Z         ^
2022-06-16T11:21:42.8208452Z ./Sorting Algorithims/Bubble_sort.py:14:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8208554Z for i in range(array_length):
2022-06-16T11:21:42.8208617Z     ^
2022-06-16T11:21:42.8208868Z ./Sorting Algorithims/Merge Sort.py:8:16: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8208951Z def merge(arr, l, m, r):
2022-06-16T11:21:42.8209009Z                ^
2022-06-16T11:21:42.8209252Z ./Sorting Algorithims/Merge Sort.py:56:20: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8209341Z def mergeSort(arr, l, r):
2022-06-16T11:21:42.8209412Z                    ^
2022-06-16T11:21:42.8209815Z ./Sorting Algorithims/selectionSort.py:5:5: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8209969Z for i in range(0, N):
2022-06-16T11:21:42.8210031Z     ^
2022-06-16T11:21:42.8210191Z ./Sorting Algorithims/selectionSort.py:11:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8210399Z # Every time The Element Of List is fetched and the smallest element in remaining list is found and if it comes out
2022-06-16T11:21:42.8210511Z                                                                                         ^
2022-06-16T11:21:42.8210803Z ./Sorting Algorithims/brickSort.py:10:9: F841 local variable 'temp' is assigned to but never used
2022-06-16T11:21:42.8210873Z         temp = 0
2022-06-16T11:21:42.8210934Z         ^
2022-06-16T11:21:42.8211330Z ./Sorting Algorithims/Count sort.py:10:13: B007 Loop control variable 'c' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8211424Z         for c in range(count[a]):
2022-06-16T11:21:42.8211483Z             ^
2022-06-16T11:21:42.8211758Z ./Sorting Algorithims/recursive-quick-sort.py:1:16: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8211832Z def quick_sort(l):
2022-06-16T11:21:42.8211896Z                ^
2022-06-16T11:21:42.8212140Z ./Sorting Algorithims/stooge_sort.py:5:23: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8212229Z def stooge_sort_(arr, l, h):
2022-06-16T11:21:42.8212301Z                       ^
2022-06-16T11:21:42.8212545Z ./Sorting Algorithims/stooge_sort.py:6:8: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.8212606Z     if l >= h:
2022-06-16T11:21:42.8212670Z        ^
2022-06-16T11:21:42.8212830Z ./Sorting Algorithims/merge_sort.py:58:89: E501 line too long (141 > 88 characters)
2022-06-16T11:21:42.8212890Z """
2022-06-16T11:21:42.8213132Z Here merge_sort() function, unlike the previous sorting algorithms, returns a new list that is sorted, rather than sorting the existing list.
2022-06-16T11:21:42.8213318Z Therefore, Merge Sort requires space to create a new list of the same size as the input list
2022-06-16T11:21:42.8215443Z """
2022-06-16T11:21:42.8215505Z    
2022-06-16T11:21:42.8215622Z                                                                                     ^
2022-06-16T11:21:42.8215784Z ./Sorting Algorithims/merge_sort.py:59:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8215843Z """
2022-06-16T11:21:42.8216083Z Here merge_sort() function, unlike the previous sorting algorithms, returns a new list that is sorted, rather than sorting the existing list.
2022-06-16T11:21:42.8216259Z Therefore, Merge Sort requires space to create a new list of the same size as the input list
2022-06-16T11:21:42.8216320Z """
2022-06-16T11:21:42.8216380Z    
2022-06-16T11:21:42.8216484Z                                                                                     ^
2022-06-16T11:21:42.8216772Z ./Sorting Algorithims/Counting-sort.py:18:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8216890Z     """Counting sort algo with sort in place.
2022-06-16T11:21:42.8216954Z     Args:
2022-06-16T11:21:42.8217048Z         tlist: target list to sort
2022-06-16T11:21:42.8217157Z         k: max value assume known before hand
2022-06-16T11:21:42.8217252Z         n: the length of the given list
2022-06-16T11:21:42.8217461Z         map info to index of the count list.
2022-06-16T11:21:42.8217541Z     Adv:
2022-06-16T11:21:42.8217717Z         The count (after cum sum) will hold the actual position of the element in sorted order
2022-06-16T11:21:42.8217798Z         Using the above,
2022-06-16T11:21:42.8217807Z 
2022-06-16T11:21:42.8217872Z     """
2022-06-16T11:21:42.8217960Z                                              
2022-06-16T11:21:42.8218022Z          
2022-06-16T11:21:42.8218092Z                                 ^
2022-06-16T11:21:42.8218366Z ./Sorting Algorithims/Counting-sort.py:30:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.8218551Z     # Modify count list such that each index of count list is the combined sum of the previous counts
2022-06-16T11:21:42.8218738Z                                                                                         ^
2022-06-16T11:21:42.8218929Z ./CliYoutubeDownloader/CliYoutubeDownloader.py:52:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.8219235Z             "\n title : {0} \n author : {1} \n size : {2:.2f}MB \n resolution : {3} \n fps : {4} \n ".format(
2022-06-16T11:21:42.8219356Z                                                                                         ^
2022-06-16T11:21:42.8219546Z ./CliYoutubeDownloader/CliYoutubeDownloader.py:72:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8219736Z             f"downloading ... {file_downloaded/file_size*100:0.2f} % [{file_downloaded:.1f}MB of {file_size:.1f}MB]",
2022-06-16T11:21:42.8219843Z                                                                                         ^
2022-06-16T11:21:42.8220106Z ./Emoji Dictionary/emoji_dictionary.py:4:1: F401 'io' imported but unused
2022-06-16T11:21:42.8220236Z import io  # used for dealing with input and output
2022-06-16T11:21:42.8220296Z ^
2022-06-16T11:21:42.8220608Z ./Emoji Dictionary/emoji_dictionary.py:5:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8220748Z from tkinter import *  # importing the necessary libraries
2022-06-16T11:21:42.8220809Z ^
2022-06-16T11:21:42.8221127Z ./Emoji Dictionary/emoji_dictionary.py:178:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8221221Z             self.target.delete(0, END)
2022-06-16T11:21:42.8221300Z                                   ^
2022-06-16T11:21:42.8221464Z ./Emoji Dictionary/emoji_dictionary.py:224:89: E501 line too long (116 > 88 characters)
2022-06-16T11:21:42.8221787Z # function defined th=o clear both the input text and output text --------------------------------------------------
2022-06-16T11:21:42.8221899Z                                                                                         ^
2022-06-16T11:21:42.8222214Z ./Emoji Dictionary/emoji_dictionary.py:226:26: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8222314Z     inputentry.delete(0, END)
2022-06-16T11:21:42.8222388Z                          ^
2022-06-16T11:21:42.8222696Z ./Emoji Dictionary/emoji_dictionary.py:234:26: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8222835Z         outputtxt.insert(END, "You have entered no emoji.")
2022-06-16T11:21:42.8222907Z                          ^
2022-06-16T11:21:42.8223219Z ./Emoji Dictionary/emoji_dictionary.py:237:26: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8223375Z         outputtxt.insert(END, "Meaning of Emoji  :  " + str(word) + "\n\n" + means)
2022-06-16T11:21:42.8223447Z                          ^
2022-06-16T11:21:42.8223774Z ./Emoji Dictionary/emoji_dictionary.py:256:10: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8223865Z myname = StringVar(window)
2022-06-16T11:21:42.8223924Z          ^
2022-06-16T11:21:42.8224242Z ./Emoji Dictionary/emoji_dictionary.py:271:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8224321Z inputentry = Entry(
2022-06-16T11:21:42.8224386Z              ^
2022-06-16T11:21:42.8224800Z ./Emoji Dictionary/emoji_dictionary.py:277:1: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8224877Z Button(
2022-06-16T11:21:42.8224936Z ^
2022-06-16T11:21:42.8225257Z ./Emoji Dictionary/emoji_dictionary.py:289:1: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8225314Z Button(
2022-06-16T11:21:42.8225373Z ^
2022-06-16T11:21:42.8225535Z ./Emoji Dictionary/emoji_dictionary.py:318:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8225609Z def exit_win():
2022-06-16T11:21:42.8225668Z ^
2022-06-16T11:21:42.8226066Z ./Emoji Dictionary/emoji_dictionary.py:324:1: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8226130Z Button(
2022-06-16T11:21:42.8226183Z ^
2022-06-16T11:21:42.8226499Z ./Emoji Dictionary/emoji_dictionary.py:338:13: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8226575Z v_keypadb = Button(
2022-06-16T11:21:42.8226641Z             ^
2022-06-16T11:21:42.8227022Z ./floodfill/floodfill.py:32:13: B007 Loop control variable 'n' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8227124Z         for n in range(0, randint(0, 5)):
2022-06-16T11:21:42.8227190Z             ^
2022-06-16T11:21:42.8227568Z ./floodfill/floodfill.py:40:17: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8227666Z             for i in range(0, randint(3, 7)):
2022-06-16T11:21:42.8227733Z                 ^
2022-06-16T11:21:42.8228059Z ./Test-Case-Generator/test_case.py:7:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8228142Z from tkinter import *
2022-06-16T11:21:42.8228202Z ^
2022-06-16T11:21:42.8228519Z ./Test-Case-Generator/test_case.py:17:21: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8228611Z         gen_frame = Frame(master)
2022-06-16T11:21:42.8228676Z                     ^
2022-06-16T11:21:42.8228989Z ./Test-Case-Generator/test_case.py:22:26: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8229078Z         self.statement = Label(
2022-06-16T11:21:42.8229151Z                          ^
2022-06-16T11:21:42.8229467Z ./Test-Case-Generator/test_case.py:30:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8229554Z         self.button1 = Button(
2022-06-16T11:21:42.8229626Z                        ^
2022-06-16T11:21:42.8229938Z ./Test-Case-Generator/test_case.py:32:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8230016Z             justify=LEFT,
2022-06-16T11:21:42.8230084Z                     ^
2022-06-16T11:21:42.8230400Z ./Test-Case-Generator/test_case.py:42:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8230488Z         self.button2 = Button(
2022-06-16T11:21:42.8230561Z                        ^
2022-06-16T11:21:42.8230875Z ./Test-Case-Generator/test_case.py:44:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8230954Z             justify=LEFT,
2022-06-16T11:21:42.8231017Z                     ^
2022-06-16T11:21:42.8231377Z ./Test-Case-Generator/test_case.py:53:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8231466Z         self.button3 = Button(
2022-06-16T11:21:42.8231539Z                        ^
2022-06-16T11:21:42.8231852Z ./Test-Case-Generator/test_case.py:55:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8231934Z             justify=LEFT,
2022-06-16T11:21:42.8232002Z                     ^
2022-06-16T11:21:42.8232315Z ./Test-Case-Generator/test_case.py:64:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8232395Z         self.button4 = Button(
2022-06-16T11:21:42.8232550Z                        ^
2022-06-16T11:21:42.8232881Z ./Test-Case-Generator/test_case.py:66:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8232961Z             justify=LEFT,
2022-06-16T11:21:42.8233031Z                     ^
2022-06-16T11:21:42.8233343Z ./Test-Case-Generator/test_case.py:75:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8233427Z         self.button5 = Button(
2022-06-16T11:21:42.8233495Z                        ^
2022-06-16T11:21:42.8233796Z ./Test-Case-Generator/test_case.py:77:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8233945Z             justify=LEFT,
2022-06-16T11:21:42.8234013Z                     ^
2022-06-16T11:21:42.8234331Z ./Test-Case-Generator/test_case.py:86:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8234416Z         self.button6 = Button(
2022-06-16T11:21:42.8234491Z                        ^
2022-06-16T11:21:42.8234802Z ./Test-Case-Generator/test_case.py:88:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8234873Z             justify=LEFT,
2022-06-16T11:21:42.8234941Z                     ^
2022-06-16T11:21:42.8235376Z ./Test-Case-Generator/test_case.py:98:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8235467Z         self.button7 = Button(
2022-06-16T11:21:42.8235540Z                        ^
2022-06-16T11:21:42.8235870Z ./Test-Case-Generator/test_case.py:100:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8235957Z             justify=LEFT,
2022-06-16T11:21:42.8236031Z                     ^
2022-06-16T11:21:42.8236359Z ./Test-Case-Generator/test_case.py:109:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8236449Z         self.button8 = Button(
2022-06-16T11:21:42.8236522Z                        ^
2022-06-16T11:21:42.8236857Z ./Test-Case-Generator/test_case.py:111:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8236940Z             justify=LEFT,
2022-06-16T11:21:42.8237012Z                     ^
2022-06-16T11:21:42.8237346Z ./Test-Case-Generator/test_case.py:120:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8237431Z         self.button9 = Button(
2022-06-16T11:21:42.8237506Z                        ^
2022-06-16T11:21:42.8237840Z ./Test-Case-Generator/test_case.py:122:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8237927Z             justify=LEFT,
2022-06-16T11:21:42.8237999Z                     ^
2022-06-16T11:21:42.8238335Z ./Test-Case-Generator/test_case.py:131:25: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8238429Z         self.button10 = Button(
2022-06-16T11:21:42.8238506Z                         ^
2022-06-16T11:21:42.8238832Z ./Test-Case-Generator/test_case.py:133:21: F405 'LEFT' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8238918Z             justify=LEFT,
2022-06-16T11:21:42.8238992Z                     ^
2022-06-16T11:21:42.8239328Z ./Test-Case-Generator/test_case.py:142:27: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8239428Z         self.button_new = Button(
2022-06-16T11:21:42.8239503Z                           ^
2022-06-16T11:21:42.8239830Z ./Test-Case-Generator/test_case.py:151:28: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8239932Z         self.button_exit = Button(
2022-06-16T11:21:42.8240004Z                            ^
2022-06-16T11:21:42.8240330Z ./Test-Case-Generator/test_case.py:160:32: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8240436Z         self.copyright_label = Button(
2022-06-16T11:21:42.8240516Z                                ^
2022-06-16T11:21:42.8240915Z ./Test-Case-Generator/test_case.py:209:38: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8241141Z         txt = self.output.get("1.0", END)
2022-06-16T11:21:42.8241221Z                                      ^
2022-06-16T11:21:42.8241544Z ./Test-Case-Generator/test_case.py:220:25: F405 'Scrollbar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8241640Z         self.y_scroll = Scrollbar(gui)
2022-06-16T11:21:42.8241711Z                         ^
2022-06-16T11:21:42.8242030Z ./Test-Case-Generator/test_case.py:221:25: F405 'Scrollbar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8242238Z         self.x_scroll = Scrollbar(gui, orient=HORIZONTAL)
2022-06-16T11:21:42.8242309Z                         ^
2022-06-16T11:21:42.8244588Z ./Test-Case-Generator/test_case.py:221:47: F405 'HORIZONTAL' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8244722Z         self.x_scroll = Scrollbar(gui, orient=HORIZONTAL)
2022-06-16T11:21:42.8244807Z                                               ^
2022-06-16T11:21:42.8245121Z ./Test-Case-Generator/test_case.py:226:23: F405 'Text' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8245210Z         self.output = Text(
2022-06-16T11:21:42.8245281Z                       ^
2022-06-16T11:21:42.8245539Z ./Test-Case-Generator/test_case.py:235:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8245808Z         # self.output = ScrolledText(gui, height=12, bg="light cyan", width=82, wrap='none',
2022-06-16T11:21:42.8245926Z                                                                                         ^
2022-06-16T11:21:42.8246242Z ./Test-Case-Generator/test_case.py:248:28: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8246336Z         self.copy_button = Button(
2022-06-16T11:21:42.8246405Z                            ^
2022-06-16T11:21:42.8246719Z ./Test-Case-Generator/test_case.py:260:32: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8246821Z         self.generate_button = Button(
2022-06-16T11:21:42.8246898Z                                ^
2022-06-16T11:21:42.8247211Z ./Test-Case-Generator/test_case.py:271:37: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8247320Z         self.change_values_button = Button(
2022-06-16T11:21:42.8247400Z                                     ^
2022-06-16T11:21:42.8247705Z ./Test-Case-Generator/test_case.py:281:28: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8247800Z         self.done_button = Button(
2022-06-16T11:21:42.8247874Z                            ^
2022-06-16T11:21:42.8248184Z ./Test-Case-Generator/test_case.py:293:35: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8248291Z         self.button_exit_output = Button(
2022-06-16T11:21:42.8248376Z                                   ^
2022-06-16T11:21:42.8248686Z ./Test-Case-Generator/test_case.py:321:38: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8248793Z         self.test_case_count_label = Label(
2022-06-16T11:21:42.8248866Z                                      ^
2022-06-16T11:21:42.8249179Z ./Test-Case-Generator/test_case.py:324:32: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8249278Z         self.test_case_count = Entry(
2022-06-16T11:21:42.8249356Z                                ^
2022-06-16T11:21:42.8249667Z ./Test-Case-Generator/test_case.py:331:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8249773Z         self.minimum_value_of_n = Entry(
2022-06-16T11:21:42.8249851Z                                   ^
2022-06-16T11:21:42.8250162Z ./Test-Case-Generator/test_case.py:334:42: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8250364Z         self.min_max_values_of_n_label = Label(
2022-06-16T11:21:42.8250466Z                                          ^
2022-06-16T11:21:42.8250787Z ./Test-Case-Generator/test_case.py:337:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8250890Z         self.maximum_value_of_n = Entry(
2022-06-16T11:21:42.8250968Z                                   ^
2022-06-16T11:21:42.8251272Z ./Test-Case-Generator/test_case.py:345:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8251369Z         self.minimum_value_of_m = Entry(
2022-06-16T11:21:42.8251538Z                                   ^
2022-06-16T11:21:42.8251842Z ./Test-Case-Generator/test_case.py:348:42: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8251956Z         self.min_max_values_of_m_label = Label(
2022-06-16T11:21:42.8252045Z                                          ^
2022-06-16T11:21:42.8252361Z ./Test-Case-Generator/test_case.py:351:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8252464Z         self.maximum_value_of_m = Entry(
2022-06-16T11:21:42.8252540Z                                   ^
2022-06-16T11:21:42.8252852Z ./Test-Case-Generator/test_case.py:359:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8252951Z         self.minimum_value_of_k = Entry(
2022-06-16T11:21:42.8253021Z                                   ^
2022-06-16T11:21:42.8253332Z ./Test-Case-Generator/test_case.py:362:42: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8253448Z         self.min_max_values_of_k_label = Label(
2022-06-16T11:21:42.8253534Z                                          ^
2022-06-16T11:21:42.8253841Z ./Test-Case-Generator/test_case.py:365:35: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8253944Z         self.maximum_value_of_k = Entry(
2022-06-16T11:21:42.8254028Z                                   ^
2022-06-16T11:21:42.8254342Z ./Test-Case-Generator/test_case.py:373:36: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8254438Z         self.minimum_value_of_ai = Entry(
2022-06-16T11:21:42.8254519Z                                    ^
2022-06-16T11:21:42.8254827Z ./Test-Case-Generator/test_case.py:376:43: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8254940Z         self.min_max_values_of_ai_label = Label(
2022-06-16T11:21:42.8255029Z                                           ^
2022-06-16T11:21:42.8255338Z ./Test-Case-Generator/test_case.py:379:36: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8255444Z         self.maximum_value_of_ai = Entry(
2022-06-16T11:21:42.8255515Z                                    ^
2022-06-16T11:21:42.8255826Z ./Test-Case-Generator/test_case.py:387:36: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8255930Z         self.minimum_value_of_bi = Entry(
2022-06-16T11:21:42.8256010Z                                    ^
2022-06-16T11:21:42.8256318Z ./Test-Case-Generator/test_case.py:390:43: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8256435Z         self.min_max_values_of_bi_label = Label(
2022-06-16T11:21:42.8256524Z                                           ^
2022-06-16T11:21:42.8256837Z ./Test-Case-Generator/test_case.py:393:36: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8256933Z         self.maximum_value_of_bi = Entry(
2022-06-16T11:21:42.8257019Z                                    ^
2022-06-16T11:21:42.8257460Z ./Test-Case-Generator/test_case.py:401:32: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8257562Z         self.char_list_label = Label(
2022-06-16T11:21:42.8257643Z                                ^
2022-06-16T11:21:42.8258150Z ./Test-Case-Generator/test_case.py:404:26: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8258261Z         self.char_list = Entry(
2022-06-16T11:21:42.8258340Z                          ^
2022-06-16T11:21:42.8258680Z ./Test-Case-Generator/test_case.py:407:31: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8258845Z         self.char_list.insert(END, "(Space separated characters)")
2022-06-16T11:21:42.8258929Z                               ^
2022-06-16T11:21:42.8259423Z ./Test-Case-Generator/test_case.py:413:25: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8259621Z         self.back_btn = Button(
2022-06-16T11:21:42.8259703Z                         ^
2022-06-16T11:21:42.8260070Z ./Test-Case-Generator/test_case.py:420:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8260168Z         self.sub_btn = Button(
2022-06-16T11:21:42.8260240Z                        ^
2022-06-16T11:21:42.8260711Z ./Test-Case-Generator/test_case.py:423:25: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8260809Z         self.exit_btn = Button(
2022-06-16T11:21:42.8260885Z                         ^
2022-06-16T11:21:42.8261161Z ./Test-Case-Generator/test_case.py:431:5: C901 'Case.submit' is too complex (39)
2022-06-16T11:21:42.8261245Z     def submit(self):
2022-06-16T11:21:42.8261311Z     ^
2022-06-16T11:21:42.8261735Z ./Test-Case-Generator/test_case.py:535:5: C901 'Case.forget_testcase_take_input_screen' is too complex (18)
2022-06-16T11:21:42.8261871Z     def forget_testcase_take_input_screen(self, check=0):
2022-06-16T11:21:42.8261936Z     ^
2022-06-16T11:21:42.8262249Z ./Test-Case-Generator/test_case.py:608:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8262352Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8262433Z                                   ^
2022-06-16T11:21:42.8262748Z ./Test-Case-Generator/test_case.py:609:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8262853Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8262921Z                            ^
2022-06-16T11:21:42.8263233Z ./Test-Case-Generator/test_case.py:610:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8263339Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8263416Z                            ^
2022-06-16T11:21:42.8263952Z ./Test-Case-Generator/test_case.py:611:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8264051Z         for i in range(self.t):
2022-06-16T11:21:42.8264121Z             ^
2022-06-16T11:21:42.8264454Z ./Test-Case-Generator/test_case.py:613:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8264566Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8264653Z                                ^
2022-06-16T11:21:42.8264984Z ./Test-Case-Generator/test_case.py:614:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8265096Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8265178Z                                ^
2022-06-16T11:21:42.8265498Z ./Test-Case-Generator/test_case.py:618:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8265616Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8265697Z                                ^
2022-06-16T11:21:42.8266015Z ./Test-Case-Generator/test_case.py:619:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8266134Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8266215Z                                ^
2022-06-16T11:21:42.8266546Z ./Test-Case-Generator/test_case.py:640:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8266737Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8266834Z                                   ^
2022-06-16T11:21:42.8267258Z ./Test-Case-Generator/test_case.py:641:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8267365Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8267432Z                            ^
2022-06-16T11:21:42.8267737Z ./Test-Case-Generator/test_case.py:642:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8267840Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8267913Z                            ^
2022-06-16T11:21:42.8268394Z ./Test-Case-Generator/test_case.py:643:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8268487Z         for i in range(self.t):
2022-06-16T11:21:42.8268551Z             ^
2022-06-16T11:21:42.8268853Z ./Test-Case-Generator/test_case.py:646:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8268966Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8269043Z                                ^
2022-06-16T11:21:42.8269351Z ./Test-Case-Generator/test_case.py:647:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8269461Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8269540Z                                ^
2022-06-16T11:21:42.8269845Z ./Test-Case-Generator/test_case.py:648:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8269958Z             self.output.insert(END, self.m)
2022-06-16T11:21:42.8270030Z                                ^
2022-06-16T11:21:42.8270338Z ./Test-Case-Generator/test_case.py:649:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8270447Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8270526Z                                ^
2022-06-16T11:21:42.8270833Z ./Test-Case-Generator/test_case.py:653:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8270944Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8271019Z                                ^
2022-06-16T11:21:42.8271327Z ./Test-Case-Generator/test_case.py:654:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8271425Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8271501Z                                ^
2022-06-16T11:21:42.8271805Z ./Test-Case-Generator/test_case.py:674:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8271908Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8271988Z                                   ^
2022-06-16T11:21:42.8272296Z ./Test-Case-Generator/test_case.py:675:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8272405Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8272487Z                            ^
2022-06-16T11:21:42.8272781Z ./Test-Case-Generator/test_case.py:676:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8272890Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8272966Z                            ^
2022-06-16T11:21:42.8273374Z ./Test-Case-Generator/test_case.py:677:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8273465Z         for i in range(self.t):
2022-06-16T11:21:42.8273535Z             ^
2022-06-16T11:21:42.8273843Z ./Test-Case-Generator/test_case.py:680:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8273962Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8274031Z                                ^
2022-06-16T11:21:42.8274340Z ./Test-Case-Generator/test_case.py:681:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8274519Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8274611Z                                ^
2022-06-16T11:21:42.8274925Z ./Test-Case-Generator/test_case.py:682:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8275036Z             self.output.insert(END, self.b)
2022-06-16T11:21:42.8275111Z                                ^
2022-06-16T11:21:42.8275406Z ./Test-Case-Generator/test_case.py:683:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8275515Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8275594Z                                ^
2022-06-16T11:21:42.8275984Z ./Test-Case-Generator/test_case.py:705:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8276088Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8276172Z                                   ^
2022-06-16T11:21:42.8276478Z ./Test-Case-Generator/test_case.py:706:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8276586Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8276653Z                            ^
2022-06-16T11:21:42.8276956Z ./Test-Case-Generator/test_case.py:707:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8277059Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8277133Z                            ^
2022-06-16T11:21:42.8277533Z ./Test-Case-Generator/test_case.py:708:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8277623Z         for i in range(self.t):
2022-06-16T11:21:42.8277688Z             ^
2022-06-16T11:21:42.8277996Z ./Test-Case-Generator/test_case.py:711:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8278099Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8278181Z                                ^
2022-06-16T11:21:42.8278490Z ./Test-Case-Generator/test_case.py:712:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8278596Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8278672Z                                ^
2022-06-16T11:21:42.8278979Z ./Test-Case-Generator/test_case.py:713:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8279093Z             self.output.insert(END, self.m)
2022-06-16T11:21:42.8279174Z                                ^
2022-06-16T11:21:42.8279470Z ./Test-Case-Generator/test_case.py:714:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8279583Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8279664Z                                ^
2022-06-16T11:21:42.8279967Z ./Test-Case-Generator/test_case.py:719:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8280081Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8280162Z                                ^
2022-06-16T11:21:42.8280468Z ./Test-Case-Generator/test_case.py:720:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8280579Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8280648Z                                ^
2022-06-16T11:21:42.8280949Z ./Test-Case-Generator/test_case.py:723:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8281061Z             self.output.insert(END, self.b)
2022-06-16T11:21:42.8281137Z                                ^
2022-06-16T11:21:42.8281442Z ./Test-Case-Generator/test_case.py:724:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8281554Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8281634Z                                ^
2022-06-16T11:21:42.8281930Z ./Test-Case-Generator/test_case.py:752:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8282218Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8282318Z                                   ^
2022-06-16T11:21:42.8283288Z ./Test-Case-Generator/test_case.py:753:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8283418Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8283506Z                            ^
2022-06-16T11:21:42.8283860Z ./Test-Case-Generator/test_case.py:754:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8283982Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8284057Z                            ^
2022-06-16T11:21:42.8284722Z ./Test-Case-Generator/test_case.py:755:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8284825Z         for i in range(self.t):
2022-06-16T11:21:42.8284904Z             ^
2022-06-16T11:21:42.8285261Z ./Test-Case-Generator/test_case.py:759:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8285393Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8285484Z                                ^
2022-06-16T11:21:42.8285978Z ./Test-Case-Generator/test_case.py:760:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8286193Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8286270Z                                ^
2022-06-16T11:21:42.8286577Z ./Test-Case-Generator/test_case.py:761:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8286692Z             self.output.insert(END, self.m)
2022-06-16T11:21:42.8286779Z                                ^
2022-06-16T11:21:42.8287090Z ./Test-Case-Generator/test_case.py:762:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8287200Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8287281Z                                ^
2022-06-16T11:21:42.8287577Z ./Test-Case-Generator/test_case.py:763:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8287693Z             self.output.insert(END, self.k)
2022-06-16T11:21:42.8287771Z                                ^
2022-06-16T11:21:42.8288077Z ./Test-Case-Generator/test_case.py:764:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8288189Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8288264Z                                ^
2022-06-16T11:21:42.8288580Z ./Test-Case-Generator/test_case.py:778:28: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8288681Z         self.constraints = Label(
2022-06-16T11:21:42.8288748Z                            ^
2022-06-16T11:21:42.8289053Z ./Test-Case-Generator/test_case.py:793:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8289159Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8289245Z                                   ^
2022-06-16T11:21:42.8289554Z ./Test-Case-Generator/test_case.py:796:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8289661Z         self.output.insert(END, self.n)
2022-06-16T11:21:42.8289736Z                            ^
2022-06-16T11:21:42.8290028Z ./Test-Case-Generator/test_case.py:797:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8290131Z         self.output.insert(END, " ")
2022-06-16T11:21:42.8290206Z                            ^
2022-06-16T11:21:42.8290508Z ./Test-Case-Generator/test_case.py:798:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8290618Z         self.output.insert(END, self.m)
2022-06-16T11:21:42.8290695Z                            ^
2022-06-16T11:21:42.8291003Z ./Test-Case-Generator/test_case.py:799:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8291111Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8291251Z                            ^
2022-06-16T11:21:42.8291681Z ./Test-Case-Generator/test_case.py:800:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8291771Z         for i in range(self.n):
2022-06-16T11:21:42.8291839Z             ^
2022-06-16T11:21:42.8292142Z ./Test-Case-Generator/test_case.py:804:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8292258Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8292340Z                                ^
2022-06-16T11:21:42.8292732Z ./Test-Case-Generator/test_case.py:805:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8292834Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8292915Z                                ^
2022-06-16T11:21:42.8293223Z ./Test-Case-Generator/test_case.py:825:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8293330Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8293413Z                                   ^
2022-06-16T11:21:42.8293722Z ./Test-Case-Generator/test_case.py:826:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8293832Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8293908Z                            ^
2022-06-16T11:21:42.8294207Z ./Test-Case-Generator/test_case.py:827:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8294315Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8294395Z                            ^
2022-06-16T11:21:42.8294802Z ./Test-Case-Generator/test_case.py:828:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8294894Z         for i in range(self.t):
2022-06-16T11:21:42.8294963Z             ^
2022-06-16T11:21:42.8295275Z ./Test-Case-Generator/test_case.py:830:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8295392Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8295462Z                                ^
2022-06-16T11:21:42.8295773Z ./Test-Case-Generator/test_case.py:831:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8295885Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8295966Z                                ^
2022-06-16T11:21:42.8296278Z ./Test-Case-Generator/test_case.py:833:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8296408Z             self.output.insert(END, "".join(self.a))
2022-06-16T11:21:42.8296485Z                                ^
2022-06-16T11:21:42.8296793Z ./Test-Case-Generator/test_case.py:834:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8296894Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8296972Z                                ^
2022-06-16T11:21:42.8297280Z ./Test-Case-Generator/test_case.py:856:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8297384Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8297465Z                                   ^
2022-06-16T11:21:42.8297769Z ./Test-Case-Generator/test_case.py:857:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8297879Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8297946Z                            ^
2022-06-16T11:21:42.8298262Z ./Test-Case-Generator/test_case.py:858:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8298374Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8298454Z                            ^
2022-06-16T11:21:42.8298860Z ./Test-Case-Generator/test_case.py:859:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8299020Z         for i in range(self.t):
2022-06-16T11:21:42.8299278Z             ^
2022-06-16T11:21:42.8299627Z ./Test-Case-Generator/test_case.py:862:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8299731Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8299809Z                                ^
2022-06-16T11:21:42.8300115Z ./Test-Case-Generator/test_case.py:863:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8300224Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8300304Z                                ^
2022-06-16T11:21:42.8300732Z ./Test-Case-Generator/test_case.py:864:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8300841Z             self.output.insert(END, self.m)
2022-06-16T11:21:42.8300919Z                                ^
2022-06-16T11:21:42.8301218Z ./Test-Case-Generator/test_case.py:865:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8301330Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8301410Z                                ^
2022-06-16T11:21:42.8301815Z ./Test-Case-Generator/test_case.py:866:17: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8301910Z             for j in range(self.m):
2022-06-16T11:21:42.8301980Z                 ^
2022-06-16T11:21:42.8302288Z ./Test-Case-Generator/test_case.py:869:36: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8302412Z                 self.output.insert(END, self.a)
2022-06-16T11:21:42.8302484Z                                    ^
2022-06-16T11:21:42.8302790Z ./Test-Case-Generator/test_case.py:870:36: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8302907Z                 self.output.insert(END, " ")
2022-06-16T11:21:42.8302990Z                                    ^
2022-06-16T11:21:42.8303302Z ./Test-Case-Generator/test_case.py:871:36: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8303422Z                 self.output.insert(END, self.b)
2022-06-16T11:21:42.8303504Z                                    ^
2022-06-16T11:21:42.8303813Z ./Test-Case-Generator/test_case.py:872:36: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8303919Z                 self.output.insert(END, "\n")
2022-06-16T11:21:42.8304000Z                                    ^
2022-06-16T11:21:42.8304305Z ./Test-Case-Generator/test_case.py:892:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8304415Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8304498Z                                   ^
2022-06-16T11:21:42.8304810Z ./Test-Case-Generator/test_case.py:893:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8304922Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8305001Z                            ^
2022-06-16T11:21:42.8305298Z ./Test-Case-Generator/test_case.py:894:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8305406Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8305482Z                            ^
2022-06-16T11:21:42.8305880Z ./Test-Case-Generator/test_case.py:895:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8305973Z         for i in range(self.t):
2022-06-16T11:21:42.8306045Z             ^
2022-06-16T11:21:42.8306355Z ./Test-Case-Generator/test_case.py:898:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8306479Z             self.output.insert(END, "".join(self.a))
2022-06-16T11:21:42.8306550Z                                ^
2022-06-16T11:21:42.8306935Z ./Test-Case-Generator/test_case.py:899:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8307062Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8307143Z                                ^
2022-06-16T11:21:42.8307457Z ./Test-Case-Generator/test_case.py:921:35: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8307562Z         self.output.delete("1.0", END)
2022-06-16T11:21:42.8307645Z                                   ^
2022-06-16T11:21:42.8307938Z ./Test-Case-Generator/test_case.py:922:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8308048Z         self.output.insert(END, self.t)
2022-06-16T11:21:42.8308198Z                            ^
2022-06-16T11:21:42.8308513Z ./Test-Case-Generator/test_case.py:923:28: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8308624Z         self.output.insert(END, "\n")
2022-06-16T11:21:42.8308694Z                            ^
2022-06-16T11:21:42.8309100Z ./Test-Case-Generator/test_case.py:924:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8309190Z         for i in range(self.t):
2022-06-16T11:21:42.8309247Z             ^
2022-06-16T11:21:42.8309554Z ./Test-Case-Generator/test_case.py:928:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8309666Z             self.output.insert(END, self.n)
2022-06-16T11:21:42.8309748Z                                ^
2022-06-16T11:21:42.8310058Z ./Test-Case-Generator/test_case.py:929:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8310170Z             self.output.insert(END, " ")
2022-06-16T11:21:42.8310248Z                                ^
2022-06-16T11:21:42.8310554Z ./Test-Case-Generator/test_case.py:930:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8310657Z             self.output.insert(END, self.k)
2022-06-16T11:21:42.8310737Z                                ^
2022-06-16T11:21:42.8311046Z ./Test-Case-Generator/test_case.py:931:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8311167Z             self.output.insert(END, " ")  # Type 10
2022-06-16T11:21:42.8311249Z                                ^
2022-06-16T11:21:42.8311556Z ./Test-Case-Generator/test_case.py:932:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8311673Z             self.output.insert(END, self.m)
2022-06-16T11:21:42.8311754Z                                ^
2022-06-16T11:21:42.8312050Z ./Test-Case-Generator/test_case.py:933:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8312166Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8312247Z                                ^
2022-06-16T11:21:42.8312556Z ./Test-Case-Generator/test_case.py:937:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8312672Z             self.output.insert(END, self.a)
2022-06-16T11:21:42.8312749Z                                ^
2022-06-16T11:21:42.8313058Z ./Test-Case-Generator/test_case.py:938:32: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8313170Z             self.output.insert(END, "\n")
2022-06-16T11:21:42.8313237Z                                ^
2022-06-16T11:21:42.8313548Z ./Test-Case-Generator/test_case.py:942:11: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8313628Z     gui = Tk()
2022-06-16T11:21:42.8313698Z           ^
2022-06-16T11:21:42.8314019Z ./Test-Case-Generator/test_case.py:952:9: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8314095Z     t = IntVar()
2022-06-16T11:21:42.8314162Z         ^
2022-06-16T11:21:42.8314471Z ./Test-Case-Generator/test_case.py:953:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8314553Z     n_min = IntVar()
2022-06-16T11:21:42.8314708Z             ^
2022-06-16T11:21:42.8315052Z ./Test-Case-Generator/test_case.py:954:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8315130Z     n_max = IntVar()
2022-06-16T11:21:42.8315199Z             ^
2022-06-16T11:21:42.8315509Z ./Test-Case-Generator/test_case.py:955:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8315588Z     m_min = IntVar()
2022-06-16T11:21:42.8315645Z             ^
2022-06-16T11:21:42.8315967Z ./Test-Case-Generator/test_case.py:956:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8316115Z     m_max = IntVar()
2022-06-16T11:21:42.8316185Z             ^
2022-06-16T11:21:42.8316509Z ./Test-Case-Generator/test_case.py:957:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8316590Z     k_min = IntVar()
2022-06-16T11:21:42.8316658Z             ^
2022-06-16T11:21:42.8316964Z ./Test-Case-Generator/test_case.py:958:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8317045Z     k_max = IntVar()
2022-06-16T11:21:42.8317114Z             ^
2022-06-16T11:21:42.8317429Z ./Test-Case-Generator/test_case.py:959:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8317504Z     a_min = IntVar()
2022-06-16T11:21:42.8317571Z             ^
2022-06-16T11:21:42.8317880Z ./Test-Case-Generator/test_case.py:960:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8317947Z     a_max = IntVar()
2022-06-16T11:21:42.8318019Z             ^
2022-06-16T11:21:42.8318330Z ./Test-Case-Generator/test_case.py:961:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8318407Z     b_min = IntVar()
2022-06-16T11:21:42.8318474Z             ^
2022-06-16T11:21:42.8318791Z ./Test-Case-Generator/test_case.py:962:13: F405 'IntVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8318868Z     b_max = IntVar()
2022-06-16T11:21:42.8318937Z             ^
2022-06-16T11:21:42.8319250Z ./Test-Case-Generator/test_case.py:963:16: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8319343Z     char_lis = StringVar()
2022-06-16T11:21:42.8319414Z                ^
2022-06-16T11:21:42.8319548Z ./primelib/primelib.py:19:37: W291 trailing whitespace
2022-06-16T11:21:42.8319617Z """
2022-06-16T11:21:42.8319717Z Created on Thu Oct  5 16:44:23 2017
2022-06-16T11:21:42.8319726Z 
2022-06-16T11:21:42.8319823Z @author: Christian Bender
2022-06-16T11:21:42.8319833Z 
2022-06-16T11:21:42.8319985Z This python library contains some useful functions to deal with
2022-06-16T11:21:42.8320077Z prime numbers and whole numbers.
2022-06-16T11:21:42.8320084Z 
2022-06-16T11:21:42.8320157Z Overview:
2022-06-16T11:21:42.8320163Z 
2022-06-16T11:21:42.8320243Z isPrime(number)
2022-06-16T11:21:42.8320317Z sieveEr(N)
2022-06-16T11:21:42.8320407Z getPrimeNumbers(N)
2022-06-16T11:21:42.8320509Z primeFactorization(number)
2022-06-16T11:21:42.8320612Z greatestPrimeFactor(number)
2022-06-16T11:21:42.8320702Z smallestPrimeFactor(number)
2022-06-16T11:21:42.8320781Z getPrime(n)
2022-06-16T11:21:42.8320899Z getPrimesBetween(pNumber1, pNumber2) 
2022-06-16T11:21:42.8320906Z 
2022-06-16T11:21:42.8321001Z ----
2022-06-16T11:21:42.8321008Z 
2022-06-16T11:21:42.8321086Z isEven(number)
2022-06-16T11:21:42.8321161Z isOdd(number)
2022-06-16T11:21:42.8321285Z gcd(number1, number2)  // greatest common divisor
2022-06-16T11:21:42.8321396Z kgV(number1, number2)  // least common multiple
2022-06-16T11:21:42.8321637Z getDivisors(number)    // all divisors of 'number' inclusive 1, number
2022-06-16T11:21:42.8321730Z isPerfectNumber(number)
2022-06-16T11:21:42.8321737Z 
2022-06-16T11:21:42.8321850Z NEW-FUNCTIONS
2022-06-16T11:21:42.8321857Z 
2022-06-16T11:21:42.8321981Z simplifyFraction(numerator, denominator)
2022-06-16T11:21:42.8322066Z factorial (n) // n!
2022-06-16T11:21:42.8322319Z fib (n) // calculate the n-th fibonacci term.
2022-06-16T11:21:42.8322330Z 
2022-06-16T11:21:42.8322437Z -----
2022-06-16T11:21:42.8322443Z 
2022-06-16T11:21:42.8322618Z goldbach(number)  // Goldbach's assumption
2022-06-16T11:21:42.8322625Z 
2022-06-16T11:21:42.8322677Z """
2022-06-16T11:21:42.8322745Z    
2022-06-16T11:21:42.8322827Z                                 ^
2022-06-16T11:21:42.8323053Z ./primelib/primelib.py:372:1: C901 'kgV' is too complex (11)
2022-06-16T11:21:42.8323145Z def kgV(number1, number2):
2022-06-16T11:21:42.8323209Z ^
2022-06-16T11:21:42.8323594Z ./primelib/primelib.py:417:21: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8323774Z                 for i in range(max(count1, count2)):
2022-06-16T11:21:42.8323850Z                     ^
2022-06-16T11:21:42.8324242Z ./primelib/primelib.py:424:21: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8324342Z                 for i in range(count1):
2022-06-16T11:21:42.8324417Z                     ^
2022-06-16T11:21:42.8324796Z ./primelib/primelib.py:436:17: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8324893Z             for i in range(count2):
2022-06-16T11:21:42.8324963Z                 ^
2022-06-16T11:21:42.8325331Z ./primelib/primelib.py:646:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8325470Z     for i in range(n - 1):
2022-06-16T11:21:42.8325535Z         ^
2022-06-16T11:21:42.8325846Z ./Python_chatting_application/client.py:23:13: F841 local variable 'flag' is assigned to but never used
2022-06-16T11:21:42.8325923Z             flag = 1
2022-06-16T11:21:42.8325994Z             ^
2022-06-16T11:21:42.8326303Z ./Python_chatting_application/client.py:35:13: F841 local variable 'flag' is assigned to but never used
2022-06-16T11:21:42.8326380Z             flag = 1
2022-06-16T11:21:42.8326438Z             ^
2022-06-16T11:21:42.8326569Z ./PDF/images.py:18:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8326782Z         # Read Image file so that we can cover the complete image properly and if invalid image file skip those files
2022-06-16T11:21:42.8326900Z                                                                                         ^
2022-06-16T11:21:42.8327032Z ./PDF/images.py:30:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.8327225Z         # Check if Width is greater than height so to know the image is in landscape or else in potrait
2022-06-16T11:21:42.8327344Z                                                                                         ^
2022-06-16T11:21:42.8327490Z ./PDF/header_footer.py:10:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.8327771Z         # self.image('somelogo.png',12,10,25,25) # Draw Image ar (12,10) with height = 25 and width = 25
2022-06-16T11:21:42.8327892Z                                                                                         ^
2022-06-16T11:21:42.8328186Z ./Eight_Puzzle_Solver/eight_puzzle.py:29:26: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8328279Z             self.moves = list()
2022-06-16T11:21:42.8328357Z                          ^
2022-06-16T11:21:42.8328645Z ./Eight_Puzzle_Solver/eight_puzzle.py:40:18: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8328730Z         action = list()
2022-06-16T11:21:42.8328804Z                  ^
2022-06-16T11:21:42.8328961Z ./Eight_Puzzle_Solver/eight_puzzle.py:59:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8329032Z         """
2022-06-16T11:21:42.8329147Z         Parameters: Current State , Action
2022-06-16T11:21:42.8329248Z         Returns: Node with New State
2022-06-16T11:21:42.8329489Z         Restrictions: Action will always be valid and state is self.size x self.size Array
2022-06-16T11:21:42.8329567Z         """
2022-06-16T11:21:42.8329639Z            
2022-06-16T11:21:42.8329719Z                                           
2022-06-16T11:21:42.8329804Z                                  ^
2022-06-16T11:21:42.8330147Z ./Eight_Puzzle_Solver/eight_puzzle.py:293:30: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8330254Z         if self.isSolvable() == False:
2022-06-16T11:21:42.8330334Z                              ^
2022-06-16T11:21:42.8330622Z ./Eight_Puzzle_Solver/eight_puzzle.py:296:18: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8330771Z         closed = list()
2022-06-16T11:21:42.8330840Z                  ^
2022-06-16T11:21:42.8331161Z ./Eight_Puzzle_Solver/eight_puzzle.py:316:30: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8331266Z         if self.isSolvable() == False:
2022-06-16T11:21:42.8331344Z                              ^
2022-06-16T11:21:42.8331675Z ./Eight_Puzzle_Solver/eight_puzzle.py:318:18: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8331764Z         closed = list()
2022-06-16T11:21:42.8331836Z                  ^
2022-06-16T11:21:42.8332121Z ./Eight_Puzzle_Solver/eight_puzzle.py:319:13: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8332182Z         q = list()
2022-06-16T11:21:42.8332255Z             ^
2022-06-16T11:21:42.8332583Z ./Eight_Puzzle_Solver/eight_puzzle.py:337:30: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8332690Z         if self.isSolvable() == False:
2022-06-16T11:21:42.8332773Z                              ^
2022-06-16T11:21:42.8333059Z ./Eight_Puzzle_Solver/eight_puzzle.py:339:18: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8333143Z         closed = list()
2022-06-16T11:21:42.8333214Z                  ^
2022-06-16T11:21:42.8333532Z ./Eight_Puzzle_Solver/eight_puzzle.py:358:30: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8333632Z         if self.isSolvable() == False:
2022-06-16T11:21:42.8333711Z                              ^
2022-06-16T11:21:42.8333990Z ./Eight_Puzzle_Solver/eight_puzzle.py:360:18: C408 Unnecessary dict call - rewrite as a literal.
2022-06-16T11:21:42.8334073Z         closed = dict()
2022-06-16T11:21:42.8334140Z                  ^
2022-06-16T11:21:42.8334308Z ./ImageDownloader/img_downloader.py:5:14: E401 multiple imports on one line
2022-06-16T11:21:42.8334388Z     import os, re, requests
2022-06-16T11:21:42.8334458Z              ^
2022-06-16T11:21:42.8334631Z ./ImageDownloader/img_downloader.py:22:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.8334992Z     "https://www.123rf.com/stock-photo/spring_color.html?oriSearch=spring&ch=spring&sti=oazo8ueuz074cdpc48|"
2022-06-16T11:21:42.8335117Z                                                                                         ^
2022-06-16T11:21:42.8335392Z ./email id dictionary/dict1.py:3:10: C408 Unnecessary dict call - rewrite as a literal.
2022-06-16T11:21:42.8335470Z counts = dict()
2022-06-16T11:21:42.8335537Z          ^
2022-06-16T11:21:42.8335793Z ./email id dictionary/dict1.py:4:9: C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.8335869Z mails = list()
2022-06-16T11:21:42.8335938Z         ^
2022-06-16T11:21:42.8336288Z ./JustDialScrapperGUI/Justdial Scrapper GUI.py:105:5: C901 'ScrapperLogic.start_scrapping_logic' is too complex (13)
2022-06-16T11:21:42.8336395Z     def start_scrapping_logic(self):
2022-06-16T11:21:42.8336465Z     ^
2022-06-16T11:21:42.8336600Z ./wiki/wiki.py:2:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.8336763Z # In this program you ask it about any topic and it will show you the data from wikipedia
2022-06-16T11:21:42.8336882Z                                                                                         ^
2022-06-16T11:21:42.8337231Z ./wiki/wiki.py:7:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8337333Z from tkinter import *
2022-06-16T11:21:42.8337398Z ^
2022-06-16T11:21:42.8337624Z ./wiki/wiki.py:8:1: F401 'PIL as ImageTK' imported but unused
2022-06-16T11:21:42.8337714Z import PIL as ImageTK
2022-06-16T11:21:42.8337779Z ^
2022-06-16T11:21:42.8337994Z ./wiki/wiki.py:9:1: F401 'tkinter.messagebox' imported but unused
2022-06-16T11:21:42.8338096Z from tkinter import messagebox
2022-06-16T11:21:42.8338161Z ^
2022-06-16T11:21:42.8338428Z ./wiki/wiki.py:19:14: F405 'Text' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8338574Z     answer = Text(
2022-06-16T11:21:42.8338643Z              ^
2022-06-16T11:21:42.8338908Z ./wiki/wiki.py:24:14: F405 'WORD' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8338973Z         wrap=WORD,
2022-06-16T11:21:42.8339043Z              ^
2022-06-16T11:21:42.8339429Z ./wiki/wiki.py:28:19: F405 'END' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8339545Z     answer.insert(END, (query.summary))
2022-06-16T11:21:42.8339619Z                   ^
2022-06-16T11:21:42.8339886Z ./wiki/wiki.py:32:8: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8339962Z lbl1 = Label(
2022-06-16T11:21:42.8340019Z        ^
2022-06-16T11:21:42.8340286Z ./wiki/wiki.py:39:12: F405 'SOLID' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8340368Z     relief=SOLID,
2022-06-16T11:21:42.8340438Z            ^
2022-06-16T11:21:42.8340713Z ./wiki/wiki.py:43:12: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8340805Z question = StringVar()
2022-06-16T11:21:42.8340874Z            ^
2022-06-16T11:21:42.8341138Z ./wiki/wiki.py:45:11: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8341206Z quesbox = Entry(
2022-06-16T11:21:42.8341271Z           ^
2022-06-16T11:21:42.8341543Z ./wiki/wiki.py:51:12: F405 'GROOVE' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8341620Z     relief=GROOVE,
2022-06-16T11:21:42.8341684Z            ^
2022-06-16T11:21:42.8341947Z ./wiki/wiki.py:55:13: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8342026Z searchbtn = Button(
2022-06-16T11:21:42.8342083Z             ^
2022-06-16T11:21:42.8342344Z ./wiki/wiki.py:60:12: F405 'GROOVE' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8342424Z     relief=GROOVE,
2022-06-16T11:21:42.8342493Z            ^
2022-06-16T11:21:42.8342916Z ./Hand-Motion-Detection/hand_motion_recognizer.py:3:1: F401 'numpy as np' imported but unused
2022-06-16T11:21:42.8343011Z import numpy as np
2022-06-16T11:21:42.8343558Z ^
2022-06-16T11:21:42.8344291Z ./Hand-Motion-Detection/hand_motion_recognizer.py:4:1: F401 'uuid' imported but unused
2022-06-16T11:21:42.8344393Z import uuid
2022-06-16T11:21:42.8344466Z ^
2022-06-16T11:21:42.8344792Z ./Hand-Motion-Detection/hand_motion_recognizer.py:5:1: F401 'os' imported but unused
2022-06-16T11:21:42.8344875Z import os
2022-06-16T11:21:42.8344946Z ^
2022-06-16T11:21:42.8345253Z ./Hand-Motion-Detection/hand_motion_recognizer.py:12:89: W291 trailing whitespace
2022-06-16T11:21:42.8345444Z with mp_hands.Hands(min_detection_confidence=0.8, min_tracking_confidence=0.5) as hands: 
2022-06-16T11:21:42.8345580Z                                                                                         ^
2022-06-16T11:21:42.8345905Z ./Hand-Motion-Detection/hand_motion_recognizer.py:15:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8345984Z         
2022-06-16T11:21:42.8346062Z ^
2022-06-16T11:21:42.8346389Z ./Hand-Motion-Detection/hand_motion_recognizer.py:18:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8346466Z         
2022-06-16T11:21:42.8346539Z ^
2022-06-16T11:21:42.8346846Z ./Hand-Motion-Detection/hand_motion_recognizer.py:21:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8346926Z         
2022-06-16T11:21:42.8347233Z ^
2022-06-16T11:21:42.8347590Z ./Hand-Motion-Detection/hand_motion_recognizer.py:24:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8347668Z         
2022-06-16T11:21:42.8347739Z ^
2022-06-16T11:21:42.8348067Z ./Hand-Motion-Detection/hand_motion_recognizer.py:27:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8348131Z         
2022-06-16T11:21:42.8348205Z ^
2022-06-16T11:21:42.8348531Z ./Hand-Motion-Detection/hand_motion_recognizer.py:30:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8348610Z         
2022-06-16T11:21:42.8348682Z ^
2022-06-16T11:21:42.8349002Z ./Hand-Motion-Detection/hand_motion_recognizer.py:33:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8349165Z         
2022-06-16T11:21:42.8349225Z ^
2022-06-16T11:21:42.8349555Z ./Hand-Motion-Detection/hand_motion_recognizer.py:36:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8349633Z         
2022-06-16T11:21:42.8349705Z ^
2022-06-16T11:21:42.8350218Z ./Hand-Motion-Detection/hand_motion_recognizer.py:39:17: B007 Loop control variable 'num' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8350393Z             for num, hand in enumerate(results.multi_hand_landmarks):
2022-06-16T11:21:42.8350477Z                 ^
2022-06-16T11:21:42.8350772Z ./Hand-Motion-Detection/hand_motion_recognizer.py:40:82: W291 trailing whitespace
2022-06-16T11:21:42.8351092Z                 mp_drawing.draw_landmarks(image, hand, mp_hands.HAND_CONNECTIONS, 
2022-06-16T11:21:42.8351219Z                                                                                  ^
2022-06-16T11:21:42.8351678Z ./Hand-Motion-Detection/hand_motion_recognizer.py:41:41: E128 continuation line under-indented for visual indent
2022-06-16T11:21:42.8351861Z                                         mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=4),
2022-06-16T11:21:42.8351949Z                                         ^
2022-06-16T11:21:42.8352246Z ./Hand-Motion-Detection/hand_motion_recognizer.py:41:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.8352425Z                                         mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=4),
2022-06-16T11:21:42.8352541Z                                                                                         ^
2022-06-16T11:21:42.8352862Z ./Hand-Motion-Detection/hand_motion_recognizer.py:42:41: E128 continuation line under-indented for visual indent
2022-06-16T11:21:42.8353042Z                                         mp_drawing.DrawingSpec(color=(250, 44, 250), thickness=2, circle_radius=2),
2022-06-16T11:21:42.8353133Z                                         ^
2022-06-16T11:21:42.8353425Z ./Hand-Motion-Detection/hand_motion_recognizer.py:42:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8353604Z                                         mp_drawing.DrawingSpec(color=(250, 44, 250), thickness=2, circle_radius=2),
2022-06-16T11:21:42.8353724Z                                                                                         ^
2022-06-16T11:21:42.8354045Z ./Hand-Motion-Detection/hand_motion_recognizer.py:43:42: E124 closing bracket does not match visual indentation
2022-06-16T11:21:42.8354135Z                                          )
2022-06-16T11:21:42.8354218Z                                          ^
2022-06-16T11:21:42.8354491Z ./Hand-Motion-Detection/hand_motion_recognizer.py:44:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8354561Z             
2022-06-16T11:21:42.8354628Z ^
2022-06-16T11:21:42.8354916Z ./Hand-Motion-Detection/hand_motion_recognizer.py:45:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8354989Z         
2022-06-16T11:21:42.8355055Z ^
2022-06-16T11:21:42.8355331Z ./Hand-Motion-Detection/hand_motion_recognizer.py:46:9: E303 too many blank lines (2)
2022-06-16T11:21:42.8355489Z         cv2.imshow('Hand Tracking', image)
2022-06-16T11:21:42.8355559Z         ^
2022-06-16T11:21:42.8355931Z ./Translator/translator.py:1:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8356035Z from tkinter import *
2022-06-16T11:21:42.8356102Z ^
2022-06-16T11:21:42.8356256Z ./Translator/translator.py:5:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8356334Z def translate():
2022-06-16T11:21:42.8356386Z ^
2022-06-16T11:21:42.8356690Z ./Translator/translator.py:12:8: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8356768Z root = Tk()
2022-06-16T11:21:42.8356837Z        ^
2022-06-16T11:21:42.8357138Z ./Translator/translator.py:16:13: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8357295Z mainframe = Frame(root)
2022-06-16T11:21:42.8357354Z             ^
2022-06-16T11:21:42.8357649Z ./Translator/translator.py:17:41: F405 'N' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8357781Z mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
2022-06-16T11:21:42.8357871Z                                         ^
2022-06-16T11:21:42.8358160Z ./Translator/translator.py:17:44: F405 'W' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8358289Z mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
2022-06-16T11:21:42.8358380Z                                            ^
2022-06-16T11:21:42.8358656Z ./Translator/translator.py:17:47: F405 'E' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8358782Z mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
2022-06-16T11:21:42.8358875Z                                               ^
2022-06-16T11:21:42.8359167Z ./Translator/translator.py:17:50: F405 'S' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8359292Z mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
2022-06-16T11:21:42.8359389Z                                                  ^
2022-06-16T11:21:42.8359696Z ./Translator/translator.py:23:8: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8359787Z lan1 = StringVar(root)
2022-06-16T11:21:42.8359844Z        ^
2022-06-16T11:21:42.8360150Z ./Translator/translator.py:24:8: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8360236Z lan2 = StringVar(root)
2022-06-16T11:21:42.8360305Z        ^
2022-06-16T11:21:42.8360600Z ./Translator/translator.py:29:1: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8360765Z Label(mainframe, text="Enter language translate from").grid(row=0, column=1)
2022-06-16T11:21:42.8360831Z ^
2022-06-16T11:21:42.8361134Z ./Translator/translator.py:30:7: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8361208Z var = StringVar()
2022-06-16T11:21:42.8361276Z       ^
2022-06-16T11:21:42.8361575Z ./Translator/translator.py:31:11: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8361748Z textbox = Entry(mainframe, textvariable=var).grid(row=1, column=1, padx=10, pady=10)
2022-06-16T11:21:42.8361818Z           ^
2022-06-16T11:21:42.8362111Z ./Translator/translator.py:33:1: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8362258Z Label(mainframe, text="Enter a language to").grid(row=0, column=2)
2022-06-16T11:21:42.8362311Z ^
2022-06-16T11:21:42.8362614Z ./Translator/translator.py:34:7: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8362694Z var = StringVar()
2022-06-16T11:21:42.8362758Z       ^
2022-06-16T11:21:42.8363058Z ./Translator/translator.py:35:11: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8363229Z textbox = Entry(mainframe, textvariable=var).grid(row=1, column=2, padx=10, pady=10)
2022-06-16T11:21:42.8363297Z           ^
2022-06-16T11:21:42.8363589Z ./Translator/translator.py:38:1: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8363786Z Label(mainframe, text="Enter text").grid(row=3, column=0)
2022-06-16T11:21:42.8363861Z ^
2022-06-16T11:21:42.8364170Z ./Translator/translator.py:39:7: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8364252Z var = StringVar()
2022-06-16T11:21:42.8364321Z       ^
2022-06-16T11:21:42.8364612Z ./Translator/translator.py:40:11: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8364760Z textbox = Entry(mainframe, textvariable=var).grid(row=3, column=1)
2022-06-16T11:21:42.8364817Z           ^
2022-06-16T11:21:42.8365109Z ./Translator/translator.py:44:1: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8365309Z Label(mainframe, text="Output").grid(row=3, column=2)
2022-06-16T11:21:42.8365373Z ^
2022-06-16T11:21:42.8365678Z ./Translator/translator.py:45:8: F405 'StringVar' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8365759Z var1 = StringVar()
2022-06-16T11:21:42.8365826Z        ^
2022-06-16T11:21:42.8366123Z ./Translator/translator.py:46:11: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8366283Z textbox = Entry(mainframe, textvariable=var1).grid(row=3, column=3, padx=10, pady=10)
2022-06-16T11:21:42.8366352Z           ^
2022-06-16T11:21:42.8366644Z ./Translator/translator.py:49:5: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8366714Z b = Button(
2022-06-16T11:21:42.8366779Z     ^
2022-06-16T11:21:42.8367008Z ./QR_code_generator/qrcode.py:2:1: F401 'png' imported but unused
2022-06-16T11:21:42.8367084Z import png
2022-06-16T11:21:42.8367140Z ^
2022-06-16T11:21:42.8367394Z ./QR_code_generator/qrcode.py:3:1: F401 'pyqrcode.QRCode' imported but unused
2022-06-16T11:21:42.8367492Z from pyqrcode import QRCode
2022-06-16T11:21:42.8367554Z ^
2022-06-16T11:21:42.8367851Z ./Face and eye Recognition/face_recofnation_first.py:1:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.8368002Z ## Name - Soumyajit Chakraborty
2022-06-16T11:21:42.8368069Z ^
2022-06-16T11:21:42.8368366Z ./Face and eye Recognition/face_recofnation_first.py:2:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.8368475Z ## place - kolkata
2022-06-16T11:21:42.8368538Z ^
2022-06-16T11:21:42.8368833Z ./Face and eye Recognition/face_recofnation_first.py:3:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.8368962Z ## date - 10 / 08 / 2020
2022-06-16T11:21:42.8369027Z ^
2022-06-16T11:21:42.8369307Z ./Face and eye Recognition/face_recofnation_first.py:7:40: W605 invalid escape sequence '\l'
2022-06-16T11:21:42.8369495Z face_cascade = cv.CascadeClassifier("..\libs\haarcascade_frontalface_default.xml")
2022-06-16T11:21:42.8369575Z                                        ^
2022-06-16T11:21:42.8369859Z ./Face and eye Recognition/face_recofnation_first.py:7:45: W605 invalid escape sequence '\h'
2022-06-16T11:21:42.8370049Z face_cascade = cv.CascadeClassifier("..\libs\haarcascade_frontalface_default.xml")
2022-06-16T11:21:42.8370145Z                                             ^
2022-06-16T11:21:42.8370427Z ./Face and eye Recognition/face_recofnation_first.py:8:44: W605 invalid escape sequence '\l'
2022-06-16T11:21:42.8370594Z face_cascade_eye = cv.CascadeClassifier("..\libs\haarcascade_eye.xml")
2022-06-16T11:21:42.8370688Z                                            ^
2022-06-16T11:21:42.8370967Z ./Face and eye Recognition/face_recofnation_first.py:8:49: W605 invalid escape sequence '\h'
2022-06-16T11:21:42.8371118Z face_cascade_eye = cv.CascadeClassifier("..\libs\haarcascade_eye.xml")
2022-06-16T11:21:42.8371215Z                                                 ^
2022-06-16T11:21:42.8371404Z ./Face and eye Recognition/face_recofnation_first.py:22:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.8373639Z     )  # we use detectMultiscale library function to detect the predefined structures of a face
2022-06-16T11:21:42.8373752Z                                                                                         ^
2022-06-16T11:21:42.8374142Z ./Face and eye Recognition/gesture_control.py:5:20: W605 invalid escape sequence '\i'
2022-06-16T11:21:42.8374261Z img = cv.imread("..\img\hand1.jpg", 0)
2022-06-16T11:21:42.8374331Z                    ^
2022-06-16T11:21:42.8374603Z ./Face and eye Recognition/gesture_control.py:5:24: W605 invalid escape sequence '\h'
2022-06-16T11:21:42.8374694Z img = cv.imread("..\img\hand1.jpg", 0)
2022-06-16T11:21:42.8374771Z                        ^
2022-06-16T11:21:42.8375068Z ./Face_Mask_detection (haarcascade)/mask_detection.py:2:1: F401 'PIL.Image' imported but unused
2022-06-16T11:21:42.8375172Z from PIL import Image, ImageOps
2022-06-16T11:21:42.8375333Z ^
2022-06-16T11:21:42.8375649Z ./Face_Mask_detection (haarcascade)/mask_detection.py:2:1: F401 'PIL.ImageOps' imported but unused
2022-06-16T11:21:42.8375752Z from PIL import Image, ImageOps
2022-06-16T11:21:42.8375805Z ^
2022-06-16T11:21:42.8376082Z ./Face_Mask_detection (haarcascade)/mask_detection.py:26:25: E203 whitespace before ':'
2022-06-16T11:21:42.8376196Z         crop_img = img[y : y + h, x : x + w]
2022-06-16T11:21:42.8376274Z                         ^
2022-06-16T11:21:42.8376545Z ./Face_Mask_detection (haarcascade)/mask_detection.py:26:36: E203 whitespace before ':'
2022-06-16T11:21:42.8376650Z         crop_img = img[y : y + h, x : x + w]
2022-06-16T11:21:42.8376736Z                                    ^
2022-06-16T11:21:42.8376903Z ./Downloaded Files Organizer/move_to_directory.py:6:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8377078Z     "audio": "aac aiff ape au flac gsm it m3u m4a mid mod mp3 mpa pls ra s3m sid wav wma xm ",
2022-06-16T11:21:42.8377197Z                                                                                         ^
2022-06-16T11:21:42.8377380Z ./Downloaded Files Organizer/move_to_directory.py:7:89: E501 line too long (132 > 88 characters)
2022-06-16T11:21:42.8377610Z     "code": "c cc class clj cpp cs cxx el go h java lua m m4 php pl po py rb rs swift vb vcxproj xcodeproj xml diff patch html js ",
2022-06-16T11:21:42.8377727Z                                                                                         ^
2022-06-16T11:21:42.8377906Z ./Downloaded Files Organizer/move_to_directory.py:10:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8378113Z     "image": "3dm 3ds max bmp dds gif jpg jpeg png psd xcf tga thm tif tiff ai eps ps svg dwg dxf gpx kml kmz webp ",
2022-06-16T11:21:42.8378230Z                                                                                         ^
2022-06-16T11:21:42.8378408Z ./Downloaded Files Organizer/move_to_directory.py:11:89: E501 line too long (139 > 88 characters)
2022-06-16T11:21:42.8378627Z     "archiv": "7z a apk ar bz2 cab cpio deb dmg egg gz iso jar lha mar pea rar rpm s7z shar tar tbz2 tgz tlz war whl xpi zip zipx xz pak ",
2022-06-16T11:21:42.8378741Z                                                                                         ^
2022-06-16T11:21:42.8378917Z ./Downloaded Files Organizer/move_to_directory.py:16:89: E501 line too long (159 > 88 characters)
2022-06-16T11:21:42.8379311Z     "video": "3g2 3gp aaf asf avchd avi drc flv m2v m4p m4v mkv mng mov mp2 mp4 mpe mpeg mpg mpv mxf nsv ogg ogv ogm qt rm rmvb roq srt svi vob webm wmv yuv ",
2022-06-16T11:21:42.8379435Z                                                                                         ^
2022-06-16T11:21:42.8379697Z ./Downloaded Files Organizer/obs.py:3:5: F401 'sys' imported but unused
2022-06-16T11:21:42.8379776Z     import sys
2022-06-16T11:21:42.8379843Z     ^
2022-06-16T11:21:42.8380133Z ./Downloaded Files Organizer/obs.py:13:17: F841 local variable 'file_name' is assigned to but never used
2022-06-16T11:21:42.8380277Z                 file_name = os.path.basename(event.src_path)
2022-06-16T11:21:42.8380347Z                 ^
2022-06-16T11:21:42.8380677Z ./flappyBird_pygame/flappy_bird.py:16:1: F403 'from pygame.locals import *' used; unable to detect undefined names
2022-06-16T11:21:42.8380778Z from pygame.locals import *
2022-06-16T11:21:42.8380940Z ^
2022-06-16T11:21:42.8381276Z ./flappyBird_pygame/flappy_bird.py:26:17: E262 inline comment should start with '# '
2022-06-16T11:21:42.8381377Z     WIDTH = 32  #   bird image width
2022-06-16T11:21:42.8381436Z                 ^
2022-06-16T11:21:42.8381704Z ./flappyBird_pygame/flappy_bird.py:27:18: E262 inline comment should start with '# '
2022-06-16T11:21:42.8381806Z     HEIGHT = 32  #   bird image height
2022-06-16T11:21:42.8381879Z                  ^
2022-06-16T11:21:42.8382145Z ./flappyBird_pygame/flappy_bird.py:28:24: E262 inline comment should start with '# '
2022-06-16T11:21:42.8382286Z     DOWN_SPEED = 0.18  #   pix per ms  -y
2022-06-16T11:21:42.8382455Z                        ^
2022-06-16T11:21:42.8382716Z ./flappyBird_pygame/flappy_bird.py:29:21: E262 inline comment should start with '# '
2022-06-16T11:21:42.8382816Z     UP_SPEED = 0.3  #   pix per ms  +y
2022-06-16T11:21:42.8382887Z                     ^
2022-06-16T11:21:42.8383271Z ./flappyBird_pygame/flappy_bird.py:30:24: E262 inline comment should start with '# '
2022-06-16T11:21:42.8383406Z     UP_DURATION = 150  #   time for which bird go up
2022-06-16T11:21:42.8384147Z                        ^
2022-06-16T11:21:42.8384607Z ./flappyBird_pygame/flappy_bird.py:73:16: F405 'Rect' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8384769Z         return Rect(self.x, self.y, Bird.WIDTH, Bird.HEIGHT)
2022-06-16T11:21:42.8384837Z                ^
2022-06-16T11:21:42.8385142Z ./flappyBird_pygame/flappy_bird.py:78:17: E262 inline comment should start with '# '
2022-06-16T11:21:42.8385251Z     WIDTH = 80  #    width of pipe
2022-06-16T11:21:42.8385339Z                 ^
2022-06-16T11:21:42.8385729Z ./flappyBird_pygame/flappy_bird.py:87:65: F405 'SRCALPHA' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8385920Z         self.image = pygame.Surface((PipePair.WIDTH, W_HEIGHT), SRCALPHA)
2022-06-16T11:21:42.8386038Z                                                                 ^
2022-06-16T11:21:42.8386227Z ./flappyBird_pygame/flappy_bird.py:96:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8386428Z             / PipePair.PIECE_HEIGHT  # 2 end pieces + 1 body piece  # to get number of pipe pieces
2022-06-16T11:21:42.8386561Z                                                                                         ^
2022-06-16T11:21:42.8387180Z ./flappyBird_pygame/flappy_bird.py:140:16: F405 'Rect' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8387340Z         return Rect(self.x, 0, PipePair.WIDTH, PipePair.PIECE_HEIGHT)
2022-06-16T11:21:42.8387413Z                ^
2022-06-16T11:21:42.8387660Z ./flappyBird_pygame/flappy_bird.py:187:1: C901 'main' is too complex (14)
2022-06-16T11:21:42.8387735Z def main():
2022-06-16T11:21:42.8387802Z ^
2022-06-16T11:21:42.8388116Z ./flappyBird_pygame/flappy_bird.py:222:26: F405 'QUIT' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8388266Z             if e.type == QUIT or (e.type == KEYUP and e.key == K_ESCAPE):
2022-06-16T11:21:42.8388345Z                          ^
2022-06-16T11:21:42.8388680Z ./flappyBird_pygame/flappy_bird.py:222:45: F405 'KEYUP' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8388820Z             if e.type == QUIT or (e.type == KEYUP and e.key == K_ESCAPE):
2022-06-16T11:21:42.8388915Z                                             ^
2022-06-16T11:21:42.8389253Z ./flappyBird_pygame/flappy_bird.py:222:64: F405 'K_ESCAPE' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8389389Z             if e.type == QUIT or (e.type == KEYUP and e.key == K_ESCAPE):
2022-06-16T11:21:42.8389487Z                                                                ^
2022-06-16T11:21:42.8389820Z ./flappyBird_pygame/flappy_bird.py:225:28: F405 'KEYUP' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8389953Z             elif e.type == KEYUP and e.key in (K_PAUSE, K_p):
2022-06-16T11:21:42.8390173Z                            ^
2022-06-16T11:21:42.8390545Z ./flappyBird_pygame/flappy_bird.py:225:48: F405 'K_PAUSE' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8390679Z             elif e.type == KEYUP and e.key in (K_PAUSE, K_p):
2022-06-16T11:21:42.8390775Z                                                ^
2022-06-16T11:21:42.8391103Z ./flappyBird_pygame/flappy_bird.py:225:57: F405 'K_p' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8391223Z             elif e.type == KEYUP and e.key in (K_PAUSE, K_p):
2022-06-16T11:21:42.8391401Z                                                         ^
2022-06-16T11:21:42.8391893Z ./flappyBird_pygame/flappy_bird.py:227:28: F405 'MOUSEBUTTONUP' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8392017Z             elif e.type == MOUSEBUTTONUP or (
2022-06-16T11:21:42.8392101Z                            ^
2022-06-16T11:21:42.8392457Z ./flappyBird_pygame/flappy_bird.py:228:27: F405 'KEYUP' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8392609Z                 e.type == KEYUP and e.key in (K_UP, K_RETURN, K_SPACE)
2022-06-16T11:21:42.8392692Z                           ^
2022-06-16T11:21:42.8393031Z ./flappyBird_pygame/flappy_bird.py:228:47: F405 'K_UP' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8393182Z                 e.type == KEYUP and e.key in (K_UP, K_RETURN, K_SPACE)
2022-06-16T11:21:42.8393281Z                                               ^
2022-06-16T11:21:42.8393637Z ./flappyBird_pygame/flappy_bird.py:228:53: F405 'K_RETURN' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8393786Z                 e.type == KEYUP and e.key in (K_UP, K_RETURN, K_SPACE)
2022-06-16T11:21:42.8393891Z                                                     ^
2022-06-16T11:21:42.8394250Z ./flappyBird_pygame/flappy_bird.py:228:63: F405 'K_SPACE' may be undefined, or defined from star imports: pygame.locals
2022-06-16T11:21:42.8394397Z                 e.type == KEYUP and e.key in (K_UP, K_RETURN, K_SPACE)
2022-06-16T11:21:42.8394509Z                                                               ^
2022-06-16T11:21:42.8394682Z ./Google_Image_Downloader/image_grapper.py:25:89: E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.8395040Z     "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11",
2022-06-16T11:21:42.8395166Z                                                                                         ^
2022-06-16T11:21:42.8395501Z ./Google_Image_Downloader/image_grapper.py:61:16: F841 local variable 'Type' is assigned to but never used
2022-06-16T11:21:42.8395664Z         (link, Type) = (json.loads(re.text)["ou"], json.loads(re.text)["ity"])
2022-06-16T11:21:42.8395844Z                ^
2022-06-16T11:21:42.8396018Z ./Google_Image_Downloader/image_grapper.py:94:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.8396311Z         # print('https://wallpaperscraft.com/image/' + re[31:-10] + '_' + re[-9:] + '.jpg')
2022-06-16T11:21:42.8396415Z                                                                                         ^
2022-06-16T11:21:42.8396849Z ./Google_Image_Downloader/image_grapper.py:116:10: B007 Loop control variable 'folders' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8396975Z     for (folders, subfolder, files) in walk(curdir):
2022-06-16T11:21:42.8397045Z          ^
2022-06-16T11:21:42.8397483Z ./Google_Image_Downloader/image_grapper.py:116:30: B007 Loop control variable 'files' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8397613Z     for (folders, subfolder, files) in walk(curdir):
2022-06-16T11:21:42.8397694Z                              ^
2022-06-16T11:21:42.8397962Z ./ultimate-phone-book/contacts.py:5:1: E266 too many leading '#' for block comment
2022-06-16T11:21:42.8398320Z ## check license it https://github.com/JymPatel/Python-FirstEdition/blob/Main/LICENSE
2022-06-16T11:21:42.8398385Z ^
2022-06-16T11:21:42.8398670Z ./ultimate-phone-book/contacts.py:11:1: E402 module level import not at top of file
2022-06-16T11:21:42.8398750Z import pickle
2022-06-16T11:21:42.8398814Z ^
2022-06-16T11:21:42.8399083Z ./ultimate-phone-book/contacts.py:12:1: E402 module level import not at top of file
2022-06-16T11:21:42.8399158Z import os
2022-06-16T11:21:42.8399223Z ^
2022-06-16T11:21:42.8399472Z ./ultimate-phone-book/contacts.py:33:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.8399904Z         print("check https://github.com/JymPatel/Python-FirstEdition/tree/Main/PyPrograms/contacts for key, it's free")
2022-06-16T11:21:42.8400024Z                                                                                         ^
2022-06-16T11:21:42.8400285Z ./ultimate-phone-book/contacts.py:37:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8400641Z     print("check https://github.com/JymPatel/Python-FirstEdition/tree/Main/PyPrograms/contacts for key, it's free")
2022-06-16T11:21:42.8400760Z                                                                                         ^
2022-06-16T11:21:42.8401037Z ./ultimate-phone-book/contacts.py:48:14: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8401149Z promptvar = 0 # variable for prompt
2022-06-16T11:21:42.8401208Z              ^
2022-06-16T11:21:42.8401477Z ./ultimate-phone-book/contacts.py:49:12: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8401587Z loopvar = 0 # variable for main loop
2022-06-16T11:21:42.8401660Z            ^
2022-06-16T11:21:42.8401913Z ./ultimate-phone-book/contacts.py:51:1: C901 'Loop 51' is too complex (30)
2022-06-16T11:21:42.8401997Z while loopvar < 1:
2022-06-16T11:21:42.8402062Z ^
2022-06-16T11:21:42.8402323Z ./ultimate-phone-book/contacts.py:80:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.8402488Z             print(f"{array[fname][i1]} {array[lname][i1]},  {array[number][i1]}  {array[email][i1]}")
2022-06-16T11:21:42.8402607Z                                                                                         ^
2022-06-16T11:21:42.8402847Z ./ultimate-phone-book/contacts.py:127:5: E303 too many blank lines (3)
2022-06-16T11:21:42.8402938Z     # if option 4 is selected
2022-06-16T11:21:42.8403005Z     ^
2022-06-16T11:21:42.8403323Z ./ultimate-phone-book/contacts.py:129:21: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.8403411Z         if keyacess == True:
2022-06-16T11:21:42.8403479Z                     ^
2022-06-16T11:21:42.8403715Z ./ultimate-phone-book/contacts.py:161:31: W291 trailing whitespace
2022-06-16T11:21:42.8403811Z             if promptvar == 0: 
2022-06-16T11:21:42.8403891Z                               ^
2022-06-16T11:21:42.8404126Z ./ultimate-phone-book/contacts.py:171:5: E303 too many blank lines (2)
2022-06-16T11:21:42.8404218Z     # if option 0 is selected
2022-06-16T11:21:42.8404283Z     ^
2022-06-16T11:21:42.8404505Z ./JARVIS/JARVIS.py:19:1: F401 'PIL.Image' imported but unused
2022-06-16T11:21:42.8404600Z from PIL import Image, ImageGrab
2022-06-16T11:21:42.8404663Z ^
2022-06-16T11:21:42.8404800Z ./JARVIS/JARVIS.py:22:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.8405099Z # for 30 seconds clip "Jarvis, clip that!" and discord ctrl+k quick-move (might not come to fruition)
2022-06-16T11:21:42.8405217Z                                                                                         ^
2022-06-16T11:21:42.8405475Z ./JARVIS/JARVIS.py:24:1: F401 'pynput.keyboard.Listener' imported but unused
2022-06-16T11:21:42.8405598Z from pynput.keyboard import Key, Listener
2022-06-16T11:21:42.8405652Z ^
2022-06-16T11:21:42.8405893Z ./JARVIS/JARVIS.py:25:1: F401 'pynput.mouse.Button' imported but unused
2022-06-16T11:21:42.8406020Z from pynput.mouse import Button, Controller
2022-06-16T11:21:42.8406086Z ^
2022-06-16T11:21:42.8406434Z ./JARVIS/JARVIS.py:28:1: F403 'from playsound import *' used; unable to detect undefined names
2022-06-16T11:21:42.8406570Z from playsound import *  # for sound output
2022-06-16T11:21:42.8406636Z ^
2022-06-16T11:21:42.8406761Z ./JARVIS/JARVIS.py:31:89: E501 line too long (145 > 88 characters)
2022-06-16T11:21:42.8407020Z import speech_recognition as sr  # speech_recognition Library for performing speech recognition with support for Google Speech Recognition, etc..
2022-06-16T11:21:42.8407137Z                                                                                         ^
2022-06-16T11:21:42.8407272Z ./JARVIS/JARVIS.py:55:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8407658Z     url = "http://newsapi.org/v2/top-headlines?sources=the-times-of-india&apiKey=yourapikey"
2022-06-16T11:21:42.8407775Z                                                                                         ^
2022-06-16T11:21:42.8408031Z ./JARVIS/JARVIS.py:104:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.8408123Z     except Exception as e:
2022-06-16T11:21:42.8408191Z     ^
2022-06-16T11:21:42.8408478Z ./JARVIS/JARVIS.py:114:5: F405 'playsound' may be undefined, or defined from star imports: playsound
2022-06-16T11:21:42.8408571Z     playsound("try.mp3")
2022-06-16T11:21:42.8408638Z     ^
2022-06-16T11:21:42.8409225Z ./JARVIS/JARVIS.py:125:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8409303Z     except:
2022-06-16T11:21:42.8409368Z     ^
2022-06-16T11:21:42.8409568Z ./JARVIS/JARVIS.py:125:5: E722 do not use bare 'except'
2022-06-16T11:21:42.8409639Z     except:
2022-06-16T11:21:42.8409692Z     ^
2022-06-16T11:21:42.8409830Z ./JARVIS/JARVIS.py:147:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8409896Z     """
2022-06-16T11:21:42.8409972Z class Jarvis:
2022-06-16T11:21:42.8410061Z     def __init__(self, Q):
2022-06-16T11:21:42.8410141Z         self.query = Q
2022-06-16T11:21:42.8410151Z 
2022-06-16T11:21:42.8410252Z     def sub_call(self, exe_file):
2022-06-16T11:21:42.8410347Z         '''
2022-06-16T11:21:42.8410531Z         This method can directly use call method of subprocess module and according to the
2022-06-16T11:21:42.8410665Z         argument(exe_file) passed it returns the output.
2022-06-16T11:21:42.8410672Z 
2022-06-16T11:21:42.8410893Z         exe_file:- must pass the exe file name as str object type.
2022-06-16T11:21:42.8410900Z 
2022-06-16T11:21:42.8411005Z         '''
2022-06-16T11:21:42.8411122Z         return subprocess.call([exe_file])
2022-06-16T11:21:42.8411129Z 
2022-06-16T11:21:42.8411215Z     def get_dict(self):
2022-06-16T11:21:42.8411317Z         '''
2022-06-16T11:21:42.8411484Z         This method returns the dictionary of important task that can be performed by the
2022-06-16T11:21:42.8411571Z         JARVIS module.
2022-06-16T11:21:42.8411580Z 
2022-06-16T11:21:42.8411764Z         Later on this can also be used by the user itself to add or update their preferred apps.
2022-06-16T11:21:42.8411869Z         '''
2022-06-16T11:21:42.8411951Z         _dict = dict(
2022-06-16T11:21:42.8412047Z             time=datetime.now(),
2022-06-16T11:21:42.8412202Z             notepad='Notepad.exe',
2022-06-16T11:21:42.8412340Z             calculator='calc.exe',
2022-06-16T11:21:42.8412497Z             stickynot='StickyNot.exe',
2022-06-16T11:21:42.8412650Z             shell='powershell.exe',
2022-06-16T11:21:42.8412795Z             paint='mspaint.exe',
2022-06-16T11:21:42.8412928Z             cmd='cmd.exe',
2022-06-16T11:21:42.8413175Z             browser='C:\\Program Files\\Internet Explorer\\iexplore.exe',
2022-06-16T11:21:42.8413244Z         )
2022-06-16T11:21:42.8413322Z         return _dict
2022-06-16T11:21:42.8413329Z 
2022-06-16T11:21:42.8413390Z     @property
2022-06-16T11:21:42.8413477Z     def get_app(self):
2022-06-16T11:21:42.8413651Z         task_dict = self.get_dict()
2022-06-16T11:21:42.8413783Z         task = task_dict.get(self.query, None)
2022-06-16T11:21:42.8413867Z         if task is None:
2022-06-16T11:21:42.8413971Z             engine.say("Sorry Try Again")
2022-06-16T11:21:42.8414067Z             engine.runAndWait()
2022-06-16T11:21:42.8414126Z         else:
2022-06-16T11:21:42.8414280Z             if 'exe' in str(task):
2022-06-16T11:21:42.8414387Z                 return self.sub_call(task)
2022-06-16T11:21:42.8414471Z             print(task)
2022-06-16T11:21:42.8414543Z             return
2022-06-16T11:21:42.8414551Z 
2022-06-16T11:21:42.8414623Z 
2022-06-16T11:21:42.8414696Z # =======
2022-06-16T11:21:42.8414762Z """
2022-06-16T11:21:42.8414818Z        
2022-06-16T11:21:42.8414887Z              
2022-06-16T11:21:42.8414967Z                           
2022-06-16T11:21:42.8415040Z                       
2022-06-16T11:21:42.8415047Z 
2022-06-16T11:21:42.8415117Z                ^
2022-06-16T11:21:42.8415262Z ./JARVIS/JARVIS.py:157:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.8415329Z     """
2022-06-16T11:21:42.8415393Z class Jarvis:
2022-06-16T11:21:42.8415480Z     def __init__(self, Q):
2022-06-16T11:21:42.8415561Z         self.query = Q
2022-06-16T11:21:42.8415567Z 
2022-06-16T11:21:42.8415783Z     def sub_call(self, exe_file):
2022-06-16T11:21:42.8415903Z         '''
2022-06-16T11:21:42.8416097Z         This method can directly use call method of subprocess module and according to the
2022-06-16T11:21:42.8416239Z         argument(exe_file) passed it returns the output.
2022-06-16T11:21:42.8416247Z 
2022-06-16T11:21:42.8416486Z         exe_file:- must pass the exe file name as str object type.
2022-06-16T11:21:42.8416493Z 
2022-06-16T11:21:42.8416599Z         '''
2022-06-16T11:21:42.8416711Z         return subprocess.call([exe_file])
2022-06-16T11:21:42.8416718Z 
2022-06-16T11:21:42.8416923Z     def get_dict(self):
2022-06-16T11:21:42.8417036Z         '''
2022-06-16T11:21:42.8417238Z         This method returns the dictionary of important task that can be performed by the
2022-06-16T11:21:42.8417328Z         JARVIS module.
2022-06-16T11:21:42.8417335Z 
2022-06-16T11:21:42.8417618Z         Later on this can also be used by the user itself to add or update their preferred apps.
2022-06-16T11:21:42.8417778Z         '''
2022-06-16T11:21:42.8417976Z         _dict = dict(
2022-06-16T11:21:42.8418149Z             time=datetime.now(),
2022-06-16T11:21:42.8418371Z             notepad='Notepad.exe',
2022-06-16T11:21:42.8418584Z             calculator='calc.exe',
2022-06-16T11:21:42.8418928Z             stickynot='StickyNot.exe',
2022-06-16T11:21:42.8419345Z             shell='powershell.exe',
2022-06-16T11:21:42.8419551Z             paint='mspaint.exe',
2022-06-16T11:21:42.8419894Z             cmd='cmd.exe',
2022-06-16T11:21:42.8420223Z             browser='C:\\Program Files\\Internet Explorer\\iexplore.exe',
2022-06-16T11:21:42.8420353Z         )
2022-06-16T11:21:42.8420430Z         return _dict
2022-06-16T11:21:42.8420489Z 
2022-06-16T11:21:42.8420565Z     @property
2022-06-16T11:21:42.8420697Z     def get_app(self):
2022-06-16T11:21:42.8421018Z         task_dict = self.get_dict()
2022-06-16T11:21:42.8421285Z         task = task_dict.get(self.query, None)
2022-06-16T11:21:42.8421409Z         if task is None:
2022-06-16T11:21:42.8421592Z             engine.say("Sorry Try Again")
2022-06-16T11:21:42.8421745Z             engine.runAndWait()
2022-06-16T11:21:42.8421805Z         else:
2022-06-16T11:21:42.8421994Z             if 'exe' in str(task):
2022-06-16T11:21:42.8422136Z                 return self.sub_call(task)
2022-06-16T11:21:42.8422262Z             print(task)
2022-06-16T11:21:42.8422371Z             return
2022-06-16T11:21:42.8422380Z 
2022-06-16T11:21:42.8422386Z 
2022-06-16T11:21:42.8422486Z # =======
2022-06-16T11:21:42.8422628Z """
2022-06-16T11:21:42.8422686Z        
2022-06-16T11:21:42.8422825Z              
2022-06-16T11:21:42.8422958Z                           
2022-06-16T11:21:42.8423068Z                       
2022-06-16T11:21:42.8423183Z 
2022-06-16T11:21:42.8423302Z                ^
2022-06-16T11:21:42.8423480Z ./JARVIS/JARVIS.py:160:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8423584Z     """
2022-06-16T11:21:42.8423648Z class Jarvis:
2022-06-16T11:21:42.8423770Z     def __init__(self, Q):
2022-06-16T11:21:42.8423890Z         self.query = Q
2022-06-16T11:21:42.8423897Z 
2022-06-16T11:21:42.8424089Z     def sub_call(self, exe_file):
2022-06-16T11:21:42.8424252Z         '''
2022-06-16T11:21:42.8424473Z         This method can directly use call method of subprocess module and according to the
2022-06-16T11:21:42.8424733Z         argument(exe_file) passed it returns the output.
2022-06-16T11:21:42.8424743Z 
2022-06-16T11:21:42.8425014Z         exe_file:- must pass the exe file name as str object type.
2022-06-16T11:21:42.8425021Z 
2022-06-16T11:21:42.8425113Z         '''
2022-06-16T11:21:42.8425272Z         return subprocess.call([exe_file])
2022-06-16T11:21:42.8425278Z 
2022-06-16T11:21:42.8425403Z     def get_dict(self):
2022-06-16T11:21:42.8425562Z         '''
2022-06-16T11:21:42.8425823Z         This method returns the dictionary of important task that can be performed by the
2022-06-16T11:21:42.8425945Z         JARVIS module.
2022-06-16T11:21:42.8425952Z 
2022-06-16T11:21:42.8426174Z         Later on this can also be used by the user itself to add or update their preferred apps.
2022-06-16T11:21:42.8426324Z         '''
2022-06-16T11:21:42.8426393Z         _dict = dict(
2022-06-16T11:21:42.8426531Z             time=datetime.now(),
2022-06-16T11:21:42.8426724Z             notepad='Notepad.exe',
2022-06-16T11:21:42.8426930Z             calculator='calc.exe',
2022-06-16T11:21:42.8427132Z             stickynot='StickyNot.exe',
2022-06-16T11:21:42.8427360Z             shell='powershell.exe',
2022-06-16T11:21:42.8427550Z             paint='mspaint.exe',
2022-06-16T11:21:42.8427670Z             cmd='cmd.exe',
2022-06-16T11:21:42.8427957Z             browser='C:\\Program Files\\Internet Explorer\\iexplore.exe',
2022-06-16T11:21:42.8428066Z         )
2022-06-16T11:21:42.8428182Z         return _dict
2022-06-16T11:21:42.8428191Z 
2022-06-16T11:21:42.8428351Z     @property
2022-06-16T11:21:42.8428488Z     def get_app(self):
2022-06-16T11:21:42.8428621Z         task_dict = self.get_dict()
2022-06-16T11:21:42.8428811Z         task = task_dict.get(self.query, None)
2022-06-16T11:21:42.8428890Z         if task is None:
2022-06-16T11:21:42.8429030Z             engine.say("Sorry Try Again")
2022-06-16T11:21:42.8429163Z             engine.runAndWait()
2022-06-16T11:21:42.8429268Z         else:
2022-06-16T11:21:42.8429465Z             if 'exe' in str(task):
2022-06-16T11:21:42.8429623Z                 return self.sub_call(task)
2022-06-16T11:21:42.8429743Z             print(task)
2022-06-16T11:21:42.8429805Z             return
2022-06-16T11:21:42.8429812Z 
2022-06-16T11:21:42.8429818Z 
2022-06-16T11:21:42.8429921Z # =======
2022-06-16T11:21:42.8430058Z """
2022-06-16T11:21:42.8430162Z        
2022-06-16T11:21:42.8442190Z              
2022-06-16T11:21:42.8442346Z                           
2022-06-16T11:21:42.8442422Z                       
2022-06-16T11:21:42.8442443Z 
2022-06-16T11:21:42.8442513Z                ^
2022-06-16T11:21:42.8442849Z ./JARVIS/JARVIS.py:192:1: C901 'get_app' is too complex (22)
2022-06-16T11:21:42.8442944Z def get_app(Q):
2022-06-16T11:21:42.8443020Z ^
2022-06-16T11:21:42.8443331Z ./JARVIS/JARVIS.py:234:17: F841 local variable 'audio' is assigned to but never used
2022-06-16T11:21:42.8443451Z                 audio = r.listen(source)
2022-06-16T11:21:42.8443533Z                 ^
2022-06-16T11:21:42.8443819Z ./JARVIS/JARVIS.py:275:5: F841 local variable 'apps' is assigned to but never used
2022-06-16T11:21:42.8443906Z     apps = {
2022-06-16T11:21:42.8443984Z     ^
2022-06-16T11:21:42.8444233Z ./JARVIS/JARVIS.py:283:38: W605 invalid escape sequence '\I'
2022-06-16T11:21:42.8444424Z         "browser": "C:\\Program Files\Internet Explorer\iexplore.exe",
2022-06-16T11:21:42.8444710Z                                      ^
2022-06-16T11:21:42.8444984Z ./JARVIS/JARVIS.py:283:56: W605 invalid escape sequence '\i'
2022-06-16T11:21:42.8445152Z         "browser": "C:\\Program Files\Internet Explorer\iexplore.exe",
2022-06-16T11:21:42.8445263Z                                                        ^
2022-06-16T11:21:42.8445503Z ./JARVIS/JARVIS.py:284:68: W605 invalid escape sequence '\M'
2022-06-16T11:21:42.8445729Z         "vscode": "C:\\Users\\Users\\User\\AppData\\Local\\Programs\Microsoft VS Code"
2022-06-16T11:21:42.8445855Z                                                                    ^
2022-06-16T11:21:42.8446290Z ./Flappy Bird - created with tkinter/Flappy Bird.py:34:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8446649Z         # Se o tamanho da largura e altura da janela forem definidos, eles serão usados no jogo.
2022-06-16T11:21:42.8446786Z                                                                                         ^
2022-06-16T11:21:42.8447118Z ./Flappy Bird - created with tkinter/Flappy Bird.py:35:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8447570Z         # Caso eles tenham o valor None, o tamanho da janela será o tamanho do monitor do usuário.
2022-06-16T11:21:42.8447703Z                                                                                         ^
2022-06-16T11:21:42.8448191Z ./Flappy Bird - created with tkinter/Flappy Bird.py:129:9: F841 local variable 'height' is assigned to but never used
2022-06-16T11:21:42.8448334Z         height = (self.__height // 100) * self.button_height
2022-06-16T11:21:42.8448408Z         ^
2022-06-16T11:21:42.8448729Z ./Flappy Bird - created with tkinter/Flappy Bird.py:288:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8448805Z         """
2022-06-16T11:21:42.8449088Z         Método para iniciar o programa em si, criando toda a parte gráfica inicial do jogo
2022-06-16T11:21:42.8449166Z         """
2022-06-16T11:21:42.8449239Z            
2022-06-16T11:21:42.8449367Z                                                                             ^
2022-06-16T11:21:42.8449658Z ./Flappy Bird - created with tkinter/Bird.py:33:89: E501 line too long (101 > 88 characters)
2022-06-16T11:21:42.8449980Z         # Verifica se "background" é uma instância de Background e se o "gamerover_method" é chamável
2022-06-16T11:21:42.8450108Z                                                                                         ^
2022-06-16T11:21:42.8450395Z ./Flappy Bird - created with tkinter/Bird.py:93:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8450456Z         """
2022-06-16T11:21:42.8450755Z         Método para verificar se o pássaro ultrapassou a borda da janela ou colidiu com algo
2022-06-16T11:21:42.8450837Z         """
2022-06-16T11:21:42.8450908Z            
2022-06-16T11:21:42.8451030Z                                                                             ^
2022-06-16T11:21:42.8451318Z ./Flappy Bird - created with tkinter/Bird.py:99:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8451632Z         # Se o pássaro tiver ultrapassado a borda de baixo do background, ele será declarado morto
2022-06-16T11:21:42.8451751Z                                                                                         ^
2022-06-16T11:21:42.8452024Z ./Flappy Bird - created with tkinter/Bird.py:103:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.8452331Z         # Se o pássaro tiver ultrapassado a borda de cima do background, ele será declarado morto
2022-06-16T11:21:42.8452461Z                                                                                         ^
2022-06-16T11:21:42.8452756Z ./Flappy Bird - created with tkinter/Bird.py:145:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.8452830Z         """
2022-06-16T11:21:42.8453059Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8453171Z         (photoImage, new, original)
2022-06-16T11:21:42.8453180Z 
2022-06-16T11:21:42.8453474Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8453699Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8453798Z         @param width: Largura da imagem
2022-06-16T11:21:42.8453910Z         @param height: Altura da imagem
2022-06-16T11:21:42.8454226Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8454302Z         """
2022-06-16T11:21:42.8454375Z            
2022-06-16T11:21:42.8454499Z                                                                             ^
2022-06-16T11:21:42.8454791Z ./Flappy Bird - created with tkinter/Bird.py:152:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8454930Z         """
2022-06-16T11:21:42.8455160Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8455269Z         (photoImage, new, original)
2022-06-16T11:21:42.8455278Z 
2022-06-16T11:21:42.8455500Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8455699Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8455813Z         @param width: Largura da imagem
2022-06-16T11:21:42.8455924Z         @param height: Altura da imagem
2022-06-16T11:21:42.8456235Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8456296Z         """
2022-06-16T11:21:42.8456369Z            
2022-06-16T11:21:42.8456490Z                                                                             ^
2022-06-16T11:21:42.8456772Z ./Flappy Bird - created with tkinter/Bird.py:184:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8456961Z         # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
2022-06-16T11:21:42.8457085Z                                                                                         ^
2022-06-16T11:21:42.8457386Z ./Flappy Bird - created with tkinter/Bird.py:237:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.8457715Z         # Enquanto o pássaro não tiver chegado em sua velocidade máxima, a velocidade aumentará em 0.05
2022-06-16T11:21:42.8457831Z                                                                                         ^
2022-06-16T11:21:42.8458126Z ./Flappy Bird - created with tkinter/Tubes.py:36:89: E501 line too long (126 > 88 characters)
2022-06-16T11:21:42.8458360Z                 "The parameter fp should be a sequence containing the path of the images of the tube body and the tube mouth."
2022-06-16T11:21:42.8458489Z                                                                                         ^
2022-06-16T11:21:42.8458786Z ./Flappy Bird - created with tkinter/Tubes.py:69:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.8458980Z         # Cria uma lista somente para guardar as imagens futuras dos corpos dos tubos gerados
2022-06-16T11:21:42.8459272Z                                                                                         ^
2022-06-16T11:21:42.8459590Z ./Flappy Bird - created with tkinter/Tubes.py:108:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.8459903Z         # Define uma posição Y para o tubo aleatóriamente respeitando algumas regras que são:
2022-06-16T11:21:42.8460014Z                                                                                         ^
2022-06-16T11:21:42.8460310Z ./Flappy Bird - created with tkinter/Tubes.py:123:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.8460630Z         # Cria uma nova imagem na lista de imagens com a altura sendo igual a posição Y do tubo de cima
2022-06-16T11:21:42.8460764Z                                                                                         ^
2022-06-16T11:21:42.8461060Z ./Flappy Bird - created with tkinter/Tubes.py:144:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.8461200Z         ###############################################################################################################
2022-06-16T11:21:42.8461430Z                                                                                         ^
2022-06-16T11:21:42.8461741Z ./Flappy Bird - created with tkinter/Tubes.py:145:89: E501 line too long (119 > 88 characters)
2022-06-16T11:21:42.8461881Z         ###############################################################################################################
2022-06-16T11:21:42.8461994Z                                                                                         ^
2022-06-16T11:21:42.8462281Z ./Flappy Bird - created with tkinter/Tubes.py:150:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.8462732Z         # A posição Y do tubo de baixo é calculada com base na posição do tubo de cima, mais o tamanho do pássaro
2022-06-16T11:21:42.8462859Z                                                                                         ^
2022-06-16T11:21:42.8463153Z ./Flappy Bird - created with tkinter/Tubes.py:163:89: E501 line too long (104 > 88 characters)
2022-06-16T11:21:42.8463478Z         # Cria uma nova imagem na lista de imagens com a altura sendo igual a posição Y do tubo de baixo
2022-06-16T11:21:42.8463606Z                                                                                         ^
2022-06-16T11:21:42.8463896Z ./Flappy Bird - created with tkinter/Tubes.py:207:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.8463973Z         """
2022-06-16T11:21:42.8464189Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8464419Z         (photoImage, new, original)
2022-06-16T11:21:42.8464435Z 
2022-06-16T11:21:42.8464784Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8464999Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8465121Z         @param width: Largura da imagem
2022-06-16T11:21:42.8465242Z         @param height: Altura da imagem
2022-06-16T11:21:42.8465582Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8465667Z         """
2022-06-16T11:21:42.8465731Z            
2022-06-16T11:21:42.8465860Z                                                                             ^
2022-06-16T11:21:42.8466176Z ./Flappy Bird - created with tkinter/Tubes.py:214:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8466254Z         """
2022-06-16T11:21:42.8466495Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8466612Z         (photoImage, new, original)
2022-06-16T11:21:42.8466626Z 
2022-06-16T11:21:42.8466847Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8467057Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8467164Z         @param width: Largura da imagem
2022-06-16T11:21:42.8467282Z         @param height: Altura da imagem
2022-06-16T11:21:42.8467622Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8467702Z         """
2022-06-16T11:21:42.8467780Z            
2022-06-16T11:21:42.8467908Z                                                                             ^
2022-06-16T11:21:42.8468221Z ./Flappy Bird - created with tkinter/Tubes.py:246:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8468423Z         # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
2022-06-16T11:21:42.8468542Z                                                                                         ^
2022-06-16T11:21:42.8468856Z ./Flappy Bird - created with tkinter/Tubes.py:261:89: E501 line too long (102 > 88 characters)
2022-06-16T11:21:42.8469202Z                 # Verifica se o pássaro passou do tubo. Caso sim, o método para pontuar será executado
2022-06-16T11:21:42.8469334Z                                                                                         ^
2022-06-16T11:21:42.8469721Z ./Flappy Bird - created with tkinter/Tubes.py:267:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.8470092Z                     # Se a posição "x2" do tubo for menor que a posição "x1" do pássaro e se ainda não tiver sido
2022-06-16T11:21:42.8470226Z                                                                                         ^
2022-06-16T11:21:42.8470539Z ./Flappy Bird - created with tkinter/Tubes.py:275:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.8470889Z                                 # Chama o método para pontuar e adiciona o tubo pontuado à lista de tubos passados
2022-06-16T11:21:42.8471011Z                                                                                         ^
2022-06-16T11:21:42.8471420Z ./Flappy Bird - created with tkinter/Tubes.py:286:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.8471502Z         """
2022-06-16T11:21:42.8471936Z         Método para gerar os tubos no background e fazer a sua animação em um loop infinito
2022-06-16T11:21:42.8472009Z         """
2022-06-16T11:21:42.8472087Z            
2022-06-16T11:21:42.8472202Z                                                                             ^
2022-06-16T11:21:42.8472461Z ./Flappy Bird - created with tkinter/Tubes.py:293:89: E501 line too long (93 > 88 characters)
2022-06-16T11:21:42.8472740Z         # Se os tubos ( cima e baixo ) de uma posição X tiverem sumido da área do background,
2022-06-16T11:21:42.8472859Z                                                                                         ^
2022-06-16T11:21:42.8473135Z ./Flappy Bird - created with tkinter/Tubes.py:315:89: E501 line too long (105 > 88 characters)
2022-06-16T11:21:42.8473444Z         # Se a distancia entre o último tubo criado e o lado "x2" do background for maior que a distância
2022-06-16T11:21:42.8473562Z                                                                                         ^
2022-06-16T11:21:42.8473879Z ./Flappy Bird - created with tkinter/Settings.py:104:20: C408 Unnecessary dict call - rewrite as a literal.
2022-06-16T11:21:42.8473967Z             data = dict()
2022-06-16T11:21:42.8474043Z                    ^
2022-06-16T11:21:42.8474321Z ./Flappy Bird - created with tkinter/Background.py:42:89: E501 line too long (121 > 88 characters)
2022-06-16T11:21:42.8474662Z         # Cria uma imagem que será fixa, ou seja, que não fará parte da animação e serve em situações de bugs na animação
2022-06-16T11:21:42.8474779Z                                                                                         ^
2022-06-16T11:21:42.8475072Z ./Flappy Bird - created with tkinter/Background.py:72:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.8475149Z         """
2022-06-16T11:21:42.8475361Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8475463Z         (photoImage, new, original)
2022-06-16T11:21:42.8475471Z 
2022-06-16T11:21:42.8475667Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8475845Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8475950Z         @param width: Largura da imagem
2022-06-16T11:21:42.8476054Z         @param height: Altura da imagem
2022-06-16T11:21:42.8476344Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8476415Z         """
2022-06-16T11:21:42.8476482Z            
2022-06-16T11:21:42.8476588Z                                                                             ^
2022-06-16T11:21:42.8476867Z ./Flappy Bird - created with tkinter/Background.py:79:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8476930Z         """
2022-06-16T11:21:42.8477139Z         Retorna um objeto da classe PIL.ImageTk.PhotoImage de uma imagem e as imagens criadas de PIL.Image
2022-06-16T11:21:42.8480386Z         (photoImage, new, original)
2022-06-16T11:21:42.8480417Z 
2022-06-16T11:21:42.8480730Z         @param image: Instância de PIL.Image.open
2022-06-16T11:21:42.8481082Z         @param image_path: Diretório da imagem
2022-06-16T11:21:42.8481210Z         @param width: Largura da imagem
2022-06-16T11:21:42.8481317Z         @param height: Altura da imagem
2022-06-16T11:21:42.8481629Z         @param closeAfter: Se True, a imagem será fechada após ser criado um PhotoImage da mesma
2022-06-16T11:21:42.8481689Z         """
2022-06-16T11:21:42.8481759Z            
2022-06-16T11:21:42.8481877Z                                                                             ^
2022-06-16T11:21:42.8482177Z ./Flappy Bird - created with tkinter/Background.py:111:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8482453Z         # Retorna o PhotoImage da imagem,a nova imagem que foi utilizada e a imagem original
2022-06-16T11:21:42.8482574Z                                                                                         ^
2022-06-16T11:21:42.8482876Z ./Flappy Bird - created with tkinter/Background.py:116:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.8482949Z         """
2022-06-16T11:21:42.8483233Z         Método para resetar o background, apagando todos os itens que não sejam o plano de fundo
2022-06-16T11:21:42.8483305Z         """
2022-06-16T11:21:42.8483365Z            
2022-06-16T11:21:42.8483470Z                                                                             ^
2022-06-16T11:21:42.8483762Z ./Flappy Bird - created with tkinter/Background.py:128:89: E501 line too long (121 > 88 characters)
2022-06-16T11:21:42.8485515Z         # Cria uma imagem que será fixa, ou seja, que não fará parte da animação e serve em situações de bugs na animação
2022-06-16T11:21:42.8485699Z                                                                                         ^
2022-06-16T11:21:42.8486109Z ./Flappy Bird - created with tkinter/Background.py:152:89: E501 line too long (89 > 88 characters)
2022-06-16T11:21:42.8486425Z         # Enquanto o atributo "stop" for False, a animação continuará em um loop infinito
2022-06-16T11:21:42.8486576Z                                                                                         ^
2022-06-16T11:21:42.8486914Z ./Flappy Bird - created with tkinter/Background.py:162:89: E501 line too long (120 > 88 characters)
2022-06-16T11:21:42.8487296Z             # Se a primeira imagem da lista tiver saído da área do widget, uma nova será criada depois da segunda imagem
2022-06-16T11:21:42.8487436Z                                                                                         ^
2022-06-16T11:21:42.8487795Z ./bank_managment_system/frontend.py:3:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.8487899Z from tkinter import *
2022-06-16T11:21:42.8487983Z ^
2022-06-16T11:21:42.8488337Z ./bank_managment_system/frontend.py:42:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8488439Z             label = Label(
2022-06-16T11:21:42.8488519Z                     ^
2022-06-16T11:21:42.8488889Z ./bank_managment_system/frontend.py:47:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8489081Z             button = Button(create_employee_frame, text="Exit", command=delete_create)
2022-06-16T11:21:42.8489171Z                      ^
2022-06-16T11:21:42.8489534Z ./bank_managment_system/frontend.py:50:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8489723Z             label = Label(create_employee_frame, text="Please fill all entries")
2022-06-16T11:21:42.8489796Z                     ^
2022-06-16T11:21:42.8490162Z ./bank_managment_system/frontend.py:53:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8490355Z             button = Button(create_employee_frame, text="Exit", command=delete_create)
2022-06-16T11:21:42.8490443Z                      ^
2022-06-16T11:21:42.8490804Z ./bank_managment_system/frontend.py:56:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8490908Z     frame1.grid_forget()
2022-06-16T11:21:42.8491163Z     ^
2022-06-16T11:21:42.8491568Z ./bank_managment_system/frontend.py:58:29: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8491696Z     create_employee_frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8491789Z                             ^
2022-06-16T11:21:42.8492138Z ./bank_managment_system/frontend.py:61:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8492318Z     label = Label(create_employee_frame, text="Customer Detail", font="bold")
2022-06-16T11:21:42.8492399Z             ^
2022-06-16T11:21:42.8492761Z ./bank_managment_system/frontend.py:63:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8493018Z     label = Label(create_employee_frame, text="Name", font="bold")
2022-06-16T11:21:42.8493099Z             ^
2022-06-16T11:21:42.8493450Z ./bank_managment_system/frontend.py:66:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8493589Z     entry5 = Entry(create_employee_frame)
2022-06-16T11:21:42.8493671Z              ^
2022-06-16T11:21:42.8494030Z ./bank_managment_system/frontend.py:68:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8494194Z     label = Label(create_employee_frame, text="Age", font="bold")
2022-06-16T11:21:42.8494278Z             ^
2022-06-16T11:21:42.8494635Z ./bank_managment_system/frontend.py:71:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8494763Z     entry6 = Entry(create_employee_frame)
2022-06-16T11:21:42.8494830Z              ^
2022-06-16T11:21:42.8495191Z ./bank_managment_system/frontend.py:73:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8495365Z     label = Label(create_employee_frame, text="address", font="bold")
2022-06-16T11:21:42.8495444Z             ^
2022-06-16T11:21:42.8495799Z ./bank_managment_system/frontend.py:76:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8495927Z     entry7 = Entry(create_employee_frame)
2022-06-16T11:21:42.8496007Z              ^
2022-06-16T11:21:42.8496363Z ./bank_managment_system/frontend.py:78:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8496525Z     label = Label(create_employee_frame, text="Balance", font="bold")
2022-06-16T11:21:42.8496604Z             ^
2022-06-16T11:21:42.8496953Z ./bank_managment_system/frontend.py:81:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8497079Z     entry8 = Entry(create_employee_frame)
2022-06-16T11:21:42.8497164Z              ^
2022-06-16T11:21:42.8497519Z ./bank_managment_system/frontend.py:83:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8497701Z     label = Label(create_employee_frame, text="Account Type", font="bold")
2022-06-16T11:21:42.8497772Z             ^
2022-06-16T11:21:42.8498115Z ./bank_managment_system/frontend.py:85:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8498291Z     label = Label(create_employee_frame, text="Mobile number", font="bold")
2022-06-16T11:21:42.8498369Z             ^
2022-06-16T11:21:42.8498721Z ./bank_managment_system/frontend.py:88:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8498849Z     entry9 = Entry(create_employee_frame)
2022-06-16T11:21:42.8498929Z              ^
2022-06-16T11:21:42.8499464Z ./bank_managment_system/frontend.py:91:15: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8507930Z     entry10 = Entry(create_employee_frame)
2022-06-16T11:21:42.8508077Z               ^
2022-06-16T11:21:42.8508526Z ./bank_managment_system/frontend.py:93:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8508622Z     button = Button(
2022-06-16T11:21:42.8508702Z              ^
2022-06-16T11:21:42.8509278Z ./bank_managment_system/frontend.py:98:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8509390Z     mainloop()
2022-06-16T11:21:42.8509468Z     ^
2022-06-16T11:21:42.8509835Z ./bank_managment_system/frontend.py:102:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8509942Z     frame1.grid_forget()
2022-06-16T11:21:42.8510021Z     ^
2022-06-16T11:21:42.8510384Z ./bank_managment_system/frontend.py:104:20: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8510492Z     search_frame = Frame(tk)
2022-06-16T11:21:42.8510668Z                    ^
2022-06-16T11:21:42.8511032Z ./bank_managment_system/frontend.py:107:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8511197Z     label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8511279Z             ^
2022-06-16T11:21:42.8511646Z ./bank_managment_system/frontend.py:111:15: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8511762Z     entry11 = Entry(search_frame)
2022-06-16T11:21:42.8511843Z               ^
2022-06-16T11:21:42.8512196Z ./bank_managment_system/frontend.py:114:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8512360Z     button = Button(search_frame, text="Search", command=show)
2022-06-16T11:21:42.8512441Z              ^
2022-06-16T11:21:42.8512798Z ./bank_managment_system/frontend.py:117:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8512889Z     mainloop()
2022-06-16T11:21:42.8512965Z     ^
2022-06-16T11:21:42.8513341Z ./bank_managment_system/frontend.py:133:20: E712 comparison to False should be 'if cond is not False:' or 'if cond:'
2022-06-16T11:21:42.8513444Z         if details != False:
2022-06-16T11:21:42.8513531Z                    ^
2022-06-16T11:21:42.8513897Z ./bank_managment_system/frontend.py:136:26: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8514010Z             show_frame = Frame(tk)
2022-06-16T11:21:42.8514086Z                          ^
2022-06-16T11:21:42.8514443Z ./bank_managment_system/frontend.py:139:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8514540Z             label = Label(
2022-06-16T11:21:42.8514627Z                     ^
2022-06-16T11:21:42.8514988Z ./bank_managment_system/frontend.py:143:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8515175Z             label = Label(show_frame, text="Name:\t{}".format(details[1]), font="bold")
2022-06-16T11:21:42.8515264Z                     ^
2022-06-16T11:21:42.8515607Z ./bank_managment_system/frontend.py:145:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8515798Z             label = Label(show_frame, text="Age:\t{}".format(details[2]), font="bold")
2022-06-16T11:21:42.8515888Z                     ^
2022-06-16T11:21:42.8516241Z ./bank_managment_system/frontend.py:147:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8516338Z             label = Label(
2022-06-16T11:21:42.8516423Z                     ^
2022-06-16T11:21:42.8516771Z ./bank_managment_system/frontend.py:151:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8516867Z             label = Label(
2022-06-16T11:21:42.8516938Z                     ^
2022-06-16T11:21:42.8517295Z ./bank_managment_system/frontend.py:155:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8517396Z             label = Label(
2022-06-16T11:21:42.8517481Z                     ^
2022-06-16T11:21:42.8517840Z ./bank_managment_system/frontend.py:159:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8517928Z             label = Label(
2022-06-16T11:21:42.8518004Z                     ^
2022-06-16T11:21:42.8518449Z ./bank_managment_system/frontend.py:163:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8518550Z             button = Button(
2022-06-16T11:21:42.8518642Z                      ^
2022-06-16T11:21:42.8519025Z ./bank_managment_system/frontend.py:173:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8519123Z             mainloop()
2022-06-16T11:21:42.8519204Z             ^
2022-06-16T11:21:42.8519568Z ./bank_managment_system/frontend.py:175:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8519820Z             label = Label(search_frame, text="Account Not Found")
2022-06-16T11:21:42.8519908Z                     ^
2022-06-16T11:21:42.8520261Z ./bank_managment_system/frontend.py:177:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8520439Z             button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8520535Z                      ^
2022-06-16T11:21:42.8520894Z ./bank_managment_system/frontend.py:181:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8521073Z         label = Label(search_frame, text="Enter correct account number")
2022-06-16T11:21:42.8521156Z                 ^
2022-06-16T11:21:42.8521515Z ./bank_managment_system/frontend.py:183:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8521687Z         button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8521756Z                  ^
2022-06-16T11:21:42.8522120Z ./bank_managment_system/frontend.py:188:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8522223Z     frame1.grid_forget()
2022-06-16T11:21:42.8522301Z     ^
2022-06-16T11:21:42.8522657Z ./bank_managment_system/frontend.py:203:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8522833Z                 label = Label(search_frame, text="invalid account number")
2022-06-16T11:21:42.8522923Z                         ^
2022-06-16T11:21:42.8523276Z ./bank_managment_system/frontend.py:205:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8523453Z                 button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8523534Z                          ^
2022-06-16T11:21:42.8523899Z ./bank_managment_system/frontend.py:207:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8523999Z                 mainloop()
2022-06-16T11:21:42.8524081Z                 ^
2022-06-16T11:21:42.8524445Z ./bank_managment_system/frontend.py:218:29: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8524555Z                 add_frame = Frame(tk)
2022-06-16T11:21:42.8524633Z                             ^
2022-06-16T11:21:42.8524994Z ./bank_managment_system/frontend.py:223:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8525095Z                 label = Label(
2022-06-16T11:21:42.8525184Z                         ^
2022-06-16T11:21:42.8525540Z ./bank_managment_system/frontend.py:228:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8525639Z                 label = Label(
2022-06-16T11:21:42.8525727Z                         ^
2022-06-16T11:21:42.8526079Z ./bank_managment_system/frontend.py:233:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8526218Z                 label = Label(add_frame, text="Enter Money")
2022-06-16T11:21:42.8526310Z                         ^
2022-06-16T11:21:42.8526664Z ./bank_managment_system/frontend.py:236:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8526785Z                 entry12 = Entry(add_frame)
2022-06-16T11:21:42.8526878Z                           ^
2022-06-16T11:21:42.8527323Z ./bank_managment_system/frontend.py:239:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8527513Z                 button = Button(add_frame, text="Add", command=update_money)
2022-06-16T11:21:42.8527604Z                          ^
2022-06-16T11:21:42.8527969Z ./bank_managment_system/frontend.py:242:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8528067Z                 mainloop()
2022-06-16T11:21:42.8528150Z                 ^
2022-06-16T11:21:42.8528509Z ./bank_managment_system/frontend.py:244:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8528773Z             label = Label(search_frame, text="Enter correct account number")
2022-06-16T11:21:42.8528861Z                     ^
2022-06-16T11:21:42.8529231Z ./bank_managment_system/frontend.py:246:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8529410Z             button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8529484Z                      ^
2022-06-16T11:21:42.8529856Z ./bank_managment_system/frontend.py:248:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8529951Z             mainloop()
2022-06-16T11:21:42.8530030Z             ^
2022-06-16T11:21:42.8530384Z ./bank_managment_system/frontend.py:252:24: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8530490Z         search_frame = Frame(tk)
2022-06-16T11:21:42.8530580Z                        ^
2022-06-16T11:21:42.8530928Z ./bank_managment_system/frontend.py:255:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8531109Z         label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8531191Z                 ^
2022-06-16T11:21:42.8531548Z ./bank_managment_system/frontend.py:259:19: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8531666Z         entry11 = Entry(search_frame)
2022-06-16T11:21:42.8531748Z                   ^
2022-06-16T11:21:42.8532108Z ./bank_managment_system/frontend.py:262:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8532295Z         button = Button(search_frame, text="Search", command=search_in_database)
2022-06-16T11:21:42.8532363Z                  ^
2022-06-16T11:21:42.8532732Z ./bank_managment_system/frontend.py:265:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8532823Z         mainloop()
2022-06-16T11:21:42.8532906Z         ^
2022-06-16T11:21:42.8533268Z ./bank_managment_system/frontend.py:271:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8533372Z     frame1.grid_forget()
2022-06-16T11:21:42.8533451Z     ^
2022-06-16T11:21:42.8533809Z ./bank_managment_system/frontend.py:286:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8533969Z                 label = Label(search_frame, text="invalid account number")
2022-06-16T11:21:42.8534058Z                         ^
2022-06-16T11:21:42.8534420Z ./bank_managment_system/frontend.py:288:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8534595Z                 button = Button(search_frame, text="Exit", command=go_page2)
2022-06-16T11:21:42.8534685Z                          ^
2022-06-16T11:21:42.8535055Z ./bank_managment_system/frontend.py:290:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8535156Z                 mainloop()
2022-06-16T11:21:42.8535241Z                 ^
2022-06-16T11:21:42.8535705Z ./bank_managment_system/frontend.py:300:33: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8535875Z                         label = Label(search_frame, text="Insufficient Balance")
2022-06-16T11:21:42.8536042Z                                 ^
2022-06-16T11:21:42.8536408Z ./bank_managment_system/frontend.py:303:34: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8536581Z                         button = Button(search_frame, text="Exit", command=go_page2)
2022-06-16T11:21:42.8536678Z                                  ^
2022-06-16T11:21:42.8537037Z ./bank_managment_system/frontend.py:306:25: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8537138Z                         mainloop()
2022-06-16T11:21:42.8537210Z                         ^
2022-06-16T11:21:42.8537646Z ./bank_managment_system/frontend.py:310:29: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8537755Z                 add_frame = Frame(tk)
2022-06-16T11:21:42.8537844Z                             ^
2022-06-16T11:21:42.8538192Z ./bank_managment_system/frontend.py:314:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8538295Z                 label = Label(
2022-06-16T11:21:42.8538382Z                         ^
2022-06-16T11:21:42.8538726Z ./bank_managment_system/frontend.py:319:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8538812Z                 label = Label(
2022-06-16T11:21:42.8538898Z                         ^
2022-06-16T11:21:42.8539579Z ./bank_managment_system/frontend.py:324:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8539725Z                 label = Label(add_frame, text="Enter Money")
2022-06-16T11:21:42.8539815Z                         ^
2022-06-16T11:21:42.8540159Z ./bank_managment_system/frontend.py:327:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8540274Z                 entry12 = Entry(add_frame)
2022-06-16T11:21:42.8540346Z                           ^
2022-06-16T11:21:42.8540682Z ./bank_managment_system/frontend.py:330:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8540846Z                 button = Button(add_frame, text="Withdraw", command=deduct_money)
2022-06-16T11:21:42.8540931Z                          ^
2022-06-16T11:21:42.8541275Z ./bank_managment_system/frontend.py:333:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8541366Z                 mainloop()
2022-06-16T11:21:42.8541442Z                 ^
2022-06-16T11:21:42.8541773Z ./bank_managment_system/frontend.py:335:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8541931Z             label = Label(search_frame, text="Enter correct account number")
2022-06-16T11:21:42.8542011Z                     ^
2022-06-16T11:21:42.8542388Z ./bank_managment_system/frontend.py:338:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8542552Z             button = Button(search_frame, text="Exit", command=go_page2)
2022-06-16T11:21:42.8542640Z                      ^
2022-06-16T11:21:42.8542989Z ./bank_managment_system/frontend.py:341:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8543080Z             mainloop()
2022-06-16T11:21:42.8543155Z             ^
2022-06-16T11:21:42.8543471Z ./bank_managment_system/frontend.py:345:24: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8543569Z         search_frame = Frame(tk)
2022-06-16T11:21:42.8543647Z                        ^
2022-06-16T11:21:42.8543982Z ./bank_managment_system/frontend.py:348:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8544154Z         label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8544231Z                 ^
2022-06-16T11:21:42.8544564Z ./bank_managment_system/frontend.py:352:19: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8544788Z         entry11 = Entry(search_frame)
2022-06-16T11:21:42.8544864Z                   ^
2022-06-16T11:21:42.8545212Z ./bank_managment_system/frontend.py:355:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8545390Z         button = Button(search_frame, text="Search", command=search_in_database)
2022-06-16T11:21:42.8545467Z                  ^
2022-06-16T11:21:42.8545814Z ./bank_managment_system/frontend.py:358:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8545899Z         mainloop()
2022-06-16T11:21:42.8545973Z         ^
2022-06-16T11:21:42.8546404Z ./bank_managment_system/frontend.py:364:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8546490Z     frame1.grid_forget()
2022-06-16T11:21:42.8546565Z     ^
2022-06-16T11:21:42.8546896Z ./bank_managment_system/frontend.py:380:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8547062Z                 label = Label(search_frame, text="invalid account number")
2022-06-16T11:21:42.8547152Z                         ^
2022-06-16T11:21:42.8547490Z ./bank_managment_system/frontend.py:382:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8547657Z                 button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8547859Z                          ^
2022-06-16T11:21:42.8548204Z ./bank_managment_system/frontend.py:384:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8548299Z                 mainloop()
2022-06-16T11:21:42.8548382Z                 ^
2022-06-16T11:21:42.8548728Z ./bank_managment_system/frontend.py:394:31: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8548838Z                 check_frame = Frame(tk)
2022-06-16T11:21:42.8548930Z                               ^
2022-06-16T11:21:42.8549278Z ./bank_managment_system/frontend.py:397:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8549363Z                 label = Label(
2022-06-16T11:21:42.8549451Z                         ^
2022-06-16T11:21:42.8549798Z ./bank_managment_system/frontend.py:402:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8549899Z                 button = Button(
2022-06-16T11:21:42.8549986Z                          ^
2022-06-16T11:21:42.8550338Z ./bank_managment_system/frontend.py:412:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8550432Z                 mainloop()
2022-06-16T11:21:42.8550515Z                 ^
2022-06-16T11:21:42.8550849Z ./bank_managment_system/frontend.py:414:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8551009Z             label = Label(search_frame, text="Enter correct entry")
2022-06-16T11:21:42.8551092Z                     ^
2022-06-16T11:21:42.8551442Z ./bank_managment_system/frontend.py:416:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8551611Z             button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8551696Z                      ^
2022-06-16T11:21:42.8552052Z ./bank_managment_system/frontend.py:418:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8552142Z             mainloop()
2022-06-16T11:21:42.8552205Z             ^
2022-06-16T11:21:42.8552551Z ./bank_managment_system/frontend.py:422:24: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8552660Z         search_frame = Frame(tk)
2022-06-16T11:21:42.8552745Z                        ^
2022-06-16T11:21:42.8553089Z ./bank_managment_system/frontend.py:425:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8553264Z         label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8553444Z                 ^
2022-06-16T11:21:42.8553811Z ./bank_managment_system/frontend.py:430:19: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8553909Z         entry11 = Entry(search_frame)
2022-06-16T11:21:42.8553989Z                   ^
2022-06-16T11:21:42.8554336Z ./bank_managment_system/frontend.py:433:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8554635Z         button = Button(search_frame, text="Search", command=search_in_database)
2022-06-16T11:21:42.8554714Z                  ^
2022-06-16T11:21:42.8555061Z ./bank_managment_system/frontend.py:436:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8555222Z         mainloop()
2022-06-16T11:21:42.8555282Z         ^
2022-06-16T11:21:42.8555559Z ./bank_managment_system/frontend.py:441:1: C901 'update' is too complex (15)
2022-06-16T11:21:42.8555644Z def update():
2022-06-16T11:21:42.8555716Z ^
2022-06-16T11:21:42.8555898Z ./bank_managment_system/frontend.py:451:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8556097Z         # defining a function whose makes a update entry and submit butoon side to name button
2022-06-16T11:21:42.8556226Z                                                                                         ^
2022-06-16T11:21:42.8556537Z ./bank_managment_system/frontend.py:456:17: F841 local variable 'r' is assigned to but never used
2022-06-16T11:21:42.8556658Z                 r = check_string_in_account_no(new_name)
2022-06-16T11:21:42.8556735Z                 ^
2022-06-16T11:21:42.8557072Z ./bank_managment_system/frontend.py:471:26: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8557242Z             name_label = Label(update_customer_frame, text="Enter new name")
2022-06-16T11:21:42.8557326Z                          ^
2022-06-16T11:21:42.8557663Z ./bank_managment_system/frontend.py:473:26: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8557803Z             entry_name = Entry(update_customer_frame)
2022-06-16T11:21:42.8557888Z                          ^
2022-06-16T11:21:42.8558213Z ./bank_managment_system/frontend.py:476:29: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8558317Z             submit_button = Button(
2022-06-16T11:21:42.8558404Z                             ^
2022-06-16T11:21:42.8558740Z ./bank_managment_system/frontend.py:500:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8558905Z             age_label = Label(update_customer_frame, text="Enter new Age:")
2022-06-16T11:21:42.8558993Z                         ^
2022-06-16T11:21:42.8559332Z ./bank_managment_system/frontend.py:503:26: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8559467Z             entry_name = Entry(update_customer_frame)
2022-06-16T11:21:42.8559538Z                          ^
2022-06-16T11:21:42.8559879Z ./bank_managment_system/frontend.py:506:29: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8559986Z             submit_button = Button(
2022-06-16T11:21:42.8560075Z                             ^
2022-06-16T11:21:42.8560411Z ./bank_managment_system/frontend.py:530:29: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8560589Z             address_label = Label(update_customer_frame, text="Enter new Address:")
2022-06-16T11:21:42.8560673Z                             ^
2022-06-16T11:21:42.8561005Z ./bank_managment_system/frontend.py:533:26: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8561131Z             entry_name = Entry(update_customer_frame)
2022-06-16T11:21:42.8561215Z                          ^
2022-06-16T11:21:42.8561552Z ./bank_managment_system/frontend.py:536:29: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8561657Z             submit_button = Button(
2022-06-16T11:21:42.8561818Z                             ^
2022-06-16T11:21:42.8562172Z ./bank_managment_system/frontend.py:549:41: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8562302Z                 update_customer_frame = Frame(tk)
2022-06-16T11:21:42.8562398Z                                         ^
2022-06-16T11:21:42.8562715Z ./bank_managment_system/frontend.py:552:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8562896Z                 label = Label(update_customer_frame, text="What do you want to update")
2022-06-16T11:21:42.8563065Z                         ^
2022-06-16T11:21:42.8563410Z ./bank_managment_system/frontend.py:555:31: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8563514Z                 name_button = Button(
2022-06-16T11:21:42.8563604Z                               ^
2022-06-16T11:21:42.8563943Z ./bank_managment_system/frontend.py:560:30: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8564046Z                 age_button = Button(
2022-06-16T11:21:42.8564120Z                              ^
2022-06-16T11:21:42.8564453Z ./bank_managment_system/frontend.py:565:34: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8564565Z                 address_button = Button(
2022-06-16T11:21:42.8564654Z                                  ^
2022-06-16T11:21:42.8564992Z ./bank_managment_system/frontend.py:570:31: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8565097Z                 exit_button = Button(
2022-06-16T11:21:42.8565185Z                               ^
2022-06-16T11:21:42.8565530Z ./bank_managment_system/frontend.py:576:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8565611Z                 mainloop()
2022-06-16T11:21:42.8565687Z                 ^
2022-06-16T11:21:42.8566025Z ./bank_managment_system/frontend.py:578:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8566186Z                 label = Label(search_frame, text="Invalid account number")
2022-06-16T11:21:42.8566270Z                         ^
2022-06-16T11:21:42.8566605Z ./bank_managment_system/frontend.py:581:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8566773Z                 button = Button(search_frame, text="Exit", command=back_to_page2)
2022-06-16T11:21:42.8566857Z                          ^
2022-06-16T11:21:42.8567182Z ./bank_managment_system/frontend.py:585:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8567338Z             label = Label(search_frame, text="Fill account number")
2022-06-16T11:21:42.8567420Z                     ^
2022-06-16T11:21:42.8567759Z ./bank_managment_system/frontend.py:588:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8567928Z             button = Button(search_frame, text="Exit", command=back_to_page2)
2022-06-16T11:21:42.8568010Z                      ^
2022-06-16T11:21:42.8568349Z ./bank_managment_system/frontend.py:591:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8568447Z     frame1.grid_forget()
2022-06-16T11:21:42.8568507Z     ^
2022-06-16T11:21:42.8568844Z ./bank_managment_system/frontend.py:595:20: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8568945Z     search_frame = Frame(tk)
2022-06-16T11:21:42.8569025Z                    ^
2022-06-16T11:21:42.8569363Z ./bank_managment_system/frontend.py:598:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8569530Z     label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8569605Z             ^
2022-06-16T11:21:42.8570121Z ./bank_managment_system/frontend.py:601:17: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8570245Z     entry_acc = Entry(search_frame)
2022-06-16T11:21:42.8570325Z                 ^
2022-06-16T11:21:42.8570682Z ./bank_managment_system/frontend.py:604:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8570774Z     button = Button(
2022-06-16T11:21:42.8570855Z              ^
2022-06-16T11:21:42.8571203Z ./bank_managment_system/frontend.py:615:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8571304Z     frame1.grid_forget()
2022-06-16T11:21:42.8571365Z     ^
2022-06-16T11:21:42.8571790Z ./bank_managment_system/frontend.py:620:18: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8571892Z     list_frame = Frame(tk)
2022-06-16T11:21:42.8571973Z                  ^
2022-06-16T11:21:42.8572315Z ./bank_managment_system/frontend.py:622:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8572407Z     label = Label(
2022-06-16T11:21:42.8572483Z             ^
2022-06-16T11:21:42.8572814Z ./bank_managment_system/frontend.py:627:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8572905Z         label = Label(
2022-06-16T11:21:42.8572984Z                 ^
2022-06-16T11:21:42.8573447Z ./bank_managment_system/frontend.py:635:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8573533Z     button = Button(
2022-06-16T11:21:42.8573608Z              ^
2022-06-16T11:21:42.8573949Z ./bank_managment_system/frontend.py:639:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8574037Z     mainloop()
2022-06-16T11:21:42.8574094Z     ^
2022-06-16T11:21:42.8574424Z ./bank_managment_system/frontend.py:643:5: F405 'frame1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8574519Z     frame1.grid_forget()
2022-06-16T11:21:42.8574590Z     ^
2022-06-16T11:21:42.8574920Z ./bank_managment_system/frontend.py:659:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8575080Z                 label = Label(search_frame, text="invalid account number")
2022-06-16T11:21:42.8575163Z                         ^
2022-06-16T11:21:42.8575591Z ./bank_managment_system/frontend.py:661:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8575748Z                 button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8575827Z                          ^
2022-06-16T11:21:42.8576151Z ./bank_managment_system/frontend.py:663:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8576239Z                 mainloop()
2022-06-16T11:21:42.8576310Z                 ^
2022-06-16T11:21:42.8576622Z ./bank_managment_system/frontend.py:669:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8576779Z             label = Label(search_frame, text="Enter correct account number")
2022-06-16T11:21:42.8576843Z                     ^
2022-06-16T11:21:42.8577158Z ./bank_managment_system/frontend.py:671:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8577310Z             button = Button(search_frame, text="Exit", command=back_page2)
2022-06-16T11:21:42.8577388Z                      ^
2022-06-16T11:21:42.8577701Z ./bank_managment_system/frontend.py:676:24: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8577800Z         search_frame = Frame(tk)
2022-06-16T11:21:42.8577881Z                        ^
2022-06-16T11:21:42.8578197Z ./bank_managment_system/frontend.py:679:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8578342Z         label = Label(search_frame, text="Enter account number", font="bold")
2022-06-16T11:21:42.8578414Z                 ^
2022-06-16T11:21:42.8578789Z ./bank_managment_system/frontend.py:683:19: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8578903Z         entry11 = Entry(search_frame)
2022-06-16T11:21:42.8578981Z                   ^
2022-06-16T11:21:42.8579565Z ./bank_managment_system/frontend.py:686:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8579732Z         button = Button(search_frame, text="Delete", command=search_in_database)
2022-06-16T11:21:42.8579807Z                  ^
2022-06-16T11:21:42.8580118Z ./bank_managment_system/frontend.py:689:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8580314Z         mainloop()
2022-06-16T11:21:42.8580386Z         ^
2022-06-16T11:21:42.8580707Z ./bank_managment_system/frontend.py:699:17: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8580808Z         frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8580884Z                 ^
2022-06-16T11:21:42.8581203Z ./bank_managment_system/frontend.py:702:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8581347Z         button = Button(frame, text="Admin", command=admin_login)
2022-06-16T11:21:42.8581406Z                  ^
2022-06-16T11:21:42.8581722Z ./bank_managment_system/frontend.py:705:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8581880Z         button = Button(frame, text="Employee", command=employee_login)
2022-06-16T11:21:42.8581952Z                  ^
2022-06-16T11:21:42.8582270Z ./bank_managment_system/frontend.py:708:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8582419Z         button = Button(frame, text="Exit", command=tk.destroy)
2022-06-16T11:21:42.8582492Z                  ^
2022-06-16T11:21:42.8582807Z ./bank_managment_system/frontend.py:714:14: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8582894Z     frame1 = Frame(tk, bg="black")
2022-06-16T11:21:42.8582969Z              ^
2022-06-16T11:21:42.8583283Z ./bank_managment_system/frontend.py:716:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8583458Z     button1 = Button(frame1, text="Create Account", command=create, width=20, height=2)
2022-06-16T11:21:42.8583533Z               ^
2022-06-16T11:21:42.8583850Z ./bank_managment_system/frontend.py:718:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8583934Z     button2 = Button(
2022-06-16T11:21:42.8583992Z               ^
2022-06-16T11:21:42.8584309Z ./bank_managment_system/frontend.py:722:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8584475Z     button3 = Button(frame1, text="Add balance", command=add, width=20, height=2)
2022-06-16T11:21:42.8584548Z               ^
2022-06-16T11:21:42.8584988Z ./bank_managment_system/frontend.py:724:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8585642Z     button4 = Button(
2022-06-16T11:21:42.8585756Z               ^
2022-06-16T11:21:42.8586180Z ./bank_managment_system/frontend.py:728:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8586357Z     button5 = Button(frame1, text="Check balance", command=check, width=20, height=2)
2022-06-16T11:21:42.8586441Z               ^
2022-06-16T11:21:42.8586801Z ./bank_managment_system/frontend.py:730:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8586996Z     button6 = Button(frame1, text="Update Account", command=update, width=20, height=2)
2022-06-16T11:21:42.8587081Z               ^
2022-06-16T11:21:42.8587438Z ./bank_managment_system/frontend.py:732:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8587537Z     button7 = Button(
2022-06-16T11:21:42.8587617Z               ^
2022-06-16T11:21:42.8588125Z ./bank_managment_system/frontend.py:736:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8588337Z     button8 = Button(frame1, text="Delete Account", command=delete, width=20, height=2)
2022-06-16T11:21:42.8588419Z               ^
2022-06-16T11:21:42.8589008Z ./bank_managment_system/frontend.py:739:15: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8589093Z     button9 = Button(
2022-06-16T11:21:42.8589164Z               ^
2022-06-16T11:21:42.8589491Z ./bank_managment_system/frontend.py:744:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8589650Z     mainloop()
2022-06-16T11:21:42.8589705Z     ^
2022-06-16T11:21:42.8590028Z ./bank_managment_system/frontend.py:768:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8590189Z             label = Label(frame_create_emp, text="Please fill all entries")
2022-06-16T11:21:42.8590268Z                     ^
2022-06-16T11:21:42.8590587Z ./bank_managment_system/frontend.py:771:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8590677Z             button = Button(
2022-06-16T11:21:42.8590756Z                      ^
2022-06-16T11:21:42.8591088Z ./bank_managment_system/frontend.py:779:5: F405 'page1_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8591174Z     page1_frame.grid_forget()
2022-06-16T11:21:42.8591242Z     ^
2022-06-16T11:21:42.8591599Z ./bank_managment_system/frontend.py:782:24: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8591721Z     frame_create_emp = Frame(tk, bg="black")
2022-06-16T11:21:42.8591805Z                        ^
2022-06-16T11:21:42.8592126Z ./bank_managment_system/frontend.py:785:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8592269Z     label = Label(frame_create_emp, text="Name:", font="bold")
2022-06-16T11:21:42.8592327Z             ^
2022-06-16T11:21:42.8592644Z ./bank_managment_system/frontend.py:788:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8592752Z     entry3 = Entry(frame_create_emp)
2022-06-16T11:21:42.8592825Z              ^
2022-06-16T11:21:42.8593141Z ./bank_managment_system/frontend.py:790:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8593293Z     label2 = Label(frame_create_emp, text="Password", font="bold")
2022-06-16T11:21:42.8593366Z              ^
2022-06-16T11:21:42.8593682Z ./bank_managment_system/frontend.py:793:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8593776Z     entry4 = Entry(frame_create_emp)
2022-06-16T11:21:42.8593846Z              ^
2022-06-16T11:21:42.8594159Z ./bank_managment_system/frontend.py:795:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8594305Z     label3 = Label(frame_create_emp, text="Salary", font="bold")
2022-06-16T11:21:42.8594378Z              ^
2022-06-16T11:21:42.8594690Z ./bank_managment_system/frontend.py:798:15: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8594795Z     entry16 = Entry(frame_create_emp)
2022-06-16T11:21:42.8594867Z               ^
2022-06-16T11:21:42.8595165Z ./bank_managment_system/frontend.py:800:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8595314Z     label4 = Label(frame_create_emp, text="Position", font="bold")
2022-06-16T11:21:42.8595385Z              ^
2022-06-16T11:21:42.8595696Z ./bank_managment_system/frontend.py:803:15: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8595804Z     entry17 = Entry(frame_create_emp)
2022-06-16T11:21:42.8595876Z               ^
2022-06-16T11:21:42.8596192Z ./bank_managment_system/frontend.py:806:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8596262Z     button = Button(
2022-06-16T11:21:42.8596415Z              ^
2022-06-16T11:21:42.8596763Z ./bank_managment_system/frontend.py:815:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8596843Z     mainloop()
2022-06-16T11:21:42.8596912Z     ^
2022-06-16T11:21:42.8597186Z ./bank_managment_system/frontend.py:818:1: C901 'update_employee' is too complex (19)
2022-06-16T11:21:42.8597279Z def update_employee():
2022-06-16T11:21:42.8597347Z ^
2022-06-16T11:21:42.8597646Z ./bank_managment_system/frontend.py:845:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8597759Z                 entry19 = Entry(update_frame)
2022-06-16T11:21:42.8597914Z                           ^
2022-06-16T11:21:42.8598239Z ./bank_managment_system/frontend.py:848:33: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8598342Z                 update_button = Button(
2022-06-16T11:21:42.8598427Z                                 ^
2022-06-16T11:21:42.8598750Z ./bank_managment_system/frontend.py:867:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8598862Z                 entry19 = Entry(update_frame)
2022-06-16T11:21:42.8598930Z                           ^
2022-06-16T11:21:42.8599245Z ./bank_managment_system/frontend.py:870:33: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8599345Z                 update_button = Button(
2022-06-16T11:21:42.8599428Z                                 ^
2022-06-16T11:21:42.8599740Z ./bank_managment_system/frontend.py:891:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8599856Z                 entry19 = Entry(update_frame)
2022-06-16T11:21:42.8599937Z                           ^
2022-06-16T11:21:42.8600349Z ./bank_managment_system/frontend.py:894:33: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8600458Z                 update_button = Button(
2022-06-16T11:21:42.8600549Z                                 ^
2022-06-16T11:21:42.8600885Z ./bank_managment_system/frontend.py:914:27: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8601003Z                 entry19 = Entry(update_frame)
2022-06-16T11:21:42.8601088Z                           ^
2022-06-16T11:21:42.8601422Z ./bank_managment_system/frontend.py:917:33: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8601528Z                 update_button = Button(
2022-06-16T11:21:42.8601603Z                                 ^
2022-06-16T11:21:42.8601935Z ./bank_managment_system/frontend.py:923:28: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8602045Z             update_frame = Frame(tk)
2022-06-16T11:21:42.8602132Z                            ^
2022-06-16T11:21:42.8602462Z ./bank_managment_system/frontend.py:926:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8602556Z             label = Label(
2022-06-16T11:21:42.8602641Z                     ^
2022-06-16T11:21:42.8602976Z ./bank_managment_system/frontend.py:931:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8603057Z             button = Button(
2022-06-16T11:21:42.8603139Z                      ^
2022-06-16T11:21:42.8603474Z ./bank_managment_system/frontend.py:940:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8603567Z             button = Button(
2022-06-16T11:21:42.8603648Z                      ^
2022-06-16T11:21:42.8604073Z ./bank_managment_system/frontend.py:949:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8604163Z             button = Button(
2022-06-16T11:21:42.8604225Z                      ^
2022-06-16T11:21:42.8604543Z ./bank_managment_system/frontend.py:958:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8604698Z             button = Button(
2022-06-16T11:21:42.8604785Z                      ^
2022-06-16T11:21:42.8605104Z ./bank_managment_system/frontend.py:967:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8605192Z             button = Button(
2022-06-16T11:21:42.8605268Z                      ^
2022-06-16T11:21:42.8605583Z ./bank_managment_system/frontend.py:983:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8605724Z                 label = Label(show_employee_frame, text="Employee not found")
2022-06-16T11:21:42.8605803Z                         ^
2022-06-16T11:21:42.8606201Z ./bank_managment_system/frontend.py:986:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8606371Z                 button = Button(show_employee_frame, text="Exit", command=back_to_page1)
2022-06-16T11:21:42.8606452Z                          ^
2022-06-16T11:21:42.8606770Z ./bank_managment_system/frontend.py:990:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8606920Z             label = Label(show_employee_frame, text="Fill the name")
2022-06-16T11:21:42.8606998Z                     ^
2022-06-16T11:21:42.8607299Z ./bank_managment_system/frontend.py:993:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8607462Z             button = Button(show_employee_frame, text="Exit", command=back_to_page1)
2022-06-16T11:21:42.8607539Z                      ^
2022-06-16T11:21:42.8607866Z ./bank_managment_system/frontend.py:997:5: F405 'page1_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8607969Z     page1_frame.grid_forget()
2022-06-16T11:21:42.8608038Z     ^
2022-06-16T11:21:42.8608351Z ./bank_managment_system/frontend.py:999:27: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8608457Z     show_employee_frame = Frame(tk)
2022-06-16T11:21:42.8608524Z                           ^
2022-06-16T11:21:42.8608844Z ./bank_managment_system/frontend.py:1002:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8608924Z     label = Label(
2022-06-16T11:21:42.8608995Z             ^
2022-06-16T11:21:42.8609308Z ./bank_managment_system/frontend.py:1008:18: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8609431Z     staff_name = Entry(show_employee_frame)
2022-06-16T11:21:42.8609504Z                  ^
2022-06-16T11:21:42.8609823Z ./bank_managment_system/frontend.py:1011:31: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8609921Z     update_butoon_for_staff = Button(
2022-06-16T11:21:42.8610004Z                               ^
2022-06-16T11:21:42.8610336Z ./bank_managment_system/frontend.py:1024:5: F405 'page1_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8610436Z     page1_frame.grid_forget()
2022-06-16T11:21:42.8610505Z     ^
2022-06-16T11:21:42.8610825Z ./bank_managment_system/frontend.py:1027:27: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8610930Z     show_employee_frame = Frame(tk)
2022-06-16T11:21:42.8610997Z                           ^
2022-06-16T11:21:42.8611455Z ./bank_managment_system/frontend.py:1030:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8611539Z     label = Label(
2022-06-16T11:21:42.8611613Z             ^
2022-06-16T11:21:42.8611945Z ./bank_managment_system/frontend.py:1040:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8612038Z         label = Label(
2022-06-16T11:21:42.8612114Z                 ^
2022-06-16T11:21:42.8612456Z ./bank_managment_system/frontend.py:1046:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8612530Z     button = Button(
2022-06-16T11:21:42.8612606Z              ^
2022-06-16T11:21:42.8613030Z ./bank_managment_system/frontend.py:1057:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8613126Z     mainloop()
2022-06-16T11:21:42.8613200Z     ^
2022-06-16T11:21:42.8613558Z ./bank_managment_system/frontend.py:1065:5: F405 'page1_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8613664Z     page1_frame.grid_forget()
2022-06-16T11:21:42.8613721Z     ^
2022-06-16T11:21:42.8614057Z ./bank_managment_system/frontend.py:1070:17: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8614261Z     all_money = Frame(tk)
2022-06-16T11:21:42.8614417Z                 ^
2022-06-16T11:21:42.8614745Z ./bank_managment_system/frontend.py:1073:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8614885Z     label = Label(all_money, text="Total Amount of money")
2022-06-16T11:21:42.8614957Z             ^
2022-06-16T11:21:42.8615276Z ./bank_managment_system/frontend.py:1076:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8615387Z     label = Label(all_money, text="{}".format(all))
2022-06-16T11:21:42.8615457Z             ^
2022-06-16T11:21:42.8615776Z ./bank_managment_system/frontend.py:1079:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8615860Z     button = Button(
2022-06-16T11:21:42.8615932Z              ^
2022-06-16T11:21:42.8616256Z ./bank_managment_system/frontend.py:1088:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8616335Z     mainloop()
2022-06-16T11:21:42.8616392Z     ^
2022-06-16T11:21:42.8616722Z ./bank_managment_system/frontend.py:1092:5: F405 'page1_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8616821Z     page1_frame.grid_forget()
2022-06-16T11:21:42.8616889Z     ^
2022-06-16T11:21:42.8617204Z ./bank_managment_system/frontend.py:1094:13: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8617304Z     frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8617375Z             ^
2022-06-16T11:21:42.8617694Z ./bank_managment_system/frontend.py:1097:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8617822Z     button = Button(frame, text="Admin", command=admin_login)
2022-06-16T11:21:42.8617894Z              ^
2022-06-16T11:21:42.8618208Z ./bank_managment_system/frontend.py:1100:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8618360Z     button = Button(frame, text="Employee", command=employee_login)
2022-06-16T11:21:42.8618433Z              ^
2022-06-16T11:21:42.8618751Z ./bank_managment_system/frontend.py:1103:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8618892Z     button = Button(frame, text="Exit", command=tk.destroy)
2022-06-16T11:21:42.8618964Z              ^
2022-06-16T11:21:42.8619444Z ./bank_managment_system/frontend.py:1107:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8619527Z     mainloop()
2022-06-16T11:21:42.8619596Z     ^
2022-06-16T11:21:42.8619919Z ./bank_managment_system/frontend.py:1115:17: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8620021Z         frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8620095Z                 ^
2022-06-16T11:21:42.8620413Z ./bank_managment_system/frontend.py:1118:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8620556Z         button = Button(frame, text="Admin", command=admin_login)
2022-06-16T11:21:42.8620619Z                  ^
2022-06-16T11:21:42.8620938Z ./bank_managment_system/frontend.py:1121:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8621215Z         button = Button(frame, text="Employee", command=employee_login)
2022-06-16T11:21:42.8621292Z                  ^
2022-06-16T11:21:42.8621726Z ./bank_managment_system/frontend.py:1124:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8621888Z         button = Button(frame, text="Exit", command=tk.destroy)
2022-06-16T11:21:42.8621965Z                  ^
2022-06-16T11:21:42.8622321Z ./bank_managment_system/frontend.py:1128:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8622391Z         mainloop()
2022-06-16T11:21:42.8622467Z         ^
2022-06-16T11:21:42.8622807Z ./bank_managment_system/frontend.py:1130:12: F405 'entry1' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8622982Z     name = entry1.get()
2022-06-16T11:21:42.8623061Z            ^
2022-06-16T11:21:42.8623408Z ./bank_managment_system/frontend.py:1131:16: F405 'entry2' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8623515Z     password = entry2.get()
2022-06-16T11:21:42.8623578Z                ^
2022-06-16T11:21:42.8623937Z ./bank_managment_system/frontend.py:1136:13: F405 'admin_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8624046Z             admin_frame.grid_forget()
2022-06-16T11:21:42.8624227Z             ^
2022-06-16T11:21:42.8624546Z ./bank_managment_system/frontend.py:1139:27: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8624663Z             page1_frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8624743Z                           ^
2022-06-16T11:21:42.8625060Z ./bank_managment_system/frontend.py:1142:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8625140Z             button10 = Button(
2022-06-16T11:21:42.8625218Z                        ^
2022-06-16T11:21:42.8625527Z ./bank_managment_system/frontend.py:1151:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8625610Z             button11 = Button(
2022-06-16T11:21:42.8625688Z                        ^
2022-06-16T11:21:42.8626010Z ./bank_managment_system/frontend.py:1160:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8626100Z             button13 = Button(
2022-06-16T11:21:42.8626164Z                        ^
2022-06-16T11:21:42.8626477Z ./bank_managment_system/frontend.py:1169:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8626565Z             button11 = Button(
2022-06-16T11:21:42.8626642Z                        ^
2022-06-16T11:21:42.8626951Z ./bank_managment_system/frontend.py:1174:24: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8627041Z             button12 = Button(
2022-06-16T11:21:42.8627117Z                        ^
2022-06-16T11:21:42.8627442Z ./bank_managment_system/frontend.py:1179:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8627512Z             mainloop()
2022-06-16T11:21:42.8627582Z             ^
2022-06-16T11:21:42.8627903Z ./bank_managment_system/frontend.py:1181:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8628057Z             label = Label(admin_frame, text="Invalid id and pasasword")
2022-06-16T11:21:42.8628134Z                     ^
2022-06-16T11:21:42.8628463Z ./bank_managment_system/frontend.py:1181:27: F405 'admin_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8628613Z             label = Label(admin_frame, text="Invalid id and pasasword")
2022-06-16T11:21:42.8628695Z                           ^
2022-06-16T11:21:42.8628997Z ./bank_managment_system/frontend.py:1183:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8629155Z             button = Button(admin_frame, text="Exit", command=back_to_main2)
2022-06-16T11:21:42.8629234Z                      ^
2022-06-16T11:21:42.8629560Z ./bank_managment_system/frontend.py:1183:29: F405 'admin_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8629782Z             button = Button(admin_frame, text="Exit", command=back_to_main2)
2022-06-16T11:21:42.8629874Z                             ^
2022-06-16T11:21:42.8630210Z ./bank_managment_system/frontend.py:1185:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8630297Z             mainloop()
2022-06-16T11:21:42.8630354Z             ^
2022-06-16T11:21:42.8630669Z ./bank_managment_system/frontend.py:1187:17: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8630818Z         label = Label(admin_frame, text="Please fill All Entries")
2022-06-16T11:21:42.8630957Z                 ^
2022-06-16T11:21:42.8631430Z ./bank_managment_system/frontend.py:1187:23: F405 'admin_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8631710Z         label = Label(admin_frame, text="Please fill All Entries")
2022-06-16T11:21:42.8631797Z                       ^
2022-06-16T11:21:42.8632156Z ./bank_managment_system/frontend.py:1189:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8632308Z         button = Button(admin_frame, text="Exit", command=back_to_main2)
2022-06-16T11:21:42.8632387Z                  ^
2022-06-16T11:21:42.8632750Z ./bank_managment_system/frontend.py:1189:25: F405 'admin_frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8632917Z         button = Button(admin_frame, text="Exit", command=back_to_main2)
2022-06-16T11:21:42.8633004Z                         ^
2022-06-16T11:21:42.8633363Z ./bank_managment_system/frontend.py:1191:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8633453Z         mainloop()
2022-06-16T11:21:42.8633531Z         ^
2022-06-16T11:21:42.8633864Z ./bank_managment_system/frontend.py:1199:17: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8633974Z         frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8634056Z                 ^
2022-06-16T11:21:42.8634408Z ./bank_managment_system/frontend.py:1202:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8634566Z         button = Button(frame, text="Admin", command=admin_login)
2022-06-16T11:21:42.8634646Z                  ^
2022-06-16T11:21:42.8635117Z ./bank_managment_system/frontend.py:1205:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8635387Z         button = Button(frame, text="Employee", command=employee_login)
2022-06-16T11:21:42.8635447Z                  ^
2022-06-16T11:21:42.8635761Z ./bank_managment_system/frontend.py:1208:18: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8635905Z         button = Button(frame, text="Exit", command=tk.destroy)
2022-06-16T11:21:42.8635976Z                  ^
2022-06-16T11:21:42.8636297Z ./bank_managment_system/frontend.py:1212:9: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8636379Z         mainloop()
2022-06-16T11:21:42.8636449Z         ^
2022-06-16T11:21:42.8636751Z ./bank_managment_system/frontend.py:1224:25: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8636912Z                 label = Label(employee_frame, text="Invalid id and pasasword")
2022-06-16T11:21:42.8636991Z                         ^
2022-06-16T11:21:42.8637310Z ./bank_managment_system/frontend.py:1226:26: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8637472Z                 button = Button(employee_frame, text="Exit", command=back_to_main3)
2022-06-16T11:21:42.8637557Z                          ^
2022-06-16T11:21:42.8637881Z ./bank_managment_system/frontend.py:1229:17: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8637967Z                 mainloop()
2022-06-16T11:21:42.8638026Z                 ^
2022-06-16T11:21:42.8638412Z ./bank_managment_system/frontend.py:1231:21: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8638578Z             label = Label(employee_frame, text="Please Fill All Entries")
2022-06-16T11:21:42.8638657Z                     ^
2022-06-16T11:21:42.8638979Z ./bank_managment_system/frontend.py:1233:22: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8639138Z             button = Button(employee_frame, text="Exit", command=back_to_main3)
2022-06-16T11:21:42.8639217Z                      ^
2022-06-16T11:21:42.8639540Z ./bank_managment_system/frontend.py:1236:13: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8639694Z             mainloop()
2022-06-16T11:21:42.8639753Z             ^
2022-06-16T11:21:42.8640080Z ./bank_managment_system/frontend.py:1241:22: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8640197Z     employee_frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8640279Z                      ^
2022-06-16T11:21:42.8640594Z ./bank_managment_system/frontend.py:1244:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8640751Z     label = Label(employee_frame, text="Employee Login", font="bold")
2022-06-16T11:21:42.8640821Z             ^
2022-06-16T11:21:42.8641240Z ./bank_managment_system/frontend.py:1247:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8641377Z     label1 = Label(employee_frame, text="Name:")
2022-06-16T11:21:42.8641573Z              ^
2022-06-16T11:21:42.8641925Z ./bank_managment_system/frontend.py:1250:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8642077Z     label2 = Label(employee_frame, text="Password:")
2022-06-16T11:21:42.8642158Z              ^
2022-06-16T11:21:42.8642507Z ./bank_managment_system/frontend.py:1254:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8642626Z     entry1 = Entry(employee_frame)
2022-06-16T11:21:42.8642691Z              ^
2022-06-16T11:21:42.8643032Z ./bank_managment_system/frontend.py:1257:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8643165Z     entry2 = Entry(employee_frame, show="*")
2022-06-16T11:21:42.8643244Z              ^
2022-06-16T11:21:42.8643592Z ./bank_managment_system/frontend.py:1260:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8643761Z     button = Button(employee_frame, text="Submit", command=check_emp)
2022-06-16T11:21:42.8643839Z              ^
2022-06-16T11:21:42.8644199Z ./bank_managment_system/frontend.py:1262:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8644272Z     mainloop()
2022-06-16T11:21:42.8644349Z     ^
2022-06-16T11:21:42.8644801Z ./bank_managment_system/frontend.py:1269:19: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8644911Z     admin_frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8644985Z                   ^
2022-06-16T11:21:42.8645301Z ./bank_managment_system/frontend.py:1272:13: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8645444Z     label = Label(admin_frame, text="Admin Login", font="bold")
2022-06-16T11:21:42.8645501Z             ^
2022-06-16T11:21:42.8645813Z ./bank_managment_system/frontend.py:1275:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8645932Z     label1 = Label(admin_frame, text="Name:")
2022-06-16T11:21:42.8646002Z              ^
2022-06-16T11:21:42.8646312Z ./bank_managment_system/frontend.py:1278:14: F405 'Label' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8646439Z     label2 = Label(admin_frame, text="Password:")
2022-06-16T11:21:42.8646511Z              ^
2022-06-16T11:21:42.8646818Z ./bank_managment_system/frontend.py:1282:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8646970Z     entry1 = Entry(admin_frame)
2022-06-16T11:21:42.8647050Z              ^
2022-06-16T11:21:42.8647371Z ./bank_managment_system/frontend.py:1285:14: F405 'Entry' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8647484Z     entry2 = Entry(admin_frame, show="*")
2022-06-16T11:21:42.8647557Z              ^
2022-06-16T11:21:42.8647878Z ./bank_managment_system/frontend.py:1288:14: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8648023Z     button = Button(admin_frame, text="Submit", command=page1)
2022-06-16T11:21:42.8648094Z              ^
2022-06-16T11:21:42.8648483Z ./bank_managment_system/frontend.py:1290:5: F405 'mainloop' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8648562Z     mainloop()
2022-06-16T11:21:42.8648631Z     ^
2022-06-16T11:21:42.8648944Z ./bank_managment_system/frontend.py:1295:6: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8649024Z tk = Tk()
2022-06-16T11:21:42.8649094Z      ^
2022-06-16T11:21:42.8649412Z ./bank_managment_system/frontend.py:1303:9: F405 'Frame' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8649494Z frame = Frame(tk, bg="black")
2022-06-16T11:21:42.8649566Z         ^
2022-06-16T11:21:42.8649885Z ./bank_managment_system/frontend.py:1306:10: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8650023Z button = Button(frame, text="Admin", command=admin_login)
2022-06-16T11:21:42.8650094Z          ^
2022-06-16T11:21:42.8650410Z ./bank_managment_system/frontend.py:1309:10: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8650564Z button = Button(frame, text="Employee", command=employee_login)
2022-06-16T11:21:42.8650634Z          ^
2022-06-16T11:21:42.8650934Z ./bank_managment_system/frontend.py:1312:10: F405 'Button' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.8651189Z button = Button(frame, text="Exit", command=tk.destroy)
2022-06-16T11:21:42.8651264Z          ^
2022-06-16T11:21:42.8651436Z ./bank_managment_system/backend.py:13:89: E501 line too long (139 > 88 characters)
2022-06-16T11:21:42.8651816Z         "create table if not exists bank (acc_no int, name text, age int, address text, balance int, account_type text, mobile_number int)"
2022-06-16T11:21:42.8651950Z                                                                                         ^
2022-06-16T11:21:42.8652127Z ./bank_managment_system/backend.py:16:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.8652329Z         "create table if not exists staff (name text, pass text,salary int, position text)"
2022-06-16T11:21:42.8652445Z                                                                                         ^
2022-06-16T11:21:42.8652609Z ./XORcipher/XOR_cipher.py:2:1: W191 indentation contains tabs
2022-06-16T11:21:42.8652682Z """
2022-06-16T11:21:42.8652785Z 	author: Christian Bender
2022-06-16T11:21:42.8652872Z 	date: 21.12.2017
2022-06-16T11:21:42.8652963Z 	class: XORCipher
2022-06-16T11:21:42.8652974Z 
2022-06-16T11:21:42.8653350Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8653525Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8653590Z 	files.
2022-06-16T11:21:42.8653598Z 
2022-06-16T11:21:42.8653705Z 	Overview about methods
2022-06-16T11:21:42.8653713Z 
2022-06-16T11:21:42.8653870Z 	- encrypt : list of char
2022-06-16T11:21:42.8654022Z 	- decrypt : list of char
2022-06-16T11:21:42.8654171Z 	- encrypt_string : str
2022-06-16T11:21:42.8654326Z 	- decrypt_string : str
2022-06-16T11:21:42.8654477Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8654613Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8654690Z """
2022-06-16T11:21:42.8654765Z ^
2022-06-16T11:21:42.8654940Z ./XORcipher/XOR_cipher.py:3:1: W191 indentation contains tabs
2022-06-16T11:21:42.8655015Z """
2022-06-16T11:21:42.8655120Z 	author: Christian Bender
2022-06-16T11:21:42.8655281Z 	date: 21.12.2017
2022-06-16T11:21:42.8655368Z 	class: XORCipher
2022-06-16T11:21:42.8655376Z 
2022-06-16T11:21:42.8655640Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8655813Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8655893Z 	files.
2022-06-16T11:21:42.8655901Z 
2022-06-16T11:21:42.8656002Z 	Overview about methods
2022-06-16T11:21:42.8656009Z 
2022-06-16T11:21:42.8656160Z 	- encrypt : list of char
2022-06-16T11:21:42.8656309Z 	- decrypt : list of char
2022-06-16T11:21:42.8656456Z 	- encrypt_string : str
2022-06-16T11:21:42.8656793Z 	- decrypt_string : str
2022-06-16T11:21:42.8656937Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8657083Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8657155Z """
2022-06-16T11:21:42.8657227Z ^
2022-06-16T11:21:42.8657391Z ./XORcipher/XOR_cipher.py:4:1: W191 indentation contains tabs
2022-06-16T11:21:42.8657465Z """
2022-06-16T11:21:42.8657552Z 	author: Christian Bender
2022-06-16T11:21:42.8657638Z 	date: 21.12.2017
2022-06-16T11:21:42.8657725Z 	class: XORCipher
2022-06-16T11:21:42.8657732Z 
2022-06-16T11:21:42.8657976Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8658141Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8658217Z 	files.
2022-06-16T11:21:42.8658225Z 
2022-06-16T11:21:42.8658322Z 	Overview about methods
2022-06-16T11:21:42.8658328Z 
2022-06-16T11:21:42.8658474Z 	- encrypt : list of char
2022-06-16T11:21:42.8658604Z 	- decrypt : list of char
2022-06-16T11:21:42.8658748Z 	- encrypt_string : str
2022-06-16T11:21:42.8658896Z 	- decrypt_string : str
2022-06-16T11:21:42.8659039Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8659675Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8659749Z """
2022-06-16T11:21:42.8659823Z ^
2022-06-16T11:21:42.8659971Z ./XORcipher/XOR_cipher.py:6:1: W191 indentation contains tabs
2022-06-16T11:21:42.8660044Z """
2022-06-16T11:21:42.8660144Z 	author: Christian Bender
2022-06-16T11:21:42.8660233Z 	date: 21.12.2017
2022-06-16T11:21:42.8660322Z 	class: XORCipher
2022-06-16T11:21:42.8660331Z 
2022-06-16T11:21:42.8660574Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8660744Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8660806Z 	files.
2022-06-16T11:21:42.8660813Z 
2022-06-16T11:21:42.8662879Z 	Overview about methods
2022-06-16T11:21:42.8662901Z 
2022-06-16T11:21:42.8663128Z 	- encrypt : list of char
2022-06-16T11:21:42.8663282Z 	- decrypt : list of char
2022-06-16T11:21:42.8663432Z 	- encrypt_string : str
2022-06-16T11:21:42.8663588Z 	- decrypt_string : str
2022-06-16T11:21:42.8663737Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8663871Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8663947Z """
2022-06-16T11:21:42.8664021Z ^
2022-06-16T11:21:42.8664193Z ./XORcipher/XOR_cipher.py:7:1: W191 indentation contains tabs
2022-06-16T11:21:42.8664269Z """
2022-06-16T11:21:42.8664373Z 	author: Christian Bender
2022-06-16T11:21:42.8664463Z 	date: 21.12.2017
2022-06-16T11:21:42.8664541Z 	class: XORCipher
2022-06-16T11:21:42.8664548Z 
2022-06-16T11:21:42.8664806Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8665098Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8665175Z 	files.
2022-06-16T11:21:42.8665184Z 
2022-06-16T11:21:42.8665281Z 	Overview about methods
2022-06-16T11:21:42.8665288Z 
2022-06-16T11:21:42.8665435Z 	- encrypt : list of char
2022-06-16T11:21:42.8665581Z 	- decrypt : list of char
2022-06-16T11:21:42.8665723Z 	- encrypt_string : str
2022-06-16T11:21:42.8665855Z 	- decrypt_string : str
2022-06-16T11:21:42.8665998Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8666143Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8666214Z """
2022-06-16T11:21:42.8666286Z ^
2022-06-16T11:21:42.8666451Z ./XORcipher/XOR_cipher.py:8:1: W191 indentation contains tabs
2022-06-16T11:21:42.8666523Z """
2022-06-16T11:21:42.8666611Z 	author: Christian Bender
2022-06-16T11:21:42.8666892Z 	date: 21.12.2017
2022-06-16T11:21:42.8667000Z 	class: XORCipher
2022-06-16T11:21:42.8667008Z 
2022-06-16T11:21:42.8667272Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8667438Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8667516Z 	files.
2022-06-16T11:21:42.8667523Z 
2022-06-16T11:21:42.8667620Z 	Overview about methods
2022-06-16T11:21:42.8667627Z 
2022-06-16T11:21:42.8667773Z 	- encrypt : list of char
2022-06-16T11:21:42.8667905Z 	- decrypt : list of char
2022-06-16T11:21:42.8668047Z 	- encrypt_string : str
2022-06-16T11:21:42.8668293Z 	- decrypt_string : str
2022-06-16T11:21:42.8668442Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8668586Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8668659Z """
2022-06-16T11:21:42.8668734Z ^
2022-06-16T11:21:42.8668885Z ./XORcipher/XOR_cipher.py:10:1: W191 indentation contains tabs
2022-06-16T11:21:42.8668959Z """
2022-06-16T11:21:42.8669061Z 	author: Christian Bender
2022-06-16T11:21:42.8669148Z 	date: 21.12.2017
2022-06-16T11:21:42.8669236Z 	class: XORCipher
2022-06-16T11:21:42.8669243Z 
2022-06-16T11:21:42.8669488Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8669652Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8669713Z 	files.
2022-06-16T11:21:42.8669720Z 
2022-06-16T11:21:42.8669817Z 	Overview about methods
2022-06-16T11:21:42.8669824Z 
2022-06-16T11:21:42.8669968Z 	- encrypt : list of char
2022-06-16T11:21:42.8670114Z 	- decrypt : list of char
2022-06-16T11:21:42.8670260Z 	- encrypt_string : str
2022-06-16T11:21:42.8670408Z 	- decrypt_string : str
2022-06-16T11:21:42.8670551Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8670681Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8670753Z """
2022-06-16T11:21:42.8670824Z ^
2022-06-16T11:21:42.8670988Z ./XORcipher/XOR_cipher.py:12:1: W191 indentation contains tabs
2022-06-16T11:21:42.8671059Z """
2022-06-16T11:21:42.8671160Z 	author: Christian Bender
2022-06-16T11:21:42.8671246Z 	date: 21.12.2017
2022-06-16T11:21:42.8671320Z 	class: XORCipher
2022-06-16T11:21:42.8671327Z 
2022-06-16T11:21:42.8671573Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8671737Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8671813Z 	files.
2022-06-16T11:21:42.8671820Z 
2022-06-16T11:21:42.8671918Z 	Overview about methods
2022-06-16T11:21:42.8671925Z 
2022-06-16T11:21:42.8672070Z 	- encrypt : list of char
2022-06-16T11:21:42.8672216Z 	- decrypt : list of char
2022-06-16T11:21:42.8672358Z 	- encrypt_string : str
2022-06-16T11:21:42.8672490Z 	- decrypt_string : str
2022-06-16T11:21:42.8672633Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8672776Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8672848Z """
2022-06-16T11:21:42.8672920Z ^
2022-06-16T11:21:42.8673086Z ./XORcipher/XOR_cipher.py:13:1: W191 indentation contains tabs
2022-06-16T11:21:42.8673156Z """
2022-06-16T11:21:42.8673243Z 	author: Christian Bender
2022-06-16T11:21:42.8673329Z 	date: 21.12.2017
2022-06-16T11:21:42.8673418Z 	class: XORCipher
2022-06-16T11:21:42.8673425Z 
2022-06-16T11:21:42.8673670Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8673839Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8673915Z 	files.
2022-06-16T11:21:42.8673922Z 
2022-06-16T11:21:42.8674019Z 	Overview about methods
2022-06-16T11:21:42.8674025Z 
2022-06-16T11:21:42.8674169Z 	- encrypt : list of char
2022-06-16T11:21:42.8674300Z 	- decrypt : list of char
2022-06-16T11:21:42.8674440Z 	- encrypt_string : str
2022-06-16T11:21:42.8674585Z 	- decrypt_string : str
2022-06-16T11:21:42.8674727Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8674869Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8674940Z """
2022-06-16T11:21:42.8675012Z ^
2022-06-16T11:21:42.8675160Z ./XORcipher/XOR_cipher.py:14:1: W191 indentation contains tabs
2022-06-16T11:21:42.8675232Z """
2022-06-16T11:21:42.8675335Z 	author: Christian Bender
2022-06-16T11:21:42.8675499Z 	date: 21.12.2017
2022-06-16T11:21:42.8675598Z 	class: XORCipher
2022-06-16T11:21:42.8675605Z 
2022-06-16T11:21:42.8675859Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8676028Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8676090Z 	files.
2022-06-16T11:21:42.8676097Z 
2022-06-16T11:21:42.8676195Z 	Overview about methods
2022-06-16T11:21:42.8676202Z 
2022-06-16T11:21:42.8676347Z 	- encrypt : list of char
2022-06-16T11:21:42.8676491Z 	- decrypt : list of char
2022-06-16T11:21:42.8676631Z 	- encrypt_string : str
2022-06-16T11:21:42.8676861Z 	- decrypt_string : str
2022-06-16T11:21:42.8677007Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8677136Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8677210Z """
2022-06-16T11:21:42.8677284Z ^
2022-06-16T11:21:42.8677448Z ./XORcipher/XOR_cipher.py:15:1: W191 indentation contains tabs
2022-06-16T11:21:42.8677522Z """
2022-06-16T11:21:42.8677623Z 	author: Christian Bender
2022-06-16T11:21:42.8677710Z 	date: 21.12.2017
2022-06-16T11:21:42.8677784Z 	class: XORCipher
2022-06-16T11:21:42.8677792Z 
2022-06-16T11:21:42.8678038Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8678202Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8678280Z 	files.
2022-06-16T11:21:42.8678287Z 
2022-06-16T11:21:42.8678384Z 	Overview about methods
2022-06-16T11:21:42.8678391Z 
2022-06-16T11:21:42.8678535Z 	- encrypt : list of char
2022-06-16T11:21:42.8678681Z 	- decrypt : list of char
2022-06-16T11:21:42.8678823Z 	- encrypt_string : str
2022-06-16T11:21:42.8678955Z 	- decrypt_string : str
2022-06-16T11:21:42.8679097Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8679240Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8679310Z """
2022-06-16T11:21:42.8679382Z ^
2022-06-16T11:21:42.8679543Z ./XORcipher/XOR_cipher.py:16:1: W191 indentation contains tabs
2022-06-16T11:21:42.8679617Z """
2022-06-16T11:21:42.8679703Z 	author: Christian Bender
2022-06-16T11:21:42.8679789Z 	date: 21.12.2017
2022-06-16T11:21:42.8679877Z 	class: XORCipher
2022-06-16T11:21:42.8679884Z 
2022-06-16T11:21:42.8680129Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8680291Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8680366Z 	files.
2022-06-16T11:21:42.8680373Z 
2022-06-16T11:21:42.8680470Z 	Overview about methods
2022-06-16T11:21:42.8680477Z 
2022-06-16T11:21:42.8680620Z 	- encrypt : list of char
2022-06-16T11:21:42.8680750Z 	- decrypt : list of char
2022-06-16T11:21:42.8680894Z 	- encrypt_string : str
2022-06-16T11:21:42.8681041Z 	- decrypt_string : str
2022-06-16T11:21:42.8681183Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8681327Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8681399Z """
2022-06-16T11:21:42.8681457Z ^
2022-06-16T11:21:42.8681620Z ./XORcipher/XOR_cipher.py:17:1: W191 indentation contains tabs
2022-06-16T11:21:42.8681692Z """
2022-06-16T11:21:42.8681797Z 	author: Christian Bender
2022-06-16T11:21:42.8681881Z 	date: 21.12.2017
2022-06-16T11:21:42.8681970Z 	class: XORCipher
2022-06-16T11:21:42.8681978Z 
2022-06-16T11:21:42.8682220Z 	This class implements the XOR-cipher algorithm and provides
2022-06-16T11:21:42.8682385Z 	some useful methods for encrypting and decrypting strings and
2022-06-16T11:21:42.8682446Z 	files.
2022-06-16T11:21:42.8682453Z 
2022-06-16T11:21:42.8682550Z 	Overview about methods
2022-06-16T11:21:42.8682556Z 
2022-06-16T11:21:42.8682700Z 	- encrypt : list of char
2022-06-16T11:21:42.8682844Z 	- decrypt : list of char
2022-06-16T11:21:42.8682987Z 	- encrypt_string : str
2022-06-16T11:21:42.8683136Z 	- decrypt_string : str
2022-06-16T11:21:42.8683279Z 	- encrypt_file : boolean
2022-06-16T11:21:42.8683409Z 	- decrypt_file : boolean
2022-06-16T11:21:42.8683481Z """
2022-06-16T11:21:42.8683552Z ^
2022-06-16T11:21:42.8683743Z ./XORcipher/XOR_cipher.py:22:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8683848Z     def __init__(self, key=0):
2022-06-16T11:21:42.8684014Z ^
2022-06-16T11:21:42.8684216Z ./XORcipher/XOR_cipher.py:24:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8684281Z         """
2022-06-16T11:21:42.8684429Z         simple constructor that receives a key or uses
2022-06-16T11:21:42.8684522Z         default key = 0
2022-06-16T11:21:42.8684598Z         """
2022-06-16T11:21:42.8684670Z ^
2022-06-16T11:21:42.8684853Z ./XORcipher/XOR_cipher.py:25:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8684928Z         """
2022-06-16T11:21:42.8685059Z         simple constructor that receives a key or uses
2022-06-16T11:21:42.8685224Z         default key = 0
2022-06-16T11:21:42.8685302Z         """
2022-06-16T11:21:42.8685375Z ^
2022-06-16T11:21:42.8685684Z ./XORcipher/XOR_cipher.py:26:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8685865Z         """
2022-06-16T11:21:42.8686116Z         simple constructor that receives a key or uses
2022-06-16T11:21:42.8686197Z         default key = 0
2022-06-16T11:21:42.8686789Z         """
2022-06-16T11:21:42.8686902Z ^
2022-06-16T11:21:42.8687112Z ./XORcipher/XOR_cipher.py:28:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8687212Z         # private field
2022-06-16T11:21:42.8687287Z ^
2022-06-16T11:21:42.8687482Z ./XORcipher/XOR_cipher.py:29:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8687564Z         self.__key = key
2022-06-16T11:21:42.8687638Z ^
2022-06-16T11:21:42.8687826Z ./XORcipher/XOR_cipher.py:31:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8687951Z     def encrypt(self, content, key):
2022-06-16T11:21:42.8688033Z ^
2022-06-16T11:21:42.8688227Z ./XORcipher/XOR_cipher.py:33:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8688307Z         """
2022-06-16T11:21:42.8688592Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8688841Z         output: encrypted string 'content' as a list of chars
2022-06-16T11:21:42.8689020Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8689122Z         otherwise key = 1
2022-06-16T11:21:42.8689203Z         """
2022-06-16T11:21:42.8689279Z ^
2022-06-16T11:21:42.8689469Z ./XORcipher/XOR_cipher.py:34:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8689546Z         """
2022-06-16T11:21:42.8689881Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8690095Z         output: encrypted string 'content' as a list of chars
2022-06-16T11:21:42.8690249Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8690342Z         otherwise key = 1
2022-06-16T11:21:42.8690410Z         """
2022-06-16T11:21:42.8690475Z ^
2022-06-16T11:21:42.8690646Z ./XORcipher/XOR_cipher.py:35:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8690701Z         """
2022-06-16T11:21:42.8690914Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8691251Z         output: encrypted string 'content' as a list of chars
2022-06-16T11:21:42.8691415Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8691509Z         otherwise key = 1
2022-06-16T11:21:42.8691584Z         """
2022-06-16T11:21:42.8691656Z ^
2022-06-16T11:21:42.8691822Z ./XORcipher/XOR_cipher.py:36:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8691895Z         """
2022-06-16T11:21:42.8692117Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8692340Z         output: encrypted string 'content' as a list of chars
2022-06-16T11:21:42.8692503Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8692597Z         otherwise key = 1
2022-06-16T11:21:42.8692671Z         """
2022-06-16T11:21:42.8692729Z ^
2022-06-16T11:21:42.8692909Z ./XORcipher/XOR_cipher.py:37:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8692983Z         """
2022-06-16T11:21:42.8693360Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8693619Z         output: encrypted string 'content' as a list of chars
2022-06-16T11:21:42.8693781Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8693875Z         otherwise key = 1
2022-06-16T11:21:42.8693950Z         """
2022-06-16T11:21:42.8694007Z ^
2022-06-16T11:21:42.8694288Z ./XORcipher/XOR_cipher.py:39:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8694375Z         # precondition
2022-06-16T11:21:42.8694439Z ^
2022-06-16T11:21:42.8694606Z ./XORcipher/XOR_cipher.py:40:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8694832Z         assert isinstance(key, int) and isinstance(content, str)
2022-06-16T11:21:42.8694899Z ^
2022-06-16T11:21:42.8695051Z ./XORcipher/XOR_cipher.py:42:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8695152Z         key = key or self.__key or 1
2022-06-16T11:21:42.8695219Z ^
2022-06-16T11:21:42.8695390Z ./XORcipher/XOR_cipher.py:44:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8695494Z         # make sure key can be any size
2022-06-16T11:21:42.8695560Z ^
2022-06-16T11:21:42.8695724Z ./XORcipher/XOR_cipher.py:45:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8695797Z         while key > 255:
2022-06-16T11:21:42.8695863Z ^
2022-06-16T11:21:42.8696028Z ./XORcipher/XOR_cipher.py:46:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8696172Z             key -= 255
2022-06-16T11:21:42.8696238Z ^
2022-06-16T11:21:42.8696407Z ./XORcipher/XOR_cipher.py:48:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8696501Z         # This will be returned
2022-06-16T11:21:42.8696553Z ^
2022-06-16T11:21:42.8696721Z ./XORcipher/XOR_cipher.py:49:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8696796Z         ans = []
2022-06-16T11:21:42.8696862Z ^
2022-06-16T11:21:42.8697029Z ./XORcipher/XOR_cipher.py:51:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8697116Z         for ch in content:
2022-06-16T11:21:42.8697181Z ^
2022-06-16T11:21:42.8697328Z ./XORcipher/XOR_cipher.py:52:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8697440Z             ans.append(chr(ord(ch) ^ key))
2022-06-16T11:21:42.8697505Z ^
2022-06-16T11:21:42.8697668Z ./XORcipher/XOR_cipher.py:54:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8697745Z         return ans
2022-06-16T11:21:42.8697810Z ^
2022-06-16T11:21:42.8697975Z ./XORcipher/XOR_cipher.py:56:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8698073Z     def decrypt(self, content, key):
2022-06-16T11:21:42.8698138Z ^
2022-06-16T11:21:42.8698302Z ./XORcipher/XOR_cipher.py:58:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8698372Z         """
2022-06-16T11:21:42.8698586Z         input: 'content' of type list and 'key' of type int
2022-06-16T11:21:42.8698807Z         output: decrypted string 'content' as a list of chars
2022-06-16T11:21:42.8698960Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8699192Z         otherwise key = 1
2022-06-16T11:21:42.8699257Z         """
2022-06-16T11:21:42.8699325Z ^
2022-06-16T11:21:42.8699494Z ./XORcipher/XOR_cipher.py:59:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8699564Z         """
2022-06-16T11:21:42.8699783Z         input: 'content' of type list and 'key' of type int
2022-06-16T11:21:42.8699998Z         output: decrypted string 'content' as a list of chars
2022-06-16T11:21:42.8700156Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8700230Z         otherwise key = 1
2022-06-16T11:21:42.8700300Z         """
2022-06-16T11:21:42.8700368Z ^
2022-06-16T11:21:42.8700532Z ./XORcipher/XOR_cipher.py:60:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8700600Z         """
2022-06-16T11:21:42.8700909Z         input: 'content' of type list and 'key' of type int
2022-06-16T11:21:42.8701272Z         output: decrypted string 'content' as a list of chars
2022-06-16T11:21:42.8701419Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8701513Z         otherwise key = 1
2022-06-16T11:21:42.8701588Z         """
2022-06-16T11:21:42.8701658Z ^
2022-06-16T11:21:42.8701839Z ./XORcipher/XOR_cipher.py:61:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8701913Z         """
2022-06-16T11:21:42.8702135Z         input: 'content' of type list and 'key' of type int
2022-06-16T11:21:42.8702436Z         output: decrypted string 'content' as a list of chars
2022-06-16T11:21:42.8702597Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8702692Z         otherwise key = 1
2022-06-16T11:21:42.8702765Z         """
2022-06-16T11:21:42.8702836Z ^
2022-06-16T11:21:42.8703019Z ./XORcipher/XOR_cipher.py:62:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8703095Z         """
2022-06-16T11:21:42.8703316Z         input: 'content' of type list and 'key' of type int
2022-06-16T11:21:42.8703528Z         output: decrypted string 'content' as a list of chars
2022-06-16T11:21:42.8703686Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8703781Z         otherwise key = 1
2022-06-16T11:21:42.8703855Z         """
2022-06-16T11:21:42.8704048Z ^
2022-06-16T11:21:42.8704361Z ./XORcipher/XOR_cipher.py:64:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8704452Z         # precondition
2022-06-16T11:21:42.8704511Z ^
2022-06-16T11:21:42.8704690Z ./XORcipher/XOR_cipher.py:65:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8704844Z         assert isinstance(key, int) and isinstance(content, list)
2022-06-16T11:21:42.8704914Z ^
2022-06-16T11:21:42.8705089Z ./XORcipher/XOR_cipher.py:67:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8705196Z         key = key or self.__key or 1
2022-06-16T11:21:42.8705266Z ^
2022-06-16T11:21:42.8705429Z ./XORcipher/XOR_cipher.py:69:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8705536Z         # make sure key can be any size
2022-06-16T11:21:42.8705606Z ^
2022-06-16T11:21:42.8705779Z ./XORcipher/XOR_cipher.py:70:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8705870Z         while key > 255:
2022-06-16T11:21:42.8705939Z ^
2022-06-16T11:21:42.8706113Z ./XORcipher/XOR_cipher.py:71:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8706243Z             key -= 255
2022-06-16T11:21:42.8706318Z ^
2022-06-16T11:21:42.8706496Z ./XORcipher/XOR_cipher.py:73:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8706597Z         # This will be returned
2022-06-16T11:21:42.8706668Z ^
2022-06-16T11:21:42.8706846Z ./XORcipher/XOR_cipher.py:74:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8706926Z         ans = []
2022-06-16T11:21:42.8706985Z ^
2022-06-16T11:21:42.8707160Z ./XORcipher/XOR_cipher.py:76:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8707376Z         for ch in content:
2022-06-16T11:21:42.8707449Z ^
2022-06-16T11:21:42.8707627Z ./XORcipher/XOR_cipher.py:77:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8707748Z             ans.append(chr(ord(ch) ^ key))
2022-06-16T11:21:42.8707820Z ^
2022-06-16T11:21:42.8707987Z ./XORcipher/XOR_cipher.py:79:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8708071Z         return ans
2022-06-16T11:21:42.8708145Z ^
2022-06-16T11:21:42.8708325Z ./XORcipher/XOR_cipher.py:81:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8708458Z     def encrypt_string(self, content, key=0):
2022-06-16T11:21:42.8708529Z ^
2022-06-16T11:21:42.8708707Z ./XORcipher/XOR_cipher.py:83:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8708784Z         """
2022-06-16T11:21:42.8709084Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8709300Z         output: encrypted string 'content'
2022-06-16T11:21:42.8709469Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8709569Z         otherwise key = 1
2022-06-16T11:21:42.8709646Z         """
2022-06-16T11:21:42.8709721Z ^
2022-06-16T11:21:42.8709902Z ./XORcipher/XOR_cipher.py:84:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8709963Z         """
2022-06-16T11:21:42.8710316Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8710574Z         output: encrypted string 'content'
2022-06-16T11:21:42.8710851Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8710940Z         otherwise key = 1
2022-06-16T11:21:42.8711011Z         """
2022-06-16T11:21:42.8711198Z ^
2022-06-16T11:21:42.8711360Z ./XORcipher/XOR_cipher.py:85:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8711438Z         """
2022-06-16T11:21:42.8711845Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8712045Z         output: encrypted string 'content'
2022-06-16T11:21:42.8712214Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8712311Z         otherwise key = 1
2022-06-16T11:21:42.8712389Z         """
2022-06-16T11:21:42.8712447Z ^
2022-06-16T11:21:42.8712630Z ./XORcipher/XOR_cipher.py:86:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8712706Z         """
2022-06-16T11:21:42.8712936Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8713128Z         output: encrypted string 'content'
2022-06-16T11:21:42.8713292Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8713390Z         otherwise key = 1
2022-06-16T11:21:42.8713451Z         """
2022-06-16T11:21:42.8713523Z ^
2022-06-16T11:21:42.8713710Z ./XORcipher/XOR_cipher.py:87:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8713784Z         """
2022-06-16T11:21:42.8714016Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8714203Z         output: encrypted string 'content'
2022-06-16T11:21:42.8714489Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8714582Z         otherwise key = 1
2022-06-16T11:21:42.8714749Z         """
2022-06-16T11:21:42.8714816Z ^
2022-06-16T11:21:42.8714981Z ./XORcipher/XOR_cipher.py:89:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8715065Z         # precondition
2022-06-16T11:21:42.8715135Z ^
2022-06-16T11:21:42.8715299Z ./XORcipher/XOR_cipher.py:90:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8715445Z         assert isinstance(key, int) and isinstance(content, str)
2022-06-16T11:21:42.8715498Z ^
2022-06-16T11:21:42.8715661Z ./XORcipher/XOR_cipher.py:92:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8715760Z         key = key or self.__key or 1
2022-06-16T11:21:42.8715826Z ^
2022-06-16T11:21:42.8715990Z ./XORcipher/XOR_cipher.py:94:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8716092Z         # make sure key can be any size
2022-06-16T11:21:42.8716159Z ^
2022-06-16T11:21:42.8716309Z ./XORcipher/XOR_cipher.py:95:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8716395Z         while key > 255:
2022-06-16T11:21:42.8716460Z ^
2022-06-16T11:21:42.8716622Z ./XORcipher/XOR_cipher.py:96:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8716757Z             key -= 255
2022-06-16T11:21:42.8716827Z ^
2022-06-16T11:21:42.8716992Z ./XORcipher/XOR_cipher.py:98:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8717070Z         # This will be returned
2022-06-16T11:21:42.8717140Z ^
2022-06-16T11:21:42.8717307Z ./XORcipher/XOR_cipher.py:99:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8717381Z         ans = ""
2022-06-16T11:21:42.8717526Z ^
2022-06-16T11:21:42.8717710Z ./XORcipher/XOR_cipher.py:101:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8717799Z         for ch in content:
2022-06-16T11:21:42.8717851Z ^
2022-06-16T11:21:42.8718018Z ./XORcipher/XOR_cipher.py:102:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8718114Z             ans += chr(ord(ch) ^ key)
2022-06-16T11:21:42.8718180Z ^
2022-06-16T11:21:42.8718349Z ./XORcipher/XOR_cipher.py:104:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8718426Z         return ans
2022-06-16T11:21:42.8718556Z ^
2022-06-16T11:21:42.8718715Z ./XORcipher/XOR_cipher.py:106:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8718839Z     def decrypt_string(self, content, key=0):
2022-06-16T11:21:42.8718906Z ^
2022-06-16T11:21:42.8719072Z ./XORcipher/XOR_cipher.py:108:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8719142Z         """
2022-06-16T11:21:42.8719372Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8719548Z         output: decrypted string 'content'
2022-06-16T11:21:42.8719700Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8719775Z         otherwise key = 1
2022-06-16T11:21:42.8719852Z         """
2022-06-16T11:21:42.8719918Z ^
2022-06-16T11:21:42.8720089Z ./XORcipher/XOR_cipher.py:109:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8720159Z         """
2022-06-16T11:21:42.8720370Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8720546Z         output: decrypted string 'content'
2022-06-16T11:21:42.8720684Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8720772Z         otherwise key = 1
2022-06-16T11:21:42.8720842Z         """
2022-06-16T11:21:42.8720908Z ^
2022-06-16T11:21:42.8721201Z ./XORcipher/XOR_cipher.py:110:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8721281Z         """
2022-06-16T11:21:42.8721628Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8721802Z         output: decrypted string 'content'
2022-06-16T11:21:42.8721968Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8722064Z         otherwise key = 1
2022-06-16T11:21:42.8722139Z         """
2022-06-16T11:21:42.8722213Z ^
2022-06-16T11:21:42.8722401Z ./XORcipher/XOR_cipher.py:111:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8722476Z         """
2022-06-16T11:21:42.8722691Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8722882Z         output: decrypted string 'content'
2022-06-16T11:21:42.8723182Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8723281Z         otherwise key = 1
2022-06-16T11:21:42.8723358Z         """
2022-06-16T11:21:42.8723432Z ^
2022-06-16T11:21:42.8723628Z ./XORcipher/XOR_cipher.py:112:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8723692Z         """
2022-06-16T11:21:42.8723930Z         input: 'content' of type string and 'key' of type int
2022-06-16T11:21:42.8724124Z         output: decrypted string 'content'
2022-06-16T11:21:42.8724418Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8724515Z         otherwise key = 1
2022-06-16T11:21:42.8724591Z         """
2022-06-16T11:21:42.8724663Z ^
2022-06-16T11:21:42.8724834Z ./XORcipher/XOR_cipher.py:114:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8724928Z         # precondition
2022-06-16T11:21:42.8725003Z ^
2022-06-16T11:21:42.8725189Z ./XORcipher/XOR_cipher.py:115:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8725349Z         assert isinstance(key, int) and isinstance(content, str)
2022-06-16T11:21:42.8725421Z ^
2022-06-16T11:21:42.8725602Z ./XORcipher/XOR_cipher.py:117:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8725906Z         key = key or self.__key or 1
2022-06-16T11:21:42.8726087Z ^
2022-06-16T11:21:42.8726279Z ./XORcipher/XOR_cipher.py:119:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8726393Z         # make sure key can be any size
2022-06-16T11:21:42.8726468Z ^
2022-06-16T11:21:42.8726654Z ./XORcipher/XOR_cipher.py:120:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8726748Z         while key > 255:
2022-06-16T11:21:42.8726819Z ^
2022-06-16T11:21:42.8726986Z ./XORcipher/XOR_cipher.py:121:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8727209Z             key -= 255
2022-06-16T11:21:42.8727284Z ^
2022-06-16T11:21:42.8727472Z ./XORcipher/XOR_cipher.py:123:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8727577Z         # This will be returned
2022-06-16T11:21:42.8727650Z ^
2022-06-16T11:21:42.8727838Z ./XORcipher/XOR_cipher.py:124:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8727910Z         ans = ""
2022-06-16T11:21:42.8727986Z ^
2022-06-16T11:21:42.8728169Z ./XORcipher/XOR_cipher.py:126:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8728267Z         for ch in content:
2022-06-16T11:21:42.8728339Z ^
2022-06-16T11:21:42.8728522Z ./XORcipher/XOR_cipher.py:127:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8728629Z             ans += chr(ord(ch) ^ key)
2022-06-16T11:21:42.8728687Z ^
2022-06-16T11:21:42.8728869Z ./XORcipher/XOR_cipher.py:129:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8729076Z         return ans
2022-06-16T11:21:42.8729152Z ^
2022-06-16T11:21:42.8729427Z ./XORcipher/XOR_cipher.py:131:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8729538Z     def encrypt_file(self, file, key=0):
2022-06-16T11:21:42.8729605Z ^
2022-06-16T11:21:42.8729756Z ./XORcipher/XOR_cipher.py:133:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8729826Z         """
2022-06-16T11:21:42.8729945Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8730076Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8730181Z         successful otherwise false
2022-06-16T11:21:42.8730451Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8730553Z         otherwise key = 1
2022-06-16T11:21:42.8730617Z         """
2022-06-16T11:21:42.8730691Z ^
2022-06-16T11:21:42.8730880Z ./XORcipher/XOR_cipher.py:134:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8730957Z         """
2022-06-16T11:21:42.8731087Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8731236Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8731352Z         successful otherwise false
2022-06-16T11:21:42.8731521Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8731607Z         otherwise key = 1
2022-06-16T11:21:42.8731684Z         """
2022-06-16T11:21:42.8731757Z ^
2022-06-16T11:21:42.8731947Z ./XORcipher/XOR_cipher.py:135:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8732025Z         """
2022-06-16T11:21:42.8732153Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8732296Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8732397Z         successful otherwise false
2022-06-16T11:21:42.8732567Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8732666Z         otherwise key = 1
2022-06-16T11:21:42.8732743Z         """
2022-06-16T11:21:42.8732818Z ^
2022-06-16T11:21:42.8733007Z ./XORcipher/XOR_cipher.py:136:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8733085Z         """
2022-06-16T11:21:42.8733199Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8733341Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8733455Z         successful otherwise false
2022-06-16T11:21:42.8733936Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8734041Z         otherwise key = 1
2022-06-16T11:21:42.8734220Z         """
2022-06-16T11:21:42.8734288Z ^
2022-06-16T11:21:42.8734439Z ./XORcipher/XOR_cipher.py:137:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8734508Z         """
2022-06-16T11:21:42.8734621Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8734747Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8734848Z         successful otherwise false
2022-06-16T11:21:42.8734995Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8735152Z         otherwise key = 1
2022-06-16T11:21:42.8735207Z         """
2022-06-16T11:21:42.8735274Z ^
2022-06-16T11:21:42.8735446Z ./XORcipher/XOR_cipher.py:138:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8735517Z         """
2022-06-16T11:21:42.8735631Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8735760Z         output: returns true if encrypt process was
2022-06-16T11:21:42.8735861Z         successful otherwise false
2022-06-16T11:21:42.8735993Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8736082Z         otherwise key = 1
2022-06-16T11:21:42.8736151Z         """
2022-06-16T11:21:42.8736218Z ^
2022-06-16T11:21:42.8736383Z ./XORcipher/XOR_cipher.py:140:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8736467Z         # precondition
2022-06-16T11:21:42.8736532Z ^
2022-06-16T11:21:42.8736682Z ./XORcipher/XOR_cipher.py:141:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8736827Z         assert isinstance(file, str) and isinstance(key, int)
2022-06-16T11:21:42.8736892Z ^
2022-06-16T11:21:42.8737061Z ./XORcipher/XOR_cipher.py:143:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8737132Z         try:
2022-06-16T11:21:42.8737198Z ^
2022-06-16T11:21:42.8737365Z ./XORcipher/XOR_cipher.py:144:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8737470Z             with open(file, "r") as fin:
2022-06-16T11:21:42.8737522Z ^
2022-06-16T11:21:42.8737689Z ./XORcipher/XOR_cipher.py:145:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8737812Z                 with open("encrypt.out", "w+") as fout:
2022-06-16T11:21:42.8737877Z ^
2022-06-16T11:21:42.8738041Z ./XORcipher/XOR_cipher.py:146:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8738232Z                     # actual encrypt-process
2022-06-16T11:21:42.8738301Z ^
2022-06-16T11:21:42.8738451Z ./XORcipher/XOR_cipher.py:147:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8738548Z                     for line in fin:
2022-06-16T11:21:42.8738614Z ^
2022-06-16T11:21:42.8738782Z ./XORcipher/XOR_cipher.py:148:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8738923Z                         fout.write(self.encrypt_string(line, key))
2022-06-16T11:21:42.8738990Z ^
2022-06-16T11:21:42.8739286Z ./XORcipher/XOR_cipher.py:150:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8739355Z         except:
2022-06-16T11:21:42.8739422Z ^
2022-06-16T11:21:42.8740054Z ./XORcipher/XOR_cipher.py:150:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8740133Z         except:
2022-06-16T11:21:42.8740204Z         ^
2022-06-16T11:21:42.8740431Z ./XORcipher/XOR_cipher.py:150:9: E722 do not use bare 'except'
2022-06-16T11:21:42.8740509Z         except:
2022-06-16T11:21:42.8740580Z         ^
2022-06-16T11:21:42.8740732Z ./XORcipher/XOR_cipher.py:151:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8740819Z             return False
2022-06-16T11:21:42.8740886Z ^
2022-06-16T11:21:42.8741264Z ./XORcipher/XOR_cipher.py:153:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8741359Z         return True
2022-06-16T11:21:42.8741431Z ^
2022-06-16T11:21:42.8741609Z ./XORcipher/XOR_cipher.py:155:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8741714Z     def decrypt_file(self, file, key):
2022-06-16T11:21:42.8741785Z ^
2022-06-16T11:21:42.8741958Z ./XORcipher/XOR_cipher.py:157:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8742034Z         """
2022-06-16T11:21:42.8742158Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8742295Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8742504Z         successful otherwise false
2022-06-16T11:21:42.8742653Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8742750Z         otherwise key = 1
2022-06-16T11:21:42.8742830Z         """
2022-06-16T11:21:42.8742899Z ^
2022-06-16T11:21:42.8743077Z ./XORcipher/XOR_cipher.py:158:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8743155Z         """
2022-06-16T11:21:42.8743279Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8743403Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8743513Z         successful otherwise false
2022-06-16T11:21:42.8743794Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8743895Z         otherwise key = 1
2022-06-16T11:21:42.8743971Z         """
2022-06-16T11:21:42.8744044Z ^
2022-06-16T11:21:42.8744232Z ./XORcipher/XOR_cipher.py:159:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8744295Z         """
2022-06-16T11:21:42.8744429Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8744573Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8744688Z         successful otherwise false
2022-06-16T11:21:42.8744854Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8744953Z         otherwise key = 1
2022-06-16T11:21:42.8745033Z         """
2022-06-16T11:21:42.8745094Z ^
2022-06-16T11:21:42.8745281Z ./XORcipher/XOR_cipher.py:160:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8745358Z         """
2022-06-16T11:21:42.8745486Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8745629Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8745744Z         successful otherwise false
2022-06-16T11:21:42.8745914Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8746012Z         otherwise key = 1
2022-06-16T11:21:42.8746076Z         """
2022-06-16T11:21:42.8746152Z ^
2022-06-16T11:21:42.8746349Z ./XORcipher/XOR_cipher.py:161:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8746429Z         """
2022-06-16T11:21:42.8746544Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8746810Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8747022Z         successful otherwise false
2022-06-16T11:21:42.8747172Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8747262Z         otherwise key = 1
2022-06-16T11:21:42.8747332Z         """
2022-06-16T11:21:42.8747397Z ^
2022-06-16T11:21:42.8747547Z ./XORcipher/XOR_cipher.py:162:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8747616Z         """
2022-06-16T11:21:42.8747728Z         input: filename (str) and a key (int)
2022-06-16T11:21:42.8747852Z         output: returns true if decrypt process was
2022-06-16T11:21:42.8747951Z         successful otherwise false
2022-06-16T11:21:42.8748096Z         if key not passed the method uses the key by the constructor.
2022-06-16T11:21:42.8748186Z         otherwise key = 1
2022-06-16T11:21:42.8748255Z         """
2022-06-16T11:21:42.8748307Z ^
2022-06-16T11:21:42.8748476Z ./XORcipher/XOR_cipher.py:164:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8748561Z         # precondition
2022-06-16T11:21:42.8748625Z ^
2022-06-16T11:21:42.8748866Z ./XORcipher/XOR_cipher.py:165:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8749023Z         assert isinstance(file, str) and isinstance(key, int)
2022-06-16T11:21:42.8749088Z ^
2022-06-16T11:21:42.8749239Z ./XORcipher/XOR_cipher.py:167:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8749311Z         try:
2022-06-16T11:21:42.8749376Z ^
2022-06-16T11:21:42.8749537Z ./XORcipher/XOR_cipher.py:168:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8749641Z             with open(file, "r") as fin:
2022-06-16T11:21:42.8749705Z ^
2022-06-16T11:21:42.8749936Z ./XORcipher/XOR_cipher.py:169:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8750048Z                 with open("decrypt.out", "w+") as fout:
2022-06-16T11:21:42.8750113Z ^
2022-06-16T11:21:42.8750278Z ./XORcipher/XOR_cipher.py:170:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8750472Z                     # actual encrypt-process
2022-06-16T11:21:42.8750542Z ^
2022-06-16T11:21:42.8750707Z ./XORcipher/XOR_cipher.py:171:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8750799Z                     for line in fin:
2022-06-16T11:21:42.8750852Z ^
2022-06-16T11:21:42.8751019Z ./XORcipher/XOR_cipher.py:172:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8751273Z                         fout.write(self.decrypt_string(line, key))
2022-06-16T11:21:42.8751343Z ^
2022-06-16T11:21:42.8751516Z ./XORcipher/XOR_cipher.py:174:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8751594Z         except:
2022-06-16T11:21:42.8751666Z ^
2022-06-16T11:21:42.8752323Z ./XORcipher/XOR_cipher.py:174:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.8752389Z         except:
2022-06-16T11:21:42.8752467Z         ^
2022-06-16T11:21:42.8752706Z ./XORcipher/XOR_cipher.py:174:9: E722 do not use bare 'except'
2022-06-16T11:21:42.8752784Z         except:
2022-06-16T11:21:42.8752856Z         ^
2022-06-16T11:21:42.8753033Z ./XORcipher/XOR_cipher.py:175:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8753123Z             return False
2022-06-16T11:21:42.8753179Z ^
2022-06-16T11:21:42.8753360Z ./XORcipher/XOR_cipher.py:177:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8753441Z         return True
2022-06-16T11:21:42.8753510Z ^
2022-06-16T11:21:42.8753648Z ./Cat/cat.py:25:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8753744Z def with_files(files):
2022-06-16T11:21:42.8753813Z ^
2022-06-16T11:21:42.8754077Z ./Cat/cat.py:29:25: C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.8754359Z         file_contents = [contents for contents in [open(file).read() for file in files]]
2022-06-16T11:21:42.8754439Z                         ^
2022-06-16T11:21:42.8754571Z ./Cat/cat.py:38:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8754651Z def no_files():
2022-06-16T11:21:42.8754716Z ^
2022-06-16T11:21:42.8754841Z ./Cat/cat.py:50:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8754902Z def main():
2022-06-16T11:21:42.8754967Z ^
2022-06-16T11:21:42.8755143Z ./Cat/cat.py:58:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.8755230Z if __name__ == "__main__":
2022-06-16T11:21:42.8755296Z ^
2022-06-16T11:21:42.8755557Z ./brickout-game/brickout-game.py:3:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8755627Z """
2022-06-16T11:21:42.8755735Z  Pygame base template for opening a window
2022-06-16T11:21:42.8755800Z  
2022-06-16T11:21:42.8755907Z  Sample Python/Pygame Programs
2022-06-16T11:21:42.8756012Z  Simpson College Computer Science
2022-06-16T11:21:42.8756148Z  http://programarcadegames.com/
2022-06-16T11:21:42.8756333Z  http://simpson.edu/computer-science/
2022-06-16T11:21:42.8756474Z  
2022-06-16T11:21:42.8756608Z  Explanation video: http://youtu.be/vRB_983kUMc
2022-06-16T11:21:42.8756632Z 
2022-06-16T11:21:42.8756818Z -------------------------------------------------
2022-06-16T11:21:42.8756824Z 
2022-06-16T11:21:42.8756955Z Author for the Brickout game is Christian Bender
2022-06-16T11:21:42.8757105Z That includes the classes Ball, Paddle, Brick, and BrickWall.
2022-06-16T11:21:42.8757112Z 
2022-06-16T11:21:42.8757178Z """
2022-06-16T11:21:42.8757245Z ^
2022-06-16T11:21:42.8757501Z ./brickout-game/brickout-game.py:8:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8757644Z """
2022-06-16T11:21:42.8757753Z  Pygame base template for opening a window
2022-06-16T11:21:42.8757818Z  
2022-06-16T11:21:42.8757921Z  Sample Python/Pygame Programs
2022-06-16T11:21:42.8758025Z  Simpson College Computer Science
2022-06-16T11:21:42.8758150Z  http://programarcadegames.com/
2022-06-16T11:21:42.8758336Z  http://simpson.edu/computer-science/
2022-06-16T11:21:42.8758404Z  
2022-06-16T11:21:42.8758530Z  Explanation video: http://youtu.be/vRB_983kUMc
2022-06-16T11:21:42.8758549Z 
2022-06-16T11:21:42.8758726Z -------------------------------------------------
2022-06-16T11:21:42.8758733Z 
2022-06-16T11:21:42.8758864Z Author for the Brickout game is Christian Bender
2022-06-16T11:21:42.8759014Z That includes the classes Ball, Paddle, Brick, and BrickWall.
2022-06-16T11:21:42.8759020Z 
2022-06-16T11:21:42.8759087Z """
2022-06-16T11:21:42.8759153Z ^
2022-06-16T11:21:42.8759390Z ./brickout-game/brickout-game.py:36:57: W291 trailing whitespace
2022-06-16T11:21:42.8759457Z """
2022-06-16T11:21:42.8759586Z     This is a simple Ball class for respresenting a ball 
2022-06-16T11:21:42.8759663Z     in the game. 
2022-06-16T11:21:42.8759729Z """
2022-06-16T11:21:42.8759793Z    
2022-06-16T11:21:42.8759890Z                                                     ^
2022-06-16T11:21:42.8760123Z ./brickout-game/brickout-game.py:37:17: W291 trailing whitespace
2022-06-16T11:21:42.8760189Z """
2022-06-16T11:21:42.8760318Z     This is a simple Ball class for respresenting a ball 
2022-06-16T11:21:42.8760399Z     in the game. 
2022-06-16T11:21:42.8760467Z """
2022-06-16T11:21:42.8760534Z    
2022-06-16T11:21:42.8760606Z             ^
2022-06-16T11:21:42.8760918Z ./brickout-game/brickout-game.py:199:9: F841 local variable 'ballXVel' is assigned to but never used
2022-06-16T11:21:42.8761021Z         ballXVel = ball.getXVel()
2022-06-16T11:21:42.8761077Z         ^
2022-06-16T11:21:42.8761517Z ./brickout-game/brickout-game.py:200:9: F841 local variable 'ballYVel' is assigned to but never used
2022-06-16T11:21:42.8761626Z         ballYVel = ball.getYVel()
2022-06-16T11:21:42.8761699Z         ^
2022-06-16T11:21:42.8761949Z ./brickout-game/brickout-game.py:215:46: W291 trailing whitespace
2022-06-16T11:21:42.8762018Z """
2022-06-16T11:21:42.8762151Z     This is a simple class for representing a 
2022-06-16T11:21:42.8762220Z     brick wall.
2022-06-16T11:21:42.8762290Z """
2022-06-16T11:21:42.8762359Z    
2022-06-16T11:21:42.8762462Z                                          ^
2022-06-16T11:21:42.8762902Z ./brickout-game/brickout-game.py:231:13: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8762996Z         for i in range(3):
2022-06-16T11:21:42.8763071Z             ^
2022-06-16T11:21:42.8763506Z ./brickout-game/brickout-game.py:232:17: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.8763590Z             for j in range(4):
2022-06-16T11:21:42.8763672Z                 ^
2022-06-16T11:21:42.8763989Z ./brickout-game/brickout-game.py:255:22: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8764084Z             if brick != None:
2022-06-16T11:21:42.8764277Z                      ^
2022-06-16T11:21:42.8764575Z ./brickout-game/brickout-game.py:263:33: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8764797Z             if (self._bricks[i] != None) and self._bricks[i].collide(ball):
2022-06-16T11:21:42.8764878Z                                 ^
2022-06-16T11:21:42.8765064Z ./Automated Scheduled Call Reminders/caller.py:1:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.8765304Z # The project automates calls for people from the firebase cloud database and the schedular keeps it running and checks for entries
2022-06-16T11:21:42.8765424Z                                                                                         ^
2022-06-16T11:21:42.8765605Z ./Automated Scheduled Call Reminders/caller.py:3:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.8765880Z # The project can be used to set 5 min before reminder calls to a set of people for doing a particular job
2022-06-16T11:21:42.8766002Z                                                                                         ^
2022-06-16T11:21:42.8766279Z ./Automated Scheduled Call Reminders/caller.py:4:1: F401 'os' imported but unused
2022-06-16T11:21:42.8766356Z import os
2022-06-16T11:21:42.8766411Z ^
2022-06-16T11:21:42.8766682Z ./Automated Scheduled Call Reminders/caller.py:7:1: F401 'time' imported but unused
2022-06-16T11:21:42.8766761Z import time
2022-06-16T11:21:42.8766829Z ^
2022-06-16T11:21:42.8767098Z ./Automated Scheduled Call Reminders/caller.py:9:1: F401 'twilio' imported but unused
2022-06-16T11:21:42.8767178Z import twilio
2022-06-16T11:21:42.8767244Z ^
2022-06-16T11:21:42.8767409Z ./Automated Scheduled Call Reminders/caller.py:24:89: E501 line too long (122 > 88 characters)
2022-06-16T11:21:42.8767628Z # Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date
2022-06-16T11:21:42.8767758Z                                                                                         ^
2022-06-16T11:21:42.8767940Z ./Automated Scheduled Call Reminders/caller.py:26:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8768134Z # gets data from cloud database and calls 5 min prior the time (from time) alloted in the database
2022-06-16T11:21:42.8768256Z                                                                                         ^
2022-06-16T11:21:42.8768430Z ./Automated Scheduled Call Reminders/caller.py:27:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8768507Z def search():
2022-06-16T11:21:42.8768574Z ^
2022-06-16T11:21:42.8768888Z ./Automated Scheduled Call Reminders/caller.py:47:17: F841 local variable 'call' is assigned to but never used
2022-06-16T11:21:42.8769007Z                 call = client.calls.create(
2022-06-16T11:21:42.8769083Z                 ^
2022-06-16T11:21:42.8769273Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:3:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8769341Z """
2022-06-16T11:21:42.8769430Z   Author : Mohit Kumar
2022-06-16T11:21:42.8769497Z   
2022-06-16T11:21:42.8769643Z   Python program to find triplets in a given  array whose sum is zero 
2022-06-16T11:21:42.8769714Z """
2022-06-16T11:21:42.8769780Z ^
2022-06-16T11:21:42.8769954Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:4:70: W291 trailing whitespace
2022-06-16T11:21:42.8770020Z """
2022-06-16T11:21:42.8770106Z   Author : Mohit Kumar
2022-06-16T11:21:42.8770172Z   
2022-06-16T11:21:42.8770316Z   Python program to find triplets in a given  array whose sum is zero 
2022-06-16T11:21:42.8770382Z """
2022-06-16T11:21:42.8770449Z    
2022-06-16T11:21:42.8770526Z                       
2022-06-16T11:21:42.8770591Z   
2022-06-16T11:21:42.8770681Z                                        ^
2022-06-16T11:21:42.8770870Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:8:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8770977Z def find_Triplets_with_zero_sum(arr, num):
2022-06-16T11:21:42.8771045Z ^
2022-06-16T11:21:42.8771352Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:25:89: E501 line too long (132 > 88 characters)
2022-06-16T11:21:42.8771661Z     # Run a loop until l is less than r, if the sum of array[l], array[r] is equal to zero then print the triplet and break the loop
2022-06-16T11:21:42.8771799Z                                                                                         ^
2022-06-16T11:21:42.8772201Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:55:14: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.8772294Z     if found == False:
2022-06-16T11:21:42.8772372Z              ^
2022-06-16T11:21:42.8772549Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:74:1: W191 indentation contains tabs
2022-06-16T11:21:42.8772694Z """
2022-06-16T11:21:42.8772784Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8772883Z 	Enter size of array : 5 
2022-06-16T11:21:42.8773083Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8773163Z OUTPUT :
2022-06-16T11:21:42.8773267Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8773371Z 				    -3 1 2
2022-06-16T11:21:42.8773483Z 				    -1 0 1
2022-06-16T11:21:42.8773587Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8773688Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8773857Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8774046Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8774117Z """
2022-06-16T11:21:42.8774283Z ^
2022-06-16T11:21:42.8774488Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:74:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8774554Z """
2022-06-16T11:21:42.8774638Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8774730Z 	Enter size of array : 5 
2022-06-16T11:21:42.8774910Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8774983Z OUTPUT :
2022-06-16T11:21:42.8775068Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8775177Z 				    -3 1 2
2022-06-16T11:21:42.8775282Z 				    -1 0 1
2022-06-16T11:21:42.8775373Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8775468Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8775628Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8775809Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8775861Z """
2022-06-16T11:21:42.8775927Z ^
2022-06-16T11:21:42.8776098Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:74:25: W291 trailing whitespace
2022-06-16T11:21:42.8776165Z """
2022-06-16T11:21:42.8776248Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8776339Z 	Enter size of array : 5 
2022-06-16T11:21:42.8776513Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8776573Z OUTPUT :
2022-06-16T11:21:42.8776674Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8776783Z 				    -3 1 2
2022-06-16T11:21:42.8776887Z 				    -1 0 1
2022-06-16T11:21:42.8776978Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8777072Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8777233Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8777400Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8777467Z """
2022-06-16T11:21:42.8777531Z    
2022-06-16T11:21:42.8777603Z                 
2022-06-16T11:21:42.8777669Z 	  ^
2022-06-16T11:21:42.8777849Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:75:1: W191 indentation contains tabs
2022-06-16T11:21:42.8777914Z """
2022-06-16T11:21:42.8777983Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8778073Z 	Enter size of array : 5 
2022-06-16T11:21:42.8778250Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8778323Z OUTPUT :
2022-06-16T11:21:42.8778420Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8778533Z 				    -3 1 2
2022-06-16T11:21:42.8778626Z 				    -1 0 1
2022-06-16T11:21:42.8778719Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8778812Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8778970Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8779405Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8779490Z """
2022-06-16T11:21:42.8779556Z ^
2022-06-16T11:21:42.8779765Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:75:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8779818Z """
2022-06-16T11:21:42.8779901Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8779994Z 	Enter size of array : 5 
2022-06-16T11:21:42.8780190Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8780263Z OUTPUT :
2022-06-16T11:21:42.8780362Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8780470Z 				    -3 1 2
2022-06-16T11:21:42.8780563Z 				    -1 0 1
2022-06-16T11:21:42.8780731Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8780823Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8780983Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8781289Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8781360Z """
2022-06-16T11:21:42.8781431Z ^
2022-06-16T11:21:42.8781612Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:77:1: W191 indentation contains tabs
2022-06-16T11:21:42.8781681Z """
2022-06-16T11:21:42.8781768Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8781864Z 	Enter size of array : 5 
2022-06-16T11:21:42.8782054Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8782131Z OUTPUT :
2022-06-16T11:21:42.8782235Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8782337Z 				    -3 1 2
2022-06-16T11:21:42.8782447Z 				    -1 0 1
2022-06-16T11:21:42.8782544Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8782643Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8782816Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8783002Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8783072Z """
2022-06-16T11:21:42.8783128Z ^
2022-06-16T11:21:42.8783344Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:77:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8783415Z """
2022-06-16T11:21:42.8783503Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8783598Z 	Enter size of array : 5 
2022-06-16T11:21:42.8783784Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8783860Z OUTPUT :
2022-06-16T11:21:42.8783951Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8784172Z 				    -3 1 2
2022-06-16T11:21:42.8784280Z 				    -1 0 1
2022-06-16T11:21:42.8784372Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8784464Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8784622Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8784800Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8784854Z """
2022-06-16T11:21:42.8784920Z ^
2022-06-16T11:21:42.8785090Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:77:30: W291 trailing whitespace
2022-06-16T11:21:42.8785156Z """
2022-06-16T11:21:42.8785239Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8785332Z 	Enter size of array : 5 
2022-06-16T11:21:42.8785510Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8785570Z OUTPUT :
2022-06-16T11:21:42.8785668Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8785774Z 				    -3 1 2
2022-06-16T11:21:42.8785879Z 				    -1 0 1
2022-06-16T11:21:42.8785971Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8786063Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8786208Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8786384Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8786449Z """
2022-06-16T11:21:42.8786518Z    
2022-06-16T11:21:42.8786589Z                 
2022-06-16T11:21:42.8786783Z 	       ^
2022-06-16T11:21:42.8787464Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:78:1: W191 indentation contains tabs
2022-06-16T11:21:42.8787567Z """
2022-06-16T11:21:42.8787660Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8787765Z 	Enter size of array : 5 
2022-06-16T11:21:42.8788167Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8788267Z OUTPUT :
2022-06-16T11:21:42.8788382Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8788516Z 				    -3 1 2
2022-06-16T11:21:42.8788622Z 				    -1 0 1
2022-06-16T11:21:42.8788725Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8788831Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8789010Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8789207Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8789282Z """
2022-06-16T11:21:42.8789356Z ^
2022-06-16T11:21:42.8789659Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:78:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8789735Z """
2022-06-16T11:21:42.8789827Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8789932Z 	Enter size of array : 5 
2022-06-16T11:21:42.8790140Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8790222Z OUTPUT :
2022-06-16T11:21:42.8790338Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8790565Z 				    -3 1 2
2022-06-16T11:21:42.8790673Z 				    -1 0 1
2022-06-16T11:21:42.8790764Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8790858Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8791017Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8791318Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8791388Z """
2022-06-16T11:21:42.8791444Z ^
2022-06-16T11:21:42.8791636Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:79:1: W191 indentation contains tabs
2022-06-16T11:21:42.8791709Z """
2022-06-16T11:21:42.8791796Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8791892Z 	Enter size of array : 5 
2022-06-16T11:21:42.8792079Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8792155Z OUTPUT :
2022-06-16T11:21:42.8792245Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8792362Z 				    -3 1 2
2022-06-16T11:21:42.8792474Z 				    -1 0 1
2022-06-16T11:21:42.8792575Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8792675Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8792842Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8793028Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8793098Z """
2022-06-16T11:21:42.8793154Z ^
2022-06-16T11:21:42.8793368Z ./Triplets with zero sum/find_Triplets_with_zero_sum.py:79:1: E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.8793437Z """
2022-06-16T11:21:42.8793525Z SAMPLE INPUT 1 :
2022-06-16T11:21:42.8793624Z 	Enter size of array : 5 
2022-06-16T11:21:42.8793814Z 	Enter elements of array : 0, -1, 2, -3, 1
2022-06-16T11:21:42.8793877Z OUTPUT :
2022-06-16T11:21:42.8793981Z 	Triplets with 0 sum are as : 
2022-06-16T11:21:42.8794096Z 				    -3 1 2
2022-06-16T11:21:42.8794209Z 				    -1 0 1
2022-06-16T11:21:42.8794304Z COMPLEXITY ANALYSIS :
2022-06-16T11:21:42.8794406Z Time Complexity : O(n^2).
2022-06-16T11:21:42.8794574Z     Only two nested loops is required, so the time complexity is O(n^2).
2022-06-16T11:21:42.8794759Z Auxiliary Space : O(1), no extra space is required, so the time complexity is constant.
2022-06-16T11:21:42.8794816Z """
2022-06-16T11:21:42.8794886Z ^
2022-06-16T11:21:42.8795208Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:1:1: F401 'gtts.gTTS' imported but unused
2022-06-16T11:21:42.8795302Z from gtts import gTTS
2022-06-16T11:21:42.8795476Z ^
2022-06-16T11:21:42.8795805Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:2:1: F401 'playsound.playsound' imported but unused
2022-06-16T11:21:42.8795914Z from playsound import playsound
2022-06-16T11:21:42.8795966Z ^
2022-06-16T11:21:42.8796276Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:4:1: F401 'win32com.client' imported but unused
2022-06-16T11:21:42.8796373Z from win32com import client
2022-06-16T11:21:42.8796440Z ^
2022-06-16T11:21:42.8796801Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:5:1: F401 'os' imported but unused
2022-06-16T11:21:42.8796885Z import os
2022-06-16T11:21:42.8796951Z ^
2022-06-16T11:21:42.8797130Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:7:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8797205Z def tts():
2022-06-16T11:21:42.8797272Z ^
2022-06-16T11:21:42.8797619Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:8:5: F841 local variable 'audio' is assigned to but never used
2022-06-16T11:21:42.8797756Z     audio = 'speech.mp3'
2022-06-16T11:21:42.8797824Z     ^
2022-06-16T11:21:42.8798164Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:9:5: F841 local variable 'language' is assigned to but never used
2022-06-16T11:21:42.8798361Z     language = 'en'
2022-06-16T11:21:42.8798429Z     ^
2022-06-16T11:21:42.8798625Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:11:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8798692Z     
2022-06-16T11:21:42.8798758Z ^
2022-06-16T11:21:42.8799093Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:13:5: F841 local variable 'sp' is assigned to but never used
2022-06-16T11:21:42.8799199Z     sp = speaker.Speak(sentence)
2022-06-16T11:21:42.8799254Z     ^
2022-06-16T11:21:42.8799445Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:14:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8799511Z     
2022-06-16T11:21:42.8799577Z ^
2022-06-16T11:21:42.8799761Z ./VoiceAssistant/Project_Basic_struct/TextTospeech.py:15:1: W391 blank line at end of file
2022-06-16T11:21:42.8799770Z 
2022-06-16T11:21:42.8799836Z ^
2022-06-16T11:21:42.8800216Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:1:1: F403 'from speakListen import *' used; unable to detect undefined names
2022-06-16T11:21:42.8800319Z from speakListen import *
2022-06-16T11:21:42.8800372Z ^
2022-06-16T11:21:42.8800740Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:2:1: F403 'from websiteWork import *' used; unable to detect undefined names
2022-06-16T11:21:42.8800837Z from websiteWork import *
2022-06-16T11:21:42.8800907Z ^
2022-06-16T11:21:42.8801277Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:3:1: F403 'from textRead import *' used; unable to detect undefined names
2022-06-16T11:21:42.8801370Z from textRead import *
2022-06-16T11:21:42.8801435Z ^
2022-06-16T11:21:42.8801798Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:4:1: F403 'from dictator import *' used; unable to detect undefined names
2022-06-16T11:21:42.8801878Z from dictator import *
2022-06-16T11:21:42.8801944Z ^
2022-06-16T11:21:42.8802300Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:5:1: F403 'from menu import *' used; unable to detect undefined names
2022-06-16T11:21:42.8802386Z from menu import *
2022-06-16T11:21:42.8802452Z ^
2022-06-16T11:21:42.8802826Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:6:1: F403 'from speechtotext import *' used; unable to detect undefined names
2022-06-16T11:21:42.8802927Z from speechtotext import *
2022-06-16T11:21:42.8802979Z ^
2022-06-16T11:21:42.8803356Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:7:1: F403 'from TextTospeech import *' used; unable to detect undefined names
2022-06-16T11:21:42.8803458Z from TextTospeech import *
2022-06-16T11:21:42.8803525Z ^
2022-06-16T11:21:42.8803825Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:10:1: C901 'main' is too complex (16)
2022-06-16T11:21:42.8803903Z def main():
2022-06-16T11:21:42.8803968Z ^
2022-06-16T11:21:42.8804171Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:17:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8804228Z         
2022-06-16T11:21:42.8804298Z ^
2022-06-16T11:21:42.8804828Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:18:13: F405 'short_hear' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8804926Z         q = short_hear().lower()
2022-06-16T11:21:42.8804997Z             ^
2022-06-16T11:21:42.8805596Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:20:13: F405 'greet' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8805695Z             greet("end")
2022-06-16T11:21:42.8805766Z             ^
2022-06-16T11:21:42.8806267Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:23:13: F405 'greet' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8806356Z             greet("start")
2022-06-16T11:21:42.8806497Z             ^
2022-06-16T11:21:42.8807025Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:24:13: F405 'print_menu' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8807118Z             print_menu()
2022-06-16T11:21:42.8807188Z             ^
2022-06-16T11:21:42.8807394Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:26:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8807465Z                 
2022-06-16T11:21:42.8807520Z ^
2022-06-16T11:21:42.8808119Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:27:25: F405 'hear' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8808257Z                 query = hear().lower()
2022-06-16T11:21:42.8808374Z                         ^
2022-06-16T11:21:42.8808921Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:29:21: F405 'greet' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8809055Z                     greet("end")
2022-06-16T11:21:42.8809146Z                     ^
2022-06-16T11:21:42.8809874Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:33:21: F405 'tts' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8810012Z                     tts()
2022-06-16T11:21:42.8810128Z                     ^
2022-06-16T11:21:42.8810685Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:34:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8810818Z                     time.sleep(4)
2022-06-16T11:21:42.8810884Z                     ^
2022-06-16T11:21:42.8811121Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:35:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8811234Z                     
2022-06-16T11:21:42.8811382Z ^
2022-06-16T11:21:42.8811687Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:37:17: E303 too many blank lines (2)
2022-06-16T11:21:42.8811904Z                 elif "search on google" in query or "search google" in query or "google" in query:
2022-06-16T11:21:42.8812014Z                 ^
2022-06-16T11:21:42.8812249Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:37:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.8812412Z                 elif "search on google" in query or "search google" in query or "google" in query:
2022-06-16T11:21:42.8812565Z                                                                                         ^
2022-06-16T11:21:42.8813144Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:38:21: F405 'google_search' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8813280Z                     google_search()
2022-06-16T11:21:42.8813391Z                     ^
2022-06-16T11:21:42.8813984Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:39:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8814202Z                     time.sleep(10)
2022-06-16T11:21:42.8814325Z                     ^
2022-06-16T11:21:42.8814566Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:40:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8814633Z                     
2022-06-16T11:21:42.8814731Z ^
2022-06-16T11:21:42.8814968Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:41:89: E501 line too long (107 > 88 characters)
2022-06-16T11:21:42.8815196Z                 elif "search on wikipedia" in query or "search wikipedia" in query or "wikipedia" in query:
2022-06-16T11:21:42.8815436Z                                                                                         ^
2022-06-16T11:21:42.8816070Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:42:21: F405 'wiki_search' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8816202Z                     wiki_search()
2022-06-16T11:21:42.8816318Z                     ^
2022-06-16T11:21:42.8816822Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:43:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8816959Z                     time.sleep(10)
2022-06-16T11:21:42.8817068Z                     ^
2022-06-16T11:21:42.8817419Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:44:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8817550Z                     
2022-06-16T11:21:42.8818570Z ^
2022-06-16T11:21:42.8837035Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:46:21: F405 'ms_word' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8837201Z                     ms_word()
2022-06-16T11:21:42.8837275Z                     ^
2022-06-16T11:21:42.8837915Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:47:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8838024Z                     time.sleep(5)
2022-06-16T11:21:42.8838108Z                     ^
2022-06-16T11:21:42.8838329Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:48:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8838413Z                     
2022-06-16T11:21:42.8838485Z ^
2022-06-16T11:21:42.8839050Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:50:21: F405 'pdf_read' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8839138Z                     pdf_read()
2022-06-16T11:21:42.8839221Z                     ^
2022-06-16T11:21:42.8839769Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:51:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8839872Z                     time.sleep(10)
2022-06-16T11:21:42.8839954Z                     ^
2022-06-16T11:21:42.8840171Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:52:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8840250Z                    
2022-06-16T11:21:42.8840323Z ^
2022-06-16T11:21:42.8840946Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:54:21: F405 'big_text' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8841037Z                     big_text()
2022-06-16T11:21:42.8841114Z                     ^
2022-06-16T11:21:42.8841621Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:55:21: F405 'time' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8841890Z                     time.sleep(5)
2022-06-16T11:21:42.8841990Z                     ^
2022-06-16T11:21:42.8842199Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:56:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8842276Z                     
2022-06-16T11:21:42.8842330Z ^
2022-06-16T11:21:42.8842856Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:59:21: F405 'speak' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8843082Z                     speak("I could'nt understand what you just said!")
2022-06-16T11:21:42.8843255Z                     ^
2022-06-16T11:21:42.8843459Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:60:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8843534Z                 
2022-06-16T11:21:42.8843602Z ^
2022-06-16T11:21:42.8844117Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:61:71: F405 'Fore' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8844369Z                 print("\nDo you want to continue? if yes then say " + Fore.YELLOW + "\"YES\"" + Fore.WHITE + " else say " + Fore.YELLOW + "\"CLOSE PYTHON\"")
2022-06-16T11:21:42.8844471Z                                                                       ^
2022-06-16T11:21:42.8844676Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:61:89: E501 line too long (157 > 88 characters)
2022-06-16T11:21:42.8844929Z                 print("\nDo you want to continue? if yes then say " + Fore.YELLOW + "\"YES\"" + Fore.WHITE + " else say " + Fore.YELLOW + "\"CLOSE PYTHON\"")
2022-06-16T11:21:42.8845054Z                                                                                         ^
2022-06-16T11:21:42.8845564Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:61:97: F405 'Fore' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8845803Z                 print("\nDo you want to continue? if yes then say " + Fore.YELLOW + "\"YES\"" + Fore.WHITE + " else say " + Fore.YELLOW + "\"CLOSE PYTHON\"")
2022-06-16T11:21:42.8845918Z                                                                                                 ^
2022-06-16T11:21:42.8846418Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:61:125: F405 'Fore' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8846650Z                 print("\nDo you want to continue? if yes then say " + Fore.YELLOW + "\"YES\"" + Fore.WHITE + " else say " + Fore.YELLOW + "\"CLOSE PYTHON\"")
2022-06-16T11:21:42.8846779Z                                                                                                                             ^
2022-06-16T11:21:42.8847285Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:62:17: F405 'speak' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8847449Z                 speak("Do you want to continue? if yes then say YES else say CLOSE PYTHON")
2022-06-16T11:21:42.8847511Z                 ^
2022-06-16T11:21:42.8847703Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:62:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.8847865Z                 speak("Do you want to continue? if yes then say YES else say CLOSE PYTHON")
2022-06-16T11:21:42.8847977Z                                                                                         ^
2022-06-16T11:21:42.8848480Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:63:23: F405 'hear' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8848570Z                 qry = hear().lower()
2022-06-16T11:21:42.8848714Z                       ^
2022-06-16T11:21:42.8849244Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:65:21: F405 'print_menu' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8849329Z                     print_menu()
2022-06-16T11:21:42.8849393Z                     ^
2022-06-16T11:21:42.8849891Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:67:21: F405 'greet' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8850043Z                     greet("end")
2022-06-16T11:21:42.8850112Z                     ^
2022-06-16T11:21:42.8850615Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:70:21: F405 'speak' may be undefined, or defined from star imports: TextTospeech, dictator, menu, speakListen, speechtotext, textRead, websiteWork
2022-06-16T11:21:42.8850854Z                     speak("You didn't say a valid command. So I am continuing!")
2022-06-16T11:21:42.8850925Z                     ^
2022-06-16T11:21:42.8851158Z ./VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py:78:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.8851216Z main()
2022-06-16T11:21:42.8851275Z ^
2022-06-16T11:21:42.8851458Z ./VoiceAssistant/Project_Basic_struct/menu.py:1:33: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8851587Z from rich.console import Console # pip3 install Rich
2022-06-16T11:21:42.8851664Z                                 ^
2022-06-16T11:21:42.8852007Z ./VoiceAssistant/Project_Basic_struct/menu.py:3:1: F403 'from speakListen import *' used; unable to detect undefined names
2022-06-16T11:21:42.8852098Z from speakListen import *
2022-06-16T11:21:42.8852157Z ^
2022-06-16T11:21:42.8852491Z ./VoiceAssistant/Project_Basic_struct/menu.py:9:5: F405 'speak' may be undefined, or defined from star imports: speakListen
2022-06-16T11:21:42.8852592Z     speak("I can do the following")
2022-06-16T11:21:42.8852654Z     ^
2022-06-16T11:21:42.8852856Z ./VoiceAssistant/Project_Basic_struct/menu.py:10:67: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8853092Z     table = Table(title="\nI can do the following :- ", show_lines = True) 
2022-06-16T11:21:42.8853194Z                                                                   ^
2022-06-16T11:21:42.8853390Z ./VoiceAssistant/Project_Basic_struct/menu.py:10:69: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8853619Z     table = Table(title="\nI can do the following :- ", show_lines = True) 
2022-06-16T11:21:42.8853722Z                                                                     ^
2022-06-16T11:21:42.8853880Z ./VoiceAssistant/Project_Basic_struct/menu.py:10:75: W291 trailing whitespace
2022-06-16T11:21:42.8854107Z     table = Table(title="\nI can do the following :- ", show_lines = True) 
2022-06-16T11:21:42.8854215Z                                                                           ^
2022-06-16T11:21:42.8854493Z ./VoiceAssistant/Project_Basic_struct/menu.py:27:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8854567Z #print_menu()^
2022-06-16T11:21:42.8854729Z ./VoiceAssistant/Project_Basic_struct/menu.py:27:14: W292 no newline at end of file
2022-06-16T11:21:42.8854812Z #print_menu()             ^
2022-06-16T11:21:42.8855102Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:2:1: F401 'colorama.Back' imported but unused
2022-06-16T11:21:42.8855207Z from colorama import Fore, Back, Style
2022-06-16T11:21:42.8855266Z ^
2022-06-16T11:21:42.8855565Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:2:1: F401 'colorama.Style' imported but unused
2022-06-16T11:21:42.8855668Z from colorama import Fore, Back, Style
2022-06-16T11:21:42.8855727Z ^
2022-06-16T11:21:42.8855993Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:4:1: F401 'os' imported but unused
2022-06-16T11:21:42.8856056Z import os
2022-06-16T11:21:42.8856115Z ^
2022-06-16T11:21:42.8856386Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:10:31: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8856550Z python = pyttsx3.init("sapi5") # name of the engine is set as Python
2022-06-16T11:21:42.8856625Z                               ^
2022-06-16T11:21:42.8856932Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:12:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8857005Z #print(voices)
2022-06-16T11:21:42.8857063Z ^
2022-06-16T11:21:42.8857227Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:22:8: W291 trailing whitespace
2022-06-16T11:21:42.8857450Z     """[This function would speak aloud some text provided as parameter]
2022-06-16T11:21:42.8857460Z 
2022-06-16T11:21:42.8857524Z     Args:
2022-06-16T11:21:42.8857642Z         text ([str]): [It is the speech to be spoken]
2022-06-16T11:21:42.8857708Z     """    
2022-06-16T11:21:42.8857770Z        ^
2022-06-16T11:21:42.8857957Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:26:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8858023Z def greet(g):
2022-06-16T11:21:42.8858082Z ^
2022-06-16T11:21:42.8858264Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:28:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8858430Z     """Uses the datetime library to generate current time and then greets accordingly.
2022-06-16T11:21:42.8858490Z     
2022-06-16T11:21:42.8858497Z 
2022-06-16T11:21:42.8858561Z     Args:
2022-06-16T11:21:42.8858688Z         g (str): To decide whether to say hello or good bye
2022-06-16T11:21:42.8858750Z     """
2022-06-16T11:21:42.8858804Z ^
2022-06-16T11:21:42.8859425Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:40:21: E203 whitespace before ':'
2022-06-16T11:21:42.8859526Z         elif h >= 17 :
2022-06-16T11:21:42.8859600Z                     ^
2022-06-16T11:21:42.8859784Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:43:20: W291 trailing whitespace
2022-06-16T11:21:42.8859867Z         speak(text)    
2022-06-16T11:21:42.8859942Z                    ^
2022-06-16T11:21:42.8860135Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:44:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8860318Z     
2022-06-16T11:21:42.8860384Z ^
2022-06-16T11:21:42.8860583Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:49:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8860658Z def hear():
2022-06-16T11:21:42.8860722Z ^
2022-06-16T11:21:42.8860908Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:54:8: W291 trailing whitespace
2022-06-16T11:21:42.8861097Z     """[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
2022-06-16T11:21:42.8861115Z 
2022-06-16T11:21:42.8861183Z     Returns:
2022-06-16T11:21:42.8861574Z         [str]: [Speech of user as a string in English(en - IN)]
2022-06-16T11:21:42.8861656Z     """    
2022-06-16T11:21:42.8861735Z        ^
2022-06-16T11:21:42.8861974Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:58:26: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8862188Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8862403Z                          ^
2022-06-16T11:21:42.8862727Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:58:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8862938Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8863075Z                                                                                         ^
2022-06-16T11:21:42.8863308Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:59:29: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8863544Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8863639Z                             ^
2022-06-16T11:21:42.8863979Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:59:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.8864225Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8864361Z                                                                                         ^
2022-06-16T11:21:42.8864552Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:59:114: W291 trailing whitespace
2022-06-16T11:21:42.8864783Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8864929Z                                                                                                                  ^
2022-06-16T11:21:42.8865248Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:60:38: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8865463Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8865688Z                                      ^
2022-06-16T11:21:42.8865905Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:60:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8866110Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8866365Z                                                                                         ^
2022-06-16T11:21:42.8866788Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:65:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8866879Z         #time.sleep(0.5)
2022-06-16T11:21:42.8866951Z         ^
2022-06-16T11:21:42.8867175Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:67:43: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8867312Z         speech = r.record(source, duration = 9)  # option 
2022-06-16T11:21:42.8867407Z                                           ^
2022-06-16T11:21:42.8867626Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:67:45: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8867756Z         speech = r.record(source, duration = 9)  # option 
2022-06-16T11:21:42.8867839Z                                             ^
2022-06-16T11:21:42.8868017Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:67:58: W291 trailing whitespace
2022-06-16T11:21:42.8868147Z         speech = r.record(source, duration = 9)  # option 
2022-06-16T11:21:42.8868249Z                                                          ^
2022-06-16T11:21:42.8868560Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:68:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8868660Z         #speech = r.listen(source)
2022-06-16T11:21:42.8868734Z         ^
2022-06-16T11:21:42.8869028Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:71:13: E265 block comment should start with '# '
2022-06-16T11:21:42.8869134Z             #print("Recognizing...")
2022-06-16T11:21:42.8869208Z             ^
2022-06-16T11:21:42.8869402Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:75:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8869473Z         
2022-06-16T11:21:42.8869540Z ^
2022-06-16T11:21:42.8869732Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:81:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8869819Z def recognizing():
2022-06-16T11:21:42.8869873Z ^
2022-06-16T11:21:42.8870063Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:82:89: E501 line too long (97 > 88 characters)
2022-06-16T11:21:42.8870257Z     """Uses the Rich library to print a simulates version of "recognizing" by printing a loading bar.
2022-06-16T11:21:42.8870327Z     """
2022-06-16T11:21:42.8870452Z                                                                                         ^
2022-06-16T11:21:42.8870674Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:85:55: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8870815Z         rec = pr.add_task("[red]Recognizing...", total = 100)
2022-06-16T11:21:42.8871010Z                                                       ^
2022-06-16T11:21:42.8871231Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:85:57: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8871371Z         rec = pr.add_task("[red]Recognizing...", total = 100)
2022-06-16T11:21:42.8871472Z                                                         ^
2022-06-16T11:21:42.8871693Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:87:35: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8871802Z             pr.update(rec, advance = 1.0)
2022-06-16T11:21:42.8871888Z                                   ^
2022-06-16T11:21:42.8872234Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:87:37: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8872344Z             pr.update(rec, advance = 1.0)
2022-06-16T11:21:42.8872418Z                                     ^
2022-06-16T11:21:42.8872609Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:90:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8872719Z def long_hear(duration_time = 60):
2022-06-16T11:21:42.8872788Z ^
2022-06-16T11:21:42.8873009Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:90:28: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8873115Z def long_hear(duration_time = 60):
2022-06-16T11:21:42.8873315Z                            ^
2022-06-16T11:21:42.8873536Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:90:30: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8873766Z def long_hear(duration_time = 60):
2022-06-16T11:21:42.8873857Z                              ^
2022-06-16T11:21:42.8874075Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:94:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8874281Z     """[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
2022-06-16T11:21:42.8874556Z         the difference between the hear() and long_hear() is that - the
2022-06-16T11:21:42.8874768Z         hear() - records users voice for 9 seconds
2022-06-16T11:21:42.8875124Z         long_hear() - will record user's voice for the time specified by user. By default, it records for 60 seconds.
2022-06-16T11:21:42.8875193Z     Returns:
2022-06-16T11:21:42.8875433Z         [str]: [Speech of user as a string in English(en - IN)]
2022-06-16T11:21:42.8875512Z     """    
2022-06-16T11:21:42.8875644Z                                                                                         ^
2022-06-16T11:21:42.8875843Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:97:8: W291 trailing whitespace
2022-06-16T11:21:42.8876049Z     """[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
2022-06-16T11:21:42.8876307Z         the difference between the hear() and long_hear() is that - the
2022-06-16T11:21:42.8876514Z         hear() - records users voice for 9 seconds
2022-06-16T11:21:42.8876953Z         long_hear() - will record user's voice for the time specified by user. By default, it records for 60 seconds.
2022-06-16T11:21:42.8877032Z     Returns:
2022-06-16T11:21:42.8877250Z         [str]: [Speech of user as a string in English(en - IN)]
2022-06-16T11:21:42.8877321Z     """    
2022-06-16T11:21:42.8877393Z        ^
2022-06-16T11:21:42.8877599Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:101:26: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8877788Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8877870Z                          ^
2022-06-16T11:21:42.8878051Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:101:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8878240Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8878361Z                                                                                         ^
2022-06-16T11:21:42.8878636Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:102:29: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8878853Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8878938Z                             ^
2022-06-16T11:21:42.8879129Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:102:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.8879333Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8879452Z                                                                                         ^
2022-06-16T11:21:42.8879684Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:102:114: W291 trailing whitespace
2022-06-16T11:21:42.8879886Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8880017Z                                                                                                                  ^
2022-06-16T11:21:42.8880223Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:103:38: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8880411Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8880500Z                                      ^
2022-06-16T11:21:42.8880692Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:103:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8880880Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8881002Z                                                                                         ^
2022-06-16T11:21:42.8881310Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:108:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8881402Z         #time.sleep(0.5)
2022-06-16T11:21:42.8881474Z         ^
2022-06-16T11:21:42.8881701Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:110:43: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8881855Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8881948Z                                           ^
2022-06-16T11:21:42.8882297Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:110:45: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8882457Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8882545Z                                             ^
2022-06-16T11:21:42.8882736Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:110:70: W291 trailing whitespace
2022-06-16T11:21:42.8882898Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8883012Z                                                                      ^
2022-06-16T11:21:42.8883468Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:111:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8883584Z         #speech = r.listen(source)
2022-06-16T11:21:42.8883662Z         ^
2022-06-16T11:21:42.8883884Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:114:29: E225 missing whitespace around operator
2022-06-16T11:21:42.8884005Z             print(Fore.RED +"Recognizing...")
2022-06-16T11:21:42.8884095Z                             ^
2022-06-16T11:21:42.8884438Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:115:13: E265 block comment should start with '# '
2022-06-16T11:21:42.8884537Z             #recognizing()
2022-06-16T11:21:42.8884617Z             ^
2022-06-16T11:21:42.8884956Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:117:13: E265 block comment should start with '# '
2022-06-16T11:21:42.8885068Z             #print(speech + "\n")
2022-06-16T11:21:42.8885132Z             ^
2022-06-16T11:21:42.8885343Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:118:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8885420Z         
2022-06-16T11:21:42.8885493Z ^
2022-06-16T11:21:42.8885762Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:120:29: W291 trailing whitespace
2022-06-16T11:21:42.8885893Z             print(exception)            
2022-06-16T11:21:42.8885984Z                             ^
2022-06-16T11:21:42.8886198Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:124:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8886447Z def short_hear(duration_time = 5):
2022-06-16T11:21:42.8886626Z ^
2022-06-16T11:21:42.8886848Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:124:29: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8887018Z def short_hear(duration_time = 5):
2022-06-16T11:21:42.8887101Z                             ^
2022-06-16T11:21:42.8887324Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:124:31: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8887429Z def short_hear(duration_time = 5):
2022-06-16T11:21:42.8887499Z                               ^
2022-06-16T11:21:42.8887819Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:128:89: E501 line too long (115 > 88 characters)
2022-06-16T11:21:42.8888018Z     """[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
2022-06-16T11:21:42.8888853Z         the difference between the hear() and long_hear() is that - the
2022-06-16T11:21:42.8889079Z         hear() - records users voice for 9 seconds
2022-06-16T11:21:42.8889448Z         long_hear - will record user's voice for the time specified by user. By default, it records for 60 seconds.
2022-06-16T11:21:42.8889536Z     Returns:
2022-06-16T11:21:42.8889792Z         [str]: [Speech of user as a string in English(en - IN)]
2022-06-16T11:21:42.8889859Z     """    
2022-06-16T11:21:42.8889995Z                                                                                         ^
2022-06-16T11:21:42.8890205Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:131:8: W291 trailing whitespace
2022-06-16T11:21:42.8890418Z     """[It will process the speech of user using Google_Speech_Recognizer(recognize_google)]
2022-06-16T11:21:42.8890684Z         the difference between the hear() and long_hear() is that - the
2022-06-16T11:21:42.8890894Z         hear() - records users voice for 9 seconds
2022-06-16T11:21:42.8891256Z         long_hear - will record user's voice for the time specified by user. By default, it records for 60 seconds.
2022-06-16T11:21:42.8891342Z     Returns:
2022-06-16T11:21:42.8891801Z         [str]: [Speech of user as a string in English(en - IN)]
2022-06-16T11:21:42.8891873Z     """    
2022-06-16T11:21:42.8891942Z        ^
2022-06-16T11:21:42.8892150Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:135:26: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8892334Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8892415Z                          ^
2022-06-16T11:21:42.8892612Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:135:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8892798Z     r.pause_threshold = 1 # a pause of more than 1 second will stop the microphone temporarily
2022-06-16T11:21:42.8892904Z                                                                                         ^
2022-06-16T11:21:42.8893106Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:136:29: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8893434Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8893521Z                             ^
2022-06-16T11:21:42.8893850Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:136:89: E501 line too long (113 > 88 characters)
2022-06-16T11:21:42.8894071Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8894200Z                                                                                         ^
2022-06-16T11:21:42.8894551Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:136:114: W291 trailing whitespace
2022-06-16T11:21:42.8894795Z     r.energy_threshold = 300 # python by default sets it to 300. It is the minimum input energy to be considered. 
2022-06-16T11:21:42.8894921Z                                                                                                                  ^
2022-06-16T11:21:42.8895149Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:137:38: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8895355Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8895524Z                                      ^
2022-06-16T11:21:42.8895745Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:137:89: E501 line too long (94 > 88 characters)
2022-06-16T11:21:42.8895954Z     r.dynamic_energy_threshold = True # pyhton now can dynamically change the threshold energy
2022-06-16T11:21:42.8896090Z                                                                                         ^
2022-06-16T11:21:42.8896451Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:142:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8896551Z         #time.sleep(0.5)
2022-06-16T11:21:42.8896616Z         ^
2022-06-16T11:21:42.8896964Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:144:43: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8897115Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8897207Z                                           ^
2022-06-16T11:21:42.8897432Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:144:45: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8897581Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8897675Z                                             ^
2022-06-16T11:21:42.8897856Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:144:70: W291 trailing whitespace
2022-06-16T11:21:42.8897992Z         speech = r.record(source, duration = duration_time)  # option 
2022-06-16T11:21:42.8898103Z                                                                      ^
2022-06-16T11:21:42.8898415Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:145:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8898515Z         #speech = r.listen(source)
2022-06-16T11:21:42.8898585Z         ^
2022-06-16T11:21:42.8898788Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:148:29: E225 missing whitespace around operator
2022-06-16T11:21:42.8898909Z             print(Fore.RED +"Recognizing...")
2022-06-16T11:21:42.8898994Z                             ^
2022-06-16T11:21:42.8899591Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:149:13: E265 block comment should start with '# '
2022-06-16T11:21:42.8899690Z             #recognizing()
2022-06-16T11:21:42.8899767Z             ^
2022-06-16T11:21:42.8900101Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:151:13: E265 block comment should start with '# '
2022-06-16T11:21:42.8900205Z             #print(speech + "\n")
2022-06-16T11:21:42.8900280Z             ^
2022-06-16T11:21:42.8900483Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:152:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8900545Z         
2022-06-16T11:21:42.8900617Z ^
2022-06-16T11:21:42.8900808Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:154:29: W291 trailing whitespace
2022-06-16T11:21:42.8900920Z             print(exception)            
2022-06-16T11:21:42.8901006Z                             ^
2022-06-16T11:21:42.8901213Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:158:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8901286Z         
2022-06-16T11:21:42.8901343Z ^
2022-06-16T11:21:42.8901536Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:160:1: E303 too many blank lines (3)
2022-06-16T11:21:42.8901684Z if __name__ == '__main__':
2022-06-16T11:21:42.8901755Z ^
2022-06-16T11:21:42.8902180Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:167:5: E265 block comment should start with '# '
2022-06-16T11:21:42.8902375Z     #hear()
2022-06-16T11:21:42.8902444Z     ^
2022-06-16T11:21:42.8902750Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:168:5: E265 block comment should start with '# '
2022-06-16T11:21:42.8902834Z     #recognizing()
2022-06-16T11:21:42.8902903Z     ^
2022-06-16T11:21:42.8903094Z ./VoiceAssistant/Project_Basic_struct/speakListen.py:169:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8903160Z     
2022-06-16T11:21:42.8903345Z ^
2022-06-16T11:21:42.8903844Z ./VoiceAssistant/Project_Basic_struct/dictator.py:3:1: F403 'from speakListen import *' used; unable to detect undefined names
2022-06-16T11:21:42.8904036Z from speakListen import *
2022-06-16T11:21:42.8904095Z ^
2022-06-16T11:21:42.8904423Z ./VoiceAssistant/Project_Basic_struct/dictator.py:5:1: F401 'colorama.Back' imported but unused
2022-06-16T11:21:42.8904548Z from colorama import Fore, Back, Style
2022-06-16T11:21:42.8904625Z ^
2022-06-16T11:21:42.8904956Z ./VoiceAssistant/Project_Basic_struct/dictator.py:5:1: F401 'colorama.Style' imported but unused
2022-06-16T11:21:42.8905078Z from colorama import Fore, Back, Style
2022-06-16T11:21:42.8905150Z ^
2022-06-16T11:21:42.8905338Z ./VoiceAssistant/Project_Basic_struct/dictator.py:7:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8905427Z def big_text():
2022-06-16T11:21:42.8905499Z ^
2022-06-16T11:21:42.8905704Z ./VoiceAssistant/Project_Basic_struct/dictator.py:8:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.8905931Z     print("By default, I will record your voice for 60 seconds.\nDo you want to change this default timing?")
2022-06-16T11:21:42.8906066Z                                                                                         ^
2022-06-16T11:21:42.8906459Z ./VoiceAssistant/Project_Basic_struct/dictator.py:9:5: F405 'speak' may be undefined, or defined from star imports: speakListen
2022-06-16T11:21:42.8906807Z     speak("By default, I will record your voice for 60 seconds.\nDo you want to change this default timing?")
2022-06-16T11:21:42.8906863Z     ^
2022-06-16T11:21:42.8907047Z ./VoiceAssistant/Project_Basic_struct/dictator.py:9:89: E501 line too long (109 > 88 characters)
2022-06-16T11:21:42.8907250Z     speak("By default, I will record your voice for 60 seconds.\nDo you want to change this default timing?")
2022-06-16T11:21:42.8907369Z                                                                                         ^
2022-06-16T11:21:42.8907732Z ./VoiceAssistant/Project_Basic_struct/dictator.py:11:13: F405 'hear' may be undefined, or defined from star imports: speakListen
2022-06-16T11:21:42.8907826Z     query = hear().lower()
2022-06-16T11:21:42.8907896Z             ^
2022-06-16T11:21:42.8908079Z ./VoiceAssistant/Project_Basic_struct/dictator.py:15:7: E271 multiple spaces after keyword
2022-06-16T11:21:42.8908224Z     if  "yes" in query or "es" in query or "ye" in query or "s" in query:
2022-06-16T11:21:42.8908284Z       ^
2022-06-16T11:21:42.8908469Z ./VoiceAssistant/Project_Basic_struct/dictator.py:17:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.8908764Z         print("Please enter the time(in seconds) for which I shall record your speech - ", end = '')
2022-06-16T11:21:42.8908882Z                                                                                         ^
2022-06-16T11:21:42.8909097Z ./VoiceAssistant/Project_Basic_struct/dictator.py:17:95: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8909390Z         print("Please enter the time(in seconds) for which I shall record your speech - ", end = '')
2022-06-16T11:21:42.8909514Z                                                                                               ^
2022-06-16T11:21:42.8909729Z ./VoiceAssistant/Project_Basic_struct/dictator.py:17:97: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8910082Z         print("Please enter the time(in seconds) for which I shall record your speech - ", end = '')
2022-06-16T11:21:42.8910217Z                                                                                                 ^
2022-06-16T11:21:42.8910581Z ./VoiceAssistant/Project_Basic_struct/dictator.py:23:5: F405 'speak' may be undefined, or defined from star imports: speakListen
2022-06-16T11:21:42.8910717Z     speak(f"I will record for {duration_time} seconds!")
2022-06-16T11:21:42.8910782Z     ^
2022-06-16T11:21:42.8911147Z ./VoiceAssistant/Project_Basic_struct/dictator.py:24:12: F405 'long_hear' may be undefined, or defined from star imports: speakListen
2022-06-16T11:21:42.8911320Z     text = long_hear(duration_time)
2022-06-16T11:21:42.8911391Z            ^
2022-06-16T11:21:42.8911561Z ./VoiceAssistant/Project_Basic_struct/dictator.py:27:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8911638Z def colours():
2022-06-16T11:21:42.8911704Z ^
2022-06-16T11:21:42.8912010Z ./VoiceAssistant/Project_Basic_struct/dictator.py:46:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8912087Z #big_text()
2022-06-16T11:21:42.8912152Z ^
2022-06-16T11:21:42.8912439Z ./VoiceAssistant/Project_Basic_struct/dictator.py:47:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8912513Z #colours()^
2022-06-16T11:21:42.8912680Z ./VoiceAssistant/Project_Basic_struct/dictator.py:47:11: W292 no newline at end of file
2022-06-16T11:21:42.8912761Z #colours()          ^
2022-06-16T11:21:42.8913075Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:1:1: F401 'speakListen.greet' imported but unused
2022-06-16T11:21:42.8913299Z from speakListen import greet, hear
2022-06-16T11:21:42.8913372Z ^
2022-06-16T11:21:42.8913689Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:20:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8913760Z     
2022-06-16T11:21:42.8913818Z ^
2022-06-16T11:21:42.8914025Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:29:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8914114Z def wiki_search():
2022-06-16T11:21:42.8914186Z ^
2022-06-16T11:21:42.8914393Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:30:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.8914709Z     """[Speak out the summary in wikipedia and going to the website according to user's choice.]
2022-06-16T11:21:42.8914783Z     """    
2022-06-16T11:21:42.8914901Z                                                                                         ^
2022-06-16T11:21:42.8915096Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:31:8: W291 trailing whitespace
2022-06-16T11:21:42.8915408Z     """[Speak out the summary in wikipedia and going to the website according to user's choice.]
2022-06-16T11:21:42.8915485Z     """    
2022-06-16T11:21:42.8915557Z        ^
2022-06-16T11:21:42.8915764Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:32:89: E501 line too long (116 > 88 characters)
2022-06-16T11:21:42.8915995Z     wiki_search = "What do you want me to search on Wikipedia? Please tell me the exact sentence or word to Search."
2022-06-16T11:21:42.8916123Z                                                                                         ^
2022-06-16T11:21:42.8916329Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:34:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8916388Z     
2022-06-16T11:21:42.8916454Z ^
2022-06-16T11:21:42.8916820Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:42:57: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8917067Z             results = wikipedia.summary(query, sentences = 2)
2022-06-16T11:21:42.8917168Z                                                         ^
2022-06-16T11:21:42.8917389Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:42:59: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8917529Z             results = wikipedia.summary(query, sentences = 2)
2022-06-16T11:21:42.8917630Z                                                           ^
2022-06-16T11:21:42.8917875Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:50:89: E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.8918073Z             if "yes" in q or "okay" in q or "ok" in q or "opun" in q or "opan" in q or "vopen" in q or "es" in q or "s" in q:
2022-06-16T11:21:42.8918187Z                                                                                         ^
2022-06-16T11:21:42.8918523Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:58:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.8918616Z     except Exception as e:
2022-06-16T11:21:42.8918683Z     ^
2022-06-16T11:21:42.8918985Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:61:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8919131Z #wiki_search()
2022-06-16T11:21:42.8919183Z ^
2022-06-16T11:21:42.8919490Z ./VoiceAssistant/Project_Basic_struct/websiteWork.py:62:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8919571Z #google_search()
2022-06-16T11:21:42.8919636Z ^
2022-06-16T11:21:42.8919833Z ./VoiceAssistant/Project_Basic_struct/textRead.py:6:33: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8919972Z from rich.console import Console # pip3 install Rich
2022-06-16T11:21:42.8920056Z                                 ^
2022-06-16T11:21:42.8920225Z ./VoiceAssistant/Project_Basic_struct/textRead.py:10:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8920298Z def ms_word():
2022-06-16T11:21:42.8920362Z ^
2022-06-16T11:21:42.8920530Z ./VoiceAssistant/Project_Basic_struct/textRead.py:12:8: W291 trailing whitespace
2022-06-16T11:21:42.8920686Z     """[Print and speak out a ms_word docx file as specified in the path]
2022-06-16T11:21:42.8920759Z     """    
2022-06-16T11:21:42.8920830Z        ^
2022-06-16T11:21:42.8921000Z ./VoiceAssistant/Project_Basic_struct/textRead.py:17:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8921066Z         
2022-06-16T11:21:42.8921127Z ^
2022-06-16T11:21:42.8921298Z ./VoiceAssistant/Project_Basic_struct/textRead.py:18:41: W291 trailing whitespace
2022-06-16T11:21:42.8921408Z         file_loc = doubleslash(location) 
2022-06-16T11:21:42.8921494Z                                         ^
2022-06-16T11:21:42.8921676Z ./VoiceAssistant/Project_Basic_struct/textRead.py:19:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8921742Z        
2022-06-16T11:21:42.8921795Z ^
2022-06-16T11:21:42.8922095Z ./VoiceAssistant/Project_Basic_struct/textRead.py:24:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8922182Z         #print(fullText)
2022-06-16T11:21:42.8922248Z         ^
2022-06-16T11:21:42.8922535Z ./VoiceAssistant/Project_Basic_struct/textRead.py:29:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8922616Z         #print(exp)
2022-06-16T11:21:42.8922680Z         ^
2022-06-16T11:21:42.8922843Z ./VoiceAssistant/Project_Basic_struct/textRead.py:31:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.8923315Z         print(Fore.YELLOW + "I could'nt locate the file!\nIf you didn't specify the extension of the file, please specify it.")
2022-06-16T11:21:42.8923443Z                                                                                         ^
2022-06-16T11:21:42.8923867Z ./VoiceAssistant/Project_Basic_struct/textRead.py:34:1: C901 'pdf_read' is too complex (28)
2022-06-16T11:21:42.8923951Z def pdf_read():
2022-06-16T11:21:42.8924022Z ^
2022-06-16T11:21:42.8924219Z ./VoiceAssistant/Project_Basic_struct/textRead.py:34:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8924302Z def pdf_read():
2022-06-16T11:21:42.8924359Z ^
2022-06-16T11:21:42.8924540Z ./VoiceAssistant/Project_Basic_struct/textRead.py:36:8: W291 trailing whitespace
2022-06-16T11:21:42.8924686Z     """[Print and speak out the pdf on specified path]
2022-06-16T11:21:42.8924759Z     """    
2022-06-16T11:21:42.8924831Z        ^
2022-06-16T11:21:42.8925027Z ./VoiceAssistant/Project_Basic_struct/textRead.py:40:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8925099Z         
2022-06-16T11:21:42.8925157Z ^
2022-06-16T11:21:42.8925413Z ./VoiceAssistant/Project_Basic_struct/textRead.py:41:37: W291 trailing whitespace
2022-06-16T11:21:42.8925535Z         path = doubleslash(location) 
2022-06-16T11:21:42.8925624Z                                     ^
2022-06-16T11:21:42.8925839Z ./VoiceAssistant/Project_Basic_struct/textRead.py:43:31: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8926212Z         details = pdf.metadata # Stores the meta-data which generally includes Author name and Title of book/document.
2022-06-16T11:21:42.8926302Z                               ^
2022-06-16T11:21:42.8926503Z ./VoiceAssistant/Project_Basic_struct/textRead.py:43:89: E501 line too long (118 > 88 characters)
2022-06-16T11:21:42.8927157Z         details = pdf.metadata # Stores the meta-data which generally includes Author name and Title of book/document.
2022-06-16T11:21:42.8927276Z                                                                                         ^
2022-06-16T11:21:42.8927478Z ./VoiceAssistant/Project_Basic_struct/textRead.py:44:36: E261 at least two spaces before inline comment
2022-06-16T11:21:42.8927636Z         total_pages = pdf.pageCount # Stores the total number of pages
2022-06-16T11:21:42.8927720Z                                    ^
2022-06-16T11:21:42.8927903Z ./VoiceAssistant/Project_Basic_struct/textRead.py:48:89: E501 line too long (127 > 88 characters)
2022-06-16T11:21:42.8928259Z         print(Fore.YELLOW + "I could'nt locate the file!\nIf you didn't specify the extension of the file, please specify it.")
2022-06-16T11:21:42.8928374Z                                                                                         ^
2022-06-16T11:21:42.8928643Z ./VoiceAssistant/Project_Basic_struct/textRead.py:50:8: E203 whitespace before ':'
2022-06-16T11:21:42.8928704Z     try :
2022-06-16T11:21:42.8928768Z        ^
2022-06-16T11:21:42.8928936Z ./VoiceAssistant/Project_Basic_struct/textRead.py:54:30: W291 trailing whitespace
2022-06-16T11:21:42.8929011Z         """     1. Author
2022-06-16T11:21:42.8929091Z                 2. Creator
2022-06-16T11:21:42.8929170Z                 3. Producer
2022-06-16T11:21:42.8929252Z                 4. Title  """   
2022-06-16T11:21:42.8929318Z                          
2022-06-16T11:21:42.8929382Z    ^
2022-06-16T11:21:42.8929563Z ./VoiceAssistant/Project_Basic_struct/textRead.py:55:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8929629Z         
2022-06-16T11:21:42.8929694Z ^
2022-06-16T11:21:42.8929880Z ./VoiceAssistant/Project_Basic_struct/textRead.py:56:17: E222 multiple spaces after operator
2022-06-16T11:21:42.8929977Z         author =  details["author"]
2022-06-16T11:21:42.8930039Z                 ^
2022-06-16T11:21:42.8930334Z ./VoiceAssistant/Project_Basic_struct/textRead.py:57:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8930429Z         #print("Author : ",author)
2022-06-16T11:21:42.8930492Z         ^
2022-06-16T11:21:42.8930672Z ./VoiceAssistant/Project_Basic_struct/textRead.py:58:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8930740Z         
2022-06-16T11:21:42.8930801Z ^
2022-06-16T11:21:42.8931086Z ./VoiceAssistant/Project_Basic_struct/textRead.py:60:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8931179Z         #print("Title : ",title) 
2022-06-16T11:21:42.8931243Z         ^
2022-06-16T11:21:42.8931409Z ./VoiceAssistant/Project_Basic_struct/textRead.py:60:33: W291 trailing whitespace
2022-06-16T11:21:42.8931501Z         #print("Title : ",title) 
2022-06-16T11:21:42.8931580Z                                 ^
2022-06-16T11:21:42.8931759Z ./VoiceAssistant/Project_Basic_struct/textRead.py:61:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8931821Z             
2022-06-16T11:21:42.8931885Z ^
2022-06-16T11:21:42.8932177Z ./VoiceAssistant/Project_Basic_struct/textRead.py:62:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8932260Z         #print(details)
2022-06-16T11:21:42.8932323Z         ^
2022-06-16T11:21:42.8932681Z ./VoiceAssistant/Project_Basic_struct/textRead.py:63:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8932806Z         #print("Total Pages : ",total_pages)
2022-06-16T11:21:42.8932868Z         ^
2022-06-16T11:21:42.8933038Z ./VoiceAssistant/Project_Basic_struct/textRead.py:68:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8933103Z         
2022-06-16T11:21:42.8933276Z ^
2022-06-16T11:21:42.8933463Z ./VoiceAssistant/Project_Basic_struct/textRead.py:71:89: E501 line too long (213 > 88 characters)
2022-06-16T11:21:42.8934153Z         print("Say 1 or \"ONLY PRINT INDEX\" - if you want me to print the book's index.\nSay 2 if you want me to print and make me speak out the book's index.\nSay any key if you don't want to print the index.'")
2022-06-16T11:21:42.8934355Z                                                                                         ^
2022-06-16T11:21:42.8934554Z ./VoiceAssistant/Project_Basic_struct/textRead.py:72:89: E501 line too long (207 > 88 characters)
2022-06-16T11:21:42.8935094Z         speak("Say 1 or only print index if you want me to print the book's index.\nSay 2 if you want me to print and make me speak out the book's index.\nSay any key if you don't want to print the index.'")
2022-06-16T11:21:42.8935222Z                                                                                         ^
2022-06-16T11:21:42.8935409Z ./VoiceAssistant/Project_Basic_struct/textRead.py:75:89: E501 line too long (142 > 88 characters)
2022-06-16T11:21:42.8935795Z         if "only print" in q or "1" in q or "one" in q or "vone" in q or 'only' in q or "index only" in q or 'only' in q or "print only" in q: 
2022-06-16T11:21:42.8935928Z                                                                                         ^
2022-06-16T11:21:42.8936118Z ./VoiceAssistant/Project_Basic_struct/textRead.py:75:143: W291 trailing whitespace
2022-06-16T11:21:42.8936492Z         if "only print" in q or "1" in q or "one" in q or "vone" in q or 'only' in q or "index only" in q or 'only' in q or "print only" in q: 
2022-06-16T11:21:42.8936763Z                                                                                                                                               ^
2022-06-16T11:21:42.8936931Z ./VoiceAssistant/Project_Basic_struct/textRead.py:78:53: W291 trailing whitespace
2022-06-16T11:21:42.8937118Z         elif "speak" in q or "2" in q or 'two' in q: 
2022-06-16T11:21:42.8937263Z                                                     ^
2022-06-16T11:21:42.8937422Z ./VoiceAssistant/Project_Basic_struct/textRead.py:85:14: W291 trailing whitespace
2022-06-16T11:21:42.8937492Z         else: 
2022-06-16T11:21:42.8937559Z              ^
2022-06-16T11:21:42.8937741Z ./VoiceAssistant/Project_Basic_struct/textRead.py:89:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8937803Z     
2022-06-16T11:21:42.8937862Z ^
2022-06-16T11:21:42.8938031Z ./VoiceAssistant/Project_Basic_struct/textRead.py:90:9: E303 too many blank lines (2)
2022-06-16T11:21:42.8938132Z         """Allow the user to do the following
2022-06-16T11:21:42.8938223Z         1. Read/speak a page
2022-06-16T11:21:42.8938322Z         2. Read/speak a range of pages
2022-06-16T11:21:42.8938391Z         3. Lesson
2022-06-16T11:21:42.8938482Z         4. Read/speak a whole book
2022-06-16T11:21:42.8938551Z         """  
2022-06-16T11:21:42.8938616Z         ^
2022-06-16T11:21:42.8938774Z ./VoiceAssistant/Project_Basic_struct/textRead.py:95:12: W291 trailing whitespace
2022-06-16T11:21:42.8938883Z         """Allow the user to do the following
2022-06-16T11:21:42.8938968Z         1. Read/speak a page
2022-06-16T11:21:42.8939347Z         2. Read/speak a range of pages
2022-06-16T11:21:42.8939444Z         3. Lesson
2022-06-16T11:21:42.8939545Z         4. Read/speak a whole book
2022-06-16T11:21:42.8939618Z         """  
2022-06-16T11:21:42.8939680Z            ^
2022-06-16T11:21:42.8939871Z ./VoiceAssistant/Project_Basic_struct/textRead.py:96:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8939942Z         
2022-06-16T11:21:42.8940007Z ^
2022-06-16T11:21:42.8940444Z ./VoiceAssistant/Project_Basic_struct/textRead.py:97:9: E265 block comment should start with '# '
2022-06-16T11:21:42.8940545Z         #time.sleep(5)
2022-06-16T11:21:42.8940612Z         ^
2022-06-16T11:21:42.8940795Z ./VoiceAssistant/Project_Basic_struct/textRead.py:98:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8940858Z   
2022-06-16T11:21:42.8940923Z ^
2022-06-16T11:21:42.8941112Z ./VoiceAssistant/Project_Basic_struct/textRead.py:99:89: E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.8941255Z         print("____________________________________________________________________________________________________________")
2022-06-16T11:21:42.8941456Z                                                                                         ^
2022-06-16T11:21:42.8941650Z ./VoiceAssistant/Project_Basic_struct/textRead.py:100:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.8941900Z         print("1. Print/speak a single page\n2. Print/speak a range of pages\n3. Print/speak a Lesson\n4. Read/speak a whole book")
2022-06-16T11:21:42.8942024Z                                                                                         ^
2022-06-16T11:21:42.8942207Z ./VoiceAssistant/Project_Basic_struct/textRead.py:101:89: E501 line too long (131 > 88 characters)
2022-06-16T11:21:42.8942447Z         speak("1. Print/speak a single page\n2. Print/speak a range of pages\n3. Print/speak a Lesson\n4. Read/speak a whole book")
2022-06-16T11:21:42.8942671Z                                                                                         ^
2022-06-16T11:21:42.8942846Z ./VoiceAssistant/Project_Basic_struct/textRead.py:103:89: E501 line too long (110 > 88 characters)
2022-06-16T11:21:42.8943031Z         if "single" in q or "one" in q or "vone" in q or "one page" in q or "vone page" in q or "1 page" in q:
2022-06-16T11:21:42.8943141Z                                                                                         ^
2022-06-16T11:21:42.8943694Z ./VoiceAssistant/Project_Basic_struct/textRead.py:110:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8943887Z                 print(text.replace('\t',' '))
2022-06-16T11:21:42.8943982Z                                        ^
2022-06-16T11:21:42.8944281Z ./VoiceAssistant/Project_Basic_struct/textRead.py:111:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8944469Z                 speak(text.replace('\t',' '))
2022-06-16T11:21:42.8944562Z                                        ^
2022-06-16T11:21:42.8944758Z ./VoiceAssistant/Project_Basic_struct/textRead.py:113:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.8945078Z                 print("Sorry, I could recognize what you entered. Please re-enter the Page Number.")
2022-06-16T11:21:42.8945205Z                                                                                         ^
2022-06-16T11:21:42.8945402Z ./VoiceAssistant/Project_Basic_struct/textRead.py:114:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.8945720Z                 speak("Sorry, I could recognize what you entered. Please re-enter the Page Number.")
2022-06-16T11:21:42.8945837Z                                                                                         ^
2022-06-16T11:21:42.8946144Z ./VoiceAssistant/Project_Basic_struct/textRead.py:118:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8946334Z                 print(text.replace('\t',' '))
2022-06-16T11:21:42.8946427Z                                        ^
2022-06-16T11:21:42.8946738Z ./VoiceAssistant/Project_Basic_struct/textRead.py:119:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8946923Z                 speak(text.replace('\t',' '))
2022-06-16T11:21:42.8947017Z                                        ^
2022-06-16T11:21:42.8947217Z ./VoiceAssistant/Project_Basic_struct/textRead.py:121:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8947280Z         
2022-06-16T11:21:42.8947348Z ^
2022-06-16T11:21:42.8947757Z ./VoiceAssistant/Project_Basic_struct/textRead.py:122:9: E303 too many blank lines (2)
2022-06-16T11:21:42.8948002Z         elif 'range' in q or "multiple" in q:
2022-06-16T11:21:42.8948079Z         ^
2022-06-16T11:21:42.8948366Z ./VoiceAssistant/Project_Basic_struct/textRead.py:129:44: E231 missing whitespace after ','
2022-06-16T11:21:42.8948540Z                     print(text.replace('\t',' '))
2022-06-16T11:21:42.8948620Z                                            ^
2022-06-16T11:21:42.8948897Z ./VoiceAssistant/Project_Basic_struct/textRead.py:130:44: E231 missing whitespace after ','
2022-06-16T11:21:42.8949071Z                     speak(text.replace('\t',' '))
2022-06-16T11:21:42.8949231Z                                            ^
2022-06-16T11:21:42.8949413Z ./VoiceAssistant/Project_Basic_struct/textRead.py:132:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.8949702Z                 print("Sorry, I could recognize what you entered. Please re-enter the Page Number.")
2022-06-16T11:21:42.8949819Z                                                                                         ^
2022-06-16T11:21:42.8949997Z ./VoiceAssistant/Project_Basic_struct/textRead.py:133:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.8950277Z                 speak("Sorry, I could recognize what you entered. Please re-enter the Page Number.")
2022-06-16T11:21:42.8950380Z                                                                                         ^
2022-06-16T11:21:42.8950659Z ./VoiceAssistant/Project_Basic_struct/textRead.py:139:44: E231 missing whitespace after ','
2022-06-16T11:21:42.8950833Z                     print(text.replace('\t',' '))
2022-06-16T11:21:42.8950927Z                                            ^
2022-06-16T11:21:42.8951201Z ./VoiceAssistant/Project_Basic_struct/textRead.py:140:44: E231 missing whitespace after ','
2022-06-16T11:21:42.8951376Z                     speak(text.replace('\t',' '))
2022-06-16T11:21:42.8951464Z                                            ^
2022-06-16T11:21:42.8951794Z ./VoiceAssistant/Project_Basic_struct/textRead.py:146:32: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8951912Z                 if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8951990Z                                ^
2022-06-16T11:21:42.8952315Z ./VoiceAssistant/Project_Basic_struct/textRead.py:146:54: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8952437Z                 if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8952533Z                                                      ^
2022-06-16T11:21:42.8952813Z ./VoiceAssistant/Project_Basic_struct/textRead.py:147:53: E231 missing whitespace after ','
2022-06-16T11:21:42.8952973Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8953068Z                                                     ^
2022-06-16T11:21:42.8953362Z ./VoiceAssistant/Project_Basic_struct/textRead.py:147:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8953534Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8953657Z                                                                                         ^
2022-06-16T11:21:42.8953853Z ./VoiceAssistant/Project_Basic_struct/textRead.py:148:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8953926Z                 
2022-06-16T11:21:42.8953992Z ^
2022-06-16T11:21:42.8954296Z ./VoiceAssistant/Project_Basic_struct/textRead.py:152:48: E231 missing whitespace after ','
2022-06-16T11:21:42.8954491Z                         print(text.replace('\t',' '))
2022-06-16T11:21:42.8954586Z                                                ^
2022-06-16T11:21:42.8954877Z ./VoiceAssistant/Project_Basic_struct/textRead.py:153:48: E231 missing whitespace after ','
2022-06-16T11:21:42.8955065Z                         speak(text.replace('\t',' '))
2022-06-16T11:21:42.8955163Z                                                ^
2022-06-16T11:21:42.8955413Z ./VoiceAssistant/Project_Basic_struct/textRead.py:154:22: W291 trailing whitespace
2022-06-16T11:21:42.8955504Z                 else: 
2022-06-16T11:21:42.8955581Z                      ^
2022-06-16T11:21:42.8955886Z ./VoiceAssistant/Project_Basic_struct/textRead.py:159:53: E231 missing whitespace after ','
2022-06-16T11:21:42.8956047Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8956147Z                                                     ^
2022-06-16T11:21:42.8956440Z ./VoiceAssistant/Project_Basic_struct/textRead.py:159:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8956665Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8956777Z                                                                                         ^
2022-06-16T11:21:42.8957103Z ./VoiceAssistant/Project_Basic_struct/textRead.py:160:36: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8957235Z                     if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8957319Z                                    ^
2022-06-16T11:21:42.8957631Z ./VoiceAssistant/Project_Basic_struct/textRead.py:160:58: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8957756Z                     if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8957855Z                                                          ^
2022-06-16T11:21:42.8958134Z ./VoiceAssistant/Project_Basic_struct/textRead.py:164:52: E231 missing whitespace after ','
2022-06-16T11:21:42.8958322Z                             print(text.replace('\t',' '))
2022-06-16T11:21:42.8958418Z                                                    ^
2022-06-16T11:21:42.8958693Z ./VoiceAssistant/Project_Basic_struct/textRead.py:165:52: E231 missing whitespace after ','
2022-06-16T11:21:42.8958876Z                             speak(text.replace('\t',' '))
2022-06-16T11:21:42.8958965Z                                                    ^
2022-06-16T11:21:42.8959144Z ./VoiceAssistant/Project_Basic_struct/textRead.py:166:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8959215Z                     
2022-06-16T11:21:42.8959277Z ^
2022-06-16T11:21:42.8959600Z ./VoiceAssistant/Project_Basic_struct/textRead.py:173:32: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8959723Z                 if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8959800Z                                ^
2022-06-16T11:21:42.8960120Z ./VoiceAssistant/Project_Basic_struct/textRead.py:173:54: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8960241Z                 if start_pg_no != None and end_pg_no != None:
2022-06-16T11:21:42.8960333Z                                                      ^
2022-06-16T11:21:42.8960611Z ./VoiceAssistant/Project_Basic_struct/textRead.py:174:53: E231 missing whitespace after ','
2022-06-16T11:21:42.8960772Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8960865Z                                                     ^
2022-06-16T11:21:42.8961043Z ./VoiceAssistant/Project_Basic_struct/textRead.py:174:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.8961200Z                     start_pg_no, end_pg_no = map(int,search_in_toc(toc, key, total_pages))
2022-06-16T11:21:42.8961312Z                                                                                         ^
2022-06-16T11:21:42.8961484Z ./VoiceAssistant/Project_Basic_struct/textRead.py:175:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8961551Z                 
2022-06-16T11:21:42.8961612Z ^
2022-06-16T11:21:42.8961896Z ./VoiceAssistant/Project_Basic_struct/textRead.py:179:48: E231 missing whitespace after ','
2022-06-16T11:21:42.8962075Z                         print(text.replace('\t',' '))
2022-06-16T11:21:42.8962167Z                                                ^
2022-06-16T11:21:42.8962511Z ./VoiceAssistant/Project_Basic_struct/textRead.py:180:48: E231 missing whitespace after ','
2022-06-16T11:21:42.8962710Z                         speak(text.replace('\t',' '))
2022-06-16T11:21:42.8962792Z                                                ^
2022-06-16T11:21:42.8962961Z ./VoiceAssistant/Project_Basic_struct/textRead.py:181:22: W291 trailing whitespace
2022-06-16T11:21:42.8963035Z                 else: 
2022-06-16T11:21:42.8963106Z                      ^
2022-06-16T11:21:42.8963508Z ./VoiceAssistant/Project_Basic_struct/textRead.py:189:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8963687Z                 print(text.replace('\t',' '))
2022-06-16T11:21:42.8963858Z                                        ^
2022-06-16T11:21:42.8964159Z ./VoiceAssistant/Project_Basic_struct/textRead.py:190:40: E231 missing whitespace after ','
2022-06-16T11:21:42.8964328Z                 speak(text.replace('\t',' '))
2022-06-16T11:21:42.8964415Z                                        ^
2022-06-16T11:21:42.8964596Z ./VoiceAssistant/Project_Basic_struct/textRead.py:198:27: W291 trailing whitespace
2022-06-16T11:21:42.8964694Z     except Exception as e: 
2022-06-16T11:21:42.8964771Z                           ^
2022-06-16T11:21:42.8964961Z ./VoiceAssistant/Project_Basic_struct/textRead.py:203:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8965052Z def doubleslash(text):
2022-06-16T11:21:42.8965109Z ^
2022-06-16T11:21:42.8965287Z ./VoiceAssistant/Project_Basic_struct/textRead.py:204:22: W291 trailing whitespace
2022-06-16T11:21:42.8965379Z     """Replaces / with // 
2022-06-16T11:21:42.8965388Z 
2022-06-16T11:21:42.8965457Z     Args:
2022-06-16T11:21:42.8965549Z         text (str): location
2022-06-16T11:21:42.8965556Z 
2022-06-16T11:21:42.8965629Z     Returns:
2022-06-16T11:21:42.8965726Z         str: formatted location
2022-06-16T11:21:42.8965794Z     """
2022-06-16T11:21:42.8965861Z                      ^
2022-06-16T11:21:42.8966155Z ./VoiceAssistant/Project_Basic_struct/textRead.py:212:29: E203 whitespace before ','
2022-06-16T11:21:42.8966426Z     return text.replace('\\' , '\\\\')
2022-06-16T11:21:42.8966501Z                             ^
2022-06-16T11:21:42.8966682Z ./VoiceAssistant/Project_Basic_struct/textRead.py:214:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8966766Z def print_index(toc):
2022-06-16T11:21:42.8966826Z ^
2022-06-16T11:21:42.8966998Z ./VoiceAssistant/Project_Basic_struct/textRead.py:228:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8967061Z         
2022-06-16T11:21:42.8967119Z ^
2022-06-16T11:21:42.8967296Z ./VoiceAssistant/Project_Basic_struct/textRead.py:229:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8967392Z def print_n_speak_index(toc):
2022-06-16T11:21:42.8967451Z ^
2022-06-16T11:21:42.8967625Z ./VoiceAssistant/Project_Basic_struct/textRead.py:245:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8967718Z def search_in_toc(toc, key, totalpg):
2022-06-16T11:21:42.8967778Z ^
2022-06-16T11:21:42.8967962Z ./VoiceAssistant/Project_Basic_struct/textRead.py:246:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.8968180Z     """Searches a particular lesson name provided as a parameter in toc and returns its starting and ending page numbers.
2022-06-16T11:21:42.8968188Z 
2022-06-16T11:21:42.8968253Z     Args:
2022-06-16T11:21:42.8968435Z         toc (nested list): toc[1] - Topic name
2022-06-16T11:21:42.8968602Z                            toc[2] - Page number
2022-06-16T11:21:42.8968700Z         key (str): the key to be found
2022-06-16T11:21:42.8968811Z         totalpg (int): total pages in book/document
2022-06-16T11:21:42.8968818Z 
2022-06-16T11:21:42.8968889Z     Returns:
2022-06-16T11:21:42.8969024Z         int: staring and ending page numbers of lesson found.
2022-06-16T11:21:42.8969121Z         If not found then return None
2022-06-16T11:21:42.8969184Z     """
2022-06-16T11:21:42.8969297Z                                                                                         ^
2022-06-16T11:21:42.8969543Z ./VoiceAssistant/Project_Basic_struct/textRead.py:271:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8969622Z                
2022-06-16T11:21:42.8969675Z ^
2022-06-16T11:21:42.8969965Z ./VoiceAssistant/Project_Basic_struct/textRead.py:273:16: E231 missing whitespace after ','
2022-06-16T11:21:42.8970047Z     return None,None
2022-06-16T11:21:42.8970114Z                ^
2022-06-16T11:21:42.8970293Z ./VoiceAssistant/Project_Basic_struct/textRead.py:275:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8970413Z def book_details(author, title, total_pages):
2022-06-16T11:21:42.8970477Z ^
2022-06-16T11:21:42.8970680Z ./VoiceAssistant/Project_Basic_struct/textRead.py:283:57: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8970981Z     table = Table(title="\nBook Details :- ", show_lines = True) 
2022-06-16T11:21:42.8971083Z                                                         ^
2022-06-16T11:21:42.8971296Z ./VoiceAssistant/Project_Basic_struct/textRead.py:283:59: E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.8971509Z     table = Table(title="\nBook Details :- ", show_lines = True) 
2022-06-16T11:21:42.8971609Z                                                           ^
2022-06-16T11:21:42.8971776Z ./VoiceAssistant/Project_Basic_struct/textRead.py:283:65: W291 trailing whitespace
2022-06-16T11:21:42.8971986Z     table = Table(title="\nBook Details :- ", show_lines = True) 
2022-06-16T11:21:42.8972077Z                                                                 ^
2022-06-16T11:21:42.8972253Z ./VoiceAssistant/Project_Basic_struct/textRead.py:295:1: W293 blank line contains whitespace
2022-06-16T11:21:42.8972315Z    
2022-06-16T11:21:42.8972374Z ^
2022-06-16T11:21:42.8972670Z ./VoiceAssistant/Project_Basic_struct/textRead.py:296:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8972740Z #ms_word()
2022-06-16T11:21:42.8972799Z ^
2022-06-16T11:21:42.8973093Z ./VoiceAssistant/Project_Basic_struct/textRead.py:297:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8973158Z #pdf_read()
2022-06-16T11:21:42.8973337Z ^
2022-06-16T11:21:42.8973648Z ./VoiceAssistant/Project_Basic_struct/textRead.py:298:1: E265 block comment should start with '# '
2022-06-16T11:21:42.8973749Z #book_details("abc", "abcde", 12)
2022-06-16T11:21:42.8973812Z ^
2022-06-16T11:21:42.8974011Z ./VoiceAssistant/Project_Basic_struct/speechtotext.py:4:1: E302 expected 2 blank lines, found 0
2022-06-16T11:21:42.8974083Z def stt():
2022-06-16T11:21:42.8974139Z ^
2022-06-16T11:21:42.8974325Z ./VoiceAssistant/Project_Basic_struct/speechtotext.py:11:20: W292 no newline at end of file
2022-06-16T11:21:42.8974425Z         print(text)                   ^
2022-06-16T11:21:42.8974765Z ./Checker_game_by_dz/first.py:9:1: F403 'from modules.statics import *' used; unable to detect undefined names
2022-06-16T11:21:42.8974865Z from modules.statics import *
2022-06-16T11:21:42.8974927Z ^
2022-06-16T11:21:42.8975273Z ./Checker_game_by_dz/first.py:10:1: F403 'from modules.checker_board import *' used; unable to detect undefined names
2022-06-16T11:21:42.8975378Z from modules.checker_board import *
2022-06-16T11:21:42.8975442Z ^
2022-06-16T11:21:42.8975772Z ./Checker_game_by_dz/first.py:11:1: F403 'from modules.checker import *' used; unable to detect undefined names
2022-06-16T11:21:42.8975874Z from modules.checker import *
2022-06-16T11:21:42.8975938Z ^
2022-06-16T11:21:42.8976098Z ./Checker_game_by_dz/first.py:20:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8976192Z def get_row_col_mouse(pos):
2022-06-16T11:21:42.8976368Z ^
2022-06-16T11:21:42.8976764Z ./Checker_game_by_dz/first.py:22:16: F405 'sq_size' may be undefined, or defined from star imports: modules.checker, modules.checker_board, modules.statics
2022-06-16T11:21:42.8976846Z     row = y // sq_size
2022-06-16T11:21:42.8976911Z                ^
2022-06-16T11:21:42.8977312Z ./Checker_game_by_dz/first.py:23:16: F405 'sq_size' may be undefined, or defined from star imports: modules.checker, modules.checker_board, modules.statics
2022-06-16T11:21:42.8977459Z     col = x // sq_size
2022-06-16T11:21:42.8977535Z                ^
2022-06-16T11:21:42.8977955Z ./Checker_game_by_dz/first.py:37:13: F405 'checker_board' may be undefined, or defined from star imports: modules.checker, modules.checker_board, modules.statics
2022-06-16T11:21:42.8978045Z     board = checker_board()
2022-06-16T11:21:42.8978103Z             ^
2022-06-16T11:21:42.8978621Z ./Checker_game_by_dz/first.py:38:12: F405 'checker' may be undefined, or defined from star imports: modules.checker, modules.checker_board, modules.statics
2022-06-16T11:21:42.8978710Z     game = checker(WIN)
2022-06-16T11:21:42.8979909Z            ^
2022-06-16T11:21:42.8980299Z ./Checker_game_by_dz/first.py:44:27: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.8980411Z         if board.winner() != None:
2022-06-16T11:21:42.8980497Z                           ^
2022-06-16T11:21:42.8980872Z ./Checker_game_by_dz/modules/checker.py:7:1: F403 'from .checker_board import *' used; unable to detect undefined names
2022-06-16T11:21:42.8980983Z from .checker_board import *
2022-06-16T11:21:42.8981052Z ^
2022-06-16T11:21:42.8981414Z ./Checker_game_by_dz/modules/checker.py:8:1: F403 'from .statics import *' used; unable to detect undefined names
2022-06-16T11:21:42.8981516Z from .statics import *
2022-06-16T11:21:42.8981589Z ^
2022-06-16T11:21:42.8981947Z ./Checker_game_by_dz/modules/checker.py:9:1: F403 'from .pieces import *' used; unable to detect undefined names
2022-06-16T11:21:42.8982046Z from .pieces import *
2022-06-16T11:21:42.8982106Z ^
2022-06-16T11:21:42.8982774Z ./Checker_game_by_dz/modules/checker.py:25:22: F405 'checker_board' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8982877Z         self.board = checker_board()
2022-06-16T11:21:42.8982948Z                      ^
2022-06-16T11:21:42.8983444Z ./Checker_game_by_dz/modules/checker.py:26:21: F405 'black' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8983535Z         self.turn = black
2022-06-16T11:21:42.8983616Z                     ^
2022-06-16T11:21:42.8984002Z ./Checker_game_by_dz/modules/checker.py:66:17: F405 'red' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8984072Z                 red,
2022-06-16T11:21:42.8984145Z                 ^
2022-06-16T11:21:42.8984536Z ./Checker_game_by_dz/modules/checker.py:67:24: F405 'sq_size' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8984686Z                 (col * sq_size + sq_size // 2, row * sq_size + sq_size // 2),
2022-06-16T11:21:42.8984772Z                        ^
2022-06-16T11:21:42.8985164Z ./Checker_game_by_dz/modules/checker.py:67:34: F405 'sq_size' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8985312Z                 (col * sq_size + sq_size // 2, row * sq_size + sq_size // 2),
2022-06-16T11:21:42.8985402Z                                  ^
2022-06-16T11:21:42.8985777Z ./Checker_game_by_dz/modules/checker.py:67:54: F405 'sq_size' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8985916Z                 (col * sq_size + sq_size // 2, row * sq_size + sq_size // 2),
2022-06-16T11:21:42.8986021Z                                                      ^
2022-06-16T11:21:42.8986504Z ./Checker_game_by_dz/modules/checker.py:67:64: F405 'sq_size' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8986680Z                 (col * sq_size + sq_size // 2, row * sq_size + sq_size // 2),
2022-06-16T11:21:42.8986787Z                                                                ^
2022-06-16T11:21:42.8987159Z ./Checker_game_by_dz/modules/checker.py:74:25: F405 'black' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8987249Z         if self.turn == black:
2022-06-16T11:21:42.8987432Z                         ^
2022-06-16T11:21:42.8987820Z ./Checker_game_by_dz/modules/checker.py:75:25: F405 'white' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8987906Z             self.turn = white
2022-06-16T11:21:42.8987978Z                         ^
2022-06-16T11:21:42.8988336Z ./Checker_game_by_dz/modules/checker.py:77:25: F405 'black' may be undefined, or defined from star imports: .checker_board, .pieces, .statics
2022-06-16T11:21:42.8988423Z             self.turn = black
2022-06-16T11:21:42.8988498Z                         ^
2022-06-16T11:21:42.8989017Z ./Checker_game_by_dz/modules/pieces.py:6:1: F403 'from .statics import *' used; unable to detect undefined names
2022-06-16T11:21:42.8989100Z from .statics import *
2022-06-16T11:21:42.8989743Z ^
2022-06-16T11:21:42.8990185Z ./Checker_game_by_dz/modules/pieces.py:31:19: F405 'sq_size' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8990330Z         self.x = (sq_size * self.col) + (sq_size // 2)
2022-06-16T11:21:42.8990410Z                   ^
2022-06-16T11:21:42.8990774Z ./Checker_game_by_dz/modules/pieces.py:31:42: F405 'sq_size' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8990910Z         self.x = (sq_size * self.col) + (sq_size // 2)
2022-06-16T11:21:42.8991008Z                                          ^
2022-06-16T11:21:42.8991368Z ./Checker_game_by_dz/modules/pieces.py:32:19: F405 'sq_size' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8991504Z         self.y = (sq_size * self.row) + (sq_size // 2)
2022-06-16T11:21:42.8991584Z                   ^
2022-06-16T11:21:42.8991943Z ./Checker_game_by_dz/modules/pieces.py:32:42: F405 'sq_size' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8992073Z         self.y = (sq_size * self.row) + (sq_size // 2)
2022-06-16T11:21:42.8992172Z                                          ^
2022-06-16T11:21:42.8992545Z ./Checker_game_by_dz/modules/pieces.py:39:17: F405 'sq_size' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8992843Z         radd = (sq_size // 2) - self.padding
2022-06-16T11:21:42.8992903Z                 ^
2022-06-16T11:21:42.8993335Z ./Checker_game_by_dz/modules/pieces.py:40:32: F405 'gray' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8993504Z         pg.draw.circle(window, gray, (self.x, self.y), radd + self.outline)
2022-06-16T11:21:42.8993587Z                                ^
2022-06-16T11:21:42.8994059Z ./Checker_game_by_dz/modules/pieces.py:44:17: F405 'crown' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8994145Z                 crown,
2022-06-16T11:21:42.8994219Z                 ^
2022-06-16T11:21:42.8994559Z ./Checker_game_by_dz/modules/pieces.py:45:28: F405 'crown' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8994830Z                 ((self.x - crown.get_width() // 2), (self.y - crown.get_height() // 2)),
2022-06-16T11:21:42.8994915Z                            ^
2022-06-16T11:21:42.8995262Z ./Checker_game_by_dz/modules/pieces.py:45:63: F405 'crown' may be undefined, or defined from star imports: .statics
2022-06-16T11:21:42.8995534Z                 ((self.x - crown.get_width() // 2), (self.y - crown.get_height() // 2)),
2022-06-16T11:21:42.8995650Z                                                               ^
2022-06-16T11:21:42.8996009Z ./Checker_game_by_dz/modules/checker_board.py:7:1: F403 'from .statics import *' used; unable to detect undefined names
2022-06-16T11:21:42.8996107Z from .statics import *
2022-06-16T11:21:42.8996177Z ^
2022-06-16T11:21:42.8996645Z ./Checker_game_by_dz/modules/checker_board.py:8:1: F403 'from .pieces import *' used; unable to detect undefined names
2022-06-16T11:21:42.8996737Z from .pieces import *
2022-06-16T11:21:42.8996801Z ^
2022-06-16T11:21:42.8996981Z ./Checker_game_by_dz/modules/checker_board.py:11:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.8997318Z class checker_board:
2022-06-16T11:21:42.8997393Z ^
2022-06-16T11:21:42.8997756Z ./Checker_game_by_dz/modules/checker_board.py:21:21: F405 'green' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.8997844Z         window.fill(green)
2022-06-16T11:21:42.8997909Z                     ^
2022-06-16T11:21:42.8998254Z ./Checker_game_by_dz/modules/checker_board.py:22:26: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.8998348Z         for row in range(rows):
2022-06-16T11:21:42.8998427Z                          ^
2022-06-16T11:21:42.8998860Z ./Checker_game_by_dz/modules/checker_board.py:23:39: F405 'cols' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.8998968Z             for col in range(row % 2, cols, 2):
2022-06-16T11:21:42.8999051Z                                       ^
2022-06-16T11:21:42.8999398Z ./Checker_game_by_dz/modules/checker_board.py:25:29: F405 'yellow' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.8999546Z                     window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
2022-06-16T11:21:42.8999622Z                             ^
2022-06-16T11:21:42.8999969Z ./Checker_game_by_dz/modules/checker_board.py:25:44: F405 'sq_size' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9000119Z                     window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
2022-06-16T11:21:42.9000207Z                                            ^
2022-06-16T11:21:42.9000551Z ./Checker_game_by_dz/modules/checker_board.py:25:59: F405 'sq_size' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9000700Z                     window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
2022-06-16T11:21:42.9000801Z                                                           ^
2022-06-16T11:21:42.9001145Z ./Checker_game_by_dz/modules/checker_board.py:25:68: F405 'sq_size' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9001289Z                     window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
2022-06-16T11:21:42.9001396Z                                                                    ^
2022-06-16T11:21:42.9001742Z ./Checker_game_by_dz/modules/checker_board.py:25:77: F405 'sq_size' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9001887Z                     window, yellow, (row * sq_size, col * sq_size, sq_size, sq_size)
2022-06-16T11:21:42.9001995Z                                                                             ^
2022-06-16T11:21:42.9002340Z ./Checker_game_by_dz/modules/checker_board.py:34:19: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9002492Z         if row == rows - 1 or row == 0:
2022-06-16T11:21:42.9002561Z                   ^
2022-06-16T11:21:42.9002903Z ./Checker_game_by_dz/modules/checker_board.py:36:31: F405 'white' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9002999Z             if piece.color == white:
2022-06-16T11:21:42.9003075Z                               ^
2022-06-16T11:21:42.9003416Z ./Checker_game_by_dz/modules/checker_board.py:46:26: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9003505Z         for row in range(rows):
2022-06-16T11:21:42.9003576Z                          ^
2022-06-16T11:21:42.9003911Z ./Checker_game_by_dz/modules/checker_board.py:48:30: F405 'cols' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9004005Z             for col in range(cols):
2022-06-16T11:21:42.9004074Z                              ^
2022-06-16T11:21:42.9004421Z ./Checker_game_by_dz/modules/checker_board.py:51:48: F405 'pieces' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9004635Z                         self.board[row].append(pieces(row, col, white))
2022-06-16T11:21:42.9004740Z                                                ^
2022-06-16T11:21:42.9005092Z ./Checker_game_by_dz/modules/checker_board.py:51:65: F405 'white' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9005230Z                         self.board[row].append(pieces(row, col, white))
2022-06-16T11:21:42.9005331Z                                                                 ^
2022-06-16T11:21:42.9005679Z ./Checker_game_by_dz/modules/checker_board.py:53:48: F405 'pieces' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9005883Z                         self.board[row].append(pieces(row, col, black))
2022-06-16T11:21:42.9005974Z                                                ^
2022-06-16T11:21:42.9006328Z ./Checker_game_by_dz/modules/checker_board.py:53:65: F405 'black' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9006469Z                         self.board[row].append(pieces(row, col, black))
2022-06-16T11:21:42.9006573Z                                                                 ^
2022-06-16T11:21:42.9006914Z ./Checker_game_by_dz/modules/checker_board.py:61:26: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9007002Z         for row in range(rows):
2022-06-16T11:21:42.9007077Z                          ^
2022-06-16T11:21:42.9007403Z ./Checker_game_by_dz/modules/checker_board.py:62:30: F405 'cols' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9007495Z             for col in range(cols):
2022-06-16T11:21:42.9007573Z                              ^
2022-06-16T11:21:42.9007834Z ./Checker_game_by_dz/modules/checker_board.py:69:9: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.9007963Z         l = piece.col - 1
2022-06-16T11:21:42.9008030Z         ^
2022-06-16T11:21:42.9008376Z ./Checker_game_by_dz/modules/checker_board.py:73:27: F405 'black' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9008496Z         if piece.color == black or piece.king:
2022-06-16T11:21:42.9008563Z                           ^
2022-06-16T11:21:42.9008900Z ./Checker_game_by_dz/modules/checker_board.py:81:27: F405 'white' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9009017Z         if piece.color == white or piece.king:
2022-06-16T11:21:42.9009093Z                           ^
2022-06-16T11:21:42.9009439Z ./Checker_game_by_dz/modules/checker_board.py:83:56: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9009589Z                 self._traverse_l(row + 1, min(row + 3, rows), 1, piece.color, l)
2022-06-16T11:21:42.9009688Z                                                        ^
2022-06-16T11:21:42.9010032Z ./Checker_game_by_dz/modules/checker_board.py:86:56: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9010171Z                 self._traverse_r(row + 1, min(row + 3, rows), 1, piece.color, r)
2022-06-16T11:21:42.9010268Z                                                        ^
2022-06-16T11:21:42.9010607Z ./Checker_game_by_dz/modules/checker_board.py:95:35: F405 'black' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9010704Z                 if piece.color == black:
2022-06-16T11:21:42.9010784Z                                   ^
2022-06-16T11:21:42.9011128Z ./Checker_game_by_dz/modules/checker_board.py:102:20: F405 'white' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9011213Z             return white
2022-06-16T11:21:42.9011282Z                    ^
2022-06-16T11:21:42.9011623Z ./Checker_game_by_dz/modules/checker_board.py:104:20: F405 'black' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9011702Z             return black
2022-06-16T11:21:42.9011773Z                    ^
2022-06-16T11:21:42.9012108Z ./Checker_game_by_dz/modules/checker_board.py:108:53: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.9012266Z     def _traverse_l(self, start, stop, step, color, l, skip=[]):
2022-06-16T11:21:42.9012363Z                                                     ^
2022-06-16T11:21:42.9012746Z ./Checker_game_by_dz/modules/checker_board.py:108:61: B006 Do not use mutable data structures for argument defaults.  They are created during function definition time. All calls to the function reuse this one instance of that data structure, persisting changes between them.
2022-06-16T11:21:42.9012884Z     def _traverse_l(self, start, stop, step, color, l, skip=[]):
2022-06-16T11:21:42.9013048Z                                                             ^
2022-06-16T11:21:42.9013396Z ./Checker_game_by_dz/modules/checker_board.py:127:42: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9013493Z                         row = min(r + 3, rows)
2022-06-16T11:21:42.9013580Z                                          ^
2022-06-16T11:21:42.9013842Z ./Checker_game_by_dz/modules/checker_board.py:140:13: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.9013951Z             l -= 1
2022-06-16T11:21:42.9014015Z             ^
2022-06-16T11:21:42.9014397Z ./Checker_game_by_dz/modules/checker_board.py:144:65: B006 Do not use mutable data structures for argument defaults.  They are created during function definition time. All calls to the function reuse this one instance of that data structure, persisting changes between them.
2022-06-16T11:21:42.9014544Z     def _traverse_r(self, start, stop, step, color, right, skip=[]):
2022-06-16T11:21:42.9014651Z                                                                 ^
2022-06-16T11:21:42.9014995Z ./Checker_game_by_dz/modules/checker_board.py:148:25: F405 'cols' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9015078Z             if right >= cols:
2022-06-16T11:21:42.9015150Z                         ^
2022-06-16T11:21:42.9015494Z ./Checker_game_by_dz/modules/checker_board.py:163:42: F405 'rows' may be undefined, or defined from star imports: .pieces, .statics
2022-06-16T11:21:42.9015593Z                         row = min(r + 3, rows)
2022-06-16T11:21:42.9015679Z                                          ^
2022-06-16T11:21:42.9015949Z ./stone_paper_scissor/main.py:18:5: F841 local variable 'e' is assigned to but never used
2022-06-16T11:21:42.9016042Z     except ValueError as e:
2022-06-16T11:21:42.9016100Z     ^
2022-06-16T11:21:42.9016242Z ./Snake_water_gun/main.py:38:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.9016635Z         "There will be 10 matches, and the one who wins more matches will win. Let's start."
2022-06-16T11:21:42.9016757Z                                                                                         ^
2022-06-16T11:21:42.9017063Z ./Snake_water_gun/main.py:80:8: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9017142Z if run == True:
2022-06-16T11:21:42.9017212Z        ^
2022-06-16T11:21:42.9017461Z ./BoardGame-CLI/snakeLadder.py:40:1: C901 'play' is too complex (13)
2022-06-16T11:21:42.9017536Z def play():
2022-06-16T11:21:42.9017600Z ^
2022-06-16T11:21:42.9017938Z ./BoardGame-CLI/snakeLadder.py:62:35: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9018069Z                     if isReady[i] == False and temp1 == 6:
2022-06-16T11:21:42.9018153Z                                   ^
2022-06-16T11:21:42.9018475Z ./BoardGame-CLI/snakeLadder.py:88:21: F841 local variable 'current_loc' is assigned to but never used
2022-06-16T11:21:42.9018624Z                     current_loc = 0  # vaiable for iterating location
2022-06-16T11:21:42.9018692Z                     ^
2022-06-16T11:21:42.9019312Z ./BoardGame-CLI/uno.py:23:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9019418Z     for i in range(4):
2022-06-16T11:21:42.9019593Z         ^
2022-06-16T11:21:42.9020041Z ./BoardGame-CLI/uno.py:52:9: B007 Loop control variable 'x' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9020142Z     for x in range(numCards):
2022-06-16T11:21:42.9020209Z         ^
2022-06-16T11:21:42.9020439Z ./BoardGame-CLI/uno.py:119:1: C901 'Loop 119' is too complex (21)
2022-06-16T11:21:42.9020519Z while playing:
2022-06-16T11:21:42.9020689Z ^
2022-06-16T11:21:42.9020981Z ./Webbrowser/tk-browser.py:6:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.9021253Z from tkinter import * # pip install tk-tools
2022-06-16T11:21:42.9021315Z ^
2022-06-16T11:21:42.9021567Z ./Webbrowser/tk-browser.py:6:22: E261 at least two spaces before inline comment
2022-06-16T11:21:42.9021740Z from tkinter import * # pip install tk-tools
2022-06-16T11:21:42.9021805Z                      ^
2022-06-16T11:21:42.9022057Z ./Webbrowser/tk-browser.py:7:18: E261 at least two spaces before inline comment
2022-06-16T11:21:42.9022176Z import tkinterweb # pip install tkinterweb
2022-06-16T11:21:42.9022245Z                  ^
2022-06-16T11:21:42.9022476Z ./Webbrowser/tk-browser.py:10:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9022557Z class Browser(Tk):
2022-06-16T11:21:42.9022619Z ^
2022-06-16T11:21:42.9022902Z ./Webbrowser/tk-browser.py:10:15: F405 'Tk' may be undefined, or defined from star imports: tkinter
2022-06-16T11:21:42.9022982Z class Browser(Tk):
2022-06-16T11:21:42.9023048Z               ^
2022-06-16T11:21:42.9023281Z ./Webbrowser/tk-browser.py:12:22: E231 missing whitespace after ','
2022-06-16T11:21:42.9023383Z         super(Browser,self).__init__()
2022-06-16T11:21:42.9023453Z                      ^
2022-06-16T11:21:42.9023681Z ./Webbrowser/tk-browser.py:17:37: E231 missing whitespace after ','
2022-06-16T11:21:42.9023791Z             browser.pack(fill="both",expand=True)
2022-06-16T11:21:42.9023873Z                                     ^
2022-06-16T11:21:42.9024103Z ./Webbrowser/tk-browser.py:20:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9024166Z             
2022-06-16T11:21:42.9024229Z ^
2022-06-16T11:21:42.9024457Z ./Webbrowser/tk-browser.py:21:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9024522Z             
2022-06-16T11:21:42.9024574Z ^
2022-06-16T11:21:42.9024799Z ./Webbrowser/tk-browser.py:25:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9024863Z     
2022-06-16T11:21:42.9024923Z ^
2022-06-16T11:21:42.9025226Z ./Webbrowser/tk-browser.py:26:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9025312Z if __name__ == "__main__":
2022-06-16T11:21:42.9025373Z ^
2022-06-16T11:21:42.9025533Z ./1 File handle/File handle text/question3.py:6:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9025615Z def write_to_file():
2022-06-16T11:21:42.9025678Z ^
2022-06-16T11:21:42.9025843Z ./1 File handle/File handle text/question3.py:16:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9025909Z         
2022-06-16T11:21:42.9025973Z ^
2022-06-16T11:21:42.9026142Z ./1 File handle/File handle text/question3.py:20:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9026230Z def check_first_letter():
2022-06-16T11:21:42.9026282Z ^
2022-06-16T11:21:42.9026498Z ./1 File handle/File handle text/question3.py:31:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9026581Z if __name__ == "__main__":
2022-06-16T11:21:42.9026642Z ^
2022-06-16T11:21:42.9026852Z ./1 File handle/File handle text/question 5.py:19:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9026937Z if __name__ == "__main__":
2022-06-16T11:21:42.9026996Z ^
2022-06-16T11:21:42.9027186Z ./1 File handle/File handle text/input,output and error streams.py:11:89: E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.9027464Z         for (i) in ch:  # ch is the whole file,for i in ch gives lines, for j in i gives letters,for j in i.split gives words
2022-06-16T11:21:42.9027594Z                                                                                         ^
2022-06-16T11:21:42.9027784Z ./1 File handle/File handle text/input,output and error streams.py:16:1: W391 blank line at end of file
2022-06-16T11:21:42.9027794Z 
2022-06-16T11:21:42.9027853Z ^
2022-06-16T11:21:42.9028065Z ./1 File handle/File handle text/question 6.py:19:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9028145Z if __name__ == "__main__":
2022-06-16T11:21:42.9028204Z ^
2022-06-16T11:21:42.9028361Z ./1 File handle/File handle text/question 2.py:6:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9028507Z def display_words():
2022-06-16T11:21:42.9028570Z ^
2022-06-16T11:21:42.9028724Z ./1 File handle/File handle text/question 2.py:15:17: W291 trailing whitespace
2022-06-16T11:21:42.9028801Z     return count 
2022-06-16T11:21:42.9028871Z                 ^
2022-06-16T11:21:42.9029087Z ./1 File handle/File handle text/question 2.py:17:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9029165Z if __name__ == "__main__":
2022-06-16T11:21:42.9029217Z ^
2022-06-16T11:21:42.9029382Z ./1 File handle/File handle text/question 2.py:19:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9029448Z                 
2022-06-16T11:21:42.9029508Z ^
2022-06-16T11:21:42.9029664Z ./1 File handle/File handle text/question 2.py:23:1: W391 blank line at end of file
2022-06-16T11:21:42.9029671Z 
2022-06-16T11:21:42.9029728Z ^
2022-06-16T11:21:42.9029936Z ./1 File handle/File handle binary/question 1 (elegible for remedial, top marks).py:9:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9030178Z """Amit is a monitor of class XII-A and he stored the record of all
2022-06-16T11:21:42.9030426Z the students of his class in a file named “class.dat”.
2022-06-16T11:21:42.9030583Z Structure of record is [roll number, name, percentage]. His computer
2022-06-16T11:21:42.9030711Z teacher has assigned the following duty to Amit
2022-06-16T11:21:42.9030719Z 
2022-06-16T11:21:42.9030868Z Write a function remcount( ) to count the number of students who need
2022-06-16T11:21:42.9031000Z  remedial class (student who scored less than 40 percent)
2022-06-16T11:21:42.9031007Z 
2022-06-16T11:21:42.9031069Z  
2022-06-16T11:21:42.9031130Z  """
2022-06-16T11:21:42.9031183Z ^
2022-06-16T11:21:42.9031319Z ./Wordle/wordle.py:12:89: E501 line too long (108 > 88 characters)
2022-06-16T11:21:42.9031382Z """
2022-06-16T11:21:42.9031536Z # dictionary by http://www.gwicks.net/dictionaries.htm
2022-06-16T11:21:42.9031636Z # Load full English dictionary
2022-06-16T11:21:42.9031814Z dictionary = open("Dictionary.txt", 'r')
2022-06-16T11:21:42.9031908Z # Load new empty dictionary
2022-06-16T11:21:42.9032048Z new_dictionary = open("5 letter word dictionary.txt", "w")
2022-06-16T11:21:42.9032055Z 
2022-06-16T11:21:42.9032144Z # Read the full English dictionary
2022-06-16T11:21:42.9032256Z dictionary_content = dictionary.read()
2022-06-16T11:21:42.9032376Z # Split the full dictionary on every new line
2022-06-16T11:21:42.9032581Z dictionary_content = dictionary_content.split("\n") # This returns a list of all the words in the dictionary
2022-06-16T11:21:42.9032588Z 
2022-06-16T11:21:42.9032706Z # Loop over all the words in the full dictionary
2022-06-16T11:21:42.9032798Z for i in dictionary_content:
2022-06-16T11:21:42.9032919Z     # Check if the current word is 5 characters long
2022-06-16T11:21:42.9032996Z     if len(i) == 5:
2022-06-16T11:21:42.9033092Z         # Write word to the new dictionary
2022-06-16T11:21:42.9033196Z         new_dictionary.write(f"{i}\n")
2022-06-16T11:21:42.9033201Z 
2022-06-16T11:21:42.9033293Z # Close out of the new dictionary
2022-06-16T11:21:42.9033382Z new_dictionary.close()
2022-06-16T11:21:42.9033442Z """
2022-06-16T11:21:42.9033501Z    
2022-06-16T11:21:42.9033596Z                                                       
2022-06-16T11:21:42.9033664Z                              ^
2022-06-16T11:21:42.9033887Z ./Wordle/wordle.py:31:47: E261 at least two spaces before inline comment
2022-06-16T11:21:42.9034212Z     dictionary = dictionary.read().split('\n') # This returns a list of all the words in the dictionary
2022-06-16T11:21:42.9034306Z                                               ^
2022-06-16T11:21:42.9034442Z ./Wordle/wordle.py:31:89: E501 line too long (103 > 88 characters)
2022-06-16T11:21:42.9034730Z     dictionary = dictionary.read().split('\n') # This returns a list of all the words in the dictionary
2022-06-16T11:21:42.9034845Z                                                                                         ^
2022-06-16T11:21:42.9035132Z ./Wordle/wordle.py:48:1: C901 'Loop 48' is too complex (17)
2022-06-16T11:21:42.9035195Z while True:
2022-06-16T11:21:42.9035255Z ^
2022-06-16T11:21:42.9035480Z ./Wordle/wordle.py:66:8: E713 test for membership should be 'not in'
2022-06-16T11:21:42.9035579Z     if not user_inp in dictionary:
2022-06-16T11:21:42.9035685Z        ^
2022-06-16T11:21:42.9035831Z ./Wordle/wordle.py:87:89: E501 line too long (114 > 88 characters)
2022-06-16T11:21:42.9036027Z                 # Check if letter has been checkd more or equal to the ammount of these letters inside of the word
2022-06-16T11:21:42.9036132Z                                                                                         ^
2022-06-16T11:21:42.9036256Z ./Wordle/wordle.py:99:9: E303 too many blank lines (2)
2022-06-16T11:21:42.9036340Z         answer_given = False
2022-06-16T11:21:42.9036403Z         ^
2022-06-16T11:21:42.9036534Z ./Wordle/wordle.py:108:89: E501 line too long (100 > 88 characters)
2022-06-16T11:21:42.9036712Z                 if not user_inp[word.index(user_inp[letter])] == word[word.index(user_inp[letter])]:
2022-06-16T11:21:42.9036821Z                                                                                         ^
2022-06-16T11:21:42.9036960Z ./Wordle/wordle.py:120:12: E111 indentation is not a multiple of 4
2022-06-16T11:21:42.9037079Z            letters_checked.append(user_inp[letter])
2022-06-16T11:21:42.9037145Z            ^
2022-06-16T11:21:42.9037493Z ./insta_monitering/insta_datafetcher.py:95:17: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9037572Z                 return data
2022-06-16T11:21:42.9037639Z                 ^
2022-06-16T11:21:42.9037950Z ./insta_monitering/insta_datafetcher.py:98:17: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.9038033Z         if data != None:
2022-06-16T11:21:42.9038102Z                 ^
2022-06-16T11:21:42.9038442Z ./insta_monitering/insta_datafetcher.py:156:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9038557Z             return userdata, media_post, top_post
2022-06-16T11:21:42.9038624Z             ^
2022-06-16T11:21:42.9038935Z ./insta_monitering/insta_datafetcher.py:168:5: C901 'MoniteringClass._lastProcess' is too complex (14)
2022-06-16T11:21:42.9039073Z     def _lastProcess(self, userdata, media_post, top_post):
2022-06-16T11:21:42.9039136Z     ^
2022-06-16T11:21:42.9039479Z ./insta_monitering/insta_datafetcher.py:218:25: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9039567Z                         return data
2022-06-16T11:21:42.9039646Z                         ^
2022-06-16T11:21:42.9040063Z ./insta_monitering/insta_datafetcher.py:221:25: E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.9040270Z                 if data != None:
2022-06-16T11:21:42.9040349Z                         ^
2022-06-16T11:21:42.9040782Z ./insta_monitering/insta_datafetcher.py:225:13: F841 local variable 'finallydata' is assigned to but never used
2022-06-16T11:21:42.9040917Z             finallydata = self._lastProcess(
2022-06-16T11:21:42.9040991Z             ^
2022-06-16T11:21:42.9042081Z ./insta_monitering/insta_datafetcher.py:289:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9042209Z             return value
2022-06-16T11:21:42.9042273Z             ^
2022-06-16T11:21:42.9042697Z ./insta_monitering/insta_datafetcher.py:316:26: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9042985Z                 if check == False:
2022-06-16T11:21:42.9043066Z                          ^
2022-06-16T11:21:42.9043583Z ./insta_monitering/insta_datafetcher.py:340:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9043674Z             return True
2022-06-16T11:21:42.9043926Z             ^
2022-06-16T11:21:42.9044299Z ./insta_monitering/insta_datafetcher.py:361:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9044379Z             return result
2022-06-16T11:21:42.9044450Z             ^
2022-06-16T11:21:42.9044826Z ./insta_monitering/insta_datafetcher.py:385:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9044947Z             return ujson.dumps(mainlist)
2022-06-16T11:21:42.9045017Z             ^
2022-06-16T11:21:42.9045396Z ./insta_monitering/insta_datafetcher.py:392:32: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9045549Z             if limit.isdigit() == False and date.isdigit() == False:
2022-06-16T11:21:42.9045636Z                                ^
2022-06-16T11:21:42.9045995Z ./insta_monitering/insta_datafetcher.py:392:60: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9046262Z             if limit.isdigit() == False and date.isdigit() == False:
2022-06-16T11:21:42.9046370Z                                                            ^
2022-06-16T11:21:42.9046834Z ./insta_monitering/insta_datafetcher.py:416:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9046940Z             return ujson.dumps(postval)
2022-06-16T11:21:42.9047005Z             ^
2022-06-16T11:21:42.9047342Z ./insta_monitering/insta_datafetcher.py:423:32: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9047479Z             if limit.isdigit() == False and date.isdigit() == False:
2022-06-16T11:21:42.9047556Z                                ^
2022-06-16T11:21:42.9047875Z ./insta_monitering/insta_datafetcher.py:423:60: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9048007Z             if limit.isdigit() == False and date.isdigit() == False:
2022-06-16T11:21:42.9048105Z                                                            ^
2022-06-16T11:21:42.9048452Z ./insta_monitering/insta_datafetcher.py:442:13: B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9048556Z             return ujson.dumps(postval)
2022-06-16T11:21:42.9048619Z             ^
2022-06-16T11:21:42.9049060Z ./insta_monitering/insta_api.py:10:5: F403 'from instagram_monitering.insta_datafetcher import *' used; unable to detect undefined names
2022-06-16T11:21:42.9049213Z     from instagram_monitering.insta_datafetcher import *
2022-06-16T11:21:42.9049277Z     ^
2022-06-16T11:21:42.9049627Z ./insta_monitering/insta_api.py:11:5: F403 'from instagram_monitering.subpinsta import *' used; unable to detect undefined names
2022-06-16T11:21:42.9049757Z     from instagram_monitering.subpinsta import *
2022-06-16T11:21:42.9049821Z     ^
2022-06-16T11:21:42.9050428Z ./insta_monitering/insta_api.py:12:1: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9050566Z except:
2022-06-16T11:21:42.9050628Z ^
2022-06-16T11:21:42.9050858Z ./insta_monitering/insta_api.py:12:1: E722 do not use bare 'except'
2022-06-16T11:21:42.9050922Z except:
2022-06-16T11:21:42.9050975Z ^
2022-06-16T11:21:42.9051298Z ./insta_monitering/insta_api.py:13:5: F403 'from insta_datafetcher import *' used; unable to detect undefined names
2022-06-16T11:21:42.9051403Z     from insta_datafetcher import *
2022-06-16T11:21:42.9051465Z     ^
2022-06-16T11:21:42.9051768Z ./insta_monitering/insta_api.py:14:5: F403 'from subpinsta import *' used; unable to detect undefined names
2022-06-16T11:21:42.9051859Z     from subpinsta import *
2022-06-16T11:21:42.9051919Z     ^
2022-06-16T11:21:42.9052429Z ./insta_monitering/insta_api.py:24:13: F405 'instasubprocess' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9052605Z             instasubprocess(user=user, tags=tags, type=type, productId=productId)
2022-06-16T11:21:42.9052670Z             ^
2022-06-16T11:21:42.9053278Z ./insta_monitering/insta_api.py:25:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9053350Z         except:
2022-06-16T11:21:42.9053415Z         ^
2022-06-16T11:21:42.9053641Z ./insta_monitering/insta_api.py:25:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9053714Z         except:
2022-06-16T11:21:42.9053769Z         ^
2022-06-16T11:21:42.9054260Z ./insta_monitering/insta_api.py:26:47: F405 'sys' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9054429Z             print("error::background_task>>", sys.exc_info()[1])
2022-06-16T11:21:42.9054523Z                                               ^
2022-06-16T11:21:42.9055131Z ./insta_monitering/insta_api.py:35:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9055202Z         except:
2022-06-16T11:21:42.9055266Z         ^
2022-06-16T11:21:42.9055622Z ./insta_monitering/insta_api.py:35:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9055698Z         except:
2022-06-16T11:21:42.9055755Z         ^
2022-06-16T11:21:42.9056284Z ./insta_monitering/insta_api.py:50:20: F405 'ujson' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9056513Z         self.write(ujson.dumps(temp))
2022-06-16T11:21:42.9056592Z                    ^
2022-06-16T11:21:42.9057390Z ./insta_monitering/insta_api.py:60:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9057470Z         except:
2022-06-16T11:21:42.9057541Z         ^
2022-06-16T11:21:42.9057876Z ./insta_monitering/insta_api.py:60:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9058540Z         except:
2022-06-16T11:21:42.9058625Z         ^
2022-06-16T11:21:42.9059453Z ./insta_monitering/insta_api.py:62:15: F405 'InstaPorcessClass' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9059579Z         obj = InstaPorcessClass()
2022-06-16T11:21:42.9059654Z               ^
2022-06-16T11:21:42.9060229Z ./insta_monitering/insta_api.py:74:20: F405 'ujson' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9060526Z         self.write(ujson.dumps(temp))
2022-06-16T11:21:42.9060608Z                    ^
2022-06-16T11:21:42.9061321Z ./insta_monitering/insta_api.py:84:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9061393Z         except:
2022-06-16T11:21:42.9061465Z         ^
2022-06-16T11:21:42.9061722Z ./insta_monitering/insta_api.py:84:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9061802Z         except:
2022-06-16T11:21:42.9061875Z         ^
2022-06-16T11:21:42.9062585Z ./insta_monitering/insta_api.py:86:15: F405 'InstaPorcessClass' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9062800Z         obj = InstaPorcessClass()
2022-06-16T11:21:42.9062865Z               ^
2022-06-16T11:21:42.9063349Z ./insta_monitering/insta_api.py:98:20: F405 'ujson' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9063454Z         self.write(ujson.dumps(temp))
2022-06-16T11:21:42.9063523Z                    ^
2022-06-16T11:21:42.9064128Z ./insta_monitering/insta_api.py:124:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9064195Z         except:
2022-06-16T11:21:42.9064257Z         ^
2022-06-16T11:21:42.9064482Z ./insta_monitering/insta_api.py:124:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9064548Z         except:
2022-06-16T11:21:42.9064607Z         ^
2022-06-16T11:21:42.9065121Z ./insta_monitering/insta_api.py:126:22: F405 'DBDataFetcher' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9065295Z         recordsobj = DBDataFetcher(user=user, tags=q, type=type, productId=productId)
2022-06-16T11:21:42.9065370Z                      ^
2022-06-16T11:21:42.9065524Z ./insta_monitering/insta_api.py:128:89: E501 line too long (110 > 88 characters)
2022-06-16T11:21:42.9065700Z         # print("{0}, {1}, {2}, {3}".format(temp["userId"], temp["productId"], temp["query"], temp["status"]))
2022-06-16T11:21:42.9065811Z                                                                                         ^
2022-06-16T11:21:42.9066419Z ./insta_monitering/insta_api.py:141:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9066492Z         except:
2022-06-16T11:21:42.9066549Z         ^
2022-06-16T11:21:42.9066774Z ./insta_monitering/insta_api.py:141:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9066842Z         except:
2022-06-16T11:21:42.9066905Z         ^
2022-06-16T11:21:42.9067490Z ./insta_monitering/insta_api.py:143:22: F405 'DBDataFetcher' may be undefined, or defined from star imports: insta_datafetcher, instagram_monitering.insta_datafetcher, instagram_monitering.subpinsta, subpinsta
2022-06-16T11:21:42.9067678Z         recordsobj = DBDataFetcher(user=user, tags=q, type=type, productId=productId)
2022-06-16T11:21:42.9067749Z                      ^
2022-06-16T11:21:42.9067903Z ./insta_monitering/insta_api.py:145:89: E501 line too long (110 > 88 characters)
2022-06-16T11:21:42.9068072Z         # print("{0}, {1}, {2}, {3}".format(temp["userId"], temp["productId"], temp["query"], temp["status"]))
2022-06-16T11:21:42.9068250Z                                                                                         ^
2022-06-16T11:21:42.9068869Z ./insta_monitering/subpinsta.py:24:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9068941Z     except:
2022-06-16T11:21:42.9069007Z     ^
2022-06-16T11:21:42.9069235Z ./insta_monitering/subpinsta.py:24:5: E722 do not use bare 'except'
2022-06-16T11:21:42.9069305Z     except:
2022-06-16T11:21:42.9069367Z     ^
2022-06-16T11:21:42.9069539Z ./Windows_Wallpaper_Script/wallpaper_extract.py:16:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.9069782Z         + "\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\"
2022-06-16T11:21:42.9069898Z                                                                                         ^
2022-06-16T11:21:42.9070219Z ./BlackJack_game/blackjack_simulate.py:84:21: C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.9070321Z             ranks = [x for x in range(1, 14)]
2022-06-16T11:21:42.9070391Z                     ^
2022-06-16T11:21:42.9070679Z ./BlackJack_game/blackjack.py:4:1: F403 'from time import *' used; unable to detect undefined names
2022-06-16T11:21:42.9070761Z from time import *
2022-06-16T11:21:42.9070815Z ^
2022-06-16T11:21:42.9071111Z ./BlackJack_game/blackjack.py:18:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9071181Z sleep(2)
2022-06-16T11:21:42.9071243Z ^
2022-06-16T11:21:42.9071534Z ./BlackJack_game/blackjack.py:20:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9071602Z sleep(2)
2022-06-16T11:21:42.9071665Z ^
2022-06-16T11:21:42.9071949Z ./BlackJack_game/blackjack.py:22:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9072017Z sleep(2)
2022-06-16T11:21:42.9072083Z ^
2022-06-16T11:21:42.9072372Z ./BlackJack_game/blackjack.py:24:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9072436Z sleep(2)
2022-06-16T11:21:42.9072492Z ^
2022-06-16T11:21:42.9072776Z ./BlackJack_game/blackjack.py:26:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9072833Z sleep(2)
2022-06-16T11:21:42.9072895Z ^
2022-06-16T11:21:42.9073175Z ./BlackJack_game/blackjack.py:29:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9073239Z sleep(2)
2022-06-16T11:21:42.9073296Z ^
2022-06-16T11:21:42.9073446Z ./BlackJack_game/blackjack.py:31:89: E501 line too long (124 > 88 characters)
2022-06-16T11:21:42.9073664Z     "So You Are Still Here Not Gone I Gave You Chance But No Problem May Be You Trust Your Fortune A Lot \n Lets Begin Then"
2022-06-16T11:21:42.9073776Z                                                                                         ^
2022-06-16T11:21:42.9074058Z ./BlackJack_game/blackjack.py:33:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9074123Z sleep(2)
2022-06-16T11:21:42.9074182Z ^
2022-06-16T11:21:42.9074474Z ./BlackJack_game/blackjack.py:36:1: F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9074539Z sleep(2)
2022-06-16T11:21:42.9074598Z ^
2022-06-16T11:21:42.9074913Z ./BlackJack_game/blackjack.py:69:1: C901 'dealer_choice' is too complex (13)
2022-06-16T11:21:42.9074998Z def dealer_choice():
2022-06-16T11:21:42.9075060Z ^
2022-06-16T11:21:42.9075217Z ./BlackJack_game/blackjack_rr.py:119:89: E501 line too long (122 > 88 characters)
2022-06-16T11:21:42.9075422Z                     "Your bet cannot exceed your balance and you have to enter a positive bet! Your current balance is: ",
2022-06-16T11:21:42.9075538Z                                                                                         ^
2022-06-16T11:21:42.9075787Z ./BlackJack_game/blackjack_rr.py:191:1: C901 'Loop 191' is too complex (11)
2022-06-16T11:21:42.9075931Z while True:
2022-06-16T11:21:42.9075990Z ^
2022-06-16T11:21:42.9076135Z ./BlackJack_game/blackjack_rr.py:195:89: E501 line too long (129 > 88 characters)
2022-06-16T11:21:42.9076434Z         "\t                       Welcome to the game Casino - BLACK JACK !                                                     "
2022-06-16T11:21:42.9076551Z                                                                                         ^
2022-06-16T11:21:42.9076701Z ./BlackJack_game/blackjack_rr.py:211:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.9076897Z         "\nRULES: Get as close to 21 as you can but if you get more than 21 you will lose!\n  Aces count as 1 or 11."
2022-06-16T11:21:42.9077011Z                                                                                         ^
2022-06-16T11:21:42.9077156Z ./BlackJack_game/blackjack_rr.py:268:89: E501 line too long (106 > 88 characters)
2022-06-16T11:21:42.9077315Z                 + "\t$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n \t      Congratulations! You won "
2022-06-16T11:21:42.9077433Z                                                                                         ^
2022-06-16T11:21:42.9077577Z ./BlackJack_game/blackjack_rr.py:276:89: E501 line too long (142 > 88 characters)
2022-06-16T11:21:42.9077951Z             "Oops! You have bet all your chips and we are sorry you can't play more.\nThanks for playing! Do come again to Casino BLACK JACK!"
2022-06-16T11:21:42.9078065Z                                                                                         ^
2022-06-16T11:21:42.9078300Z ./Colors/primary_colors.py:8:1: C901 'simpleColor' is too complex (48)
2022-06-16T11:21:42.9078390Z def simpleColor(r, g, b):
2022-06-16T11:21:42.9078450Z ^
2022-06-16T11:21:42.9078592Z ./Colors/primary_colors.py:9:89: E501 line too long (96 > 88 characters)
2022-06-16T11:21:42.9078776Z     """simpleColor obtiene el nombre del color mas general al cual se acerca su formato R G B"""
2022-06-16T11:21:42.9078883Z                                                                                         ^
2022-06-16T11:21:42.9079127Z ./Colors/primary_colors.py:136:26: E262 inline comment should start with '# '
2022-06-16T11:21:42.9079225Z             elif g > r:  #  VERDE > ROJO
2022-06-16T11:21:42.9079305Z                          ^
2022-06-16T11:21:42.9079911Z ./Colors/primary_colors.py:169:5: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9079981Z     except:
2022-06-16T11:21:42.9080043Z     ^
2022-06-16T11:21:42.9080260Z ./Colors/primary_colors.py:169:5: E722 do not use bare 'except'
2022-06-16T11:21:42.9080318Z     except:
2022-06-16T11:21:42.9080380Z     ^
2022-06-16T11:21:42.9080528Z ./Colors/primary_colors.py:175:89: E501 line too long (98 > 88 characters)
2022-06-16T11:21:42.9080718Z # Puedes probar asi: python primary_colors.py 120,0,0   , esto resultara en un ROJO como respuesta
2022-06-16T11:21:42.9080834Z                                                                                         ^
2022-06-16T11:21:42.9080973Z ./Colors/pixel_sort.py:19:89: E501 line too long (105 > 88 characters)
2022-06-16T11:21:42.9081352Z # parser.add_argument("-s", required=True, help="Speed factor of the audio to be increased or decreased")
2022-06-16T11:21:42.9081477Z                                                                                         ^
2022-06-16T11:21:42.9081607Z ./Colors/pixel_sort.py:20:89: E501 line too long (117 > 88 characters)
2022-06-16T11:21:42.9081945Z # parser.add_argument("-av", required=True, help="Speed factor of the audio visualizer to be increased or decreased")
2022-06-16T11:21:42.9082059Z                                                                                         ^
2022-06-16T11:21:42.9082196Z ./Colors/pixel_sort.py:34:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9082370Z def createDataSet(val=0, data=[]):
2022-06-16T11:21:42.9082435Z ^
2022-06-16T11:21:42.9082792Z ./Colors/pixel_sort.py:34:31: B006 Do not use mutable data structures for argument defaults.  They are created during function definition time. All calls to the function reuse this one instance of that data structure, persisting changes between them.
2022-06-16T11:21:42.9082895Z def createDataSet(val=0, data=[]):
2022-06-16T11:21:42.9082975Z                               ^
2022-06-16T11:21:42.9083104Z ./Colors/pixel_sort.py:136:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.9083381Z         # For the specific row , if all the values are non-zero then it is sorted with color
2022-06-16T11:21:42.9083496Z                                                                                         ^
2022-06-16T11:21:42.9083776Z ./Colors/pixel_sort.py:137:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9083886Z         if np.all(np.asarray(color)) == True:
2022-06-16T11:21:42.9083970Z                                      ^
2022-06-16T11:21:42.9084105Z ./Colors/pixel_sort.py:142:89: E501 line too long (90 > 88 characters)
2022-06-16T11:21:42.9084273Z         # For the specific row , if any of the values are zero it gets sorted with color_n
2022-06-16T11:21:42.9084380Z                                                                                         ^
2022-06-16T11:21:42.9084676Z ./Colors/pixel_sort.py:143:38: E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9084789Z         if np.all(np.asarray(color)) == False:
2022-06-16T11:21:42.9084872Z                                      ^
2022-06-16T11:21:42.9085253Z ./Colors/pixel_sort.py:144:17: B007 Loop control variable 'ind' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9085360Z             for ind, i in enumerate(color):
2022-06-16T11:21:42.9085468Z                 ^
2022-06-16T11:21:42.9085762Z ./Colors/pixel_sort.py:149:42: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9085890Z                 if np.any(np.asarray(i)) == True and sum(i) < thresh:
2022-06-16T11:21:42.9085975Z                                          ^
2022-06-16T11:21:42.9086124Z ./Key_Binding/key_binding.py:6:1: E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9086248Z @bind.add("ctrl-h")
2022-06-16T11:21:42.9086310Z ^
2022-06-16T11:21:42.9086507Z ./Key_Binding/key_binding.py:10:1: E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9086593Z session.prompt("")
2022-06-16T11:21:42.9086646Z ^
2022-06-16T11:21:42.9086792Z ./Koch Curve/koch curve.py:27:89: E501 line too long (91 > 88 characters)
2022-06-16T11:21:42.9086970Z     # Move the turtle backward by distance, opposite to the direction the turtle is headed.
2022-06-16T11:21:42.9087083Z                                                                                         ^
2022-06-16T11:21:42.9087471Z ./Koch Curve/koch curve.py:31:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9087554Z     for i in range(3):
2022-06-16T11:21:42.9087618Z         ^
2022-06-16T11:21:42.9088358Z ./Recursion Visulaizer/recursionVisualizer.py:52:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9088445Z         except:
2022-06-16T11:21:42.9088500Z         ^
2022-06-16T11:21:42.9088775Z ./Recursion Visulaizer/recursionVisualizer.py:52:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9088845Z         except:
2022-06-16T11:21:42.9088911Z         ^
2022-06-16T11:21:42.9089191Z ./nodepad/notepad.py:8:5: F403 'from Tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.9089351Z     from Tkinter import *
2022-06-16T11:21:42.9089410Z     ^
2022-06-16T11:21:42.9090324Z ./nodepad/notepad.py:10:5: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.9090468Z     from tkinter import *
2022-06-16T11:21:42.9090539Z     ^
2022-06-16T11:21:42.9090932Z ./nodepad/notepad.py:27:12: F405 'Tk' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9091014Z     root = Tk()
2022-06-16T11:21:42.9091087Z            ^
2022-06-16T11:21:42.9091448Z ./nodepad/notepad.py:41:9: F405 'Toplevel' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9091540Z     w = Toplevel(root)
2022-06-16T11:21:42.9091604Z         ^
2022-06-16T11:21:42.9091909Z ./nodepad/notepad.py:60:9: F841 local variable '_ana1color' is assigned to but never used
2022-06-16T11:21:42.9092121Z         _ana1color = "#d9d9d9"  # X11 color: 'gray85'
2022-06-16T11:21:42.9092192Z         ^
2022-06-16T11:21:42.9092531Z ./nodepad/notepad.py:63:12: F405 'sys' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9092646Z         if sys.platform == "win32":
2022-06-16T11:21:42.9092720Z            ^
2022-06-16T11:21:42.9093055Z ./nodepad/notepad.py:86:30: F405 'Frame' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9093323Z         self.TNotebook1_t0 = Frame(self.TNotebook1)
2022-06-16T11:21:42.9093540Z                              ^
2022-06-16T11:21:42.9093853Z ./nodepad/notepad.py:94:30: F405 'Frame' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9093986Z         self.TNotebook1_t1 = Frame(self.TNotebook1)
2022-06-16T11:21:42.9094065Z                              ^
2022-06-16T11:21:42.9094385Z ./nodepad/notepad.py:102:30: F405 'Frame' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9094515Z         self.TNotebook1_t2 = Frame(self.TNotebook1)
2022-06-16T11:21:42.9094588Z                              ^
2022-06-16T11:21:42.9094905Z ./nodepad/notepad.py:111:28: F405 'Text' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9095147Z         self.inputNotice = Text(self.TNotebook1_t0)
2022-06-16T11:21:42.9095224Z                            ^
2022-06-16T11:21:42.9095523Z ./nodepad/notepad.py:117:41: F405 'WORD' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9095653Z         self.inputNotice.configure(wrap=WORD)
2022-06-16T11:21:42.9095736Z                                         ^
2022-06-16T11:21:42.9096034Z ./nodepad/notepad.py:119:27: F405 'Entry' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9096151Z         self.inputTitle = Entry(self.TNotebook1_t0)
2022-06-16T11:21:42.9096228Z                           ^
2022-06-16T11:21:42.9096528Z ./nodepad/notepad.py:125:23: F405 'Label' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9096644Z         self.Label1 = Label(self.TNotebook1_t0)
2022-06-16T11:21:42.9096719Z                       ^
2022-06-16T11:21:42.9097017Z ./nodepad/notepad.py:130:23: F405 'Label' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9097135Z         self.Label2 = Label(self.TNotebook1_t0)
2022-06-16T11:21:42.9097198Z                       ^
2022-06-16T11:21:42.9097642Z ./nodepad/notepad.py:135:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9097785Z         self.Button2 = Button(self.TNotebook1_t0)
2022-06-16T11:21:42.9097856Z                        ^
2022-06-16T11:21:42.9098169Z ./nodepad/notepad.py:141:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9098289Z         self.Button3 = Button(self.TNotebook1_t0)
2022-06-16T11:21:42.9098358Z                        ^
2022-06-16T11:21:42.9098654Z ./nodepad/notepad.py:147:29: F405 'Text' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9098861Z         self.outputNotice = Text(self.TNotebook1_t1)
2022-06-16T11:21:42.9098942Z                             ^
2022-06-16T11:21:42.9099392Z ./nodepad/notepad.py:153:42: F405 'WORD' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9099523Z         self.outputNotice.configure(wrap=WORD)
2022-06-16T11:21:42.9099611Z                                          ^
2022-06-16T11:21:42.9099920Z ./nodepad/notepad.py:155:33: F405 'Entry' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9100060Z         self.inputSearchTitle = Entry(self.TNotebook1_t1)
2022-06-16T11:21:42.9100138Z                                 ^
2022-06-16T11:21:42.9100430Z ./nodepad/notepad.py:161:23: F405 'Label' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9100549Z         self.Label3 = Label(self.TNotebook1_t1)
2022-06-16T11:21:42.9100621Z                       ^
2022-06-16T11:21:42.9100917Z ./nodepad/notepad.py:166:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9101040Z         self.Button4 = Button(self.TNotebook1_t1)
2022-06-16T11:21:42.9101115Z                        ^
2022-06-16T11:21:42.9101415Z ./nodepad/notepad.py:172:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9101538Z         self.Button5 = Button(self.TNotebook1_t1)
2022-06-16T11:21:42.9101605Z                        ^
2022-06-16T11:21:42.9101904Z ./nodepad/notepad.py:178:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9102022Z         self.Button7 = Button(self.TNotebook1_t1)
2022-06-16T11:21:42.9102095Z                        ^
2022-06-16T11:21:42.9102395Z ./nodepad/notepad.py:184:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9102513Z         self.Button8 = Button(self.TNotebook1_t1)
2022-06-16T11:21:42.9102584Z                        ^
2022-06-16T11:21:42.9102883Z ./nodepad/notepad.py:190:23: F405 'Label' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9102993Z         self.Label4 = Label(self.TNotebook1_t2)
2022-06-16T11:21:42.9103064Z                       ^
2022-06-16T11:21:42.9103358Z ./nodepad/notepad.py:195:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9103480Z         self.Button6 = Button(self.TNotebook1_t2)
2022-06-16T11:21:42.9103555Z                        ^
2022-06-16T11:21:42.9103856Z ./nodepad/notepad.py:201:24: F405 'Button' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9103951Z         self.Button1 = Button(top)
2022-06-16T11:21:42.9104016Z                        ^
2022-06-16T11:21:42.9104317Z ./nodepad/notepad.py:207:28: F405 'Label' may be undefined, or defined from star imports: Tkinter, tkinter
2022-06-16T11:21:42.9104423Z         self.errorOutput = Label(top)
2022-06-16T11:21:42.9104500Z                            ^
2022-06-16T11:21:42.9104814Z ./Youtube Downloader With GUI/main.py:3:1: F403 'from pytube import *' used; unable to detect undefined names
2022-06-16T11:21:42.9104899Z from pytube import *
2022-06-16T11:21:42.9104962Z ^
2022-06-16T11:21:42.9105272Z ./Youtube Downloader With GUI/main.py:5:1: F403 'from tkinter import *' used; unable to detect undefined names
2022-06-16T11:21:42.9105468Z from tkinter import *
2022-06-16T11:21:42.9105543Z ^
2022-06-16T11:21:42.9105891Z ./Youtube Downloader With GUI/main.py:6:1: F403 'from tkinter.filedialog import *' used; unable to detect undefined names
2022-06-16T11:21:42.9105997Z from tkinter.filedialog import *
2022-06-16T11:21:42.9106057Z ^
2022-06-16T11:21:42.9106389Z ./Youtube Downloader With GUI/main.py:7:1: F403 'from tkinter.messagebox import *' used; unable to detect undefined names
2022-06-16T11:21:42.9106491Z from tkinter.messagebox import *
2022-06-16T11:21:42.9106544Z ^
2022-06-16T11:21:42.9106854Z ./Youtube Downloader With GUI/main.py:8:1: F403 'from threading import *' used; unable to detect undefined names
2022-06-16T11:21:42.9107024Z from threading import *
2022-06-16T11:21:42.9107081Z ^
2022-06-16T11:21:42.9107241Z ./Youtube Downloader With GUI/main.py:16:1: E302 expected 2 blank lines, found 0
2022-06-16T11:21:42.9107375Z def progress(stream=None, chunk=None, remaining=None):
2022-06-16T11:21:42.9107436Z ^
2022-06-16T11:21:42.9107887Z ./Youtube Downloader With GUI/main.py:28:27: F405 'DISABLED' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9107980Z         dBtn.config(state=DISABLED)
2022-06-16T11:21:42.9108056Z                           ^
2022-06-16T11:21:42.9108507Z ./Youtube Downloader With GUI/main.py:29:21: F405 'askdirectory' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9108607Z         path_save = askdirectory()
2022-06-16T11:21:42.9108679Z                     ^
2022-06-16T11:21:42.9109120Z ./Youtube Downloader With GUI/main.py:32:14: F405 'YouTube' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9109254Z         ob = YouTube(URL, on_progress_callback=progress)
2022-06-16T11:21:42.9109318Z              ^
2022-06-16T11:21:42.9109598Z ./Youtube Downloader With GUI/main.py:34:9: F841 local variable 'x' is assigned to but never used
2022-06-16T11:21:42.9109702Z         x = ob.description.split("|")
2022-06-16T11:21:42.9109766Z         ^
2022-06-16T11:21:42.9110196Z ./Youtube Downloader With GUI/main.py:40:25: F405 'TOP' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9110298Z         label.pack(side=TOP, pady=10)
2022-06-16T11:21:42.9110371Z                         ^
2022-06-16T11:21:42.9110802Z ./Youtube Downloader With GUI/main.py:52:24: F405 'TOP' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9110905Z         desc.pack(side=TOP, pady=10)
2022-06-16T11:21:42.9110970Z                        ^
2022-06-16T11:21:42.9111406Z ./Youtube Downloader With GUI/main.py:54:27: F405 'NORMAL' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9111506Z         dBtn.config(state=NORMAL)
2022-06-16T11:21:42.9111580Z                           ^
2022-06-16T11:21:42.9112019Z ./Youtube Downloader With GUI/main.py:55:9: F405 'showinfo' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9112162Z         showinfo("Download Finished", "Downloaded Successfully")
2022-06-16T11:21:42.9112227Z         ^
2022-06-16T11:21:42.9112651Z ./Youtube Downloader With GUI/main.py:56:28: F405 'END' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9112748Z         urlField.delete(0, END)
2022-06-16T11:21:42.9112816Z                            ^
2022-06-16T11:21:42.9113249Z ./Youtube Downloader With GUI/main.py:67:14: F405 'Thread' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9113432Z     thread = Thread(target=startDownload)
2022-06-16T11:21:42.9113507Z              ^
2022-06-16T11:21:42.9113941Z ./Youtube Downloader With GUI/main.py:72:8: F405 'Tk' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9114010Z main = Tk()
2022-06-16T11:21:42.9114071Z        ^
2022-06-16T11:21:42.9114514Z ./Youtube Downloader With GUI/main.py:81:8: F405 'PhotoImage' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9114616Z file = PhotoImage(file="photo.png")
2022-06-16T11:21:42.9114750Z        ^
2022-06-16T11:21:42.9115191Z ./Youtube Downloader With GUI/main.py:82:15: F405 'Label' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9115294Z headingIcon = Label(main, image=file)
2022-06-16T11:21:42.9115363Z               ^
2022-06-16T11:21:42.9115792Z ./Youtube Downloader With GUI/main.py:83:23: F405 'TOP' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9115888Z headingIcon.pack(side=TOP)
2022-06-16T11:21:42.9115960Z                       ^
2022-06-16T11:21:42.9116381Z ./Youtube Downloader With GUI/main.py:85:12: F405 'Entry' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9116526Z urlField = Entry(main, font=("Times New Roman", 18), justify=CENTER)
2022-06-16T11:21:42.9116589Z            ^
2022-06-16T11:21:42.9117021Z ./Youtube Downloader With GUI/main.py:85:62: F405 'CENTER' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9117164Z urlField = Entry(main, font=("Times New Roman", 18), justify=CENTER)
2022-06-16T11:21:42.9117265Z                                                              ^
2022-06-16T11:21:42.9117690Z ./Youtube Downloader With GUI/main.py:86:20: F405 'TOP' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9117816Z urlField.pack(side=TOP, fill=X, padx=10, pady=15)
2022-06-16T11:21:42.9117887Z                    ^
2022-06-16T11:21:42.9118305Z ./Youtube Downloader With GUI/main.py:86:30: F405 'X' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9118431Z urlField.pack(side=TOP, fill=X, padx=10, pady=15)
2022-06-16T11:21:42.9118508Z                              ^
2022-06-16T11:21:42.9118941Z ./Youtube Downloader With GUI/main.py:88:8: F405 'Button' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9119015Z dBtn = Button(
2022-06-16T11:21:42.9119079Z        ^
2022-06-16T11:21:42.9119512Z ./Youtube Downloader With GUI/main.py:96:16: F405 'TOP' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9119597Z dBtn.pack(side=TOP)
2022-06-16T11:21:42.9119657Z                ^
2022-06-16T11:21:42.9120085Z ./Youtube Downloader With GUI/main.py:97:9: F405 'Label' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9120176Z label = Label(main, text="")
2022-06-16T11:21:42.9120241Z         ^
2022-06-16T11:21:42.9120671Z ./Youtube Downloader With GUI/main.py:98:8: F405 'Label' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9120761Z desc = Label(main, text="")
2022-06-16T11:21:42.9120824Z        ^
2022-06-16T11:21:42.9121253Z ./Youtube Downloader With GUI/main.py:99:10: F405 'Label' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9121469Z author = Label(main, text="@G.S.")
2022-06-16T11:21:42.9121544Z          ^
2022-06-16T11:21:42.9121987Z ./Youtube Downloader With GUI/main.py:101:18: F405 'BOTTOM' may be undefined, or defined from star imports: pytube, threading, tkinter, tkinter.filedialog, tkinter.messagebox
2022-06-16T11:21:42.9122077Z author.pack(side=BOTTOM)
2022-06-16T11:21:42.9122144Z                  ^
2022-06-16T11:21:42.9122664Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:21:16: B007 Loop control variable 'w' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9122751Z     for (x, y, w, h) in faces:
2022-06-16T11:21:42.9122881Z                ^
2022-06-16T11:21:42.9123234Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:22:26: E203 whitespace before ':'
2022-06-16T11:21:42.9123346Z         roi_gray = gray[y : y + h, x : x + h]  # rec
2022-06-16T11:21:42.9123418Z                          ^
2022-06-16T11:21:42.9123770Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:22:37: E203 whitespace before ':'
2022-06-16T11:21:42.9123879Z         roi_gray = gray[y : y + h, x : x + h]  # rec
2022-06-16T11:21:42.9123959Z                                     ^
2022-06-16T11:21:42.9124299Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:23:28: E203 whitespace before ':'
2022-06-16T11:21:42.9124406Z         roi_color = frame[y : y + h, x : x + h]
2022-06-16T11:21:42.9124473Z                            ^
2022-06-16T11:21:42.9124964Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:23:39: E203 whitespace before ':'
2022-06-16T11:21:42.9125085Z         roi_color = frame[y : y + h, x : x + h]
2022-06-16T11:21:42.9125175Z                                       ^
2022-06-16T11:21:42.9125547Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:28:35: E203 whitespace before ':'
2022-06-16T11:21:42.9125680Z             roi_nose = roi_gray[ny : ny + nh, nx : nx + nw]
2022-06-16T11:21:42.9125775Z                                   ^
2022-06-16T11:21:42.9126152Z ./thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py:28:49: E203 whitespace before ':'
2022-06-16T11:21:42.9126275Z             roi_nose = roi_gray[ny : ny + nh, nx : nx + nw]
2022-06-16T11:21:42.9126377Z                                                 ^
2022-06-16T11:21:42.9126757Z ./Extract-Table-from-pdf-txt-docx/main.py:9:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9126871Z if os.path.isdir("Parent") == True:
2022-06-16T11:21:42.9126952Z                            ^
2022-06-16T11:21:42.9127329Z ./Extract-Table-from-pdf-txt-docx/main.py:12:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9127444Z if os.path.isdir("Child1") == True:
2022-06-16T11:21:42.9127527Z                            ^
2022-06-16T11:21:42.9128017Z ./Extract-Table-from-pdf-txt-docx/main.py:15:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9128142Z if os.path.isfile("Pdf1_Child1.pdf") == True:
2022-06-16T11:21:42.9128220Z                                      ^
2022-06-16T11:21:42.9128550Z ./Extract-Table-from-pdf-txt-docx/main.py:18:43: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9128673Z if os.path.isfile("Document_Child1.docx") == True:
2022-06-16T11:21:42.9128757Z                                           ^
2022-06-16T11:21:42.9129089Z ./Extract-Table-from-pdf-txt-docx/main.py:33:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9129205Z if os.path.isfile("Text_Child1.txt") == True:
2022-06-16T11:21:42.9129281Z                                      ^
2022-06-16T11:21:42.9129611Z ./Extract-Table-from-pdf-txt-docx/main.py:42:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9129713Z if os.path.isdir("Parent") == True:
2022-06-16T11:21:42.9129786Z                            ^
2022-06-16T11:21:42.9130184Z ./Extract-Table-from-pdf-txt-docx/main.py:45:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9130295Z if os.path.isdir("Child2") == True:
2022-06-16T11:21:42.9130370Z                            ^
2022-06-16T11:21:42.9130709Z ./Extract-Table-from-pdf-txt-docx/main.py:48:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9130833Z if os.path.isfile("Pdf1_Child2.pdf") == True:
2022-06-16T11:21:42.9130913Z                                      ^
2022-06-16T11:21:42.9131241Z ./Extract-Table-from-pdf-txt-docx/main.py:51:43: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9131441Z if os.path.isfile("Document_Child2.docx") == True:
2022-06-16T11:21:42.9131527Z                                           ^
2022-06-16T11:21:42.9131865Z ./Extract-Table-from-pdf-txt-docx/main.py:66:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9131982Z if os.path.isfile("Text_Child2.txt") == True:
2022-06-16T11:21:42.9132057Z                                      ^
2022-06-16T11:21:42.9132387Z ./Extract-Table-from-pdf-txt-docx/main.py:74:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9132489Z if os.path.isdir("Parent") == True:
2022-06-16T11:21:42.9132565Z                            ^
2022-06-16T11:21:42.9132893Z ./Extract-Table-from-pdf-txt-docx/main.py:77:28: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9132990Z if os.path.isdir("Child3") == True:
2022-06-16T11:21:42.9133063Z                            ^
2022-06-16T11:21:42.9133400Z ./Extract-Table-from-pdf-txt-docx/main.py:80:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9133513Z if os.path.isfile("Pdf1_Child3.pdf") == True:
2022-06-16T11:21:42.9133592Z                                      ^
2022-06-16T11:21:42.9133921Z ./Extract-Table-from-pdf-txt-docx/main.py:83:43: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9134053Z if os.path.isfile("Document_Child3.docx") == True:
2022-06-16T11:21:42.9134139Z                                           ^
2022-06-16T11:21:42.9134468Z ./Extract-Table-from-pdf-txt-docx/main.py:98:38: E712 comparison to True should be 'if cond is True:' or 'if cond:'
2022-06-16T11:21:42.9134635Z if os.path.isfile("Text_Child3.txt") == True:
2022-06-16T11:21:42.9134716Z                                      ^
2022-06-16T11:21:42.9134942Z ./Assembler/assembler.py:62:1: C901 'scanner' is too complex (135)
2022-06-16T11:21:42.9135024Z def scanner(string):
2022-06-16T11:21:42.9135086Z ^
2022-06-16T11:21:42.9135694Z ./Assembler/assembler.py:929:1: C901 'parser' is too complex (154)
2022-06-16T11:21:42.9136637Z def parser():
2022-06-16T11:21:42.9136733Z ^
2022-06-16T11:21:42.9136922Z ./Assembler/assembler.py:1595:89: E501 line too long (95 > 88 characters)
2022-06-16T11:21:42.9136987Z     """
2022-06-16T11:21:42.9137377Z     This function search for labels / subprogram-labels and registers this in the 'jumps' list.
2022-06-16T11:21:42.9137449Z     """
2022-06-16T11:21:42.9137517Z        
2022-06-16T11:21:42.9137647Z                                                                                 ^
2022-06-16T11:21:42.9138347Z ./Assembler/assembler.py:1647:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9138431Z         except:
2022-06-16T11:21:42.9138506Z         ^
2022-06-16T11:21:42.9138748Z ./Assembler/assembler.py:1647:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9138827Z         except:
2022-06-16T11:21:42.9138900Z         ^
2022-06-16T11:21:42.9139268Z ./CRC/crc.py:2:5: E741 ambiguous variable name 'l'
2022-06-16T11:21:42.9139357Z     l = len(div)
2022-06-16T11:21:42.9139433Z     ^
2022-06-16T11:21:42.9140128Z ./CRC/crc.py:3:5: F841 local variable 'ct' is assigned to but never used
2022-06-16T11:21:42.9140205Z     ct = 0
2022-06-16T11:21:42.9140273Z     ^
2022-06-16T11:21:42.9140444Z ./PongPong_Game/pongpong.py:17:89: E501 line too long (92 > 88 characters)
2022-06-16T11:21:42.9140863Z )  # Paddle Acceleration on both sides - left: negative acc, right: positive acc, for x-axis
2022-06-16T11:21:42.9140980Z                                                                                         ^
2022-06-16T11:21:42.9141125Z ./PongPong_Game/pong/__init__.py:1:1: W391 blank line at end of file
2022-06-16T11:21:42.9141136Z 
2022-06-16T11:21:42.9141201Z ^
2022-06-16T11:21:42.9141342Z ./game_of_life/05_mixed_sorting.py:18:79: W291 trailing whitespace
2022-06-16T11:21:42.9141476Z """
2022-06-16T11:21:42.9141617Z Given a list of integers nums, sort the array such that:
2022-06-16T11:21:42.9141624Z 
2022-06-16T11:21:42.9141747Z All even numbers are sorted in increasing order
2022-06-16T11:21:42.9141870Z All odd numbers are sorted in decreasing order
2022-06-16T11:21:42.9142023Z The relative positions of the even and odd numbers remain the same
2022-06-16T11:21:42.9142095Z Example 1
2022-06-16T11:21:42.9142157Z Input
2022-06-16T11:21:42.9142164Z 
2022-06-16T11:21:42.9142311Z nums = [8, 13, 11, 90, -5, 4]
2022-06-16T11:21:42.9142369Z Output
2022-06-16T11:21:42.9142375Z 
2022-06-16T11:21:42.9142494Z [4, 13, 11, 8, -5, 90]
2022-06-16T11:21:42.9142568Z Explanation
2022-06-16T11:21:42.9142575Z 
2022-06-16T11:21:42.9142739Z The even numbers are sorted in increasing order, the odd numbers are sorted in 
2022-06-16T11:21:42.9142872Z decreasing number, and the relative positions were 
2022-06-16T11:21:42.9143020Z [even, odd, odd, even, odd, even] and remain the same after sorting.
2022-06-16T11:21:42.9143082Z """
2022-06-16T11:21:42.9143136Z    
2022-06-16T11:21:42.9143233Z                                                         
2022-06-16T11:21:42.9143239Z 
2022-06-16T11:21:42.9143304Z                 ^
2022-06-16T11:21:42.9143442Z ./game_of_life/05_mixed_sorting.py:19:51: W291 trailing whitespace
2022-06-16T11:21:42.9143505Z """
2022-06-16T11:21:42.9143633Z Given a list of integers nums, sort the array such that:
2022-06-16T11:21:42.9143639Z 
2022-06-16T11:21:42.9143757Z All even numbers are sorted in increasing order
2022-06-16T11:21:42.9143875Z All odd numbers are sorted in decreasing order
2022-06-16T11:21:42.9144013Z The relative positions of the even and odd numbers remain the same
2022-06-16T11:21:42.9144084Z Example 1
2022-06-16T11:21:42.9144148Z Input
2022-06-16T11:21:42.9144154Z 
2022-06-16T11:21:42.9144294Z nums = [8, 13, 11, 90, -5, 4]
2022-06-16T11:21:42.9144359Z Output
2022-06-16T11:21:42.9144369Z 
2022-06-16T11:21:42.9144486Z [4, 13, 11, 8, -5, 90]
2022-06-16T11:21:42.9144560Z Explanation
2022-06-16T11:21:42.9144567Z 
2022-06-16T11:21:42.9144731Z The even numbers are sorted in increasing order, the odd numbers are sorted in 
2022-06-16T11:21:42.9144854Z decreasing number, and the relative positions were 
2022-06-16T11:21:42.9145003Z [even, odd, odd, even, odd, even] and remain the same after sorting.
2022-06-16T11:21:42.9145062Z """
2022-06-16T11:21:42.9145121Z    
2022-06-16T11:21:42.9145326Z                                               ^
2022-06-16T11:21:42.9145472Z ./game_of_life/game_o_life.py:1:80: W291 trailing whitespace
2022-06-16T11:21:42.9145873Z """Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.9145881Z 
2022-06-16T11:21:42.9145962Z Requirements:
2022-06-16T11:21:42.9146064Z   - numpy
2022-06-16T11:21:42.9146170Z   - random
2022-06-16T11:21:42.9146276Z   - time
2022-06-16T11:21:42.9146393Z   - matplotlib
2022-06-16T11:21:42.9146403Z 
2022-06-16T11:21:42.9146475Z Python:
2022-06-16T11:21:42.9146582Z   - 3.5
2022-06-16T11:21:42.9146589Z 
2022-06-16T11:21:42.9146658Z Usage:
2022-06-16T11:21:42.9146834Z   - $python3 game_o_life <canvas_size:int>
2022-06-16T11:21:42.9146842Z 
2022-06-16T11:21:42.9146978Z Game-Of-Life Rules:
2022-06-16T11:21:42.9147043Z  
2022-06-16T11:21:42.9147110Z  1.
2022-06-16T11:21:42.9147335Z  Any live cell with fewer than two live neighbours
2022-06-16T11:21:42.9147549Z  dies, as if caused by under-population.
2022-06-16T11:21:42.9147616Z  2.
2022-06-16T11:21:42.9147750Z  Any live cell with two or three live neighbours lives
2022-06-16T11:21:42.9147846Z  on to the next generation.
2022-06-16T11:21:42.9147912Z  3.
2022-06-16T11:21:42.9148046Z  Any live cell with more than three live neighbours
2022-06-16T11:21:42.9148216Z  dies, as if by over-population.
2022-06-16T11:21:42.9148282Z  4.
2022-06-16T11:21:42.9148427Z  Any dead cell with exactly three live neighbours be-
2022-06-16T11:21:42.9148541Z  comes a live cell, as if by reproduction.
2022-06-16T11:21:42.9148803Z  """
2022-06-16T11:21:42.9148913Z                                                                                ^
2022-06-16T11:21:42.9149063Z ./game_of_life/game_o_life.py:16:1: W293 blank line contains whitespace
2022-06-16T11:21:42.9149323Z """Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com) 
2022-06-16T11:21:42.9149331Z 
2022-06-16T11:21:42.9149408Z Requirements:
2022-06-16T11:21:42.9149507Z   - numpy
2022-06-16T11:21:42.9149604Z   - random
2022-06-16T11:21:42.9149691Z   - time
2022-06-16T11:21:42.9149796Z   - matplotlib
2022-06-16T11:21:42.9149802Z 
2022-06-16T11:21:42.9149867Z Python:
2022-06-16T11:21:42.9149959Z   - 3.5
2022-06-16T11:21:42.9149965Z 
2022-06-16T11:21:42.9150025Z Usage:
2022-06-16T11:21:42.9150190Z   - $python3 game_o_life <canvas_size:int>
2022-06-16T11:21:42.9150197Z 
2022-06-16T11:21:42.9150315Z Game-Of-Life Rules:
2022-06-16T11:21:42.9150369Z  
2022-06-16T11:21:42.9150428Z  1.
2022-06-16T11:21:42.9150549Z  Any live cell with fewer than two live neighbours
2022-06-16T11:21:42.9150720Z  dies, as if caused by under-population.
2022-06-16T11:21:42.9150778Z  2.
2022-06-16T11:21:42.9150902Z  Any live cell with two or three live neighbours lives
2022-06-16T11:21:42.9150990Z  on to the next generation.
2022-06-16T11:21:42.9151042Z  3.
2022-06-16T11:21:42.9151164Z  Any live cell with more than three live neighbours
2022-06-16T11:21:42.9151317Z  dies, as if by over-population.
2022-06-16T11:21:42.9151381Z  4.
2022-06-16T11:21:42.9151513Z  Any dead cell with exactly three live neighbours be-
2022-06-16T11:21:42.9151624Z  comes a live cell, as if by reproduction.
2022-06-16T11:21:42.9151684Z  """
2022-06-16T11:21:42.9151736Z ^
2022-06-16T11:21:42.9151892Z ./game_of_life/game_o_life.py:38:1: E402 module level import not at top of file
2022-06-16T11:21:42.9152001Z from matplotlib import pyplot as plt
2022-06-16T11:21:42.9152060Z ^
2022-06-16T11:21:42.9152215Z ./game_of_life/game_o_life.py:39:1: E402 module level import not at top of file
2022-06-16T11:21:42.9152344Z from matplotlib.colors import ListedColormap
2022-06-16T11:21:42.9152404Z ^
2022-06-16T11:21:42.9152541Z ./game_of_life/game_o_life.py:59:89: E501 line too long (118 > 88 characters)
2022-06-16T11:21:42.9152758Z     """This  function runs the rules of game through all points, and changes their status accordingly.(in the same canvas)
2022-06-16T11:21:42.9152828Z     @Args:
2022-06-16T11:21:42.9152914Z     --
2022-06-16T11:21:42.9153044Z     canvas : canvas of population to run the rules on.
2022-06-16T11:21:42.9153052Z 
2022-06-16T11:21:42.9153117Z     @returns:
2022-06-16T11:21:42.9153193Z     --
2022-06-16T11:21:42.9153251Z     None
2022-06-16T11:21:42.9153311Z     """
2022-06-16T11:21:42.9153425Z                                                                                         ^
2022-06-16T11:21:42.9153648Z ./game_of_life/game_o_life.py:74:33: E203 whitespace before ':'
2022-06-16T11:21:42.9153835Z                 pt, canvas[r - 1 : r + 2, c - 1 : c + 2]
2022-06-16T11:21:42.9153916Z                                 ^
2022-06-16T11:21:42.9154130Z ./game_of_life/game_o_life.py:74:48: E203 whitespace before ':'
2022-06-16T11:21:42.9154309Z                 pt, canvas[r - 1 : r + 2, c - 1 : c + 2]
2022-06-16T11:21:42.9154392Z                                                ^
2022-06-16T11:21:42.9154776Z ./linear-algebra-python/src/tests.py:14:1: F403 'from lib import *' used; unable to detect undefined names
2022-06-16T11:21:42.9154870Z from lib import *
2022-06-16T11:21:42.9154933Z ^
2022-06-16T11:21:42.9155383Z ./linear-algebra-python/src/tests.py:22:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9155475Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9155543Z             ^
2022-06-16T11:21:42.9155982Z ./linear-algebra-python/src/tests.py:26:13: F841 local variable 'y' is assigned to but never used
2022-06-16T11:21:42.9156067Z             y = Vector()
2022-06-16T11:21:42.9156142Z             ^
2022-06-16T11:21:42.9156579Z ./linear-algebra-python/src/tests.py:26:17: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9156664Z             y = Vector()
2022-06-16T11:21:42.9156737Z                 ^
2022-06-16T11:21:42.9157430Z ./linear-algebra-python/src/tests.py:28:9: B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9157509Z         except:
2022-06-16T11:21:42.9157571Z         ^
2022-06-16T11:21:42.9157843Z ./linear-algebra-python/src/tests.py:28:9: E722 do not use bare 'except'
2022-06-16T11:21:42.9157916Z         except:
2022-06-16T11:21:42.9157983Z         ^
2022-06-16T11:21:42.9158330Z ./linear-algebra-python/src/tests.py:35:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9158425Z         x = Vector([0, 0, 0, 0, 0, 1])
2022-06-16T11:21:42.9158497Z             ^
2022-06-16T11:21:42.9159068Z ./linear-algebra-python/src/tests.py:42:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9159146Z         x = Vector([1, 2, 3, 4])
2022-06-16T11:21:42.9159209Z             ^
2022-06-16T11:21:42.9159523Z ./linear-algebra-python/src/tests.py:49:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9159605Z         x = Vector([1, 2])
2022-06-16T11:21:42.9159670Z             ^
2022-06-16T11:21:42.9159978Z ./linear-algebra-python/src/tests.py:56:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9160059Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9160115Z             ^
2022-06-16T11:21:42.9160422Z ./linear-algebra-python/src/tests.py:57:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9160503Z         y = Vector([1, 1, 1])
2022-06-16T11:21:42.9160565Z             ^
2022-06-16T11:21:42.9160874Z ./linear-algebra-python/src/tests.py:66:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9160959Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9161025Z             ^
2022-06-16T11:21:42.9161341Z ./linear-algebra-python/src/tests.py:67:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9161414Z         y = Vector([1, 1, 1])
2022-06-16T11:21:42.9161480Z             ^
2022-06-16T11:21:42.9161786Z ./linear-algebra-python/src/tests.py:76:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9161866Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9161930Z             ^
2022-06-16T11:21:42.9162238Z ./linear-algebra-python/src/tests.py:77:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9162430Z         a = Vector([2, -1, 4])  # for test of dot-product
2022-06-16T11:21:42.9162495Z             ^
2022-06-16T11:21:42.9162797Z ./linear-algebra-python/src/tests.py:78:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9162939Z         b = Vector([1, -2, -1])
2022-06-16T11:21:42.9163001Z             ^
2022-06-16T11:21:42.9163322Z ./linear-algebra-python/src/tests.py:86:25: F405 'zeroVector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9163458Z         self.assertTrue(zeroVector(10).__str__().count("0") == 10)
2022-06-16T11:21:42.9163604Z                         ^
2022-06-16T11:21:42.9163961Z ./linear-algebra-python/src/tests.py:92:26: F405 'unitBasisVector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9164096Z         self.assertEqual(unitBasisVector(3, 1).__str__(), "(0,1,0)")
2022-06-16T11:21:42.9164169Z                          ^
2022-06-16T11:21:42.9164483Z ./linear-algebra-python/src/tests.py:98:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9164566Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9164630Z             ^
2022-06-16T11:21:42.9165032Z ./linear-algebra-python/src/tests.py:99:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9165111Z         y = Vector([1, 0, 1])
2022-06-16T11:21:42.9165174Z             ^
2022-06-16T11:21:42.9165746Z ./linear-algebra-python/src/tests.py:100:26: F405 'axpy' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9165890Z         self.assertEqual(axpy(2, x, y).__str__(), "(3,4,7)")
2022-06-16T11:21:42.9165970Z                          ^
2022-06-16T11:21:42.9166319Z ./linear-algebra-python/src/tests.py:106:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9166415Z         x = Vector([1, 0, 0, 0, 0, 0])
2022-06-16T11:21:42.9166483Z             ^
2022-06-16T11:21:42.9166829Z ./linear-algebra-python/src/tests.py:114:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9166918Z         x = Vector([1, 0, 0])
2022-06-16T11:21:42.9166980Z             ^
2022-06-16T11:21:42.9167320Z ./linear-algebra-python/src/tests.py:120:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9167440Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9167511Z             ^
2022-06-16T11:21:42.9167859Z ./linear-algebra-python/src/tests.py:124:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9167981Z         A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3, 3)
2022-06-16T11:21:42.9168054Z             ^
2022-06-16T11:21:42.9168392Z ./linear-algebra-python/src/tests.py:125:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9168482Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9168554Z             ^
2022-06-16T11:21:42.9168999Z ./linear-algebra-python/src/tests.py:130:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9169103Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9169168Z             ^
2022-06-16T11:21:42.9169485Z ./linear-algebra-python/src/tests.py:135:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9169590Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9169646Z             ^
2022-06-16T11:21:42.9169957Z ./linear-algebra-python/src/tests.py:139:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9170063Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9170128Z             ^
2022-06-16T11:21:42.9170435Z ./linear-algebra-python/src/tests.py:140:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9170539Z         B = Matrix([[1, 2, 7], [2, 4, 5], [6, 7, 10]], 3, 3)
2022-06-16T11:21:42.9170603Z             ^
2022-06-16T11:21:42.9170914Z ./linear-algebra-python/src/tests.py:144:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9171011Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9171078Z             ^
2022-06-16T11:21:42.9171388Z ./linear-algebra-python/src/tests.py:145:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9171494Z         B = Matrix([[1, 2, 7], [2, 4, 5], [6, 7, 10]], 3, 3)
2022-06-16T11:21:42.9171557Z             ^
2022-06-16T11:21:42.9171965Z ./linear-algebra-python/src/tests.py:151:13: F405 'squareZeroMatrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9172083Z             squareZeroMatrix(5).__str__(),
2022-06-16T11:21:42.9172147Z             ^
2022-06-16T11:21:42.9172459Z ./linear-algebra-python/src/tests.py:155:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9172543Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9172606Z             ^
2022-06-16T11:21:42.9173046Z ./linear-algebra-python/src/tests.py:160:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9173134Z         x = Vector([1, 2, 3])
2022-06-16T11:21:42.9173271Z             ^
2022-06-16T11:21:42.9173613Z ./linear-algebra-python/src/tests.py:161:13: F405 'Vector' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9173692Z         y = Vector([1, 0, 1])
2022-06-16T11:21:42.9173760Z             ^
2022-06-16T11:21:42.9174092Z ./linear-algebra-python/src/tests.py:166:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9174205Z         A = Matrix([[1, 2, 3], [2, 4, 5], [6, 7, 8]], 3, 3)
2022-06-16T11:21:42.9174272Z             ^
2022-06-16T11:21:42.9174603Z ./linear-algebra-python/src/tests.py:167:13: F405 'Matrix' may be undefined, or defined from star imports: lib
2022-06-16T11:21:42.9174716Z         B = Matrix([[1, 2, 7], [2, 4, 5], [6, 7, 10]], 3, 3)
2022-06-16T11:21:42.9174785Z             ^
2022-06-16T11:21:42.9175104Z ./linear-algebra-python/src/lib.py:159:22: C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.9175350Z         components = [x for x in self.__components]
2022-06-16T11:21:42.9175436Z                      ^
2022-06-16T11:21:42.9176014Z ./linear-algebra-python/src/lib.py:205:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9176120Z     for i in range(dimension):
2022-06-16T11:21:42.9176194Z         ^
2022-06-16T11:21:42.9176664Z ./linear-algebra-python/src/lib.py:407:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9176755Z     for i in range(N):
2022-06-16T11:21:42.9176819Z         ^
2022-06-16T11:21:42.9177405Z ./linear-algebra-python/src/lib.py:409:13: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9177615Z         for j in range(N):
2022-06-16T11:21:42.9177690Z             ^
2022-06-16T11:21:42.9178149Z ./linear-algebra-python/src/lib.py:422:9: B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9178246Z     for i in range(H):
2022-06-16T11:21:42.9178321Z         ^
2022-06-16T11:21:42.9178785Z ./linear-algebra-python/src/lib.py:424:13: B007 Loop control variable 'j' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9178874Z         for j in range(W):
2022-06-16T11:21:42.9178950Z             ^
2022-06-16T11:21:42.9179745Z 27    B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.
2022-06-16T11:21:42.9180128Z 3     B006 Do not use mutable data structures for argument defaults.  They are created during function definition time. All calls to the function reuse this one instance of that data structure, persisting changes between them.
2022-06-16T11:21:42.9180513Z 75    B007 Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.
2022-06-16T11:21:42.9180856Z 9     B012 return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.
2022-06-16T11:21:42.9181215Z 1     C400 Unnecessary generator - rewrite as a list comprehension.
2022-06-16T11:21:42.9181462Z 15    C408 Unnecessary list call - rewrite as a literal.
2022-06-16T11:21:42.9181711Z 5     C416 Unnecessary list comprehension - rewrite using list().
2022-06-16T11:21:42.9181975Z 3     C417 Unnecessary use of map - use a generator expression instead.
2022-06-16T11:21:42.9182154Z 36    C901 'scanner' is too complex (135)
2022-06-16T11:21:42.9182298Z 166   E101 indentation contains mixed spaces and tabs
2022-06-16T11:21:42.9182425Z 2     E111 indentation is not a multiple of 4
2022-06-16T11:21:42.9182571Z 1     E117 over-indented
2022-06-16T11:21:42.9182809Z 1     E124 closing bracket does not match visual indentation
2022-06-16T11:21:42.9183058Z 2     E128 continuation line under-indented for visual indent
2022-06-16T11:21:42.9183225Z 29    E203 whitespace before ':'
2022-06-16T11:21:42.9183338Z 1     E222 multiple spaces after operator
2022-06-16T11:21:42.9183469Z 6     E225 missing whitespace around operator
2022-06-16T11:21:42.9183616Z 1     E228 missing whitespace around modulo operator
2022-06-16T11:21:42.9183799Z 35    E231 missing whitespace after ':'
2022-06-16T11:21:42.9184004Z 22    E251 unexpected spaces around keyword / parameter equals
2022-06-16T11:21:42.9184145Z 20    E261 at least two spaces before inline comment
2022-06-16T11:21:42.9184355Z 8     E262 inline comment should start with '# '
2022-06-16T11:21:42.9184558Z 32    E265 block comment should start with '# '
2022-06-16T11:21:42.9184751Z 7     E266 too many leading '#' for block comment
2022-06-16T11:21:42.9184871Z 1     E271 multiple spaces after keyword
2022-06-16T11:21:42.9184995Z 50    E302 expected 2 blank lines, found 1
2022-06-16T11:21:42.9185104Z 8     E303 too many blank lines (2)
2022-06-16T11:21:42.9185285Z 11    E305 expected 2 blank lines after class or function definition, found 1
2022-06-16T11:21:42.9185399Z 3     E401 multiple imports on one line
2022-06-16T11:21:42.9185531Z 23    E402 module level import not at top of file
2022-06-16T11:21:42.9185648Z 359   E501 line too long (125 > 88 characters)
2022-06-16T11:21:42.9186014Z 24    E711 comparison to None should be 'if cond is not None:'
2022-06-16T11:21:42.9186284Z 47    E712 comparison to False should be 'if cond is False:' or 'if not cond:'
2022-06-16T11:21:42.9186485Z 1     E713 test for membership should be 'not in'
2022-06-16T11:21:42.9186647Z 27    E722 do not use bare 'except'
2022-06-16T11:21:42.9186819Z 24    E741 ambiguous variable name 'l'
2022-06-16T11:21:42.9186982Z 47    F401 'os' imported but unused
2022-06-16T11:21:42.9187226Z 62    F403 'from time import *' used; unable to detect undefined names
2022-06-16T11:21:42.9187472Z 793   F405 'sleep' may be undefined, or defined from star imports: time
2022-06-16T11:21:42.9187686Z 4     F811 redefinition of unused 'exit' from line 368
2022-06-16T11:21:42.9187916Z 43    F841 local variable 'call' is assigned to but never used
2022-06-16T11:21:42.9188025Z 51    W191 indentation contains tabs
2022-06-16T11:21:42.9188124Z 111   W291 trailing whitespace
2022-06-16T11:21:42.9188227Z 4     W292 no newline at end of file
2022-06-16T11:21:42.9188343Z 104   W293 blank line contains whitespace
2022-06-16T11:21:42.9188435Z 4     W391 blank line at end of file
2022-06-16T11:21:42.9188610Z 35    W605 invalid escape sequence '\W'
2022-06-16T11:21:42.9188892Z 1     YTT201 `sys.version_info[0] == 3` referenced (python4), use `>=`
2022-06-16T11:21:42.9188957Z 2344
2022-06-16T11:21:42.9211064Z ##[group]Run isort --check-only --profile black . || true
2022-06-16T11:21:42.9211239Z [36;1misort --check-only --profile black . || true[0m
2022-06-16T11:21:42.9269032Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:42.9269098Z env:
2022-06-16T11:21:42.9269255Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:42.9269387Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:42.9269464Z ##[endgroup]
2022-06-16T11:21:43.0675526Z ERROR: /home/runner/work/Python/Python/Chrome Dino Automater.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.0842439Z ERROR: /home/runner/work/Python/Python/password_manager.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.0893722Z ERROR: /home/runner/work/Python/Python/recyclebin.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.0908096Z ERROR: /home/runner/work/Python/Python/Hangman.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.0919065Z ERROR: /home/runner/work/Python/Python/Day_of_week.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1063749Z ERROR: /home/runner/work/Python/Python/Battery_notifier.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1099866Z ERROR: /home/runner/work/Python/Python/snake.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1185267Z ERROR: /home/runner/work/Python/Python/Cricket_score.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1231876Z ERROR: /home/runner/work/Python/Python/RandomDice.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1279249Z ERROR: /home/runner/work/Python/Python/Tweet Pre-Processing.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1385404Z ERROR: /home/runner/work/Python/Python/sendemail.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1397307Z ERROR: /home/runner/work/Python/Python/slack_message.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1411529Z ERROR: /home/runner/work/Python/Python/digital_clock.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1442294Z ERROR: /home/runner/work/Python/Python/calculator-gui.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1484371Z ERROR: /home/runner/work/Python/Python/daily_horoscope.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1521315Z ERROR: /home/runner/work/Python/Python/nmap_scan.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1558511Z ERROR: /home/runner/work/Python/Python/WeatherGUI.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1621193Z ERROR: /home/runner/work/Python/Python/facebook id hack.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1642997Z ERROR: /home/runner/work/Python/Python/mobilePhoneSpecsScrapper.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1684088Z ERROR: /home/runner/work/Python/Python/wiki_random.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1747558Z ERROR: /home/runner/work/Python/Python/calculator.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1758726Z ERROR: /home/runner/work/Python/Python/sensors_information.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1768360Z ERROR: /home/runner/work/Python/Python/num-py.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1823159Z ERROR: /home/runner/work/Python/Python/diction.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1952860Z ERROR: /home/runner/work/Python/Python/personal_translator.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.1996510Z ERROR: /home/runner/work/Python/Python/TTS.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2010279Z ERROR: /home/runner/work/Python/Python/tic_tak_toe.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2032723Z ERROR: /home/runner/work/Python/Python/check_for_sqlite_files.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2043800Z ERROR: /home/runner/work/Python/Python/meme_maker.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2139606Z ERROR: /home/runner/work/Python/Python/memorygame.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2160761Z ERROR: /home/runner/work/Python/Python/blackJackGUI.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2199196Z ERROR: /home/runner/work/Python/Python/twitter_post_scraper.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2373264Z ERROR: /home/runner/work/Python/Python/rock_paper_scissor_game.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2390949Z ERROR: /home/runner/work/Python/Python/whatsapp-monitor.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2439713Z ERROR: /home/runner/work/Python/Python/loader.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2483226Z ERROR: /home/runner/work/Python/Python/Mp3_media_player.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2492209Z ERROR: /home/runner/work/Python/Python/12.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2553631Z ERROR: /home/runner/work/Python/Python/fastapi.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2583390Z ERROR: /home/runner/work/Python/Python/login.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2607466Z ERROR: /home/runner/work/Python/Python/check_file.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2639510Z ERROR: /home/runner/work/Python/Python/googlemaps.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2680796Z ERROR: /home/runner/work/Python/Python/stackF_Harsh2255.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2696766Z ERROR: /home/runner/work/Python/Python/serial_scanner.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2784407Z ERROR: /home/runner/work/Python/Python/invisible_clock.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.2957052Z ERROR: /home/runner/work/Python/Python/WikipediaModule.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3004491Z ERROR: /home/runner/work/Python/Python/polygon.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3020113Z ERROR: /home/runner/work/Python/Python/wikipedia.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3045330Z ERROR: /home/runner/work/Python/Python/PORT SCANNER.PY Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3057087Z ERROR: /home/runner/work/Python/Python/cricket_news.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3068274Z ERROR: /home/runner/work/Python/Python/pyauto.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3090411Z ERROR: /home/runner/work/Python/Python/mapit.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3242441Z ERROR: /home/runner/work/Python/Python/Program to reverse Linked List( Recursive solution).py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3251730Z ERROR: /home/runner/work/Python/Python/Shortest Distance between Two Lines.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3310802Z ERROR: /home/runner/work/Python/Python/random_file_move.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3327075Z ERROR: /home/runner/work/Python/Python/facebook-autologin-bot.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3390728Z ERROR: /home/runner/work/Python/Python/binod.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3436882Z ERROR: /home/runner/work/Python/Python/friday.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3496673Z ERROR: /home/runner/work/Python/Python/news_articles__scraper.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3636031Z ERROR: /home/runner/work/Python/Python/Hotel-Management.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3678386Z ERROR: /home/runner/work/Python/Python/new.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3807328Z ERROR: /home/runner/work/Python/Python/bookstore_manangement_system.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.3888531Z ERROR: /home/runner/work/Python/Python/write_excel_file.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4086716Z ERROR: /home/runner/work/Python/Python/Classification_human_or_horse.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4116811Z ERROR: /home/runner/work/Python/Python/days_from_date.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4191785Z ERROR: /home/runner/work/Python/Python/scrap_file.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4214297Z ERROR: /home/runner/work/Python/Python/quote.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4291854Z ERROR: /home/runner/work/Python/Python/Web_Scraper.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4357278Z ERROR: /home/runner/work/Python/Python/CliYoutubeDownloader.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4398379Z ERROR: /home/runner/work/Python/Python/russian_roulette.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4525167Z ERROR: /home/runner/work/Python/Python/currency converter/main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4576500Z ERROR: /home/runner/work/Python/Python/Password Generator/pass_gen.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4914090Z ERROR: /home/runner/work/Python/Python/CliYoutubeDownloader/CliYoutubeDownloader.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4959526Z ERROR: /home/runner/work/Python/Python/Emoji Dictionary/emoji_dictionary.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4977883Z ERROR: /home/runner/work/Python/Python/other_pepole/get_ip_gui Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.4995797Z ERROR: /home/runner/work/Python/Python/floodfill/floodfill.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5054664Z ERROR: /home/runner/work/Python/Python/Test-Case-Generator/test_case.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5099215Z ERROR: /home/runner/work/Python/Python/primelib/primelib.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5142396Z ERROR: /home/runner/work/Python/Python/PDF/images.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5163279Z ERROR: /home/runner/work/Python/Python/PDF/header_footer.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5199978Z ERROR: /home/runner/work/Python/Python/ImageDownloader/img_downloader.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5274675Z ERROR: /home/runner/work/Python/Python/wiki/wiki.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5290365Z ERROR: /home/runner/work/Python/Python/Hand-Motion-Detection/hand_motion_recognizer.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5305686Z ERROR: /home/runner/work/Python/Python/Translator/translator.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5337151Z ERROR: /home/runner/work/Python/Python/QR_code_generator/qrcode.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5349128Z ERROR: /home/runner/work/Python/Python/image2pdf/image2pdf.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5388946Z ERROR: /home/runner/work/Python/Python/Face_Mask_detection (haarcascade)/mask_detection.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5406641Z ERROR: /home/runner/work/Python/Python/VoiceRepeater/__main__.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5462431Z ERROR: /home/runner/work/Python/Python/Downloaded Files Organizer/obs.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5502542Z ERROR: /home/runner/work/Python/Python/Google_Image_Downloader/create_dir.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5529755Z ERROR: /home/runner/work/Python/Python/Google_Image_Downloader/image_grapper.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5557362Z ERROR: /home/runner/work/Python/Python/ultimate-phone-book/contacts.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5613357Z ERROR: /home/runner/work/Python/Python/JARVIS/JARVIS.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5668745Z ERROR: /home/runner/work/Python/Python/Flappy Bird - created with tkinter/Flappy Bird.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5737406Z ERROR: /home/runner/work/Python/Python/Flappy Bird - created with tkinter/Settings.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5754714Z ERROR: /home/runner/work/Python/Python/Flappy Bird - created with tkinter/Background.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5924885Z ERROR: /home/runner/work/Python/Python/Cat/cat.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5978522Z ERROR: /home/runner/work/Python/Python/Automated Scheduled Call Reminders/caller.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.5997890Z ERROR: /home/runner/work/Python/Python/Automated Scheduled Call Reminders/schedular.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6044988Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/TextTospeech.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6094881Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/VoiceAssistant_main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6117497Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/menu.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6147930Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/speakListen.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6160770Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/dictator.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6177559Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/websiteWork.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6233214Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/textRead.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6242578Z ERROR: /home/runner/work/Python/Python/VoiceAssistant/Project_Basic_struct/speechtotext.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6254997Z ERROR: /home/runner/work/Python/Python/text-to-audio/main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6264836Z ERROR: /home/runner/work/Python/Python/text-to-audio/text-file-to-audio.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6309410Z ERROR: /home/runner/work/Python/Python/Checker_game_by_dz/first.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6326574Z ERROR: /home/runner/work/Python/Python/Checker_game_by_dz/modules/checker.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6337346Z ERROR: /home/runner/work/Python/Python/Checker_game_by_dz/modules/pieces.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6355174Z ERROR: /home/runner/work/Python/Python/Checker_game_by_dz/modules/checker_board.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6378849Z ERROR: /home/runner/work/Python/Python/stone_paper_scissor/main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6435508Z ERROR: /home/runner/work/Python/Python/BoardGame-CLI/uno.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6450500Z ERROR: /home/runner/work/Python/Python/Webbrowser/tk-browser.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6906272Z ERROR: /home/runner/work/Python/Python/BlackJack_game/blackjack.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.6994107Z ERROR: /home/runner/work/Python/Python/Colors/pixel_sort.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7068810Z ERROR: /home/runner/work/Python/Python/Recursion Visulaizer/recursionVisualizer.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7142719Z ERROR: /home/runner/work/Python/Python/Youtube Downloader With GUI/main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7180916Z ERROR: /home/runner/work/Python/Python/thired-party-haarcascade-mustache-on-face/mustache-add-on-face.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7198932Z ERROR: /home/runner/work/Python/Python/nasa_apod_with_requests/run.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7236875Z ERROR: /home/runner/work/Python/Python/Extract-Table-from-pdf-txt-docx/main.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7426730Z ERROR: /home/runner/work/Python/Python/PongPong_Game/pong/paddle.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7435922Z ERROR: /home/runner/work/Python/Python/PongPong_Game/pong/ball.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7447887Z ERROR: /home/runner/work/Python/Python/PongPong_Game/pong/load.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7491237Z ERROR: /home/runner/work/Python/Python/game_of_life/game_o_life.py Imports are incorrectly sorted and/or formatted.
2022-06-16T11:21:43.7585594Z Skipped 1 files
2022-06-16T11:21:43.7723825Z ##[group]Run pip install -r requirements.txt || pip install --editable . || true
2022-06-16T11:21:43.7724310Z [36;1mpip install -r requirements.txt || pip install --editable . || true[0m
2022-06-16T11:21:43.7786073Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:43.7786312Z env:
2022-06-16T11:21:43.7786608Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:43.7786959Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:43.7787249Z ##[endgroup]
2022-06-16T11:21:44.4233416Z ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'
2022-06-16T11:21:45.2015290Z Obtaining file:///home/runner/work/Python/Python
2022-06-16T11:21:45.2027067Z ERROR: file:///home/runner/work/Python/Python does not appear to be a Python project: neither 'setup.py' nor 'pyproject.toml' found.
2022-06-16T11:21:45.3708710Z ##[group]Run mkdir --parents --verbose .mypy_cache
2022-06-16T11:21:45.3709044Z [36;1mmkdir --parents --verbose .mypy_cache[0m
2022-06-16T11:21:45.3772450Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:45.3772671Z env:
2022-06-16T11:21:45.3773069Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:45.3773403Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:45.3773679Z ##[endgroup]
2022-06-16T11:21:45.3871389Z mkdir: created directory '.mypy_cache'
2022-06-16T11:21:45.3896422Z ##[group]Run mypy --ignore-missing-imports --install-types --non-interactive . || true
2022-06-16T11:21:45.3896943Z [36;1mmypy --ignore-missing-imports --install-types --non-interactive . || true[0m
2022-06-16T11:21:45.3954409Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:45.3954659Z env:
2022-06-16T11:21:45.3954961Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:45.3955315Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:45.3955604Z ##[endgroup]
2022-06-16T11:21:45.7693849Z Snake_water_gun/main.py: error: Duplicate module named "main" (also at "./Extract-Table-from-pdf-txt-docx/main.py")
2022-06-16T11:21:45.7695928Z Snake_water_gun/main.py: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#mapping-file-paths-to-modules for more info
2022-06-16T11:21:45.7696489Z Found 1 error in 1 file (errors prevented further checking)
2022-06-16T11:21:45.7697822Z Snake_water_gun/main.py: note: Common resolutions include: a) using `--exclude` to avoid checking one of them, b) adding `__init__.py` somewhere, c) using `--explicit-package-bases` or adjusting MYPYPATH
2022-06-16T11:21:45.7753500Z ##[group]Run pytest . || pytest --doctest-modules .
2022-06-16T11:21:45.7753861Z [36;1mpytest . || pytest --doctest-modules .[0m
2022-06-16T11:21:45.7819597Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:45.7819830Z env:
2022-06-16T11:21:45.7820090Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:45.7820550Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:45.7820830Z ##[endgroup]
2022-06-16T11:21:46.6214251Z ============================= test session starts ==============================
2022-06-16T11:21:46.6215659Z platform linux -- Python 3.10.5, pytest-7.1.2, pluggy-1.0.0
2022-06-16T11:21:46.6216302Z rootdir: /home/runner/work/Python/Python
2022-06-16T11:21:46.6216907Z collected 7 items
2022-06-16T11:21:46.6217064Z 
2022-06-16T11:21:46.6448384Z XORcipher/test_XOR_cipher.py .......                                     [100%]
2022-06-16T11:21:46.6448614Z 
2022-06-16T11:21:46.6448818Z ============================== 7 passed in 0.61s ===============================
2022-06-16T11:21:46.6924882Z ##[group]Run shopt -s globstar && pyupgrade --py36-plus **/*.py || true
2022-06-16T11:21:46.6925273Z [36;1mshopt -s globstar && pyupgrade --py36-plus **/*.py || true[0m
2022-06-16T11:21:46.6982473Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:46.6982827Z env:
2022-06-16T11:21:46.6983116Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:46.6983643Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:46.6983922Z ##[endgroup]
2022-06-16T11:21:46.8051857Z Rewriting 1 File handle/File handle text/special symbol after word.py
2022-06-16T11:21:46.8994195Z Rewriting Assembler/assembler.py
2022-06-16T11:21:46.9042003Z Rewriting Automated Scheduled Call Reminders/caller.py
2022-06-16T11:21:46.9122594Z Rewriting Binary_search.py
2022-06-16T11:21:47.0175737Z Rewriting BlackJack_game/blackjack_simulate.py
2022-06-16T11:21:47.0336093Z Rewriting BoardGame-CLI/snakeLadder.py
2022-06-16T11:21:47.0527845Z Rewriting BoardGame-CLI/uno.py
2022-06-16T11:21:47.1145109Z Rewriting CliYoutubeDownloader.py
2022-06-16T11:21:47.1246259Z Rewriting CliYoutubeDownloader/CliYoutubeDownloader.py
2022-06-16T11:21:47.1567136Z Rewriting Compression_Analysis/PSNR.py
2022-06-16T11:21:47.1677696Z Rewriting CountMillionCharacter.py
2022-06-16T11:21:47.1704171Z Rewriting CountMillionCharacters-2.0.py
2022-06-16T11:21:47.1818076Z Rewriting Credit_Card_Validator.py
2022-06-16T11:21:47.2712643Z Rewriting EncryptionTool.py
2022-06-16T11:21:47.2773451Z Rewriting Exception_Handling_in_Python.py
2022-06-16T11:21:47.2903100Z Rewriting Face and eye Recognition/face_recofnation_first.py
2022-06-16T11:21:47.2923582Z Rewriting Face and eye Recognition/gesture_control.py
2022-06-16T11:21:47.3632070Z Rewriting Flappy Bird - created with tkinter/Flappy Bird.py
2022-06-16T11:21:47.3717282Z Rewriting Flappy Bird - created with tkinter/Settings.py
2022-06-16T11:21:47.4007523Z Rewriting Google_Image_Downloader/image_grapper.py
2022-06-16T11:21:47.4096889Z Rewriting GroupSms_Way2.py
2022-06-16T11:21:47.4674530Z Rewriting Hotel-Management.py
2022-06-16T11:21:47.4695534Z Rewriting ImageDownloader/img_downloader.py
2022-06-16T11:21:47.5052841Z Rewriting JARVIS/JARVIS.py
2022-06-16T11:21:47.5503436Z Rewriting JustDialScrapperGUI/Justdial Scrapper GUI.py
2022-06-16T11:21:47.5958167Z Rewriting Organise.py
2022-06-16T11:21:47.6032023Z Rewriting PDF/header_footer.py
2022-06-16T11:21:47.6254196Z Rewriting Password Generator/pass_gen.py
2022-06-16T11:21:47.6277683Z Rewriting PongPong_Game/pong/__init__.py
2022-06-16T11:21:47.6377011Z Rewriting PongPong_Game/pong/ball.py
2022-06-16T11:21:47.6487252Z Rewriting PongPong_Game/pong/paddle.py
2022-06-16T11:21:47.6506453Z Rewriting PongPong_Game/pong/rectangle.py
2022-06-16T11:21:47.6604608Z Rewriting PongPong_Game/pongpong.py
2022-06-16T11:21:47.6932493Z Rewriting ReadFromCSV.py
2022-06-16T11:21:47.7128078Z Rewriting SOUNDEX.py
2022-06-16T11:21:47.7264077Z Rewriting Shivaansh.py
2022-06-16T11:21:47.9798561Z Rewriting Test-Case-Generator/test_case.py
2022-06-16T11:21:47.9974767Z Rewriting TicTacToe.py
2022-06-16T11:21:48.0307316Z Rewriting Tweet Pre-Processing.py
2022-06-16T11:21:48.1141210Z Rewriting Webbrowser/tk-browser.py
2022-06-16T11:21:48.1164604Z Rewriting WikipediaModule.py
2022-06-16T11:21:48.1317380Z Rewriting Windows_Wallpaper_Script/wallpaper_extract.py
2022-06-16T11:21:48.1406184Z Rewriting Wordle/wordle.py
2022-06-16T11:21:48.1527362Z Rewriting XORcipher/XOR_cipher.py
2022-06-16T11:21:48.1788120Z Rewriting alexa_news_headlines.py
2022-06-16T11:21:48.1911993Z Rewriting async_downloader/async_downloader.py
2022-06-16T11:21:48.2273062Z Rewriting bank_managment_system/backend.py
2022-06-16T11:21:48.3948489Z Rewriting bank_managment_system/frontend.py
2022-06-16T11:21:48.4283021Z Rewriting binod.py
2022-06-16T11:21:48.4427464Z Rewriting blackJackGUI.py
2022-06-16T11:21:48.5480017Z Rewriting brickout-game/brickout-game.py
2022-06-16T11:21:48.5938263Z Rewriting chaos.py
2022-06-16T11:21:48.5989811Z Rewriting check_file.py
2022-06-16T11:21:48.6019957Z Rewriting check_for_sqlite_files.py
2022-06-16T11:21:48.6210290Z Rewriting classicIndianCardMatch.py
2022-06-16T11:21:48.6274005Z Rewriting communication/file.py
2022-06-16T11:21:48.6309505Z Rewriting communication/pipe.py
2022-06-16T11:21:48.6342336Z Rewriting communication/socket_conn.py
2022-06-16T11:21:48.6373925Z Rewriting convert_time.py
2022-06-16T11:21:48.6542195Z Rewriting currency converter/main.py
2022-06-16T11:21:48.6580229Z Rewriting daily_checks.py
2022-06-16T11:21:48.6794543Z Rewriting dice.py
2022-06-16T11:21:48.6990587Z Rewriting dir_test.py
2022-06-16T11:21:48.7293317Z Rewriting encryptsys.py
2022-06-16T11:21:48.7321712Z Rewriting env_check.py
2022-06-16T11:21:48.7359395Z Rewriting even.py
2022-06-16T11:21:48.7451587Z Rewriting facebook id hack.py
2022-06-16T11:21:48.7576745Z Rewriting factorial_perm_comp.py
2022-06-16T11:21:48.7756430Z Rewriting fileinfo.py
2022-06-16T11:21:48.8111391Z Rewriting flappyBird_pygame/flappy_bird.py
2022-06-16T11:21:48.8460005Z Rewriting gcd.py
2022-06-16T11:21:48.8522855Z Rewriting get_crypto_price.py
2022-06-16T11:21:48.8574407Z Rewriting get_likes_on_FB.py
2022-06-16T11:21:48.8919930Z Rewriting image2pdf/image2pdf.py
2022-06-16T11:21:48.9216212Z Rewriting insta_monitering/insta_api.py
2022-06-16T11:21:48.9836387Z Rewriting insta_monitering/insta_datafetcher.py
2022-06-16T11:21:48.9874956Z Rewriting internet_connection_py3.py
2022-06-16T11:21:49.0508993Z Rewriting linear-algebra-python/src/lib.py
2022-06-16T11:21:49.0689918Z Rewriting linear-algebra-python/src/tests.py
2022-06-16T11:21:49.0835950Z Rewriting local_weighted_learning/local_weighted_learning.py
2022-06-16T11:21:49.0883957Z Rewriting logs.py
2022-06-16T11:21:49.1114005Z Rewriting merge.py
2022-06-16T11:21:49.1269508Z Rewriting mobilePhoneSpecsScrapper.py
2022-06-16T11:21:49.1554021Z Rewriting new_script.py
2022-06-16T11:21:49.1678781Z Rewriting news_articles__scraper.py
2022-06-16T11:21:49.1737683Z Rewriting nmap_scan.py
2022-06-16T11:21:49.2045615Z Rewriting nslookup_check.py
2022-06-16T11:21:49.2086082Z Rewriting oneeven.py
2022-06-16T11:21:49.2480382Z Rewriting password_cracker.py
2022-06-16T11:21:49.2639507Z Rewriting password_manager.py
2022-06-16T11:21:49.2683497Z Rewriting personal_translator.py
2022-06-16T11:21:49.2759931Z Rewriting ping_servers.py
2022-06-16T11:21:49.2798848Z Rewriting ping_subnet.py
2022-06-16T11:21:49.2872654Z Rewriting portscanner.py
2022-06-16T11:21:49.2956008Z Rewriting powerdown_startup.py
2022-06-16T11:21:49.3104710Z Rewriting powerup_checks.py
2022-06-16T11:21:49.3367425Z Rewriting primelib/primelib.py
2022-06-16T11:21:49.3458749Z Rewriting psunotify.py
2022-06-16T11:21:49.3475874Z Rewriting puttylogs.py
2022-06-16T11:21:49.3632960Z Rewriting python_sms.py
2022-06-16T11:21:49.3709478Z Rewriting random-sentences.py
2022-06-16T11:21:49.3775988Z Rewriting random_file_move.py
2022-06-16T11:21:49.3990115Z Rewriting rearrange-files/rearrange-files.py
2022-06-16T11:21:49.4058218Z Rewriting recyclebin.py
2022-06-16T11:21:49.4068386Z Rewriting replacetext.py
2022-06-16T11:21:49.4099012Z Rewriting rock_paper_scissor_game.py
2022-06-16T11:21:49.4426844Z Rewriting script_count.py
2022-06-16T11:21:49.4556552Z Rewriting sendemail.py
2022-06-16T11:21:49.4609944Z Rewriting sensors_information.py
2022-06-16T11:21:49.4807724Z Rewriting slack_message.py
2022-06-16T11:21:49.4961892Z Rewriting snake.py
2022-06-16T11:21:49.5016352Z Rewriting socket-programming/server.py
2022-06-16T11:21:49.5177349Z Rewriting sqlite_check.py
2022-06-16T11:21:49.5228573Z Rewriting sqlite_table_check.py
2022-06-16T11:21:49.5410281Z Rewriting swap.py
2022-06-16T11:21:49.5445709Z Rewriting text-to-audio/text-file-to-audio.py
2022-06-16T11:21:49.5488556Z Rewriting text_file_replace.py
2022-06-16T11:21:49.5625927Z Rewriting tf_idf_generator.py
2022-06-16T11:21:49.5755051Z Rewriting thired-party-haarcascade-mustache-on-face/utils.py
2022-06-16T11:21:49.5780876Z Rewriting thread_signal.py
2022-06-16T11:21:49.6068103Z Rewriting translation_of_sizes_of_underwear_RU.py
2022-06-16T11:21:49.6134279Z Rewriting tweeter.py
2022-06-16T11:21:49.6170895Z Rewriting twitter_post_scraper.py
2022-06-16T11:21:49.6407470Z Rewriting whatsapp-monitor.py
2022-06-16T11:21:49.6516802Z Rewriting work_connect.py
2022-06-16T11:21:49.6658135Z ##[group]Run safety check
2022-06-16T11:21:49.6658369Z [36;1msafety check[0m
2022-06-16T11:21:49.6726590Z shell: /usr/bin/bash -e {0}
2022-06-16T11:21:49.6726806Z env:
2022-06-16T11:21:49.6727086Z   pythonLocation: /opt/hostedtoolcache/Python/3.10.5/x64
2022-06-16T11:21:49.6727430Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.5/x64/lib
2022-06-16T11:21:49.6727714Z ##[endgroup]
2022-06-16T11:21:50.0181986Z +==============================================================================+
2022-06-16T11:21:50.0182720Z |                                                                              |
2022-06-16T11:21:50.0183220Z |                               /$$$$$$            /$$                         |
2022-06-16T11:21:50.0183661Z |                              /$$__  $$          | $$                         |
2022-06-16T11:21:50.0184021Z |           /$$$$$$$  /$$$$$$ | $$  \__//$$$$$$  /$$$$$$   /$$   /$$           |
2022-06-16T11:21:50.0184454Z |          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           |
2022-06-16T11:21:50.0184803Z |         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           |
2022-06-16T11:21:50.0185146Z |          \____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           |
2022-06-16T11:21:50.0185497Z |          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           |
2022-06-16T11:21:50.0185979Z |         |_______/  \_______/|__/     \_______/   \___/   \____  $$           |
2022-06-16T11:21:50.0186476Z |                                                          /$$  | $$           |
2022-06-16T11:21:50.0186837Z |                                                         |  $$$$$$/           |
2022-06-16T11:21:50.0187225Z |  by pyup.io                                              \______/            |
2022-06-16T11:21:50.0187596Z |                                                                              |
2022-06-16T11:21:50.0187961Z +==============================================================================+
2022-06-16T11:21:50.0188339Z | REPORT                                                                       |
2022-06-16T11:21:50.0188767Z | checked 44 packages, using free DB (updated once a month)                    |
2022-06-16T11:21:50.0189162Z +==============================================================================+
2022-06-16T11:21:50.0189680Z | No known security vulnerabilities found.                                     |
2022-06-16T11:21:50.0190031Z +==============================================================================+
2022-06-16T11:21:50.0567995Z Post job cleanup.
2022-06-16T11:21:50.2178017Z Post job cleanup.
2022-06-16T11:21:50.3593559Z [command]/usr/bin/git version
2022-06-16T11:21:50.3647355Z git version 2.36.1
2022-06-16T11:21:50.3700391Z Temporarily overriding HOME='/home/runner/work/_temp/016d2bc5-945b-4455-970e-bdc0b875aebf' before making global git config changes
2022-06-16T11:21:50.3701769Z Adding repository directory to the temporary git global config as a safe directory
2022-06-16T11:21:50.3707050Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/Python/Python
2022-06-16T11:21:50.3752478Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2022-06-16T11:21:50.3790030Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :
2022-06-16T11:21:50.4060696Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2022-06-16T11:21:50.4129029Z http.https://github.com/.extraheader
2022-06-16T11:21:50.4158334Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2022-06-16T11:21:50.4246260Z [command]/usr/bin/git submodule foreach --recursive git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :
2022-06-16T11:21:50.4776766Z Cleaning up orphan processes